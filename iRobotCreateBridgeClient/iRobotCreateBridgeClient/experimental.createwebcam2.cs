//This file is automatically generated. DO NOT EDIT!
using System;
using RobotRaconteurWeb;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;

#pragma warning disable 0108

namespace experimental.createwebcam2
{
[RobotRaconteurServiceStruct("experimental.createwebcam2.WebcamImage")]
public class WebcamImage
{
    public int width;
    public int height;
    public int step;
    public byte[] data;
}

[RobotRaconteurServiceStruct("experimental.createwebcam2.WebcamImage_size")]
public class WebcamImage_size
{
    public int width;
    public int height;
    public int step;
}

[RobotRaconteurServiceObjectInterface("experimental.createwebcam2.Webcam")]
public interface Webcam
{
    Task<string> get_Name(CancellationToken cancel=default(CancellationToken));
    Task set_Name(string value, CancellationToken cancel=default(CancellationToken));
    Task<WebcamImage> CaptureFrame(CancellationToken rr_cancel=default(CancellationToken));
    Task StartStreaming(CancellationToken rr_cancel=default(CancellationToken));
    Task StopStreaming(CancellationToken rr_cancel=default(CancellationToken));
    Task<WebcamImage_size> CaptureFrameToBuffer(CancellationToken rr_cancel=default(CancellationToken));
    Pipe<WebcamImage> FrameStream{ get; set; }
    ArrayMemory<byte> buffer { get; }
    MultiDimArrayMemory<byte> multidimbuffer { get; }
}

[RobotRaconteurServiceObjectInterface("experimental.createwebcam2.WebcamHost")]
public interface WebcamHost
{
    Task<Dictionary<int,string>> get_WebcamNames(CancellationToken cancel=default(CancellationToken));
    Task set_WebcamNames(Dictionary<int,string> value, CancellationToken cancel=default(CancellationToken));
    Task<Webcam> get_Webcams(int ind, CancellationToken rr_cancel=default(CancellationToken));
}

}
