/**
 * @version 1.0.0.0
 * @copyright Copyright Â©  2019
 * @compiler Bridge.NET 17.9.0
 */
Bridge.assembly("RobotRaconteurBridge", function ($asm, globals) {
    "use strict";

    Bridge.define("RobotRaconteurServiceIndex.NodeInfo", {
        fields: {
            NodeName: null,
            NodeID: null,
            ServiceIndexConnectionURL: null
        }
    });

    Bridge.define("RobotRaconteurWeb.IStructureStub", {
        $kind: "interface"
    });

    Bridge.define("RobotRaconteurWeb.ServiceFactory", {
        fields: {
            sdef: null,
            node: null,
            context: null
        },
        ctors: {
            ctor: function (node, context) {
                if (node === void 0) { node = null; }
                if (context === void 0) { context = null; }

                this.$initialize();
                if (node != null) {
                    this.node = node;
                } else {
                    this.node = RobotRaconteurWeb.RobotRaconteurNode.s;
                }

                this.context = context;
            }
        },
        methods: {
            ServiceDef: function () {
                if (this.sdef == null) {
                    this.sdef = new RobotRaconteurWeb.ServiceDefinition();
                    this.sdef.FromString(this.DefString());
                }
                return this.sdef;
            },
            RemovePath: function (path) {
                return RobotRaconteurWeb.ServiceDefinitionUtil.SplitQualifiedName(path).Item2;
            },
            CompareNamespace: function (qualified_typename, typename) {
                var s = RobotRaconteurWeb.ServiceDefinitionUtil.SplitQualifiedName(qualified_typename);
                typename.v = s.Item2;
                return Bridge.referenceEquals(s.Item1, this.GetServiceName());
            },
            PackStructure: function (s) {
                var typename = { };
                if (this.CompareNamespace(RobotRaconteurWeb.ServiceDefinitionUtil.FindStructRRType(Bridge.getType(s)), typename)) {
                    return this.FindStructureStub(typename.v).RobotRaconteurWeb$IStructureStub$PackStructure(s);
                } else {
                    return this.node.PackStructure(s, this.context);
                }
            },
            UnpackStructure: function (T, l) {
                var typename = { };
                if (this.CompareNamespace(l.Type, typename)) {
                    return this.FindStructureStub(typename.v).RobotRaconteurWeb$IStructureStub$UnpackStructure(T, l);
                } else {
                    return this.node.UnpackStructure(T, l, this.context);
                }
            },
            CreateStub: function (objecttype, path, context) {
                var extdef = RobotRaconteurWeb.ServiceDefinitionUtil.SplitQualifiedName(objecttype).Item1;
                if (Bridge.referenceEquals(extdef, this.GetServiceName())) {
                    throw new System.InvalidOperationException.$ctor1("Invalid service factory request");
                }
                if (this.context == null) {
                    return this.node.GetServiceType(extdef).CreateStub(objecttype, path, context);
                } else {
                    return this.context.GetPulledServiceType(extdef).CreateStub(objecttype, path, context);
                }
            },
            PackPodToArray: function (T, s) {
                var typename = { };
                if (this.CompareNamespace(RobotRaconteurWeb.ServiceDefinitionUtil.FindStructRRType(Bridge.getType(s.v, T)), typename)) {
                    return Bridge.cast(this.FindPodStub(typename.v), RobotRaconteurWeb.PodStub$1(T)).PackPodToArray(s);
                } else {
                    return this.node.PackPodToArray(T, s, this.context);
                }
            },
            UnpackPodFromArray: function (T, l) {
                var typename = { };
                if (this.CompareNamespace(l.Type, typename)) {
                    return Bridge.cast(this.FindPodStub(typename.v), RobotRaconteurWeb.PodStub$1(T)).UnpackPodFromArray(l);
                } else {
                    return this.node.UnpackPodFromArray(T, l, this.context);
                }
            },
            PackPodArray: function (T, s) {
                var typename = { };
                if (this.CompareNamespace(RobotRaconteurWeb.ServiceDefinitionUtil.FindStructRRType((Bridge.getType(s).$elementType || null)), typename)) {
                    return Bridge.cast(this.FindPodStub(typename.v), RobotRaconteurWeb.PodStub$1(T)).PackPodArray(s);
                } else {
                    return this.node.PackPodArray(T, s, this.context);
                }
            },
            UnpackPodArray: function (T, l) {
                var typename = { };
                if (this.CompareNamespace(l.Type, typename)) {
                    return Bridge.cast(this.FindPodStub(typename.v), RobotRaconteurWeb.PodStub$1(T)).UnpackPodArray(l);
                } else {
                    return this.node.UnpackPodArray(T, l, this.context);
                }
            },
            PackPodMultiDimArray: function (T, s) {
                var typename = { };
                if (this.CompareNamespace(RobotRaconteurWeb.ServiceDefinitionUtil.FindStructRRType((Bridge.getType(s.pod_array).$elementType || null)), typename)) {
                    return Bridge.cast(this.FindPodStub(typename.v), RobotRaconteurWeb.PodStub$1(T)).PackPodMultiDimArray(s);
                } else {
                    return this.node.PackPodMultiDimArray(T, s, this.context);
                }
            },
            UnpackPodMultiDimArray: function (T, l) {
                var typename = { };
                if (this.CompareNamespace(l.Type, typename)) {
                    return Bridge.cast(this.FindPodStub(typename.v), RobotRaconteurWeb.PodStub$1(T)).UnpackPodMultiDimArray(l);
                } else {
                    return this.node.UnpackPodMultiDimArray(T, l, this.context);
                }
            },
            PackPod: function (s) {
                var t;

                var s1 = Bridge.as(s, RobotRaconteurWeb.PodMultiDimArray);
                if (s1 != null) {
                    t = (Bridge.getType(s1.pod_array).$elementType || null);
                } else {
                    var s2 = Bridge.as(s, Array);
                    if (s2 != null) {
                        t = (Bridge.getType(s2).$elementType || null);
                    } else {
                        t = Bridge.getType(s);
                    }
                }


                var typename = { };
                if (this.CompareNamespace(RobotRaconteurWeb.ServiceDefinitionUtil.FindStructRRType(t), typename)) {
                    return this.FindPodStub(typename.v).RobotRaconteurWeb$IPodStub$PackPod(s);
                } else {
                    return this.node.PackPod(s, this.context);
                }
            },
            UnpackPod: function (m) {
                var typename = { };
                if (this.CompareNamespace(RobotRaconteurWeb.MessageElementUtil.GetMessageElementDataTypeString(m), typename)) {
                    return this.FindPodStub(typename.v).RobotRaconteurWeb$IPodStub$UnpackPod(m);
                } else {
                    return this.node.UnpackPod(m, this.context);
                }
            },
            PackNamedArrayToArray: function (T, s) {
                var typename = { };
                if (this.CompareNamespace(RobotRaconteurWeb.ServiceDefinitionUtil.FindStructRRType(Bridge.getType(s.v, T)), typename)) {
                    return Bridge.cast(this.FindNamedArrayStub(typename.v), RobotRaconteurWeb.INamedArrayStub$1(T))["RobotRaconteurWeb$INamedArrayStub$1$" + Bridge.getTypeAlias(T) + "$PackNamedArrayStructToArray"](s);
                } else {
                    return this.node.PackNamedArrayToArray(T, s, this.context);
                }
            },
            UnpackNamedArrayFromArray: function (T, l) {
                var typename = { };
                if (this.CompareNamespace(l.Type, typename)) {
                    return Bridge.cast(this.FindNamedArrayStub(typename.v), RobotRaconteurWeb.INamedArrayStub$1(T))["RobotRaconteurWeb$INamedArrayStub$1$" + Bridge.getTypeAlias(T) + "$UnpackNamedArrayStructFromArray"](l);
                } else {
                    return this.node.UnpackNamedArrayFromArray(T, l, this.context);
                }
            },
            PackNamedArray: function (T, s) {
                var typename = { };
                if (this.CompareNamespace(RobotRaconteurWeb.ServiceDefinitionUtil.FindStructRRType((Bridge.getType(s).$elementType || null)), typename)) {
                    return Bridge.cast(this.FindNamedArrayStub(typename.v), RobotRaconteurWeb.INamedArrayStub$1(T))["RobotRaconteurWeb$INamedArrayStub$1$" + Bridge.getTypeAlias(T) + "$PackNamedArray$1"](s);
                } else {
                    return this.node.PackNamedArray(T, s, this.context);
                }
            },
            PackNamedArray$1: function (s) {
                var t;

                var s1 = Bridge.as(s, RobotRaconteurWeb.NamedMultiDimArray);
                if (s1 != null) {
                    t = (Bridge.getType(s1.namedarray_array).$elementType || null);
                } else {
                    var s2 = Bridge.as(s, Array);
                    if (s2 != null) {
                        t = (Bridge.getType(s2).$elementType || null);
                    } else {
                        t = Bridge.getType(s);
                    }
                }


                var typename = { };
                if (this.CompareNamespace(RobotRaconteurWeb.ServiceDefinitionUtil.FindStructRRType(t), typename)) {
                    return this.FindNamedArrayStub(typename.v).RobotRaconteurWeb$INamedArrayStub$PackNamedArray(s);
                } else {
                    return this.node.PackNamedArray$1(s, this.context);
                }
            },
            UnpackNamedArray: function (T, l) {
                var typename = { };
                if (this.CompareNamespace(l.Type, typename)) {
                    return Bridge.cast(this.FindNamedArrayStub(typename.v), RobotRaconteurWeb.INamedArrayStub$1(T))["RobotRaconteurWeb$INamedArrayStub$1$" + Bridge.getTypeAlias(T) + "$UnpackNamedArray$1"](l);
                } else {
                    return this.node.UnpackNamedArray(T, l, this.context);
                }
            },
            UnpackNamedArray$1: function (m) {
                var typename = { };
                if (this.CompareNamespace(RobotRaconteurWeb.MessageElementUtil.GetMessageElementDataTypeString(m), typename)) {
                    return this.FindNamedArrayStub(typename.v).RobotRaconteurWeb$INamedArrayStub$UnpackNamedArray(m);
                } else {
                    return this.node.UnpackNamedArray$1(m, this.context);
                }
            },
            PackNamedMultiDimArray: function (T, s) {
                var typename = { };
                if (this.CompareNamespace(RobotRaconteurWeb.ServiceDefinitionUtil.FindStructRRType((Bridge.getType(s.namedarray_array).$elementType || null)), typename)) {
                    return Bridge.cast(this.FindNamedArrayStub(typename.v), RobotRaconteurWeb.INamedArrayStub$1(T))["RobotRaconteurWeb$INamedArrayStub$1$" + Bridge.getTypeAlias(T) + "$PackNamedMultiDimArray"](s);
                } else {
                    return this.node.PackNamedMultiDimArray(T, s, this.context);
                }
            },
            UnpackNamedMultiDimArray: function (T, l) {
                var typename = { };
                if (this.CompareNamespace(l.Type, typename)) {
                    return Bridge.cast(this.FindNamedArrayStub(typename.v), RobotRaconteurWeb.INamedArrayStub$1(T))["RobotRaconteurWeb$INamedArrayStub$1$" + Bridge.getTypeAlias(T) + "$UnpackNamedMultiDimArray"](l);
                } else {
                    return this.node.UnpackNamedMultiDimArray(T, l, this.context);
                }
            },
            CreateSkel: function (path, obj, context) {
                var objecttype = RobotRaconteurWeb.ServiceDefinitionUtil.FindObjectRRType(obj);
                var extdef = RobotRaconteurWeb.ServiceDefinitionUtil.SplitQualifiedName(objecttype).Item1;
                if (Bridge.referenceEquals(extdef, this.GetServiceName())) {
                    throw new System.InvalidOperationException.$ctor1("Invalid service factory request");
                }

                return this.node.GetServiceType(extdef).CreateSkel(path, obj, context);

            },
            DownCastException: function (exp) {
                try {
                    if (!System.String.contains(exp.error,".")) {
                        return exp;
                    }

                    var f = { v : null };

                    var s = RobotRaconteurWeb.ServiceDefinitionUtil.SplitQualifiedName(exp.error);

                    if (this.context != null) {
                        if (!this.context.TryGetPulledServiceType(s.Item1, f)) {
                            f.v = null;
                        }
                    }
                    if (f.v == null) {
                        if (!this.node.TryGetServiceType(s.Item1, f)) {
                            f.v = null;
                        }
                    }

                    if (f.v == null) {
                        return exp;
                    }

                    return f.v.DownCastException(exp);
                } catch ($e1) {
                    $e1 = System.Exception.create($e1);
                    return null;
                }
            },
            PackMapType: function (K, T, o) {
                return this.node.PackMapType(K, T, o, this.context);
            },
            PackListType: function (T, o) {
                return this.node.PackListType(T, o, this.context);
            },
            PackMultiDimArray: function (multiDimArray) {
                return this.node.PackMultiDimArray(multiDimArray);
            },
            PackVarType: function (p) {
                return this.node.PackVarType(p, this.context);
            },
            UnpackMapType: function (K, T, o) {
                return this.node.UnpackMapType(K, T, o, this.context);
            },
            UnpackListType: function (T, o) {
                return this.node.UnpackListType(T, o, this.context);
            },
            UnpackMultiDimArray: function (o) {
                return this.node.UnpackMultiDimArray(o);
            },
            UnpackVarType: function (o) {
                return this.node.UnpackVarType(o, this.context);
            }
        }
    });

    Bridge.define("RobotRaconteurServiceIndex.ServiceIndex", {
        $kind: "interface"
    });

    Bridge.define("RobotRaconteurWeb.ServiceSkel", {
        fields: {
            rr_node: null,
            rr_context: null,
            m_ServicePath: null,
            m_context: null,
            uncastobj: null,
            objectlock: null,
            monitorlock: null,
            monitorlocks: null,
            generators: null
        },
        props: {
            ServicePath: {
                get: function () {
                    return this.m_ServicePath;
                }
            },
            RRContext: {
                get: function () {
                    return this.m_context;
                }
            },
            UncastObject: {
                get: function () {
                    return this.uncastobj;
                }
            },
            IsLocked: {
                get: function () {
                    if (this.objectlock == null) {
                        return false;
                    }
                    return this.objectlock.IsLocked;
                }
            },
            IsMonitorLocked: {
                get: function () {
                    if (this.monitorlock == null) {
                        return false;
                    }
                    return this.monitorlock.IsLocked;
                }
            }
        },
        ctors: {
            init: function () {
                this.monitorlocks = new (System.Collections.Generic.Dictionary$2(System.UInt32,RobotRaconteurWeb.ServerContext.MonitorObjectSkel)).ctor();
                this.generators = new (System.Collections.Generic.Dictionary$2(System.Int32,RobotRaconteurWeb.GeneratorServerBase)).ctor();
            },
            ctor: function (s, o, c) {
                this.$initialize();
                this.m_ServicePath = s;
                this.m_context = c;
                this.uncastobj = o;
                if (o == null) {
                    throw new System.NullReferenceException.ctor();
                }

                this.rr_node = c.node;

                this.RegisterEvents(o);
                this.InitPipeServers(o);
                this.InitCallbackServers(o);
            }
        },
        methods: {
            InitCallbackServers: function (o) { },
            GetSubObj: function (name) {
                var s1 = System.String.split(name, System.Array.init([91], System.Char).map(function (i) {{ return String.fromCharCode(i); }}));
                if (s1.length === 1) {
                    return this.GetSubObj$1(name, "");
                } else {
                    var ind = RobotRaconteurWeb.Extensions.RRUriExtensions.UnescapeDataString(System.String.replaceAll(s1[System.Array.index(1, s1)], "]", ""));
                    return this.GetSubObj$1(s1[System.Array.index(0, s1)], ind);
                }
            },
            RegisterEvents: function (obj1) {

                if (Bridge.is(obj1, RobotRaconteurWeb.IRobotRaconteurServiceObject)) {
                    var obj2 = Bridge.cast(obj1, RobotRaconteurWeb.IRobotRaconteurServiceObject);
                    obj2.RobotRaconteurWeb$IRobotRaconteurServiceObject$addRobotRaconteurObjRefChanged(Bridge.fn.cacheBind(this, this.ObjRefChanged));
                }

            },
            UnregisterEvents: function (obj1) {
                if (Bridge.is(obj1, RobotRaconteurWeb.IRobotRaconteurServiceObject)) {
                    var obj2 = Bridge.cast(obj1, RobotRaconteurWeb.IRobotRaconteurServiceObject);
                    obj2.RobotRaconteurWeb$IRobotRaconteurServiceObject$removeRobotRaconteurObjRefChanged(Bridge.fn.cacheBind(this, this.ObjRefChanged));
                }
            },
            InitPipeServers: function (obj1) { },
            ObjRefChanged: function (name) {
                var path = (this.ServicePath || "") + "." + (name || "");
                this.RRContext.ReplaceObject(path);
            },
            SendEvent: function (m) {
                m.ServicePath = this.ServicePath;
                this.RRContext.SendEvent(m);
            },
            ReleaseObject: function () {
                this.UnregisterEvents(this.uncastobj);
                this.uncastobj = null;
                this.m_context = null;
            },
            SendPipeMessage: function (m, e, cancel) {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        m.ServicePath = this.ServicePath;
                                        $task1 = this.RRContext.SendMessage(m, e, cancel);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            SendWireMessage: function (m, e, cancel) {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        m.ServicePath = this.ServicePath;
                                        $task1 = this.RRContext.SendMessage(m, e, cancel);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            DispatchPipeMessage: function (m, e) { },
            DispatchWireMessage: function (m, e) { },
            CallPipeFunction: function (m, e) {
                throw new RobotRaconteurWeb.MemberNotFoundException("Pipe " + (m.MemberName || "") + " not found");
            },
            CallWireFunction: function (m, e) {
                throw new RobotRaconteurWeb.MemberNotFoundException("Wire " + (m.MemberName || "") + " not found");
            },
            GetCallbackFunction: function (endpoint, membername) {
                throw new RobotRaconteurWeb.MemberNotFoundException("Callback " + (membername || "") + " not found");
            },
            CallMemoryFunction: function (m, e) {
                throw new RobotRaconteurWeb.MemberNotFoundException("Memory " + (m.MemberName || "") + " not found");
            },
            GetNewGeneratorIndex: function () {
                var index;
                var r = new System.Random.ctor();
                do {
                    index = r.Next();
                } while (this.generators.containsKey(index));
                return index;
            },
            CallGeneratorNext: function (m, ep) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    index, 
                    $t, 
                    gen, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        index = ($t = m.FindElement("index").CastData(System.Array.type(System.Int32)))[System.Array.index(0, $t)];
                                        gen = { };
                                        this.generators;
                                        {
                                            if (!this.generators.tryGetValue(index, gen)) {
                                                throw new System.InvalidOperationException.$ctor1("Invalid generator");
                                            }
                                            gen.v.last_access_time = System.DateTime.getUtcNow();
                                        }

                                        if (gen.v.Endpoint !== ep.LocalEndpoint) {
                                            throw new System.InvalidOperationException.$ctor1("Invalid generator");
                                        }
                                        $task1 = gen.v.CallNext(m);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult($taskResult1);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.ServiceStub", {
        fields: {
            RRServicePath: null,
            rr_context: null,
            rr_node: null,
            rr_context_lock: null,
            rr_async_mutex: null
        },
        props: {
            RRContext: {
                get: function () {
                    this.rr_context_lock;
                    {
                        return this.rr_context;
                    }
                }
            }
        },
        ctors: {
            init: function () {
                this.rr_context_lock = { };
                this.rr_async_mutex = new RobotRaconteurWeb.AsyncMutex();
            },
            ctor: function (path, c) {
                this.$initialize();
                this.rr_context = c;
                this.rr_node = c.node;
                this.RRServicePath = path;
            }
        },
        methods: {
            RRReleaseContext: function () {
                this.rr_context_lock;
                {
                    this.rr_context = null;
                }
            },
            ProcessRequest: function (m, cancel) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        if (this.RRContext == null) {
                                            throw new RobotRaconteurWeb.ServiceException("Reference has been released");
                                        }

                                        m.ServicePath = this.RRServicePath;
                                        $task1 = this.RRContext.ProcessRequest(m, cancel);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult($taskResult1);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            FindObjRef$1: function (n, cancel) {
                if (this.RRContext == null) {
                    throw new RobotRaconteurWeb.ServiceException("Reference has been released");
                }
                return this.RRContext.FindObjRef((this.RRServicePath || "") + "." + (n || ""), null, cancel);
            },
            FindObjRef: function (n, i, cancel) {
                if (this.RRContext == null) {
                    throw new RobotRaconteurWeb.ServiceException("Reference has been released");
                }
                return this.RRContext.FindObjRef((this.RRServicePath || "") + "." + (n || "") + "[" + (System.String.replaceAll(RobotRaconteurWeb.Extensions.RRUriExtensions.EscapeDataString(Bridge.toString(i)), ".", "%2e") || "") + "]", null, cancel);
            },
            FindObjRefTyped$1: function (n, objecttype, cancel) {
                if (this.RRContext == null) {
                    throw new RobotRaconteurWeb.ServiceException("Reference has been released");
                }
                return this.RRContext.FindObjRef((this.RRServicePath || "") + "." + (n || ""), objecttype, cancel);
            },
            FindObjRefTyped: function (n, i, objecttype, cancel) {
                if (this.RRContext == null) {
                    throw new RobotRaconteurWeb.ServiceException("Reference has been released");
                }
                return this.RRContext.FindObjRef((this.RRServicePath || "") + "." + (n || "") + "[" + (System.String.replaceAll(RobotRaconteurWeb.Extensions.RRUriExtensions.EscapeDataString(Bridge.toString(i)), ".", "%2e") || "") + "]", objecttype, cancel);
            },
            SendPipeMessage: function (m, cancel) {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        if (this.RRContext == null) {
                                            throw new RobotRaconteurWeb.ServiceException("Reference has been released");
                                        }
                                        m.ServicePath = this.RRServicePath;
                                        $task1 = this.RRContext.SendPipeMessage(m, cancel);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            SendWireMessage: function (m, cancel) {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        if (this.RRContext == null) {
                                            throw new RobotRaconteurWeb.ServiceException("Reference has been released");
                                        }
                                        m.ServicePath = this.RRServicePath;
                                        $task1 = this.RRContext.SendWireMessage(m, cancel);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            DispatchPipeMessage: function (m) { },
            DispatchWireMessage: function (m) { },
            CallbackCall: function (m) {
                throw new RobotRaconteurWeb.MemberNotFoundException("Member not found");
            }
        }
    });

    Bridge.define("RobotRaconteurServiceIndex.ServiceInfo", {
        fields: {
            Name: null,
            RootObjectType: null,
            RootObjectImplements: null,
            ConnectionURL: null,
            Attributes: null
        }
    });

    Bridge.define("RobotRaconteurWeb.RobotRaconteurException", {
        inherits: [System.Exception],
        fields: {
            errorCode: 0,
            error: null
        },
        ctors: {
            init: function () {
                this.errorCode = RobotRaconteurWeb.MessageErrorType.None;
                this.error = "";
            },
            ctor: function () {
                this.$initialize();
                System.Exception.ctor.call(this);
            },
            $ctor1: function (ErrorCode, error, message) {
                this.$initialize();
                System.Exception.ctor.call(this, message);
                this.error = error;
                this.errorCode = ErrorCode;
            },
            $ctor2: function (message, innerexception) {
                this.$initialize();
                System.Exception.ctor.call(this, message, innerexception);

            }
        },
        methods: {
            toString: function () {
                return "RobotRaconteurException: " + (this.error || "") + ": " + (this.Message || "");
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.ArrayBinaryReader", {
        inherits: [System.IO.BinaryReader],
        statics: {
            fields: {
                bufsize: 0
            },
            ctors: {
                init: function () {
                    this.bufsize = 60000;
                }
            }
        },
        fields: {
            abuffer: null,
            memstream: false,
            s_memstream: null,
            membuf: null,
            limits: null,
            m_Position: 0
        },
        props: {
            CurrentLimit: {
                get: function () {
                    return this.limits.Peek();
                }
            },
            Position: {
                get: function () {
                    return this.m_Position;
                }
            },
            DistanceFromLimit: {
                get: function () {
                    return ((((this.CurrentLimit) | 0) - (this.m_Position | 0)) | 0);
                }
            }
        },
        ctors: {
            init: function () {
                this.abuffer = System.Array.init(RobotRaconteurWeb.ArrayBinaryReader.bufsize, 0, System.Byte);
                this.memstream = false;
                this.limits = new (System.Collections.Generic.Stack$1(System.UInt32)).ctor();
                this.m_Position = 0;
            },
            $ctor1: function (s, length) {
                this.$initialize();
                System.IO.BinaryReader.ctor.call(this, s);

                this.memstream = false;

                this.limits.Push((length >>> 0));
            },
            ctor: function (s, membuf1, length) {
                this.$initialize();
                System.IO.BinaryReader.ctor.call(this, s);
                this.s_memstream = s;
                this.memstream = true;
                this.membuf = membuf1;
                this.limits.Push((length >>> 0));
            }
        },
        methods: {
            ReadArray: function (a) {


                if (a != null) {
                    if (a.length > 0) {
                        if (Bridge.is(a, System.Array.type(RobotRaconteurWeb.CDouble))) {
                            var a1 = Bridge.cast(a, System.Array.type(RobotRaconteurWeb.CDouble));
                            var a2 = System.Array.init(Bridge.Int.mul(a1.length, 2), 0, System.Double);
                            this.ReadArray(a2);
                            for (var i = 0; i < a1.length; i = (i + 1) | 0) {
                                a1[System.Array.index(i, a1)] = new RobotRaconteurWeb.CDouble.$ctor1(a2[System.Array.index(Bridge.Int.mul(i, 2), a2)], a2[System.Array.index(((Bridge.Int.mul(i, 2) + 1) | 0), a2)]);
                            }
                            return;
                        }

                        if (Bridge.is(a, System.Array.type(RobotRaconteurWeb.CSingle))) {
                            var a11 = Bridge.cast(a, System.Array.type(RobotRaconteurWeb.CSingle));
                            var a21 = System.Array.init(Bridge.Int.mul(a11.length, 2), 0, System.Single);
                            this.ReadArray(a21);
                            for (var i1 = 0; i1 < a11.length; i1 = (i1 + 1) | 0) {
                                a11[System.Array.index(i1, a11)] = new RobotRaconteurWeb.CSingle.$ctor1(a21[System.Array.index(Bridge.Int.mul(i1, 2), a21)], a21[System.Array.index(((Bridge.Int.mul(i1, 2) + 1) | 0), a21)]);
                            }
                            return;
                        }

                        var l = a.length;
                        var bl = RobotRaconteurWeb.Extensions.Buffer.ByteLength(a);


                        if (this.memstream) {
                            if (System.Int64(this.Position).add(System.Int64(bl)).gt(System.Int64(this.CurrentLimit))) {
                                throw new RobotRaconteurWeb.IOException("Message read error");
                            }

                            RobotRaconteurWeb.Extensions.Buffer.BlockCopy$1(this.membuf, System.Int64.clip32(this.s_memstream.Position), a, 0, bl);
                            this.s_memstream.Position = this.s_memstream.Position.add(System.Int64(bl));

                            this.m_Position = (this.m_Position + (bl >>> 0)) >>> 0;
                        } else {
                            if (System.Int64(this.Position).add(System.Int64(bl)).gt(System.Int64(this.CurrentLimit))) {
                                throw new RobotRaconteurWeb.IOException("Message read error");
                            }
                            if (Bridge.referenceEquals(Bridge.getTypeName((Bridge.getType(a).$elementType || null)), "byte")) {
                                this.Read$1(Bridge.cast(a, System.Array.type(System.Byte)), 0, a.length);
                            } else {



                                var n = (Bridge.Int.div(bl, RobotRaconteurWeb.ArrayBinaryReader.bufsize)) | 0;
                                var nm = bl % RobotRaconteurWeb.ArrayBinaryReader.bufsize;



                                for (var i2 = 0; i2 < n; i2 = (i2 + 1) | 0) {
                                    this.Read$1(this.abuffer, 0, RobotRaconteurWeb.ArrayBinaryReader.bufsize);
                                    RobotRaconteurWeb.Extensions.Buffer.BlockCopy$1(this.abuffer, 0, a, Bridge.Int.mul(i2, RobotRaconteurWeb.ArrayBinaryReader.bufsize), RobotRaconteurWeb.ArrayBinaryReader.bufsize);



                                }

                                if (nm > 0) {
                                    this.Read$1(this.abuffer, 0, nm);
                                    RobotRaconteurWeb.Extensions.Buffer.BlockCopy$1(this.abuffer, 0, a, Bridge.Int.mul((n), RobotRaconteurWeb.ArrayBinaryReader.bufsize), nm);

                                }
                            }
                            this.m_Position = (this.m_Position + (bl >>> 0)) >>> 0;

                        }
                    }
                }
            },
            ReadString8: function (l) {
                var b = System.Array.init(l, 0, System.Byte);
                if (System.Int64(this.Position).add(System.Int64(b.length)).gt(System.Int64(this.CurrentLimit))) {
                    throw new RobotRaconteurWeb.IOException("Message read error");
                }
                var n = this.Read$1(b, 0, b.length);

                var s = System.Text.Encoding.UTF8.GetString(b);
                if (System.String.contains(s,"\u0000")) {
                    System.Console.WriteLine("null");
                }

                this.m_Position = (this.m_Position + ((b.length) >>> 0)) >>> 0;
                return s;

            },
            ReadNumber: function (t) {

                switch (t) {
                    case RobotRaconteurWeb.DataTypes.double_t: 
                        return Bridge.box(this.ReadDouble(), System.Double, System.Double.format, System.Double.getHashCode);
                    case RobotRaconteurWeb.DataTypes.single_t: 
                        return Bridge.box(this.ReadSingle(), System.Single, System.Single.format, System.Single.getHashCode);
                    case RobotRaconteurWeb.DataTypes.int8_t: 
                        return Bridge.box(this.ReadSByte(), System.SByte);
                    case RobotRaconteurWeb.DataTypes.uint8_t: 
                        return Bridge.box(this.ReadByte(), System.Byte);
                    case RobotRaconteurWeb.DataTypes.int16_t: 
                        return Bridge.box(this.ReadInt16(), System.Int16);
                    case RobotRaconteurWeb.DataTypes.uint16_t: 
                        return Bridge.box(this.ReadUInt16(), System.UInt16);
                    case RobotRaconteurWeb.DataTypes.int32_t: 
                        return Bridge.box(this.ReadInt32(), System.Int32);
                    case RobotRaconteurWeb.DataTypes.uint32_t: 
                        return Bridge.box(this.ReadUInt32(), System.UInt32);
                    case RobotRaconteurWeb.DataTypes.int64_t: 
                        return this.ReadInt64();
                    case RobotRaconteurWeb.DataTypes.uint64_t: 
                        return this.ReadUInt64();
                }

                throw new RobotRaconteurWeb.DataTypeException("Unknown data type to read");
            },
            Read: function () {
                if (((this.Position + 1) >>> 0) > this.CurrentLimit) {
                    throw new RobotRaconteurWeb.IOException("Message read error");
                }
                var i = System.IO.BinaryReader.prototype.Read.call(this);
                return i;
            },
            Read$1: function (buffer, index, count) {
                if (System.Int64(this.Position).add(System.Int64(count)).gt(System.Int64(this.CurrentLimit))) {
                    throw new RobotRaconteurWeb.IOException("Message read error");
                }
                var i = System.IO.BinaryReader.prototype.Read$1.call(this, buffer, index, count);
                return i;
            },
            ReadDouble: function () {
                if (((this.Position + 8) >>> 0) > this.CurrentLimit) {
                    throw new RobotRaconteurWeb.IOException("Message read error");
                }
                var i = System.IO.BinaryReader.prototype.ReadDouble.call(this);
                this.m_Position = (this.m_Position + 8) >>> 0;
                return i;
            },
            ReadSingle: function () {
                if (((this.Position + 4) >>> 0) > this.CurrentLimit) {
                    throw new RobotRaconteurWeb.IOException("Message read error");
                }
                var i = System.IO.BinaryReader.prototype.ReadSingle.call(this);
                this.m_Position = (this.m_Position + 4) >>> 0;
                return i;
            },
            ReadSByte: function () {
                if (((this.Position + 1) >>> 0) > this.CurrentLimit) {
                    throw new RobotRaconteurWeb.IOException("Message read error");
                }
                var i = System.IO.BinaryReader.prototype.ReadSByte.call(this);
                this.m_Position = (this.m_Position + 1) >>> 0;
                return i;
            },
            ReadByte: function () {
                if (((this.Position + 1) >>> 0) > this.CurrentLimit) {
                    throw new RobotRaconteurWeb.IOException("Message read error");
                }
                var i = System.IO.BinaryReader.prototype.ReadByte.call(this);
                this.m_Position = (this.m_Position + 1) >>> 0;
                return i;
            },
            ReadInt16: function () {
                if (((this.Position + 2) >>> 0) > this.CurrentLimit) {
                    throw new RobotRaconteurWeb.IOException("Message read error");
                }
                var i = System.IO.BinaryReader.prototype.ReadInt16.call(this);
                this.m_Position = (this.m_Position + 2) >>> 0;
                return i;
            },
            ReadUInt16: function () {
                if (((this.Position + 2) >>> 0) > this.CurrentLimit) {
                    throw new RobotRaconteurWeb.IOException("Message read error");
                }
                var i = System.IO.BinaryReader.prototype.ReadUInt16.call(this);
                this.m_Position = (this.m_Position + 2) >>> 0;
                return i;
            },
            ReadInt32: function () {
                if (((this.Position + 4) >>> 0) > this.CurrentLimit) {
                    throw new RobotRaconteurWeb.IOException("Message read error");
                }
                var i = System.IO.BinaryReader.prototype.ReadInt32.call(this);
                this.m_Position = (this.m_Position + 4) >>> 0;
                return i;
            },
            ReadUInt32: function () {
                if (((this.Position + 4) >>> 0) > this.CurrentLimit) {
                    throw new RobotRaconteurWeb.IOException("Message read error");
                }
                var i = System.IO.BinaryReader.prototype.ReadUInt32.call(this);
                this.m_Position = (this.m_Position + 4) >>> 0;
                return i;
            },
            ReadInt64: function () {
                if (((this.Position + 8) >>> 0) > this.CurrentLimit) {
                    throw new RobotRaconteurWeb.IOException("Message read error");
                }
                var i = System.IO.BinaryReader.prototype.ReadInt64.call(this);
                this.m_Position = (this.m_Position + 8) >>> 0;
                return i;
            },
            ReadUInt64: function () {
                if (((this.Position + 8) >>> 0) > this.CurrentLimit) {
                    throw new RobotRaconteurWeb.IOException("Message read error");
                }
                var i = System.IO.BinaryReader.prototype.ReadUInt64.call(this);
                this.m_Position = (this.m_Position + 8) >>> 0;
                return i;
            },
            PushRelativeLimit: function (limit) {
                if (((this.Position + limit) >>> 0) > this.CurrentLimit) {
                    throw new RobotRaconteurWeb.IOException("Error reading message");
                }

                this.limits.Push(((this.Position + limit) >>> 0));
            },
            PushAbsoluteLimit: function (limit) {
                if (limit > this.CurrentLimit) {
                    throw new RobotRaconteurWeb.IOException("Error reading message");
                }

                this.limits.Push(limit);
            },
            PopLimit: function () {
                this.limits.Pop();
            },
            Reset: function (length) {
                this.limits.Clear();
                this.limits.Push((length >>> 0));
                this.m_Position = 0;
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.ArrayBinaryWriter", {
        inherits: [System.IO.BinaryWriter],
        statics: {
            fields: {
                bufsize: 0
            },
            ctors: {
                init: function () {
                    this.bufsize = 60000;
                }
            },
            methods: {
                GetStringByteCount8: function (s) {
                    return System.Text.Encoding.UTF8.GetByteCount$2(s);
                }
            }
        },
        fields: {
            abuffer: null,
            memstream: false,
            s_memstream: null,
            membuf: null,
            limits: null,
            m_Position: 0
        },
        props: {
            CurrentLimit: {
                get: function () {
                    return this.limits.Peek();
                }
            },
            Position: {
                get: function () {
                    return this.m_Position;
                }
            },
            DistanceFromLimit: {
                get: function () {
                    return ((((this.CurrentLimit) | 0) - (this.m_Position | 0)) | 0);
                }
            }
        },
        ctors: {
            init: function () {
                this.abuffer = System.Array.init(RobotRaconteurWeb.ArrayBinaryWriter.bufsize, 0, System.Byte);
                this.memstream = false;
                this.limits = new (System.Collections.Generic.Stack$1(System.UInt32)).ctor();
                this.m_Position = 0;
            },
            $ctor1: function (s, length) {
                this.$initialize();
                System.IO.BinaryWriter.$ctor1.call(this, s);

                this.limits.Push((length >>> 0));
                this.memstream = false;
            },
            ctor: function (s, membuf1, length) {
                this.$initialize();
                System.IO.BinaryWriter.$ctor1.call(this, s);
                this.s_memstream = s;
                this.memstream = true;
                this.membuf = membuf1;
                this.limits.Push((length >>> 0));
            }
        },
        methods: {
            WriteArray: function (a) {

                if (a != null) {
                    if (a.length > 0) {

                        if (Bridge.is(a, System.Array.type(RobotRaconteurWeb.CDouble))) {
                            var a1 = Bridge.cast(a, System.Array.type(RobotRaconteurWeb.CDouble));
                            var a2 = System.Array.init(Bridge.Int.mul(a1.length, 2), 0, System.Double);
                            for (var i = 0; i < a1.length; i = (i + 1) | 0) {
                                a2[System.Array.index(Bridge.Int.mul(i, 2), a2)] = a1[System.Array.index(i, a1)].Real;
                                a2[System.Array.index(((Bridge.Int.mul(i, 2) + 1) | 0), a2)] = a1[System.Array.index(i, a1)].Imag;
                            }
                            this.WriteArray(a2);
                            return;
                        }

                        if (Bridge.is(a, System.Array.type(RobotRaconteurWeb.CSingle))) {
                            var a11 = Bridge.cast(a, System.Array.type(RobotRaconteurWeb.CSingle));
                            var a21 = System.Array.init(Bridge.Int.mul(a11.length, 2), 0, System.Single);
                            for (var i1 = 0; i1 < a11.length; i1 = (i1 + 1) | 0) {
                                a21[System.Array.index(Bridge.Int.mul(i1, 2), a21)] = a11[System.Array.index(i1, a11)].Real;
                                a21[System.Array.index(((Bridge.Int.mul(i1, 2) + 1) | 0), a21)] = a11[System.Array.index(i1, a11)].Imag;
                            }
                            this.WriteArray(a21);
                            return;
                        }

                        var l = a.length;
                        var bl = RobotRaconteurWeb.Extensions.Buffer.ByteLength(a);

                        if (System.Int64(bl).add(System.Int64(this.Position)).gt(System.Int64(this.CurrentLimit))) {
                            throw new RobotRaconteurWeb.IOException("Message write error");
                        }

                        if (this.memstream) {

                            this.m_Position = (this.m_Position + (bl >>> 0)) >>> 0;
                            RobotRaconteurWeb.Extensions.Buffer.BlockCopy(a, 0, this.membuf, System.Int64.clip32(this.s_memstream.Position), bl);
                            this.s_memstream.Position = this.s_memstream.Position.add(System.Int64(bl));
                        } else {

                            if (Bridge.referenceEquals(Bridge.getTypeName((Bridge.getType(a).$elementType || null)), "byte")) {
                                this.Write$2(Bridge.cast(a, System.Array.type(System.Byte)));
                            } else {


                                var n = (Bridge.Int.div(bl, RobotRaconteurWeb.ArrayBinaryWriter.bufsize)) | 0;
                                var nm = bl % RobotRaconteurWeb.ArrayBinaryWriter.bufsize;



                                for (var i2 = 0; i2 < n; i2 = (i2 + 1) | 0) {

                                    RobotRaconteurWeb.Extensions.Buffer.BlockCopy(a, Bridge.Int.mul(i2, RobotRaconteurWeb.ArrayBinaryWriter.bufsize), this.abuffer, 0, RobotRaconteurWeb.ArrayBinaryWriter.bufsize);
                                    this.Write$3(this.abuffer, 0, RobotRaconteurWeb.ArrayBinaryWriter.bufsize);



                                }

                                if (nm > 0) {
                                    RobotRaconteurWeb.Extensions.Buffer.BlockCopy(a, Bridge.Int.mul((n), RobotRaconteurWeb.ArrayBinaryWriter.bufsize), this.abuffer, 0, nm);
                                    this.Write$3(this.abuffer, 0, nm);
                                }
                            }

                            this.m_Position = (this.m_Position + (bl >>> 0)) >>> 0;
                        }
                    }
                }
            },
            WriteString8: function (s) {

                var b = System.Text.Encoding.UTF8.GetBytes$2(s);
                if (System.Int64(b.length).add(System.Int64(this.Position)).gt(System.Int64(this.CurrentLimit))) {
                    throw new RobotRaconteurWeb.IOException("Message write error");
                }
                this.Write$2(b);
                this.m_Position = (this.m_Position + ((b.length) >>> 0)) >>> 0;

            },
            WriteNumber: function (n, t) {
                switch (t) {
                    case RobotRaconteurWeb.DataTypes.double_t: 
                        this.Write$8(System.Nullable.getValue(Bridge.cast(Bridge.unbox(n, System.Double), System.Double)));
                        return;
                    case RobotRaconteurWeb.DataTypes.single_t: 
                        this.Write$13(System.Nullable.getValue(Bridge.cast(Bridge.unbox(n, System.Single), System.Single)));
                        return;
                    case RobotRaconteurWeb.DataTypes.int8_t: 
                        this.Write$12(System.Nullable.getValue(Bridge.cast(Bridge.unbox(n, System.SByte), System.SByte)));
                        return;
                    case RobotRaconteurWeb.DataTypes.uint8_t: 
                        this.Write$1(System.Nullable.getValue(Bridge.cast(Bridge.unbox(n, System.Byte), System.Byte)));
                        return;
                    case RobotRaconteurWeb.DataTypes.int16_t: 
                        this.Write$9(System.Nullable.getValue(Bridge.cast(Bridge.unbox(n, System.Int16), System.Int16)));
                        return;
                    case RobotRaconteurWeb.DataTypes.uint16_t: 
                        this.Write$15(System.Nullable.getValue(Bridge.cast(Bridge.unbox(n, System.UInt16), System.UInt16)));
                        return;
                    case RobotRaconteurWeb.DataTypes.int32_t: 
                        this.Write$10(System.Nullable.getValue(Bridge.cast(Bridge.unbox(n, System.Int32), System.Int32)));
                        return;
                    case RobotRaconteurWeb.DataTypes.uint32_t: 
                        this.Write$16(System.Nullable.getValue(Bridge.cast(Bridge.unbox(n, System.UInt32), System.UInt32)));
                        return;
                    case RobotRaconteurWeb.DataTypes.int64_t: 
                        this.Write$11(System.Nullable.getValue(Bridge.cast(Bridge.unbox(n, System.Int64), System.Int64)));
                        return;
                    case RobotRaconteurWeb.DataTypes.uint64_t: 
                        this.Write$17(System.Nullable.getValue(Bridge.cast(Bridge.unbox(n, System.UInt64), System.UInt64)));
                        return;
                }

                throw new RobotRaconteurWeb.DataTypeException("Unknown data type to write");
            },
            Write$3: function (buffer, index, count) {
                if (System.Int64(count).add(System.Int64(this.Position)).gt(System.Int64(this.CurrentLimit))) {
                    throw new RobotRaconteurWeb.IOException("Message write error");
                }
                System.IO.BinaryWriter.prototype.Write$3.call(this, buffer, index, count);
            },
            Write$8: function (value) {
                if (((8 + this.Position) >>> 0) > this.CurrentLimit) {
                    throw new RobotRaconteurWeb.IOException("Message write error");
                }
                System.IO.BinaryWriter.prototype.Write$8.call(this, value);
                this.m_Position = (this.m_Position + 8) >>> 0;
            },
            Write$13: function (value) {
                if (((4 + this.Position) >>> 0) > this.CurrentLimit) {
                    throw new RobotRaconteurWeb.IOException("Message write error");
                }
                System.IO.BinaryWriter.prototype.Write$13.call(this, value);
                this.m_Position = (this.m_Position + 4) >>> 0;
            },
            Write$1: function (value) {
                if (((1 + this.Position) >>> 0) > this.CurrentLimit) {
                    throw new RobotRaconteurWeb.IOException("Message write error");
                }
                System.IO.BinaryWriter.prototype.Write$1.call(this, value);
                this.m_Position = (this.m_Position + 1) >>> 0;
            },
            Write$12: function (value) {
                if (((1 + this.Position) >>> 0) > this.CurrentLimit) {
                    throw new RobotRaconteurWeb.IOException("Message write error");
                }
                System.IO.BinaryWriter.prototype.Write$12.call(this, value);
                this.m_Position = (this.m_Position + 1) >>> 0;
            },
            Write$9: function (value) {
                if (((2 + this.Position) >>> 0) > this.CurrentLimit) {
                    throw new RobotRaconteurWeb.IOException("Message write error");
                }
                System.IO.BinaryWriter.prototype.Write$9.call(this, value);
                this.m_Position = (this.m_Position + 2) >>> 0;
            },
            Write$15: function (value) {
                if (((2 + this.Position) >>> 0) > this.CurrentLimit) {
                    throw new RobotRaconteurWeb.IOException("Message write error");
                }
                System.IO.BinaryWriter.prototype.Write$15.call(this, value);
                this.m_Position = (this.m_Position + 2) >>> 0;
            },
            Write$10: function (value) {
                if (((4 + this.Position) >>> 0) > this.CurrentLimit) {
                    throw new RobotRaconteurWeb.IOException("Message write error");
                }
                System.IO.BinaryWriter.prototype.Write$10.call(this, value);
                this.m_Position = (this.m_Position + 4) >>> 0;
            },
            Write$16: function (value) {
                if (((4 + this.Position) >>> 0) > this.CurrentLimit) {
                    throw new RobotRaconteurWeb.IOException("Message write error");
                }
                System.IO.BinaryWriter.prototype.Write$16.call(this, value);
                this.m_Position = (this.m_Position + 4) >>> 0;
            },
            Write$11: function (value) {
                if (((8 + this.Position) >>> 0) > this.CurrentLimit) {
                    throw new RobotRaconteurWeb.IOException("Message write error");
                }
                System.IO.BinaryWriter.prototype.Write$11.call(this, value);
                this.m_Position = (this.m_Position + 8) >>> 0;
            },
            Write$17: function (value) {
                if (((8 + this.Position) >>> 0) > this.CurrentLimit) {
                    throw new RobotRaconteurWeb.IOException("Message write error");
                }
                System.IO.BinaryWriter.prototype.Write$17.call(this, value);
                this.m_Position = (this.m_Position + 8) >>> 0;
            },
            PushRelativeLimit: function (limit) {
                if (((this.Position + limit) >>> 0) > this.CurrentLimit) {
                    throw new RobotRaconteurWeb.IOException("Error reading message");
                }

                this.limits.Push(((this.Position + limit) >>> 0));
            },
            PushAbsoluteLimit: function (limit) {
                if (limit > this.CurrentLimit) {
                    throw new RobotRaconteurWeb.IOException("Error reading message");
                }

                this.limits.Push(limit);
            },
            PopLimit: function () {
                this.limits.Pop();
            },
            Reset: function (length) {
                this.limits.Clear();
                this.limits.Push((length >>> 0));
                this.m_Position = 0;
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.ArrayMemoryBase");

    Bridge.define("RobotRaconteurWeb.ArrayMemoryClientImplBase", {
        fields: {
            m_MemberName: null,
            stub: null,
            direction: 0,
            element_type: 0,
            element_size: 0,
            max_size_read: false,
            remote_max_size: 0
        },
        props: {
            MemberName: {
                get: function () {
                    return this.m_MemberName;
                }
            },
            Direction: {
                get: function () {
                    return this.direction;
                }
            }
        },
        ctors: {
            ctor: function (membername, stub, element_type, element_size, direction) {
                this.$initialize();
                this.stub = stub;
                this.m_MemberName = membername;
                this.direction = direction;
                this.element_type = element_type;
                this.element_size = element_size;
            }
        },
        methods: {
            GetLength: function (cancel) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    m, 
                    ret, 
                    $t, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        if (cancel === void 0) { cancel = new System.Threading.CancellationToken(); }
                                        m = new RobotRaconteurWeb.MessageEntry.$ctor1(RobotRaconteurWeb.MessageEntryType.MemoryGetParam, this.MemberName);
                                        m.AddElement$1("parameter", "Length");
                                        $task1 = this.stub.ProcessRequest(m, cancel);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        ret = $taskResult1;
                                        $tcs.setResult(($t = ret.FindElement("return").CastData(System.Array.type(System.UInt64)))[System.Array.index(0, $t)]);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            GetMaxTransferSize: function (cancel) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    my_max_size, 
                    m, 
                    ret, 
                    remote_max_size1, 
                    $t, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        if (cancel === void 0) { cancel = new System.Threading.CancellationToken(); }
                                        my_max_size = this.stub.rr_node.MemoryMaxTransferSize;
                                        this;
                                        {
                                            if (this.max_size_read) {
                                                if (this.remote_max_size > my_max_size) {
                                                    $tcs.setResult(my_max_size);
                                                    return;
                                                } else {
                                                    $tcs.setResult(this.remote_max_size);
                                                    return;
                                                }
                                            }
                                        }

                                        m = new RobotRaconteurWeb.MessageEntry.$ctor1(RobotRaconteurWeb.MessageEntryType.MemoryGetParam, this.MemberName);
                                        m.AddElement$1("parameter", "MaxTransferSize");
                                        $task1 = this.stub.ProcessRequest(m, cancel);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        ret = $taskResult1;
                                        remote_max_size1 = ($t = ret.FindElement("return").CastData(System.Array.type(System.UInt32)))[System.Array.index(0, $t)];
                                        this;
                                        {
                                            if (!this.max_size_read) {
                                                this.remote_max_size = remote_max_size1;
                                                this.max_size_read = true;
                                            }

                                            if (this.remote_max_size > my_max_size) {
                                                $tcs.setResult(my_max_size);
                                                return;
                                            } else {
                                                $tcs.setResult(this.remote_max_size);
                                                return;
                                            }
                                        }
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            ReadImpl: function (memorypos, buffer, bufferpos, count, cancel) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $task3, 
                    $task4, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    max_transfer_size, 
                    max_elems, 
                    e, 
                    ret, 
                    blocks, 
                    blockrem, 
                    i, 
                    bufferpos_i, 
                    memorypos_i, 
                    bufferpos_i1, 
                    memorypos_i1, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,6,7,8,9,10,11,13], $step);
                                switch ($step) {
                                    case 0: {
                                        if (cancel === void 0) { cancel = new System.Threading.CancellationToken(); }
                                        if (this.direction === RobotRaconteurWeb.MemberDefinition_Direction.writeonly) {
                                            throw new RobotRaconteurWeb.WriteOnlyMemberException("Write only member");
                                        }

                                        $task1 = this.GetMaxTransferSize(cancel);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        max_transfer_size = $taskResult1;
                                        max_elems = (Bridge.Int.div((max_transfer_size), this.element_size)) >>> 0;

                                        if (count.lte(System.UInt64(max_elems))) {
                                            $step = 2;
                                            continue;
                                        } else  {
                                            $step = 4;
                                            continue;
                                        }
                                    }
                                    case 2: {
                                        e = new RobotRaconteurWeb.MessageEntry.$ctor1(RobotRaconteurWeb.MessageEntryType.MemoryRead, this.MemberName);
                                        e.AddElement$1("memorypos", memorypos);
                                        e.AddElement$1("count", count);
                                        $task2 = this.stub.ProcessRequest(e, cancel);
                                        $step = 3;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 3: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        ret = $taskResult2;
                                        this.UnpackReadResult(ret.FindElement("data").Data, buffer, bufferpos, count);
                                        $step = 13;
                                        continue;
                                    }
                                    case 4: {
                                        blocks = count.div(System.UInt64(max_elems));
                                        blockrem = count.mod(System.UInt64(max_elems));

                                        i = System.UInt64(0);
                                        $step = 5;
                                        continue;
                                    }
                                    case 5: {
                                        if ( i.lt(blocks) ) {
                                            $step = 6;
                                            continue;
                                        }
                                        $step = 9;
                                        continue;
                                    }
                                    case 6: {
                                        bufferpos_i = bufferpos.add(System.UInt64(max_elems).mul(i));
                                        memorypos_i = memorypos.add(System.UInt64(max_elems).mul(i));

                                        $task3 = this.ReadImpl(memorypos_i, buffer, bufferpos_i, System.UInt64(max_elems));
                                        $step = 7;
                                        if ($task3.isCompleted()) {
                                            continue;
                                        }
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 7: {
                                        $task3.getAwaitedResult();
                                        $step = 8;
                                        continue;
                                    }
                                    case 8: {
                                        i = i.inc();
                                        $step = 5;
                                        continue;
                                    }
                                    case 9: {
                                        if (blockrem.gt(System.UInt64(0))) {
                                            $step = 10;
                                            continue;
                                        } 
                                        $step = 12;
                                        continue;
                                    }
                                    case 10: {
                                        bufferpos_i1 = bufferpos.add(System.UInt64(max_elems).mul(blocks));
                                        memorypos_i1 = memorypos.add(System.UInt64(max_elems).mul(blocks));

                                        $task4 = this.ReadImpl(memorypos_i1, buffer, bufferpos_i1, blockrem);
                                        $step = 11;
                                        if ($task4.isCompleted()) {
                                            continue;
                                        }
                                        $task4.continue($asyncBody);
                                        return;
                                    }
                                    case 11: {
                                        $task4.getAwaitedResult();
                                        $step = 12;
                                        continue;
                                    }

                                    case 13: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            WriteImpl: function (memorypos, buffer, bufferpos, count, cancel) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $task3, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    max_transfer_size, 
                    max_elems, 
                    e, 
                    ret, 
                    blocks, 
                    blockrem, 
                    i, 
                    bufferpos_i, 
                    memorypos_i, 
                    bufferpos_i1, 
                    memorypos_i1, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,6,7,8,9,10,12], $step);
                                switch ($step) {
                                    case 0: {
                                        if (cancel === void 0) { cancel = new System.Threading.CancellationToken(); }
                                        if (this.direction === RobotRaconteurWeb.MemberDefinition_Direction.readonly_) {
                                            throw new RobotRaconteurWeb.ReadOnlyMemberException("Read only member");
                                        }

                                        $task1 = this.GetMaxTransferSize(cancel);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        max_transfer_size = System.UInt64($taskResult1);
                                        max_elems = max_transfer_size.div(System.UInt64(this.element_size));

                                        if (count.lte(max_elems)) {
                                            $step = 2;
                                            continue;
                                        } else  {
                                            $step = 3;
                                            continue;
                                        }
                                    }
                                    case 2: {
                                        e = new RobotRaconteurWeb.MessageEntry.$ctor1(RobotRaconteurWeb.MessageEntryType.MemoryWrite, this.MemberName);
                                        e.AddElement$1("memorypos", memorypos);
                                        e.AddElement$1("count", count);
                                        e.AddElement$1("data", this.PackWriteRequest(buffer, bufferpos, count));

                                        ret = this.stub.ProcessRequest(e, cancel);
                                        $step = 12;
                                        continue;
                                    }
                                    case 3: {
                                        if (this.GetBufferLength(buffer).sub(bufferpos).lt(count)) {
                                            throw new RobotRaconteurWeb.OutOfRangeException("");
                                        }

                                        blocks = count.div(max_elems);
                                        blockrem = count.mod(max_elems);

                                        i = System.UInt64(0);
                                        $step = 4;
                                        continue;
                                    }
                                    case 4: {
                                        if ( i.lt(blocks) ) {
                                            $step = 5;
                                            continue;
                                        }
                                        $step = 8;
                                        continue;
                                    }
                                    case 5: {
                                        bufferpos_i = bufferpos.add(max_elems.mul(i));
                                        memorypos_i = memorypos.add(max_elems.mul(i));
                                        $task2 = this.WriteImpl(memorypos_i, buffer, bufferpos_i, max_elems);
                                        $step = 6;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 6: {
                                        $task2.getAwaitedResult();
                                        $step = 7;
                                        continue;
                                    }
                                    case 7: {
                                        i = i.inc();
                                        $step = 4;
                                        continue;
                                    }
                                    case 8: {
                                        if (blockrem.gt(System.UInt64(0))) {
                                            $step = 9;
                                            continue;
                                        } 
                                        $step = 11;
                                        continue;
                                    }
                                    case 9: {
                                        bufferpos_i1 = bufferpos.add(max_elems.mul(blocks));
                                        memorypos_i1 = memorypos.add(max_elems.mul(blocks));
                                        $task3 = this.WriteImpl(memorypos_i1, buffer, bufferpos_i1, blockrem);
                                        $step = 10;
                                        if ($task3.isCompleted()) {
                                            continue;
                                        }
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 10: {
                                        $task3.getAwaitedResult();
                                        $step = 11;
                                        continue;
                                    }

                                    case 12: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.ArrayMemoryServiceSkelBase", {
        fields: {
            m_MemberName: null,
            skel: null,
            direction: 0,
            element_type: 0,
            element_size: 0
        },
        props: {
            MemberName: {
                get: function () {
                    return this.m_MemberName;
                }
            }
        },
        ctors: {
            ctor: function (membername, skel, element_type, element_size, direction) {
                this.$initialize();
                this.m_MemberName = membername;
                this.skel = skel;
                this.direction = direction;
                this.element_type = element_type;
                this.element_size = element_size;
            }
        },
        methods: {
            CallMemoryFunction: function (m, e, mem) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $task3, 
                    $taskResult3, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $t, 
                    memorypos, 
                    $t1, 
                    count, 
                    $t2, 
                    data, 
                    ret, 
                    memorypos1, 
                    $t3, 
                    count1, 
                    $t4, 
                    data1, 
                    ret1, 
                    param, 
                    ret2, 
                    len, 
                    ret3, 
                    MaxTransferSize, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,6,7,8,9,10,11], $step);
                                switch ($step) {
                                    case 0: {
                                        $t = m.EntryType;
                                        if ($t === RobotRaconteurWeb.MessageEntryType.MemoryRead) {
                                            $step = 1;
                                            continue;
                                        }
                                        else if ($t === RobotRaconteurWeb.MessageEntryType.MemoryWrite) {
                                            $step = 3;
                                            continue;
                                        }
                                        else if ($t === RobotRaconteurWeb.MessageEntryType.MemoryGetParam) {
                                            $step = 5;
                                            continue;
                                        }
                                        else  {
                                            $step = 10;
                                            continue;
                                        }
                                        $step = 11;
                                        continue;
                                    }
                                    case 1: {
                                        if (this.direction === RobotRaconteurWeb.MemberDefinition_Direction.writeonly) {
                                            throw new RobotRaconteurWeb.WriteOnlyMemberException("Write only member");
                                        }

                                        memorypos = ($t1 = m.FindElement("memorypos").CastData(System.Array.type(System.UInt64)))[System.Array.index(0, $t1)];
                                        count = ($t2 = m.FindElement("count").CastData(System.Array.type(System.UInt64)))[System.Array.index(0, $t2)];
                                        $task1 = this.DoRead(memorypos, System.UInt64(0), count, mem);
                                        $step = 2;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        data = $taskResult1;
                                        ret = new RobotRaconteurWeb.MessageEntry.$ctor1(RobotRaconteurWeb.MessageEntryType.MemoryReadRet, this.MemberName);
                                        ret.AddElement$1("memorypos", memorypos);
                                        ret.AddElement$1("count", count);
                                        ret.AddElement$1("data", data);
                                        $tcs.setResult(ret);
                                        return;
                                    }
                                    case 3: {
                                        if (this.direction === RobotRaconteurWeb.MemberDefinition_Direction.readonly_) {
                                            throw new RobotRaconteurWeb.ReadOnlyMemberException("Read only member");
                                        }

                                        memorypos1 = ($t3 = m.FindElement("memorypos").CastData(System.Array.type(System.UInt64)))[System.Array.index(0, $t3)];
                                        count1 = ($t4 = m.FindElement("count").CastData(System.Array.type(System.UInt64)))[System.Array.index(0, $t4)];
                                        data1 = m.FindElement("data").Data;
                                        $task2 = this.DoWrite(memorypos1, data1, System.UInt64(0), count1, mem);
                                        $step = 4;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 4: {
                                        $task2.getAwaitedResult();
                                        ret1 = new RobotRaconteurWeb.MessageEntry.$ctor1(RobotRaconteurWeb.MessageEntryType.MemoryReadRet, this.MemberName);
                                        ret1.AddElement$1("memorypos", memorypos1);
                                        ret1.AddElement$1("count", count1);
                                        $tcs.setResult(ret1);
                                        return;
                                    }
                                    case 5: {
                                        param = m.FindElement("parameter").CastData(System.String);
                                        if (Bridge.referenceEquals(param, "Length")) {
                                            $step = 6;
                                            continue;
                                        } else  {
                                            $step = 8;
                                            continue;
                                        }
                                    }
                                    case 6: {
                                        ret2 = new RobotRaconteurWeb.MessageEntry.$ctor1(RobotRaconteurWeb.MessageEntryType.MemoryGetParamRet, this.MemberName);
                                        $task3 = mem.GetLength();
                                        $step = 7;
                                        if ($task3.isCompleted()) {
                                            continue;
                                        }
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 7: {
                                        $taskResult3 = $task3.getAwaitedResult();
                                        len = $taskResult3;
                                        ret2.AddElement$1("return", len);
                                        $tcs.setResult(ret2);
                                        return;
                                    }
                                    case 8: {
                                        if (Bridge.referenceEquals(param, "MaxTransferSize")) {
                                            ret3 = new RobotRaconteurWeb.MessageEntry.$ctor1(RobotRaconteurWeb.MessageEntryType.MemoryGetParamRet, this.MemberName);
                                            MaxTransferSize = this.skel.rr_node.MemoryMaxTransferSize;
                                            ret3.AddElement$1("return", Bridge.box(MaxTransferSize, System.UInt32));
                                            $tcs.setResult(ret3);
                                            return;

                                        } else {
                                            throw new System.InvalidOperationException.$ctor1("Unknown parameter");
                                        }
                                        $step = 9;
                                        continue;
                                    }
                                    case 9: {

                                    }
                                    case 10: {
                                        throw new RobotRaconteurWeb.ProtocolException("Invalid command");
                                    }
                                    case 11: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.AsyncMutex", {
        fields: {
            waiting_tasks: null,
            current: null
        },
        ctors: {
            init: function () {
                this.waiting_tasks = new (System.Collections.Generic.Queue$1(System.Threading.Tasks.TaskCompletionSource)).ctor();
            }
        },
        methods: {
            Lock: function () {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    t, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        t = this.Enter();
                                        $task1 = t;
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        $tcs.setResult(new RobotRaconteurWeb.AsyncMutex.LockHandle(this, t));
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            LockWithTimeout: function (timeout) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    t, 
                    noop, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4], $step);
                                switch ($step) {
                                    case 0: {
                                        t = null;
                                        t = this.Enter();
                                        $task1 = System.Threading.Tasks.Task.whenAny(t, System.Threading.Tasks.Task.delay(timeout));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        if (t.isCompleted() || t.isFaulted() || t.isCanceled()) {
                                            $step = 2;
                                            continue;
                                        } 
                                        $step = 4;
                                        continue;
                                    }
                                    case 2: {
                                        $task2 = t;
                                        $step = 3;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 3: {
                                        $task2.getAwaitedResult();
                                        $tcs.setResult(new RobotRaconteurWeb.AsyncMutex.LockHandle(this, t));
                                        return;
                                    }
                                    case 4: {
                                        noop = t.continueWith(Bridge.fn.bind(this, function (x) {
                                            var e = x.getException();
                                            try {
                                                this.Exit(x);
                                            } catch ($e1) {
                                                $e1 = System.Exception.create($e1);
                                            }
                                        }));

                                        throw new System.TimeoutException.$ctor1("Timeout wating for mutex lock");
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            Enter: function () {
                var t = new System.Threading.Tasks.TaskCompletionSource();
                this;
                {
                    if (this.current == null) {
                        t.trySetResult(0);
                        this.current = t.task;
                        return t.task;
                    } else {
                        this.waiting_tasks.Enqueue(t);
                        return t.task;
                    }

                }
            },
            Exit: function (t) {
                var c = null;
                this;
                {
                    if (!Bridge.referenceEquals(t, this.current)) {
                        throw new System.InvalidOperationException.$ctor1("Invalid task to release mutex");
                    }
                    if (this.waiting_tasks.Count > 0) {
                        c = this.waiting_tasks.Dequeue();
                        this.current = c.task;
                    } else {
                        this.current = null;
                    }
                }
                if (c != null) {
                    c.trySetResult(0);
                }
            },
            CancelAll: function () {
                var c2 = new (System.Collections.Generic.Queue$1(System.Threading.Tasks.TaskCompletionSource)).ctor();
                this;
                {
                    while (this.waiting_tasks.Count > 0) {
                        c2.Enqueue(this.waiting_tasks.Dequeue());
                    }

                }

                while (c2.Count > 0) {
                    c2.Dequeue().trySetCanceled();
                }
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.AsyncMutex.LockHandle", {
        inherits: [System.IDisposable],
        $kind: "nested class",
        fields: {
            task: null,
            owner: null
        },
        alias: ["Dispose", "System$IDisposable$Dispose"],
        ctors: {
            ctor: function (owner, task) {
                this.$initialize();
                this.task = task;
                this.owner = owner;
            }
        },
        methods: {
            Dispose: function () {
                this.owner.Exit(this.task);
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.ITransportConnection", {
        $kind: "interface"
    });

    Bridge.define("RobotRaconteurWeb.AsyncStreamTransportParent", {
        $kind: "interface"
    });

    Bridge.define("RobotRaconteurWeb.AuthenticatedUser", {
        fields: {
            m_Username: null,
            m_Privileges: null,
            m_LoginTime: null,
            m_LastAccessTime: null
        },
        props: {
            Username: {
                get: function () {
                    return this.m_Username;
                }
            },
            Privileges: {
                get: function () {
                    return this.m_Privileges;
                }
            },
            LoginTime: {
                get: function () {
                    return this.m_LoginTime;
                }
            },
            LastAccessTime: {
                get: function () {
                    return this.m_LastAccessTime;
                }
            }
        },
        ctors: {
            init: function () {
                this.m_LoginTime = System.DateTime.getDefaultValue();
                this.m_LastAccessTime = System.DateTime.getDefaultValue();
            },
            ctor: function (username, privileges) {
                this.$initialize();
                this.m_Username = username;
                this.m_Privileges = privileges;
                this.m_LoginTime = System.DateTime.getUtcNow();
                this.m_LastAccessTime = System.DateTime.getUtcNow();
            }
        },
        methods: {
            UpdateLastAccess: function () {
                this.m_LastAccessTime = System.DateTime.getUtcNow();
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.Transport", {
        statics: {
            fields: {
                m_CurrentThreadTransportConnectionURL: null,
                m_CurrentThreadTransport: null
            },
            props: {
                CurrentThreadTransportConnectionURL: {
                    get: function () {
                        return RobotRaconteurWeb.Transport.m_CurrentThreadTransportConnectionURL;
                    }
                },
                CurrentThreadTransport: {
                    get: function () {
                        return RobotRaconteurWeb.Transport.m_CurrentThreadTransport;
                    }
                }
            }
        },
        fields: {
            TransportID: 0,
            node: null
        },
        events: {
            MessageReceivedEvent: null,
            TransportListeners: null
        },
        ctors: {
            ctor: function (node) {
                if (node === void 0) { node = null; }

                this.$initialize();
                if (node != null) {

                    this.node = node;
                } else {
                    this.node = RobotRaconteurWeb.RobotRaconteurNode.s;
                }
            }
        },
        methods: {
            CheckConnection: function (endpoint) {

            },
            SendMessage: function (m, cancel) {
                throw new System.NotImplementedException.ctor();
            },
            MessageReceived: function (m) {


                this.MessageReceivedEvent(m);
            },
            SpecialRequest: function (m) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    type, 
                    r, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,5], $step);
                                switch ($step) {
                                    case 0: {
                                        if (m.entries.Count >= 1) {
                                            $step = 1;
                                            continue;
                                        } 
                                        $step = 5;
                                        continue;
                                    }
                                    case 1: {
                                        type = ((m.entries.getItem(0).EntryType) >>> 0);
                                        if (type < 500 && (type % 2 === 1)) {
                                            $step = 2;
                                            continue;
                                        } 
                                        $step = 4;
                                        continue;
                                    }
                                    case 2: {
                                        $task1 = this.node.SpecialRequest(m, this.TransportID);
                                        $step = 3;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 3: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        r = $taskResult1;
                                        $tcs.setResult(r);
                                        return;
                                    }

                                    case 5: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            Close: function () {
                this.FireTransportEventListener(RobotRaconteurWeb.TransportListenerEventType.TransportClosed, null);
                return System.Threading.Tasks.Task.fromResult(0, System.Int32);
            },
            TransportCapability: function (name) {
                return 0;
            },
            FireTransportEventListener: function (ev, parameter) {
                if (!Bridge.staticEquals(this.TransportListeners, null)) {
                    try {
                        this.TransportListeners(this, ev, parameter);
                    } catch ($e1) {
                        $e1 = System.Exception.create($e1);
                    }
                }
            },
            GetDetectedNodes: function (token) {
                var o = new (System.Collections.Generic.List$1(RobotRaconteurWeb.NodeDiscoveryInfo)).ctor();
                return System.Threading.Tasks.Task.fromResult(o, System.Collections.Generic.List$1(RobotRaconteurWeb.NodeDiscoveryInfo));
            },
            LocalNodeServicesChanged: function () {

            },
            SendDiscoveryRequest: function () {

            }
        }
    });

    Bridge.define("RobotRaconteurWeb.Callback$1", function (T) { return {
        fields: {
            m_MemberName: null
        },
        ctors: {
            ctor: function (name) {
                this.$initialize();
                this.m_MemberName = name;
            }
        }
    }; });

    Bridge.define("RobotRaconteurWeb.MemberDefinition", {
        statics: {
            methods: {
                MemberDefinition_ParseCommaList: function (r, s, res) {
                    var r_empty = new System.Text.RegularExpressions.Regex.ctor("^[ \\t]*$");
                    if (r_empty.isMatch(s)) {
                        return true;
                    }

                    var r_match = r.match(s);
                    if (!r_match.getSuccess()) {
                        return false;
                    }

                    res.v.add(r_match.getGroups().get(1).getValue());
                    if (r_match.getGroups().get(2).getSuccess()) {
                        if (!RobotRaconteurWeb.MemberDefinition.MemberDefinition_ParseCommaList(r, r_match.getGroups().get(2).getValue(), res)) {
                            return false;
                        }
                    }
                    return true;
                },
                MemberDefinition_ParseParameters: function (s, res) {
                    var r_params = new System.Text.RegularExpressions.Regex.ctor("^[ \\t]*((?:[a-zA-Z](?:\\w*[a-zA-Z0-9])?)(?:\\.[a-zA-Z](?:\\w*[a-zA-Z0-9])?)*(?:\\[[0-9\\,\\*\\-]*\\])?(?:\\{\\w{1,16}\\})?[ \\t]+\\w+)(?:[ \\t]*,[ \\t]*([ -~\\t]*\\w[ -~\\t]*))?[ \\t]*$");

                    return RobotRaconteurWeb.MemberDefinition.MemberDefinition_ParseCommaList(r_params, s, res);
                },
                MemberDefinition_ParseModifiers: function (s, res) {
                    var r_modifier = new System.Text.RegularExpressions.Regex.ctor("^[ \\t]*([a-zA-Z](?:\\w*[a-zA-Z0-9])?(?:\\([\\w\\-\\., \\t\\\"\\{\\}\\:]*\\))?)(?:[ \\t]*,([ -~\\t]*))?$");

                    return RobotRaconteurWeb.MemberDefinition.MemberDefinition_ParseCommaList(r_modifier, s, res);
                },
                MemberDefinition_ModifiersToString: function (modifiers) {
                    if (modifiers.Count === 0) {
                        return "";
                    }

                    return " [" + (Bridge.toArray(modifiers).join(",") || "") + "]";
                },
                MemberDefinition_ParseFormat_common: function (s, res) {
                    var r = new System.Text.RegularExpressions.Regex.ctor("^[ \\t]*([a-zA-Z]+)[ \\t]+(?:([a-zA-Z][\\w\\{\\}\\[\\]\\*\\,\\-\\.]*)[ \\t]+)?(\\w+)(?:[ \\t]*(\\(([^)]*)\\)))?(?:[ \\t]+\\[([^\\]]*)\\])?[ \\t]*$");
                    var r_result = r.match(s);
                    if (!r_result.getSuccess()) {
                        res.v = null;
                        return false;
                    }

                    res.v = new RobotRaconteurWeb.MemberDefinition.MemberDefiniton_ParseResults();
                    res.v.Modifiers.clear();
                    res.v.Parameters.clear();

                    var member_type_result = r_result.getGroups().get(1);
                    var data_type_result = r_result.getGroups().get(2);
                    var name_result = r_result.getGroups().get(3);
                    var params_present_result = r_result.getGroups().get(4);
                    var params_result = r_result.getGroups().get(5);
                    var modifiers_result = r_result.getGroups().get(6);

                    res.v.MemberType = member_type_result.getValue();
                    if (data_type_result.getSuccess()) {
                        res.v.DataType = data_type_result.getValue();
                    }
                    res.v.Name = name_result.getValue();

                    if (params_present_result.getSuccess()) {
                        res.v.Parameters = new (System.Collections.Generic.List$1(System.String)).ctor();
                        if (!RobotRaconteurWeb.MemberDefinition.MemberDefinition_ParseParameters(params_result.getValue(), Bridge.ref(res.v, "Parameters"))) {
                            return false;
                        }
                    }

                    if (modifiers_result.getSuccess()) {
                        res.v.Modifiers = new (System.Collections.Generic.List$1(System.String)).ctor();
                        if (!RobotRaconteurWeb.MemberDefinition.MemberDefinition_ParseModifiers(modifiers_result.getValue(), Bridge.ref(res.v, "Modifiers"))) {
                            return false;
                        }

                        if (res.v.Modifiers.Count === 0) {
                            return false;
                        }
                    }
                    return true;
                },
                MemberDefinition_FromStringFormat_common: function (parse_res, s1, member_types, def) {

                    if (!RobotRaconteurWeb.MemberDefinition.MemberDefinition_ParseFormat_common(s1, parse_res)) {
                        throw new RobotRaconteurWeb.RobotRaconteurParseException.ctor("Could not parse " + (member_types.getItem(0) || "") + " definition \"" + (s1 || "") + "\"");
                    }

                    var m = parse_res.v.MemberType;
                    if (member_types.Find(function (x) {
                        return Bridge.referenceEquals(x, m);
                    }) == null) {
                        throw new RobotRaconteurWeb.RobotRaconteurParseException.ctor("Format Error");
                    }

                    def.Reset();

                    def.Name = parse_res.v.Name;
                },
                MemberDefinition_FromStringFormat1: function (s1, member_types, def, type) {
                    var parse_res = { v : new RobotRaconteurWeb.MemberDefinition.MemberDefiniton_ParseResults() };
                    RobotRaconteurWeb.MemberDefinition.MemberDefinition_FromStringFormat_common(parse_res, s1, member_types, def);

                    if (parse_res.v.DataType == null || parse_res.v.Parameters.Count > 0) {
                        throw new RobotRaconteurWeb.RobotRaconteurParseException.ctor("Format error for " + (member_types.getItem(0) || "") + " definition \"" + (s1 || "") + "\"");
                    }
                    type.v = new RobotRaconteurWeb.TypeDefinition.$ctor1(def);
                    type.v.FromString(parse_res.v.DataType);
                    type.v.Rename("value");
                    type.v.QualifyTypeStringWithUsing();

                    if (parse_res.v.Modifiers != null) {
                        def.Modifiers = parse_res.v.Modifiers;
                    }
                },
                MemberDefinition_FromStringFormat1$1: function (s1, member_type, def, type) {
                    var member_types = new (System.Collections.Generic.List$1(System.String)).ctor();
                    member_types.add(member_type);
                    RobotRaconteurWeb.MemberDefinition.MemberDefinition_FromStringFormat1(s1, member_types, def, type);
                },
                MemberDefinition_ToStringFormat1: function (member_type, def, data_type) {
                    var t = { v : new RobotRaconteurWeb.TypeDefinition.ctor() };
                    data_type.CopyTo(t);
                    t.v.Rename(def.Name);
                    t.v.UnqualifyTypeStringWithUsing();

                    return (member_type || "") + " " + (t.v.toString() || "") + (RobotRaconteurWeb.MemberDefinition.MemberDefinition_ModifiersToString(def.Modifiers) || "");
                },
                MemberDefinition_ParamatersFromStrings: function (s, params_, def) {
                    var $t;

                    $t = Bridge.getEnumerator(s);
                    try {
                        while ($t.moveNext()) {
                            var s1 = $t.Current;
                            var tdef = new RobotRaconteurWeb.TypeDefinition.$ctor1(def);
                            tdef.FromString(s1);
                            tdef.QualifyTypeStringWithUsing();
                            params_.v.add(tdef);
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                },
                MemberDefinition_ParametersToString: function (params_) {
                    var $t;
                    var params2 = new (System.Collections.Generic.List$1(System.String)).ctor();
                    $t = Bridge.getEnumerator(params_);
                    try {
                        while ($t.moveNext()) {
                            var p = $t.Current;
                            var p2 = { v : new RobotRaconteurWeb.TypeDefinition.ctor() };
                            p.CopyTo(p2);
                            p2.v.UnqualifyTypeStringWithUsing();
                            params2.add(p2.v.toString());
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }

                    return Bridge.toArray(params2).join(", ");
                },
                MemberDefinition_FromStringFormat2: function (s1, member_type, def, return_type, params_) {
                    var member_types = new (System.Collections.Generic.List$1(System.String)).ctor();
                    member_types.add(member_type);

                    var parse_res = { v : new RobotRaconteurWeb.MemberDefinition.MemberDefiniton_ParseResults() };
                    RobotRaconteurWeb.MemberDefinition.MemberDefinition_FromStringFormat_common(parse_res, s1, member_types, def);

                    if (parse_res.v.DataType == null || parse_res.v.Parameters == null) {
                        throw new RobotRaconteurWeb.RobotRaconteurParseException.ctor("Format error for " + (member_types.getItem(0) || "") + " definition \"" + (s1 || "") + "\"");
                    }
                    return_type.v = new RobotRaconteurWeb.TypeDefinition.$ctor1(def);
                    return_type.v.FromString(parse_res.v.DataType);
                    return_type.v.Rename("");
                    return_type.v.QualifyTypeStringWithUsing();

                    RobotRaconteurWeb.MemberDefinition.MemberDefinition_ParamatersFromStrings(parse_res.v.Parameters, params_, def);

                    if (parse_res.v.Modifiers != null) {
                        def.Modifiers = parse_res.v.Modifiers;
                    }
                },
                MemberDefinition_ToStringFormat2: function (member_type, def, return_type, params_) {
                    var t = { v : new RobotRaconteurWeb.TypeDefinition.$ctor1(def) };
                    return_type.CopyTo(t);
                    t.v.Rename(def.Name);
                    t.v.UnqualifyTypeStringWithUsing();

                    return (member_type || "") + " " + (t.v.toString() || "") + "(" + (RobotRaconteurWeb.MemberDefinition.MemberDefinition_ParametersToString(params_) || "") + ")" + (RobotRaconteurWeb.MemberDefinition.MemberDefinition_ModifiersToString(def.Modifiers) || "");
                },
                MemberDefinition_FromStringFormat3: function (s1, member_type, def, params_) {
                    var member_types = new (System.Collections.Generic.List$1(System.String)).ctor();
                    member_types.add(member_type);

                    var parse_res = { v : new RobotRaconteurWeb.MemberDefinition.MemberDefiniton_ParseResults() };
                    RobotRaconteurWeb.MemberDefinition.MemberDefinition_FromStringFormat_common(parse_res, s1, member_types, def);

                    if (parse_res.v.DataType != null || parse_res.v.Parameters == null) {
                        throw new RobotRaconteurWeb.RobotRaconteurParseException.ctor("Format error for " + (member_types.getItem(0) || "") + " definition \"" + (s1 || "") + "\"");
                    }

                    RobotRaconteurWeb.MemberDefinition.MemberDefinition_ParamatersFromStrings(parse_res.v.Parameters, params_, def);

                    if (parse_res.v.Modifiers != null) {
                        def.Modifiers = parse_res.v.Modifiers;
                    }
                },
                MemberDefinition_ToStringFormat3: function (member_type, def, params_) {
                    return (member_type || "") + " " + (def.Name || "") + "(" + (RobotRaconteurWeb.MemberDefinition.MemberDefinition_ParametersToString(params_) || "") + ")" + (RobotRaconteurWeb.MemberDefinition.MemberDefinition_ModifiersToString(def.Modifiers) || "");
                },
                MemberDefinition_GetDirection: function (modifiers) {
                    if (modifiers == null) {
                        return RobotRaconteurWeb.MemberDefinition_Direction.both;
                    }
                    if (modifiers.contains("readonly")) {
                        return RobotRaconteurWeb.MemberDefinition_Direction.readonly_;
                    }

                    if (modifiers.contains("writeonly")) {
                        return RobotRaconteurWeb.MemberDefinition_Direction.writeonly;
                    }

                    return RobotRaconteurWeb.MemberDefinition_Direction.both;
                }
            }
        },
        fields: {
            Name: null,
            ServiceEntry: null,
            Modifiers: null
        },
        ctors: {
            ctor: function (ServiceEntry) {
                this.$initialize();
                this.ServiceEntry = ServiceEntry;
            }
        },
        methods: {
            Reset: function () {
                this.Name = "";
                this.Modifiers = null;
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.CDouble", {
        $kind: "struct",
        statics: {
            methods: {
                op_Equality: function (a, b) {
                    return (a.Real === b.Real) && (a.Imag === b.Imag);
                },
                op_Inequality: function (a, b) {
                    return !((a.Real === b.Real) && (a.Imag === b.Imag));
                },
                getDefaultValue: function () { return new RobotRaconteurWeb.CDouble(); }
            }
        },
        fields: {
            Real: 0,
            Imag: 0
        },
        ctors: {
            $ctor1: function (real, imag) {
                this.$initialize();
                this.Real = real;
                this.Imag = imag;
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            equals: function (obj) {
                if (obj == null) {
                    return false;
                }
                if (!(Bridge.is(obj, RobotRaconteurWeb.CDouble))) {
                    return false;
                }
                return RobotRaconteurWeb.CDouble.op_Equality(System.Nullable.getValue(Bridge.cast(Bridge.unbox(obj, RobotRaconteurWeb.CDouble), RobotRaconteurWeb.CDouble)), this);
            },
            getHashCode: function () {
                return Bridge.Int.clip32(this.Real % 10000000.0 + this.Imag % 10000000.0);
            },
            $clone: function (to) {
                var s = to || new RobotRaconteurWeb.CDouble();
                s.Real = this.Real;
                s.Imag = this.Imag;
                return s;
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.Endpoint", {
        fields: {
            m_LocalEndpoint: 0,
            m_RemoteEndpoint: 0,
            m_RemoteNodeName: null,
            m_RemoteNodeID: null,
            TransportConnection: null,
            transport: 0,
            LastMessageReceivedTime: null,
            MessageNumber: 0,
            MessageNumberLock: null,
            node: null
        },
        props: {
            LocalEndpoint: {
                get: function () {
                    return this.m_LocalEndpoint;
                }
            },
            RemoteEndpoint: {
                get: function () {
                    return this.m_RemoteEndpoint;
                }
            },
            RemoteNodeName: {
                get: function () {
                    return this.m_RemoteNodeName;
                }
            },
            RemoteNodeID: {
                get: function () {
                    return this.m_RemoteNodeID;
                }
            }
        },
        ctors: {
            init: function () {
                this.LastMessageReceivedTime = System.DateTime.getDefaultValue();
                this.m_LocalEndpoint = 0;
                this.m_RemoteEndpoint = 0;
                this.m_RemoteNodeName = "";
                this.m_RemoteNodeID = RobotRaconteurWeb.NodeID.Any;
                this.LastMessageReceivedTime = System.DateTime.getUtcNow();
                this.MessageNumber = 0;
                this.MessageNumberLock = { };
            },
            ctor: function (node) {
                this.$initialize();
                if (node == null) {
                    this.node = RobotRaconteurWeb.RobotRaconteurNode.s;
                } else {
                    this.node = node;
                }
            }
        },
        methods: {
            SendMessage: function (m, cancel) {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        if (m.header == null) {
                                            m.header = new RobotRaconteurWeb.MessageHeader();
                                        }

                                        if (m.entries.Count === 1 && m.entries.getItem(0).EntryType <= 500) {
                                            m.header.ReceiverNodeName = this.RemoteNodeName;
                                            m.header.SenderNodeName = this.node.NodeName;
                                        }
                                        m.header.SenderEndpoint = this.LocalEndpoint;
                                        m.header.ReceiverEndpoint = this.RemoteEndpoint;

                                        m.header.SenderNodeID = this.node.NodeID;
                                        m.header.ReceiverNodeID = this.RemoteNodeID;


                                        this.MessageNumberLock;
                                        {
                                            m.header.MessageID = this.MessageNumber;

                                            this.MessageNumber = ((this.MessageNumber === (65535)) ? 0 : ((this.MessageNumber + 1) | 0)) & 65535;
                                        }

                                        $task1 = this.node.SendMessage(m, cancel);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            CheckEndpointCapabilityMessage: function (m) {
                var capability = 0;
                var e;

                var ret = new RobotRaconteurWeb.Message();
                ret.header = new RobotRaconteurWeb.MessageHeader();
                ret.header.ReceiverNodeName = m.header.SenderNodeName;
                ret.header.SenderNodeName = this.node.NodeName;
                ret.header.ReceiverNodeID = m.header.SenderNodeID;
                ret.header.ReceiverEndpoint = m.header.SenderEndpoint;
                ret.header.SenderEndpoint = m.header.ReceiverEndpoint;
                ret.header.SenderNodeID = this.node.NodeID;


                try {

                    if (m.entries.Count === 0) {
                        throw new System.InvalidOperationException.ctor();
                    }

                    e = m.entries.getItem(0);

                    var eret = ret.AddEntry(RobotRaconteurWeb.MessageEntryType.EndpointCheckCapabilityRet, m.entries.getItem(0).MemberName);
                    eret.RequestID = e.RequestID;
                    eret.ServicePath = e.ServicePath;

                    if (e.EntryType !== RobotRaconteurWeb.MessageEntryType.EndpointCheckCapability) {
                        throw new System.InvalidOperationException.ctor();
                    }
                    var name = e.MemberName;
                    capability = this.EndpointCapability(name);
                    eret.AddElement$1("return", Bridge.box(capability, System.UInt32));
                } catch ($e1) {
                    $e1 = System.Exception.create($e1);



                }

                RobotRaconteurWeb.Extensions.Extensions.IgnoreResult(this.SendMessage(ret, Bridge.getDefaultValue(System.Threading.CancellationToken)));


            },
            EndpointCapability: function (name) {
                return 0;
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.ClientServiceListenerEventType", {
        $kind: "enum",
        statics: {
            fields: {
                ClientClosed: 1
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.ConstantDefinition", {
        statics: {
            methods: {
                ConstantDefinition_CheckScalar: function (t, val) {

                    switch (t) {
                        case RobotRaconteurWeb.DataTypes.double_t: 
                            var res1 = { };
                            return System.Double.tryParse(val, null, res1);
                        case RobotRaconteurWeb.DataTypes.single_t: 
                            var res2 = { };
                            return System.Single.tryParse(val, null, res2);
                        case RobotRaconteurWeb.DataTypes.int8_t: 
                            var res3 = { };
                            return System.SByte.tryParse(val, res3);
                        case RobotRaconteurWeb.DataTypes.uint8_t: 
                            var res4 = { };
                            return System.Byte.tryParse(val, res4);
                        case RobotRaconteurWeb.DataTypes.int16_t: 
                            var res5 = { };
                            return System.Int16.tryParse(val, res5);
                        case RobotRaconteurWeb.DataTypes.uint16_t: 
                            var res6 = { };
                            return System.UInt16.tryParse(val, res6);
                        case RobotRaconteurWeb.DataTypes.int32_t: 
                            var res7 = { };
                            return System.Int32.tryParse(val, res7);
                        case RobotRaconteurWeb.DataTypes.uint32_t: 
                            var res8 = { };
                            return System.UInt32.tryParse(val, res8);
                        case RobotRaconteurWeb.DataTypes.int64_t: 
                            var res9 = { };
                            return System.Int64.tryParse(val, res9);
                        case RobotRaconteurWeb.DataTypes.uint64_t: 
                            var res10 = { };
                            return System.UInt64.tryParse(val, res10);
                        default: 
                            return false;
                    }
                },
                ConstantDefinition_UnescapeString_Formatter: function (match) {
                    var i = match.getGroups().get(0).getValue();
                    if (Bridge.referenceEquals(i, "\\\"")) {
                        return "\"";
                    }
                    if (Bridge.referenceEquals(i, "\\\\")) {
                        return "\\";
                    }
                    if (Bridge.referenceEquals(i, "\\/")) {
                        return "/";
                    }
                    if (Bridge.referenceEquals(i, "\\b")) {
                        return "\b";
                    }
                    if (Bridge.referenceEquals(i, "\\f")) {
                        return "\f";
                    }
                    if (Bridge.referenceEquals(i, "\\n")) {
                        return "\n";
                    }
                    if (Bridge.referenceEquals(i, "\\r")) {
                        return "\r";
                    }
                    if (Bridge.referenceEquals(i, "\\t")) {
                        return "\t";
                    }

                    if (System.String.startsWith(i, "\\u")) {

                        var v3 = System.Array.init(((Bridge.Int.div(i.length, 3)) | 0), 0, System.Byte);
                        for (var j = 0; j < ((Bridge.Int.div(v3.length, 2)) | 0); j = (j + 1) | 0) {
                            var v = i.substr(((Bridge.Int.mul(j, 6) + 2) | 0), 2);
                            var v2 = i.substr(((Bridge.Int.mul(j, 6) + 4) | 0), 2);

                            v3[System.Array.index(Bridge.Int.mul(j, 2), v3)] = System.Convert.toNumberInBase(v, 16, 6);
                            v3[System.Array.index(((Bridge.Int.mul(j, 2) + 1) | 0), v3)] = System.Convert.toNumberInBase(v2, 16, 6);
                        }
                        return System.Text.Encoding.Unicode.GetString(v3);
                    }

                    throw new RobotRaconteurWeb.InternalErrorException("Internal error");
                },
                UnescapeString: function (in_) {
                    var r_string_expression = new System.Text.RegularExpressions.Regex.ctor("(\\\\\"|\\\\\\\\|\\\\/|\\\\b|\\\\f|\\\\n|\\\\r|\\\\t|(?:\\\\u[\\da-fA-F]{4})+)");
                    return r_string_expression.replace(in_, RobotRaconteurWeb.ConstantDefinition.ConstantDefinition_UnescapeString_Formatter);
                },
                ConstantDefinition_EscapeString_Formatter: function (match) {
                    var i = match.getGroups().get(0).getValue();

                    if (Bridge.referenceEquals(i, "\"")) {
                        return "\\\"";
                    }
                    if (Bridge.referenceEquals(i, "\\")) {
                        return "\\\\";
                    }
                    if (Bridge.referenceEquals(i, "/")) {
                        return "\\/";
                    }
                    if (Bridge.referenceEquals(i, "\b")) {
                        return "\\b";
                    }
                    if (Bridge.referenceEquals(i, "\f")) {
                        return "\\f";
                    }
                    if (Bridge.referenceEquals(i, "\n")) {
                        return "\\n";
                    }
                    if (Bridge.referenceEquals(i, "\r")) {
                        return "\\r";
                    }
                    if (Bridge.referenceEquals(i, "\t")) {
                        return "\\t";
                    }

                    var v = System.Text.Encoding.Unicode.GetBytes$2(i);
                    var v2 = new System.IO.StringWriter.ctor();
                    for (var j = 0; j < v.length; j = (j + 2) | 0) {
                        v2.Write$12("\\u{0:X02}{1:X02}", Bridge.box(v[System.Array.index(j, v)], System.Byte), Bridge.box(v[System.Array.index(((j + 1) | 0), v)], System.Byte));
                    }
                    return v2.toString();
                },
                EscapeString: function (in_) {
                    var r_replace = new System.Text.RegularExpressions.Regex.ctor("(\"|\\\\|\\/|[\\x00-\\x1F]|\\x7F|[\\x80-\\xFF]+)");
                    return r_replace.replace(in_, RobotRaconteurWeb.ConstantDefinition.ConstantDefinition_EscapeString_Formatter);
                }
            }
        },
        fields: {
            Name: null,
            Type: null,
            Value: null,
            service: null,
            service_entry: null
        },
        ctors: {
            ctor: function (service) {
                this.$initialize();
                this.service = service;
            },
            $ctor1: function (service_entry) {
                this.$initialize();
                this.service_entry = service_entry;
            }
        },
        methods: {
            toString: function () {
                return "constant " + (this.Type.toString() || "") + " " + (this.Name || "") + " " + (this.Value || "");
            },
            FromString: function (s) {
                this.Reset();

                var r = new System.Text.RegularExpressions.Regex.ctor("^[ \\t]*constant[ \\t]+((?:[a-zA-Z](?:\\w*[a-zA-Z0-9])?)(?:\\.[a-zA-Z](?:\\w*[a-zA-Z0-9])?)*(?:\\[[0-9\\,\\*\\-]*\\])?(?:\\{\\w{1,16}\\})?)[ \\t]+([a-zA-Z](?:\\w*[a-zA-Z0-9])?)[ \\t]+([^\\s](?:[ -~\\t]*[^\\s])?)[ \\t]*$");
                var r_match = r.match(s);
                if (!r_match.getSuccess()) {
                    throw new RobotRaconteurWeb.RobotRaconteurParseException.ctor("Invalid constant definition: " + (s.trim() || ""));
                }

                var type_str = r_match.getGroups().get(1).getValue();
                var def = new RobotRaconteurWeb.TypeDefinition.ctor();
                def.FromString(type_str);
                if (!this.VerifyTypeAndValue(def, r_match.getGroups().get(3).getValue())) {
                    throw new RobotRaconteurWeb.RobotRaconteurParseException.ctor("Invalid constant definition: " + (s.trim() || ""));
                }

                this.Type = def;
                this.Name = r_match.getGroups().get(2).getValue();
                this.Value = r_match.getGroups().get(3).getValue();
            },
            VerifyValue: function () {
                return this.VerifyTypeAndValue(this.Type, this.Value);
            },
            VerifyTypeAndValue: function (t, value) {
                var $t;
                if (t.ArrayType === RobotRaconteurWeb.DataTypes_ArrayTypes.multidimarray) {
                    return false;
                }
                if (RobotRaconteurWeb.DataTypeUtil.IsNumber(t.Type)) {
                    if (t.Type === RobotRaconteurWeb.DataTypes.cdouble_t || t.Type === RobotRaconteurWeb.DataTypes.csingle_t || t.Type === RobotRaconteurWeb.DataTypes.bool_t) {
                        return false;
                    }
                    if (t.ContainerType !== RobotRaconteurWeb.DataTypes_ContainerTypes.none) {
                        return false;
                    }
                    if (t.ArrayType === RobotRaconteurWeb.DataTypes_ArrayTypes.none) {
                        if (t.Type === RobotRaconteurWeb.DataTypes.double_t || t.Type === RobotRaconteurWeb.DataTypes.single_t) {
                            var r_scalar = new System.Text.RegularExpressions.Regex.ctor("^[ \\t]*[+\\-]?(?:(?:0|[1-9]\\d*)(?:\\.\\d*)?|:\\.\\d+)(?:[eE][+\\-]?\\d+)?[ \\t]*$");
                            if (!r_scalar.isMatch(value)) {
                                return false;
                            }
                        } else {
                            var r_scalar1 = new System.Text.RegularExpressions.Regex.ctor("^[ \\t]*[+\\-]?\\d+[ \\t]*$");
                            if (!r_scalar1.isMatch(value)) {
                                return false;
                            }
                        }
                        return RobotRaconteurWeb.ConstantDefinition.ConstantDefinition_CheckScalar(t.Type, value);
                    } else {
                        var r_array_match;
                        if (t.Type === RobotRaconteurWeb.DataTypes.double_t || t.Type === RobotRaconteurWeb.DataTypes.single_t) {
                            var r_array = new System.Text.RegularExpressions.Regex.ctor("^[ \\t]*\\{[ \\t]*((?:[+\\-]?(?:(?:0|[1-9]\\d*)(?:\\.\\d*)?|:\\.\\d+)(?:[eE][+\\-]?\\d+)?)(?:[ \\t]*,[ \\t]*(?:[+\\-]?(?:(?:0|[1-9]\\d*)(?:\\.\\d*)?|:\\.\\d+)(?:[eE][+\\-]?\\d+)?))*)?[ \\t]*}[ \\t]*$");
                            r_array_match = r_array.match(value);
                            if (!r_array_match.getSuccess()) {
                                return false;
                            }
                        } else {
                            var r_array1 = new System.Text.RegularExpressions.Regex.ctor("^[ \\t]*\\{[ \\t]*((?:[+\\-]?\\d+)(?:[ \\t]*,[ \\t]*(?:[+\\-]?\\d+))*)?[ \\t]*}[ \\t]*$");
                            r_array_match = r_array1.match(value);
                            if (!r_array_match.getSuccess()) {
                                return false;
                            }
                        }

                        if (!r_array_match.getGroups().get(1).getSuccess()) {
                            return true;
                        }



                        $t = Bridge.getEnumerator(System.String.split(r_array_match.getGroups().get(1).getValue(), System.Array.init([44], System.Char).map(function (i) {{ return String.fromCharCode(i); }})));
                        try {
                            while ($t.moveNext()) {
                                var e = $t.Current;
                                if (!RobotRaconteurWeb.ConstantDefinition.ConstantDefinition_CheckScalar(t.Type, e.trim())) {
                                    return false;
                                }
                            }
                        } finally {
                            if (Bridge.is($t, System.IDisposable)) {
                                $t.System$IDisposable$Dispose();
                            }
                        }
                        return true;
                    }
                } else {
                    if (t.ArrayType !== RobotRaconteurWeb.DataTypes_ArrayTypes.none) {
                        return false;
                    }
                    if (t.Type === RobotRaconteurWeb.DataTypes.string_t) {
                        var r_string = new System.Text.RegularExpressions.Regex.ctor("^[ \\t]*\"(?:(?:\\\\\"|\\\\\\\\|\\\\/|\\\\b|\\\\f|\\\\n|\\\\r|\\\\t|\\\\u[\\da-fA-F]{4})|[^\"\\\\])*\"[ \\t]*$");
                        if (!r_string.isMatch(value)) {
                            return false;
                        }
                        return true;
                    } else if (t.Type === RobotRaconteurWeb.DataTypes.namedtype_t) {
                        var r_struct = new System.Text.RegularExpressions.Regex.ctor("^[ \\t]*\\{[ \\t]*(?:[a-zA-Z](?:\\w*[a-zA-Z0-9])?[ \\t]*\\:[ \\t]*[a-zA-Z](?:\\w*[a-zA-Z0-9])?(?:[ \\t]*,[ \\t]*[a-zA-Z](?:\\w*[a-zA-Z0-9])?[ \\t]*\\:[ \\t]*[a-zA-Z](?:\\w*[a-zA-Z0-9])?)*[ \\t]*)?\\}[ \\t]*$");
                        if (!r_struct.isMatch(value)) {
                            return false;
                        }
                        return true;
                    }
                    return false;
                }
            },
            Reset: function () {
                this.Name = "";
                this.Type = null;
                this.Value = null;
            },
            ValueToScalar: function (T) {
                return Bridge.cast(Bridge.unbox(System.Convert.changeType(this.Value.trim(), T), T), T);
            },
            ValueToArray: function (T) {
                var value1 = System.String.trim(this.Value, [32, 9, 123, 125]).trim();
                if (value1.length === 0) {
                    return System.Array.init(0, function (){
                        return Bridge.getDefaultValue(T);
                    }, T);
                }

                return System.Linq.Enumerable.from(System.String.split(value1, [44].map(function (i) {{ return String.fromCharCode(i); }})), System.String).select(function (x) {
                        return Bridge.cast(Bridge.unbox(System.Convert.changeType(x.trim(), T), T), T);
                    }).ToArray(T);
            },
            ValueToString: function () {
                if (RobotRaconteurWeb.TypeDefinition.op_Equality(this.Type, null)) {
                    throw new System.InvalidOperationException.$ctor1("Invalid operation");
                }
                if (this.Type.Type !== RobotRaconteurWeb.DataTypes.string_t) {
                    throw new System.InvalidOperationException.$ctor1("Invalid operation");
                }

                var r_string = new System.Text.RegularExpressions.Regex.ctor("^[ \\t]*\"((?:(?:\\\\\"|\\\\\\\\|\\\\/|\\\\b|\\\\f|\\\\n|\\\\r|\\\\t|\\\\u[\\da-fA-F]{4})|(?:(?![\"\\\\])[ -~]))*)\"[ \\t]*$");
                var r_string_match = r_string.match(this.Value);
                if (!r_string_match.getSuccess()) {
                    throw new RobotRaconteurWeb.RobotRaconteurParseException.ctor("Invalid string constant format");
                }

                var value2 = r_string_match.getGroups().get(1).getValue();
                return RobotRaconteurWeb.ConstantDefinition.UnescapeString(value2);
            },
            ValueToStructFields: function () {
                var $t;
                var o = new (System.Collections.Generic.List$1(RobotRaconteurWeb.ConstantDefinition_StructField)).ctor();
                var value1 = System.String.trim(this.Value, System.Array.init([32, 9, 123, 125], System.Char)).trim();
                if (value1.length === 0) {
                    return o;
                }

                var r = new System.Text.RegularExpressions.Regex.ctor("[ \\t]*([a-zA-Z](?:\\w*[a-zA-Z0-9])?)[ \\t]*\\:[ \\t]*([a-zA-Z](?:\\w*[a-zA-Z0-9])?)[ \\t]*");
                var s = System.String.split(value1, System.Array.init([44], System.Char).map(function (i) {{ return String.fromCharCode(i); }}));
                $t = Bridge.getEnumerator(s);
                try {
                    while ($t.moveNext()) {
                        var e = $t.Current;
                        var r_match = r.match(e);
                        if (!r_match.getSuccess()) {
                            throw new RobotRaconteurWeb.RobotRaconteurParseException.ctor("Invalid struct constant format");
                        }
                        var f = new RobotRaconteurWeb.ConstantDefinition_StructField();
                        f.Name = r_match.getGroups().get(1).getValue();
                        f.ConstantRefName = r_match.getGroups().get(2).getValue();
                        o.add(f);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
                return o;
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.ConstantDefinition_StructField", {
        fields: {
            Name: null,
            ConstantRefName: null
        }
    });

    Bridge.define("RobotRaconteurWeb.CSingle", {
        $kind: "struct",
        statics: {
            methods: {
                op_Equality: function (a, b) {
                    return (a.Real === b.Real) && (a.Imag === b.Imag);
                },
                op_Inequality: function (a, b) {
                    return !((a.Real === b.Real) && (a.Imag === b.Imag));
                },
                getDefaultValue: function () { return new RobotRaconteurWeb.CSingle(); }
            }
        },
        fields: {
            Real: 0,
            Imag: 0
        },
        ctors: {
            $ctor1: function (real, imag) {
                this.$initialize();
                this.Real = real;
                this.Imag = imag;
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            equals: function (obj) {
                if (obj == null) {
                    return false;
                }
                if (!(Bridge.is(obj, RobotRaconteurWeb.CSingle))) {
                    return false;
                }
                return RobotRaconteurWeb.CSingle.op_Equality(System.Nullable.getValue(Bridge.cast(Bridge.unbox(obj, RobotRaconteurWeb.CSingle), RobotRaconteurWeb.CSingle)), this);
            },
            getHashCode: function () {
                return Bridge.Int.clip32(this.Real % 10000000.0 + this.Imag % 10000000.0);
            },
            $clone: function (to) {
                var s = to || new RobotRaconteurWeb.CSingle();
                s.Real = this.Real;
                s.Imag = this.Imag;
                return s;
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.DataTypes", {
        $kind: "enum",
        statics: {
            fields: {
                void_t: 0,
                double_t: 1,
                single_t: 2,
                int8_t: 3,
                uint8_t: 4,
                int16_t: 5,
                uint16_t: 6,
                int32_t: 7,
                uint32_t: 8,
                int64_t: 9,
                uint64_t: 10,
                string_t: 11,
                cdouble_t: 12,
                csingle_t: 13,
                bool_t: 14,
                structure_t: 101,
                vector_t: 102,
                dictionary_t: 103,
                object_t: 104,
                varvalue_t: 105,
                varobject_t: 106,
                list_t: 108,
                pod_t: 109,
                pod_array_t: 110,
                pod_multidimarray_t: 111,
                enum_t: 112,
                namedtype_t: 113,
                namedarray_t: 114,
                namedarray_array_t: 115,
                namedarray_multidimarray_t: 116,
                multidimarray_t: 117
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.DataTypes_ArrayTypes", {
        $kind: "enum",
        statics: {
            fields: {
                none: 0,
                array: 1,
                multidimarray: 2
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.DataTypes_ContainerTypes", {
        $kind: "enum",
        statics: {
            fields: {
                none: 0,
                list: 1,
                map_int32: 2,
                map_string: 3,
                generator: 4
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.DataTypeUtil", {
        statics: {
            methods: {
                size: function (type) {
                    switch (type) {
                        case RobotRaconteurWeb.DataTypes.double_t: 
                            return 8;
                        case RobotRaconteurWeb.DataTypes.single_t: 
                            return 4;
                        case RobotRaconteurWeb.DataTypes.int8_t: 
                        case RobotRaconteurWeb.DataTypes.uint8_t: 
                            return 1;
                        case RobotRaconteurWeb.DataTypes.int16_t: 
                        case RobotRaconteurWeb.DataTypes.uint16_t: 
                            return 2;
                        case RobotRaconteurWeb.DataTypes.int32_t: 
                        case RobotRaconteurWeb.DataTypes.uint32_t: 
                            return 4;
                        case RobotRaconteurWeb.DataTypes.int64_t: 
                        case RobotRaconteurWeb.DataTypes.uint64_t: 
                            return 8;
                        case RobotRaconteurWeb.DataTypes.string_t: 
                            return 1;
                        case RobotRaconteurWeb.DataTypes.cdouble_t: 
                            return 16;
                        case RobotRaconteurWeb.DataTypes.csingle_t: 
                            return 8;
                        case RobotRaconteurWeb.DataTypes.bool_t: 
                            return 1;
                        default: 
                            throw new RobotRaconteurWeb.DataTypeException("Invalid data type");
                    }
                },
                TypeIDFromString: function (stype) {
                    switch (stype) {
                        case "null": 
                            return RobotRaconteurWeb.DataTypes.void_t;
                        case "System.Double": 
                            return RobotRaconteurWeb.DataTypes.double_t;
                        case "System.Single": 
                            return RobotRaconteurWeb.DataTypes.single_t;
                        case "System.SByte": 
                            return RobotRaconteurWeb.DataTypes.int8_t;
                        case "System.Byte": 
                            return RobotRaconteurWeb.DataTypes.uint8_t;
                        case "System.Int16": 
                            return RobotRaconteurWeb.DataTypes.int16_t;
                        case "System.UInt16": 
                            return RobotRaconteurWeb.DataTypes.uint16_t;
                        case "System.Int32": 
                            return RobotRaconteurWeb.DataTypes.int32_t;
                        case "System.UInt32": 
                            return RobotRaconteurWeb.DataTypes.uint32_t;
                        case "System.Int64": 
                            return RobotRaconteurWeb.DataTypes.int64_t;
                        case "System.UInt64": 
                            return RobotRaconteurWeb.DataTypes.uint64_t;
                        case "System.String": 
                            return RobotRaconteurWeb.DataTypes.string_t;
                        case "System.Boolean": 
                            return RobotRaconteurWeb.DataTypes.bool_t;
                        case "RobotRaconteurWeb.CDouble": 
                            return RobotRaconteurWeb.DataTypes.cdouble_t;
                        case "RobotRaconteurWeb.CSingle": 
                            return RobotRaconteurWeb.DataTypes.csingle_t;
                        case "RobotRaconteurWeb.MessageElementStructure": 
                            return RobotRaconteurWeb.DataTypes.structure_t;
                        case "RobotRaconteurWeb.MessageElementMap<int>": 
                            return RobotRaconteurWeb.DataTypes.vector_t;
                        case "RobotRaconteurWeb.MessageElementMap<string>": 
                            return RobotRaconteurWeb.DataTypes.dictionary_t;
                        case "RobotRaconteurWeb.MessageElementMultiDimArray": 
                            return RobotRaconteurWeb.DataTypes.multidimarray_t;
                        case "RobotRaconteurWeb.MessageElementList": 
                            return RobotRaconteurWeb.DataTypes.list_t;
                        case "RobotRaconteurWeb.MessageElementPod": 
                            return RobotRaconteurWeb.DataTypes.pod_t;
                        case "RobotRaconteurWeb.MessageElementPodArray": 
                            return RobotRaconteurWeb.DataTypes.pod_array_t;
                        case "RobotRaconteurWeb.MessageElementPodMultiDimArray": 
                            return RobotRaconteurWeb.DataTypes.pod_multidimarray_t;
                        case "RobotRaconteurWeb.MessageElementNamedArray": 
                            return RobotRaconteurWeb.DataTypes.namedarray_array_t;
                        case "RobotRaconteurWeb.MessageElementNamedMultiDimArray": 
                            return RobotRaconteurWeb.DataTypes.namedarray_multidimarray_t;
                        case "System.Object": 
                            return RobotRaconteurWeb.DataTypes.varvalue_t;
                    }



                    throw new RobotRaconteurWeb.DataTypeException("Unknown data type");
                },
                TypeIDFromString_known: function (stype) {
                    switch (stype) {
                        case "null": 
                        case "System.Double": 
                        case "System.Single": 
                        case "System.SByte": 
                        case "System.Byte": 
                        case "System.Int16": 
                        case "System.UInt16": 
                        case "System.Int32": 
                        case "System.UInt32": 
                        case "System.Int64": 
                        case "System.UInt64": 
                        case "System.String": 
                        case "System.Boolean": 
                        case "RobotRaconteurWeb.CDouble": 
                        case "RobotRaconteurWeb.CSingle": 
                        case "RobotRaconteurWeb.MessageElementStructure": 
                        case "RobotRaconteurWeb.MessageElementIndexedSet<int>": 
                        case "RobotRaconteurWeb.MessageElementIndexedSet<string>": 
                        case "RobotRaconteurWeb.MessageElementMultiDimArray": 
                        case "System.Object": 
                            return true;
                    }



                    return false;
                },
                IsNumber: function (t) {
                    switch (t) {
                        case RobotRaconteurWeb.DataTypes.double_t: 
                        case RobotRaconteurWeb.DataTypes.single_t: 
                        case RobotRaconteurWeb.DataTypes.int8_t: 
                        case RobotRaconteurWeb.DataTypes.uint8_t: 
                        case RobotRaconteurWeb.DataTypes.int16_t: 
                        case RobotRaconteurWeb.DataTypes.uint16_t: 
                        case RobotRaconteurWeb.DataTypes.int32_t: 
                        case RobotRaconteurWeb.DataTypes.uint32_t: 
                        case RobotRaconteurWeb.DataTypes.int64_t: 
                        case RobotRaconteurWeb.DataTypes.uint64_t: 
                        case RobotRaconteurWeb.DataTypes.cdouble_t: 
                        case RobotRaconteurWeb.DataTypes.csingle_t: 
                        case RobotRaconteurWeb.DataTypes.bool_t: 
                            return true;
                        default: 
                            return false;
                    }
                },
                ArrayFromDataType: function (t, length) {
                    switch (t) {
                        case RobotRaconteurWeb.DataTypes.double_t: 
                            return System.Array.init(length, 0, System.Double);
                        case RobotRaconteurWeb.DataTypes.single_t: 
                            return System.Array.init(length, 0, System.Single);
                        case RobotRaconteurWeb.DataTypes.int8_t: 
                            return System.Array.init(length, 0, System.SByte);
                        case RobotRaconteurWeb.DataTypes.uint8_t: 
                            return System.Array.init(length, 0, System.Byte);
                        case RobotRaconteurWeb.DataTypes.int16_t: 
                            return System.Array.init(length, 0, System.Int16);
                        case RobotRaconteurWeb.DataTypes.uint16_t: 
                            return System.Array.init(length, 0, System.UInt16);
                        case RobotRaconteurWeb.DataTypes.int32_t: 
                            return System.Array.init(length, 0, System.Int32);
                        case RobotRaconteurWeb.DataTypes.uint32_t: 
                            return System.Array.init(length, 0, System.UInt32);
                        case RobotRaconteurWeb.DataTypes.int64_t: 
                            return System.Array.init(length, System.Int64(0), System.Int64);
                        case RobotRaconteurWeb.DataTypes.uint64_t: 
                            return System.Array.init(length, System.UInt64(0), System.UInt64);
                        case RobotRaconteurWeb.DataTypes.string_t: 
                            return null;
                        case RobotRaconteurWeb.DataTypes.cdouble_t: 
                            return System.Array.init(length, function (){
                                return new RobotRaconteurWeb.CDouble();
                            }, RobotRaconteurWeb.CDouble);
                        case RobotRaconteurWeb.DataTypes.csingle_t: 
                            return System.Array.init(length, function (){
                                return new RobotRaconteurWeb.CSingle();
                            }, RobotRaconteurWeb.CSingle);
                        case RobotRaconteurWeb.DataTypes.bool_t: 
                            return System.Array.init(length, false, System.Boolean);
                        case RobotRaconteurWeb.DataTypes.structure_t: 
                            return null;
                    }

                    throw new RobotRaconteurWeb.DataTypeException("Could not create array for data type");
                },
                ArrayFromScalar: function (inv) {

                    if (Bridge.is(inv, Array)) {
                        return inv;
                    }

                    var stype = Bridge.getTypeName(Bridge.getType(inv));
                    switch (stype) {
                        case "System.Double": 
                            return System.Array.init([System.Nullable.getValue(Bridge.cast(Bridge.unbox(inv, System.Double), System.Double))], System.Double);
                        case "System.Single": 
                            return System.Array.init([System.Nullable.getValue(Bridge.cast(Bridge.unbox(inv, System.Single), System.Single))], System.Single);
                        case "System.SByte": 
                            return System.Array.init([System.Nullable.getValue(Bridge.cast(Bridge.unbox(inv, System.SByte), System.SByte))], System.SByte);
                        case "System.Byte": 
                            return System.Array.init([System.Nullable.getValue(Bridge.cast(Bridge.unbox(inv, System.Byte), System.Byte))], System.Byte);
                        case "System.Int16": 
                            return System.Array.init([System.Nullable.getValue(Bridge.cast(Bridge.unbox(inv, System.Int16), System.Int16))], System.Int16);
                        case "System.UInt16": 
                            return System.Array.init([System.Nullable.getValue(Bridge.cast(Bridge.unbox(inv, System.UInt16), System.UInt16))], System.UInt16);
                        case "System.Int32": 
                            return System.Array.init([System.Nullable.getValue(Bridge.cast(Bridge.unbox(inv, System.Int32), System.Int32))], System.Int32);
                        case "System.UInt32": 
                            return System.Array.init([System.Nullable.getValue(Bridge.cast(Bridge.unbox(inv, System.UInt32), System.UInt32))], System.UInt32);
                        case "System.Int64": 
                            return System.Array.init([System.Nullable.getValue(Bridge.cast(Bridge.unbox(inv, System.Int64), System.Int64))], System.Int64);
                        case "System.UInt64": 
                            return System.Array.init([System.Nullable.getValue(Bridge.cast(Bridge.unbox(inv, System.UInt64), System.UInt64))], System.UInt64);
                        case "RobotRaconteurWeb.CDouble": 
                            return System.Array.init([System.Nullable.getValue(Bridge.cast(Bridge.unbox(inv, RobotRaconteurWeb.CDouble), RobotRaconteurWeb.CDouble))], RobotRaconteurWeb.CDouble);
                        case "RobotRaconteurWeb.CSingle": 
                            return System.Array.init([System.Nullable.getValue(Bridge.cast(Bridge.unbox(inv, RobotRaconteurWeb.CSingle), RobotRaconteurWeb.CSingle))], RobotRaconteurWeb.CSingle);
                        case "System.Boolean": 
                            return System.Array.init([System.Nullable.getValue(Bridge.cast(Bridge.unbox(inv, System.Boolean), System.Boolean))], System.Boolean);
                    }

                    throw new RobotRaconteurWeb.DataTypeException("Could not create array for data");
                },
                TypeIDFromType: function (stype) {
                    switch (System.Type.getTypeCode(stype)) {
                        case System.TypeCode.Double: 
                            return RobotRaconteurWeb.DataTypes.double_t;
                        case System.TypeCode.Single: 
                            return RobotRaconteurWeb.DataTypes.single_t;
                        case System.TypeCode.SByte: 
                            return RobotRaconteurWeb.DataTypes.int8_t;
                        case System.TypeCode.Byte: 
                            return RobotRaconteurWeb.DataTypes.uint8_t;
                        case System.TypeCode.Int16: 
                            return RobotRaconteurWeb.DataTypes.int16_t;
                        case System.TypeCode.UInt16: 
                            return RobotRaconteurWeb.DataTypes.uint16_t;
                        case System.TypeCode.Int32: 
                            return RobotRaconteurWeb.DataTypes.int32_t;
                        case System.TypeCode.UInt32: 
                            return RobotRaconteurWeb.DataTypes.uint32_t;
                        case System.TypeCode.Int64: 
                            return RobotRaconteurWeb.DataTypes.int64_t;
                        case System.TypeCode.UInt64: 
                            return RobotRaconteurWeb.DataTypes.uint64_t;
                        case System.TypeCode.String: 
                            return RobotRaconteurWeb.DataTypes.string_t;
                        case System.TypeCode.Boolean: 
                            return RobotRaconteurWeb.DataTypes.bool_t;
                        case System.TypeCode.Object: 
                            {
                                if (Bridge.referenceEquals(stype, RobotRaconteurWeb.CDouble)) {
                                    return RobotRaconteurWeb.DataTypes.cdouble_t;
                                }
                                if (Bridge.referenceEquals(stype, RobotRaconteurWeb.CSingle)) {
                                    return RobotRaconteurWeb.DataTypes.csingle_t;
                                }
                                return RobotRaconteurWeb.DataTypes.varvalue_t;
                            }
                        default: 
                            throw new RobotRaconteurWeb.DataTypeException("Unknown data type");
                    }

                },
                VerifyArrayLength: function (T, a, len, varlength) {
                    if (a == null) {
                        throw new System.NullReferenceException.ctor();
                    }
                    if (len !== 0) {
                        if (varlength && a.length > len) {
                            throw new RobotRaconteurWeb.DataTypeException("Array dimension mismatch");
                        }
                        if (!varlength && a.length !== len) {
                            throw new RobotRaconteurWeb.DataTypeException("Array dimension mismatch");
                        }
                    }
                    return a;
                },
                VerifyArrayLength$1: function (a, n_elems, len) {
                    if (a.Dims.length !== len.length) {
                        throw new RobotRaconteurWeb.DataTypeException("Array dimension mismatch");
                    }

                    for (var i = 0; i < len.length; i = (i + 1) | 0) {
                        if (a.Dims[System.Array.index(i, a.Dims)] !== len[System.Array.index(i, len)]) {
                            throw new RobotRaconteurWeb.DataTypeException("Array dimension mismatch");
                        }
                    }
                    return a;
                },
                VerifyArrayLength$3: function (a, n_elems, len) {
                    if (a.Dims.length !== len.length) {
                        throw new RobotRaconteurWeb.DataTypeException("Array dimension mismatch");
                    }

                    for (var i = 0; i < len.length; i = (i + 1) | 0) {
                        if (a.Dims[System.Array.index(i, a.Dims)] !== len[System.Array.index(i, len)]) {
                            throw new RobotRaconteurWeb.DataTypeException("Array dimension mismatch");
                        }
                    }
                    return a;
                },
                VerifyArrayLength$2: function (a, n_elems, len) {
                    if (a.Dims.length !== len.length) {
                        throw new RobotRaconteurWeb.DataTypeException("Array dimension mismatch");
                    }

                    for (var i = 0; i < len.length; i = (i + 1) | 0) {
                        if (a.Dims[System.Array.index(i, a.Dims)] !== len[System.Array.index(i, len)]) {
                            throw new RobotRaconteurWeb.DataTypeException("Array dimension mismatch");
                        }
                    }
                    return a;
                },
                VerifyArrayLength$8: function (T, a, len, varlength) {
                    var $t;
                    if (a == null) {
                        return a;
                    }
                    $t = Bridge.getEnumerator(a);
                    try {
                        while ($t.moveNext()) {
                            var aa = $t.Current;
                            RobotRaconteurWeb.DataTypeUtil.VerifyArrayLength(T, aa, len, varlength);
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }

                    return a;
                },
                VerifyArrayLength$4: function (K, T, a, len, varlength) {
                    var $t;
                    if (a == null) {
                        return a;
                    }
                    $t = Bridge.getEnumerator(a.Values);
                    try {
                        while ($t.moveNext()) {
                            var aa = $t.Current;
                            RobotRaconteurWeb.DataTypeUtil.VerifyArrayLength(T, aa, len, varlength);
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }

                    return a;
                },
                VerifyArrayLength$9: function (a, n_elems, len) {
                    var $t;
                    if (a == null) {
                        return a;
                    }
                    $t = Bridge.getEnumerator(a);
                    try {
                        while ($t.moveNext()) {
                            var aa = $t.Current;
                            RobotRaconteurWeb.DataTypeUtil.VerifyArrayLength$1(aa, n_elems, len);
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }

                    return a;
                },
                VerifyArrayLength$5: function (K, a, n_elems, len) {
                    var $t;
                    if (a == null) {
                        return a;
                    }
                    $t = Bridge.getEnumerator(a.Values);
                    try {
                        while ($t.moveNext()) {
                            var aa = $t.Current;
                            RobotRaconteurWeb.DataTypeUtil.VerifyArrayLength$1(aa, n_elems, len);
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }

                    return a;
                },
                VerifyArrayLength$11: function (a, n_elems, len) {
                    var $t;
                    if (a == null) {
                        return a;
                    }
                    $t = Bridge.getEnumerator(a);
                    try {
                        while ($t.moveNext()) {
                            var aa = $t.Current;
                            RobotRaconteurWeb.DataTypeUtil.VerifyArrayLength$3(aa, n_elems, len);
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }

                    return a;
                },
                VerifyArrayLength$7: function (K, a, n_elems, len) {
                    var $t;
                    if (a == null) {
                        return a;
                    }
                    $t = Bridge.getEnumerator(a.Values);
                    try {
                        while ($t.moveNext()) {
                            var aa = $t.Current;
                            RobotRaconteurWeb.DataTypeUtil.VerifyArrayLength$3(aa, n_elems, len);
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }

                    return a;
                },
                VerifyArrayLength$10: function (a, n_elems, len) {
                    var $t;
                    if (a == null) {
                        return a;
                    }
                    $t = Bridge.getEnumerator(a);
                    try {
                        while ($t.moveNext()) {
                            var aa = $t.Current;
                            RobotRaconteurWeb.DataTypeUtil.VerifyArrayLength$2(aa, n_elems, len);
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }

                    return a;
                },
                VerifyArrayLength$6: function (K, a, n_elems, len) {
                    var $t;
                    if (a == null) {
                        return a;
                    }
                    $t = Bridge.getEnumerator(a.Values);
                    try {
                        while ($t.moveNext()) {
                            var aa = $t.Current;
                            RobotRaconteurWeb.DataTypeUtil.VerifyArrayLength$2(aa, n_elems, len);
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }

                    return a;
                }
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.detail.ServiceDefinitionUtil", {
        statics: {
            fields: {
                RR_NAME_REGEX: null,
                RR_TYPE_REGEX: null,
                RR_QUALIFIED_TYPE_REGEX: null,
                RR_TYPE2_REGEX: null,
                RR_INT_REGEX: null,
                RR_FLOAT_REGEX: null
            },
            ctors: {
                init: function () {
                    this.RR_NAME_REGEX = "[a-zA-Z](?:\\w*[a-zA-Z0-9])?";
                    this.RR_TYPE_REGEX = "(?:[a-zA-Z](?:\\w*[a-zA-Z0-9])?)(?:\\.[a-zA-Z](?:\\w*[a-zA-Z0-9])?)*";
                    this.RR_QUALIFIED_TYPE_REGEX = "(?:[a-zA-Z](?:\\w*[a-zA-Z0-9])?)(?:\\.[a-zA-Z](?:\\w*[a-zA-Z0-9])?)+";
                    this.RR_TYPE2_REGEX = "(?:[a-zA-Z](?:\\w*[a-zA-Z0-9])?)(?:\\.[a-zA-Z](?:\\w*[a-zA-Z0-9])?)*(?:\\[[0-9\\,\\*\\-]*\\])?(?:\\{\\w{1,16}\\})?";
                    this.RR_INT_REGEX = "[+\\-]?\\d+";
                    this.RR_FLOAT_REGEX = "[+\\-]?(?:(?:0|[1-9]\\d*)(?:\\.\\d*)?|:\\.\\d+)(?:[eE][+\\-]?\\d+)?";
                }
            },
            methods: {
                ServiceDefinition_FromStringFormat_common: function (r, l, keyword, vec) {
                    var r_match = r.match(l);
                    if (!r_match.getSuccess()) {
                        throw new RobotRaconteurWeb.RobotRaconteurParseException.ctor("Format error for " + (keyword || "") + " definition \"" + (l || "") + "\"");
                    }

                    if (!Bridge.referenceEquals(r_match.getGroups().get(1).getValue(), keyword)) {
                        throw new RobotRaconteurWeb.RobotRaconteurParseException.ctor("Format error for " + (keyword || "") + " definition \"" + (l || "") + "\"");
                    }
                    vec.v.add(r_match.getGroups().get(2).getValue());
                },
                ServiceDefinition_FromStringImportFormat: function (l, keyword, vec) {
                    var r = new System.Text.RegularExpressions.Regex.ctor("^[ \\t]*(\\w{1,16})[ \\t]+((?:[a-zA-Z](?:\\w*[a-zA-Z0-9])?)(?:\\.[a-zA-Z](?:\\w*[a-zA-Z0-9])?)*)[ \\t]*$");
                    RobotRaconteurWeb.detail.ServiceDefinitionUtil.ServiceDefinition_FromStringFormat_common(r, l, keyword, vec);
                },
                ServiceDefinition_FromStringTypeFormat: function (l, keyword, vec) {
                    var r = new System.Text.RegularExpressions.Regex.ctor("^[ \\t]*(\\w{1,16})[ \\t]+((?:[a-zA-Z](?:\\w*[a-zA-Z0-9])?)(?:\\.[a-zA-Z](?:\\w*[a-zA-Z0-9])?)*)[ \\t]*$");
                    RobotRaconteurWeb.detail.ServiceDefinitionUtil.ServiceDefinition_FromStringFormat_common(r, l, keyword, vec);
                },
                ServiceDefinition_GetLine: function (is_, l, pos) {
                    var r_comment = new System.Text.RegularExpressions.Regex.ctor("^[ \\t]*#[ -~\\t]*$");
                    var r_empty = new System.Text.RegularExpressions.Regex.ctor("^[ \\t]*$");
                    var r_valid = new System.Text.RegularExpressions.Regex.ctor("^[ -~\\t]*$");

                    var l2;

                    while (true) {
                        l2 = is_.ReadLine();
                        if (l2 == null) {
                            return false;
                        }
                        pos.v = (pos.v + 1) >>> 0;

                        l2 = System.String.trimEnd(l2, System.Array.init([13], System.Char));

                        if (System.Linq.Enumerable.from(l2, System.Char).contains(0)) {
                            throw new RobotRaconteurWeb.RobotRaconteurParseException.ctor("Service definition must not contain null characters");
                        }

                        if (r_comment.isMatch(l2)) {
                            continue;
                        }

                        if (r_empty.isMatch(l2)) {
                            continue;
                        }

                        while (System.String.endsWith(l2, "\\")) {
                            if (l2.length <= 0) {
                                throw new RobotRaconteurWeb.InternalErrorException("Internal parsing error");
                            }
                            l2 = (l2.substr(0, ((l2.length - 1) | 0)) || "") + String.fromCharCode(32);
                            var l3 = is_.ReadLine();
                            if (l3 == null) {
                                throw new RobotRaconteurWeb.RobotRaconteurParseException.ctor("Service definition line continuation must not be on last line");
                            }
                            l3 = System.String.trimEnd(l3, System.Array.init([13], System.Char));

                            if (System.Linq.Enumerable.from(l3, System.Char).contains(0)) {
                                throw new RobotRaconteurWeb.RobotRaconteurParseException.ctor("Service definition must not contain null characters");
                            }
                            l2 = (l2 || "") + (l3 || "");
                        }

                        if (!r_valid.isMatch(l2)) {
                            throw new RobotRaconteurWeb.RobotRaconteurParseException.ctor("Service definition must contain only ASCII characters");
                        }

                        l.v = l2;
                        return true;
                    }
                },
                ServiceDefinition_FindBlock: function (current_line, is_, os, pos, init_pos) {
                    var r_start = new System.Text.RegularExpressions.Regex.ctor("^[ \\t]*(\\w{1,16})[ \\t]+([a-zA-Z](?:\\w*[a-zA-Z0-9])?)[ \\t]*$");
                    var r_end = new System.Text.RegularExpressions.Regex.ctor("^[ \\t]*end(?:[ \\t]+(\\w{1,16}))?[ \\t]*$");

                    init_pos.v = pos.v;

                    var r_start_match = r_start.match(current_line);
                    if (!r_start_match.getSuccess()) {
                        throw new RobotRaconteurWeb.RobotRaconteurParseException.$ctor1("Parse error near: " + (current_line || ""), (pos.v | 0));
                    }

                    os.WriteLine$11(current_line);

                    var block_type = r_start_match.getGroups().get(1).getValue();
                    var l = { v : null };

                    var last_pos = pos.v;

                    while (RobotRaconteurWeb.detail.ServiceDefinitionUtil.ServiceDefinition_GetLine(is_, l, pos)) {
                        last_pos = (last_pos + 1) >>> 0;
                        for (; last_pos < pos.v; last_pos = (last_pos + 1) >>> 0) {
                            os.WriteLine$11("");
                        }

                        os.WriteLine$11(l.v);

                        var r_end_match = r_end.match(l.v);
                        if (r_end_match.getSuccess()) {
                            if (r_end_match.getGroups().get(1).getSuccess()) {
                                if (!Bridge.referenceEquals(r_end_match.getGroups().get(1).getValue(), block_type)) {
                                    throw new RobotRaconteurWeb.RobotRaconteurParseException.$ctor1("Block end does not match start: " + (l.v || ""), (pos.v | 0));
                                }
                            }

                            return;
                        }
                    }
                    throw new RobotRaconteurWeb.RobotRaconteurParseException.$ctor1("Block end not found: " + (current_line || ""), (init_pos.v | 0));
                }
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.DynamicServiceFactory", {
        $kind: "interface"
    });

    Bridge.define("RobotRaconteurWeb.NamedTypeDefinition", {
        fields: {
            Name: null
        }
    });

    Bridge.define("RobotRaconteurWeb.EnumDefinitionValue", {
        fields: {
            Name: null,
            Value: 0,
            ImplicitValue: false,
            HexValue: false
        }
    });

    Bridge.definei("RobotRaconteurWeb.Generator2$1", function (ReturnType) { return {
        $kind: "interface"
    }; });

    Bridge.define("RobotRaconteurWeb.Extensions.Buffer", {
        statics: {
            methods: {
                BlockCopy$2: function (recbuf, v1, newbuf, v2, v3) {
                    System.Array.copy(recbuf, v1, newbuf, v2, v3);
                },
                BlockCopy: function (a, v, membuf, position, bl) {
                    var b = new System.IO.BinaryWriter.$ctor1(new System.IO.MemoryStream.$ctor3(membuf, position, bl));
                    var t = System.Type.getTypeCode((Bridge.getType(a).$elementType || null));
                    switch (t) {
                        case System.TypeCode.Double: 
                            {
                                var a1 = Bridge.cast(a, System.Array.type(System.Double));
                                for (var i = 0; i < ((Bridge.Int.div(bl, 8)) | 0); i = (i + 1) | 0) {
                                    b.Write$8(a1[System.Array.index(((i + v) | 0), a1)]);
                                }
                                break;
                            }
                        case System.TypeCode.Single: 
                            {
                                var a11 = Bridge.cast(a, System.Array.type(System.Single));
                                for (var i1 = 0; i1 < ((Bridge.Int.div(bl, 4)) | 0); i1 = (i1 + 1) | 0) {
                                    b.Write$13(a11[System.Array.index(((i1 + v) | 0), a11)]);
                                }
                                break;
                            }
                        case System.TypeCode.Byte: 
                            {
                                var a12 = Bridge.cast(a, System.Array.type(System.Byte));
                                for (var i2 = 0; i2 < bl; i2 = (i2 + 1) | 0) {
                                    b.Write$1(a12[System.Array.index(((i2 + v) | 0), a12)]);
                                }
                                break;
                            }
                        case System.TypeCode.SByte: 
                            {
                                var a13 = Bridge.cast(a, System.Array.type(System.SByte));
                                for (var i3 = 0; i3 < bl; i3 = (i3 + 1) | 0) {
                                    b.Write$12(a13[System.Array.index(((i3 + v) | 0), a13)]);
                                }
                                break;
                            }
                        case System.TypeCode.UInt16: 
                            {
                                var a14 = Bridge.cast(a, System.Array.type(System.UInt16));
                                for (var i4 = 0; i4 < ((Bridge.Int.div(bl, 2)) | 0); i4 = (i4 + 1) | 0) {
                                    b.Write$15(a14[System.Array.index(((i4 + v) | 0), a14)]);
                                }
                                break;
                            }
                        case System.TypeCode.Int16: 
                            {
                                var a15 = Bridge.cast(a, System.Array.type(System.Int16));
                                for (var i5 = 0; i5 < ((Bridge.Int.div(bl, 2)) | 0); i5 = (i5 + 1) | 0) {
                                    b.Write$9(a15[System.Array.index(((i5 + v) | 0), a15)]);
                                }
                                break;
                            }
                        case System.TypeCode.UInt32: 
                            {
                                var a16 = Bridge.cast(a, System.Array.type(System.UInt32));
                                for (var i6 = 0; i6 < ((Bridge.Int.div(bl, 4)) | 0); i6 = (i6 + 1) | 0) {
                                    b.Write$16(a16[System.Array.index(((i6 + v) | 0), a16)]);
                                }
                                break;
                            }
                        case System.TypeCode.Int32: 
                            {
                                var a17 = Bridge.cast(a, System.Array.type(System.Int32));
                                for (var i7 = 0; i7 < ((Bridge.Int.div(bl, 4)) | 0); i7 = (i7 + 1) | 0) {
                                    b.Write$10(a17[System.Array.index(((i7 + v) | 0), a17)]);
                                }
                                break;
                            }
                        case System.TypeCode.UInt64: 
                            {
                                var a18 = Bridge.cast(a, System.Array.type(System.UInt64));
                                for (var i8 = 0; i8 < ((Bridge.Int.div(bl, 8)) | 0); i8 = (i8 + 1) | 0) {
                                    b.Write$17(a18[System.Array.index(((i8 + v) | 0), a18)]);
                                }
                                break;
                            }
                        case System.TypeCode.Int64: 
                            {
                                var a19 = Bridge.cast(a, System.Array.type(System.Int64));
                                for (var i9 = 0; i9 < ((Bridge.Int.div(bl, 8)) | 0); i9 = (i9 + 1) | 0) {
                                    b.Write$11(a19[System.Array.index(((i9 + v) | 0), a19)]);
                                }
                                break;
                            }
                        case System.TypeCode.Boolean: 
                            {
                                var a110 = Bridge.cast(a, System.Array.type(System.Boolean));
                                for (var i10 = 0; i10 < bl; i10 = (i10 + 1) | 0) {
                                    b.Write(a110[System.Array.index(((i10 + v) | 0), a110)]);
                                }
                                break;
                            }
                        default: 
                            throw new System.ArgumentException.$ctor1("Invalid array type");
                    }
                },
                BlockCopy$1: function (membuf, position, a, v, bl) {
                    var b = new System.IO.BinaryReader.ctor(new System.IO.MemoryStream.$ctor3(membuf, position, bl));
                    var t = System.Type.getTypeCode((Bridge.getType(a).$elementType || null));
                    switch (t) {
                        case System.TypeCode.Double: 
                            {
                                var a1 = Bridge.cast(a, System.Array.type(System.Double));
                                for (var i = 0; i < ((Bridge.Int.div(bl, 8)) | 0); i = (i + 1) | 0) {
                                    a1[System.Array.index(((i + v) | 0), a1)] = b.ReadDouble();
                                }
                                break;
                            }
                        case System.TypeCode.Single: 
                            {
                                var a11 = Bridge.cast(a, System.Array.type(System.Single));
                                for (var i1 = 0; i1 < ((Bridge.Int.div(bl, 4)) | 0); i1 = (i1 + 1) | 0) {
                                    a11[System.Array.index(((i1 + v) | 0), a11)] = b.ReadSingle();
                                }
                                break;
                            }
                        case System.TypeCode.Byte: 
                            {
                                var a12 = Bridge.cast(a, System.Array.type(System.Byte));
                                for (var i2 = 0; i2 < bl; i2 = (i2 + 1) | 0) {
                                    a12[System.Array.index(((i2 + v) | 0), a12)] = b.ReadByte();
                                }
                                break;
                            }
                        case System.TypeCode.SByte: 
                            {
                                var a13 = Bridge.cast(a, System.Array.type(System.SByte));
                                for (var i3 = 0; i3 < bl; i3 = (i3 + 1) | 0) {
                                    a13[System.Array.index(((i3 + v) | 0), a13)] = b.ReadSByte();
                                }
                                break;
                            }
                        case System.TypeCode.UInt16: 
                            {
                                var a14 = Bridge.cast(a, System.Array.type(System.UInt16));
                                for (var i4 = 0; i4 < ((Bridge.Int.div(bl, 2)) | 0); i4 = (i4 + 1) | 0) {
                                    a14[System.Array.index(((i4 + v) | 0), a14)] = b.ReadUInt16();
                                }
                                break;
                            }
                        case System.TypeCode.Int16: 
                            {
                                var a15 = Bridge.cast(a, System.Array.type(System.Int16));
                                for (var i5 = 0; i5 < ((Bridge.Int.div(bl, 2)) | 0); i5 = (i5 + 1) | 0) {
                                    a15[System.Array.index(((i5 + v) | 0), a15)] = b.ReadInt16();
                                }
                                break;
                            }
                        case System.TypeCode.UInt32: 
                            {
                                var a16 = Bridge.cast(a, System.Array.type(System.UInt32));
                                for (var i6 = 0; i6 < ((Bridge.Int.div(bl, 4)) | 0); i6 = (i6 + 1) | 0) {
                                    a16[System.Array.index(((i6 + v) | 0), a16)] = b.ReadUInt32();
                                }
                                break;
                            }
                        case System.TypeCode.Int32: 
                            {
                                var a17 = Bridge.cast(a, System.Array.type(System.Int32));
                                for (var i7 = 0; i7 < ((Bridge.Int.div(bl, 4)) | 0); i7 = (i7 + 1) | 0) {
                                    a17[System.Array.index(((i7 + v) | 0), a17)] = b.ReadInt32();
                                }
                                break;
                            }
                        case System.TypeCode.UInt64: 
                            {
                                var a18 = Bridge.cast(a, System.Array.type(System.UInt64));
                                for (var i8 = 0; i8 < ((Bridge.Int.div(bl, 8)) | 0); i8 = (i8 + 1) | 0) {
                                    a18[System.Array.index(((i8 + v) | 0), a18)] = b.ReadUInt64();
                                }
                                break;
                            }
                        case System.TypeCode.Int64: 
                            {
                                var a19 = Bridge.cast(a, System.Array.type(System.Int64));
                                for (var i9 = 0; i9 < ((Bridge.Int.div(bl, 8)) | 0); i9 = (i9 + 1) | 0) {
                                    a19[System.Array.index(((i9 + v) | 0), a19)] = b.ReadInt64();
                                }
                                break;
                            }
                        case System.TypeCode.Boolean: 
                            {
                                var a110 = Bridge.cast(a, System.Array.type(System.Boolean));
                                for (var i10 = 0; i10 < bl; i10 = (i10 + 1) | 0) {
                                    a110[System.Array.index(((i10 + v) | 0), a110)] = b.ReadBoolean();
                                }
                                break;
                            }
                        default: 
                            throw new System.ArgumentException.$ctor1("Invalid array type");
                    }
                },
                ByteLength: function (a) {
                    var t = System.Type.getTypeCode((Bridge.getType(a).$elementType || null));
                    switch (t) {
                        case System.TypeCode.Double: 
                            return Bridge.Int.mul(8, a.length);
                        case System.TypeCode.Single: 
                            return Bridge.Int.mul(4, a.length);
                        case System.TypeCode.Byte: 
                        case System.TypeCode.SByte: 
                            return a.length;
                        case System.TypeCode.UInt16: 
                        case System.TypeCode.Int16: 
                            return Bridge.Int.mul(2, a.length);
                        case System.TypeCode.UInt32: 
                        case System.TypeCode.Int32: 
                            return Bridge.Int.mul(4, a.length);
                        case System.TypeCode.UInt64: 
                        case System.TypeCode.Int64: 
                            return Bridge.Int.mul(8, a.length);
                        case System.TypeCode.Boolean: 
                            return a.length;
                        default: 
                            throw new System.ArgumentException.$ctor1("Invalid array type");
                    }
                }
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.Extensions.Extensions", {
        statics: {
            methods: {
                AwaitWithTimeout: function (task, timeout) {
                    var $step = 0,
                        $task1, 
                        $task2, 
                        $taskResult2, 
                        $task3, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        c, 
                        timeout_task, 
                        r1, 
                        noop, 
                        noop1, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1,2,3,4,5,6,7,8], $step);
                                    switch ($step) {
                                        case 0: {
                                            if (timeout < 0) {
                                                $step = 1;
                                                continue;
                                            } 
                                            $step = 3;
                                            continue;
                                        }
                                        case 1: {
                                            $task1 = task;
                                            $step = 2;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 2: {
                                            $task1.getAwaitedResult();
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        case 3: {
                                            c = new System.Threading.CancellationTokenSource();
                                            timeout_task = System.Threading.Tasks.Task.delay(timeout, c.token);

                                            $task2 = System.Threading.Tasks.Task.whenAny(task, timeout_task);
                                            $step = 4;
                                            if ($task2.isCompleted()) {
                                                continue;
                                            }
                                            $task2.continue($asyncBody);
                                            return;
                                        }
                                        case 4: {
                                            $taskResult2 = $task2.getAwaitedResult();
                                            r1 = $taskResult2;
                                            if (task.isCompleted() || task.isFaulted() || task.isCanceled()) {
                                                $step = 5;
                                                continue;
                                            } else  {
                                                $step = 7;
                                                continue;
                                            }
                                        }
                                        case 5: {
                                            noop = RobotRaconteurWeb.Extensions.Extensions.IgnoreResult(timeout_task);
                                            c.cancel();

                                            $task3 = task;
                                            $step = 6;
                                            if ($task3.isCompleted()) {
                                                continue;
                                            }
                                            $task3.continue($asyncBody);
                                            return;
                                        }
                                        case 6: {
                                            $task3.getAwaitedResult();
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        case 7: {
                                            noop1 = RobotRaconteurWeb.Extensions.Extensions.IgnoreResult(task);
                                            throw new System.TimeoutException.$ctor1("Operation timed out");
                                            $step = 8;
                                            continue;
                                        }
                                        case 8: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                },
                AwaitWithTimeout$1: function (T, task, timeout) {
                    var $step = 0,
                        $task1, 
                        $taskResult1, 
                        $task2, 
                        $taskResult2, 
                        $task3, 
                        $taskResult3, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        c, 
                        timeout_task, 
                        r1, 
                        noop, 
                        noop1, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([0,1,2,3,4,5,6,7,8], $step);
                                    switch ($step) {
                                        case 0: {
                                            if (timeout < 0) {
                                                $step = 1;
                                                continue;
                                            } 
                                            $step = 3;
                                            continue;
                                        }
                                        case 1: {
                                            $task1 = task;
                                            $step = 2;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 2: {
                                            $taskResult1 = $task1.getAwaitedResult();
                                            $tcs.setResult($taskResult1);
                                            return;
                                        }
                                        case 3: {
                                            c = new System.Threading.CancellationTokenSource();
                                            timeout_task = System.Threading.Tasks.Task.delay(timeout, c.token);

                                            $task2 = System.Threading.Tasks.Task.whenAny(task, timeout_task);
                                            $step = 4;
                                            if ($task2.isCompleted()) {
                                                continue;
                                            }
                                            $task2.continue($asyncBody);
                                            return;
                                        }
                                        case 4: {
                                            $taskResult2 = $task2.getAwaitedResult();
                                            r1 = $taskResult2;
                                            if (task.isCompleted() || task.isFaulted() || task.isCanceled()) {
                                                $step = 5;
                                                continue;
                                            } else  {
                                                $step = 7;
                                                continue;
                                            }
                                        }
                                        case 5: {
                                            noop = RobotRaconteurWeb.Extensions.Extensions.IgnoreResult(timeout_task);
                                            c.cancel();

                                            $task3 = task;
                                            $step = 6;
                                            if ($task3.isCompleted()) {
                                                continue;
                                            }
                                            $task3.continue($asyncBody);
                                            return;
                                        }
                                        case 6: {
                                            $taskResult3 = $task3.getAwaitedResult();
                                            $tcs.setResult($taskResult3);
                                            return;
                                        }
                                        case 7: {
                                            noop1 = RobotRaconteurWeb.Extensions.Extensions.IgnoreResult$1(T, task);
                                            throw new System.TimeoutException.$ctor1("Operation timed out");
                                            $step = 8;
                                            continue;
                                        }
                                        case 8: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                },
                AttachCancellationToken: function (T, source, cancel, e) {
                    if (e === void 0) { e = null; }
                    cancel.register(function () {
                        if (e == null) {
                            source.trySetCanceled();
                        } else {
                            source.trySetException(e);
                        }
                    });
                },
                IgnoreResult: function (t) {
                    return t.continueWith(function (t2) {
                        try {
                            var e = t2.getException();
                        } catch ($e1) {
                            $e1 = System.Exception.create($e1);
                        }
                    });
                },
                IgnoreResult$1: function (T, t) {
                    return t.continueWith(function (t2) {
                        try {
                            var e = t2.getResult();
                        } catch ($e1) {
                            $e1 = System.Exception.create($e1);
                        }
                    });
                },
                AsApm$1: function (T, task, callback, state) {
                    if (task == null) {
                        throw new System.ArgumentNullException.$ctor1("task");
                    }

                    var tcs = new System.Threading.Tasks.TaskCompletionSource(state);
                    task.continueWith(function (t) {
                        if (t.isFaulted()) {
                            tcs.trySetException(t.getException().innerExceptions);
                        } else {
                            if (t.isCanceled()) {
                                tcs.trySetCanceled();
                            } else {
                                tcs.trySetResult(t.getResult());
                            }
                        }

                        if (!Bridge.staticEquals(callback, null)) {
                            callback(tcs.task);
                        }
                    });
                    return tcs.task;
                },
                AsApm: function (task, callback, state) {
                    if (task == null) {
                        throw new System.ArgumentNullException.$ctor1("task");
                    }

                    var tcs = new System.Threading.Tasks.TaskCompletionSource(state);
                    task.continueWith(function (t) {
                        if (t.isFaulted()) {
                            tcs.trySetException(t.getException().innerExceptions);
                        } else {
                            if (t.isCanceled()) {
                                tcs.trySetCanceled();
                            } else {
                                tcs.trySetResult(0);
                            }
                        }

                        if (!Bridge.staticEquals(callback, null)) {
                            callback(tcs.task);
                        }
                    });
                    return tcs.task;
                },
                ReplaceFirst: function (text, search, replace) {
                    var pos = System.String.indexOf(text, search);
                    if (pos < 0) {
                        return text;
                    }
                    return (text.substr(0, pos) || "") + (replace || "") + (text.substr(((pos + search.length) | 0)) || "");
                },
                ReadAsync: function (stream, buffer, offset, count, cancel) {
                    if (cancel === void 0) { cancel = new System.Threading.CancellationToken(); }
                    if (stream == null) {
                        throw new System.ArgumentNullException.$ctor1("stream");
                    }

                    var tcs = new System.Threading.Tasks.TaskCompletionSource();
                    stream.BeginRead(buffer, offset, count, function (iar) {
                        try {
                            tcs.trySetResult(stream.EndRead(iar));
                        } catch ($e1) {
                            $e1 = System.Exception.create($e1);
                            var exc;
                            if (Bridge.is($e1, System.OperationCanceledException)) {
                                tcs.trySetCanceled();
                            } else {
                                exc = $e1;
                                tcs.trySetException(exc);
                            }
                        }
                    }, null);
                    return tcs.task;
                },
                WriteAsync: function (stream, buffer, offset, count, cancel) {
                    if (cancel === void 0) { cancel = new System.Threading.CancellationToken(); }
                    if (stream == null) {
                        throw new System.ArgumentNullException.$ctor1("stream");
                    }

                    var tcs = new System.Threading.Tasks.TaskCompletionSource();
                    stream.BeginWrite(buffer, offset, count, function (iar) {
                        try {
                            tcs.trySetResult(stream.EndRead(iar));
                        } catch ($e1) {
                            $e1 = System.Exception.create($e1);
                            var exc;
                            if (Bridge.is($e1, System.OperationCanceledException)) {
                                tcs.trySetCanceled();
                            } else {
                                exc = $e1;
                                tcs.trySetException(exc);
                            }
                        }
                    }, null);
                    return tcs.task;
                },
                ConfigureAwait: function (T, t, v) {
                    return t;
                }
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.Extensions.RRUriExtensions", {
        statics: {
            methods: {
                EscapeDataString: function (s) {
                    return encodeURI(s);
                },
                UnescapeDataString: function (s) {
                    return decodeURI(s);
                }
            }
        }
    });

    Bridge.definei("RobotRaconteurWeb.Generator1$2", function (ReturnType, ParamType) { return {
        $kind: "interface"
    }; });

    Bridge.define("RobotRaconteurWeb.GeneratorClientBase", {
        fields: {
            stub: null,
            membername: null,
            id: 0
        },
        props: {
            MemberName: {
                get: function () {
                    return this.membername;
                }
            }
        },
        ctors: {
            ctor: function (membername, stub, id) {
                this.$initialize();
                this.stub = stub;
                this.membername = membername;
                this.id = id;
            }
        },
        methods: {
            Abort: function (cancel) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    m, 
                    err, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        if (cancel === void 0) { cancel = new System.Threading.CancellationToken(); }
                                        m = new RobotRaconteurWeb.MessageEntry.$ctor1(RobotRaconteurWeb.MessageEntryType.GeneratorNextReq, this.MemberName);
                                        err = new RobotRaconteurWeb.AbortOperationException("Generator abort requested");
                                        RobotRaconteurWeb.RobotRaconteurExceptionUtil.ExceptionToMessageEntry(err, m);
                                        m.AddElement$1("index", Bridge.box(this.id, System.Int32));
                                        $task1 = this.stub.ProcessRequest(m, cancel);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            Close: function (cancel) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    m, 
                    err, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        if (cancel === void 0) { cancel = new System.Threading.CancellationToken(); }
                                        m = new RobotRaconteurWeb.MessageEntry.$ctor1(RobotRaconteurWeb.MessageEntryType.GeneratorNextReq, this.MemberName);
                                        err = new RobotRaconteurWeb.StopIterationException("Generator abort requested");
                                        RobotRaconteurWeb.RobotRaconteurExceptionUtil.ExceptionToMessageEntry(err, m);
                                        m.AddElement$1("index", Bridge.box(this.id, System.Int32));
                                        $task1 = this.stub.ProcessRequest(m, cancel);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            NextBase: function (v, cancel) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    m, 
                    ret, 
                    mret, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        m = new RobotRaconteurWeb.MessageEntry.$ctor1(RobotRaconteurWeb.MessageEntryType.GeneratorNextReq, this.MemberName);
                                        m.AddElement$1("index", Bridge.box(this.id, System.Int32));
                                        if (v != null) {
                                            v.ElementName = "parameter";
                                            m.elements.add(v);
                                        }
                                        $task1 = this.stub.ProcessRequest(m, cancel);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        ret = $taskResult1;
                                        mret = { };
                                        ret.TryFindElement("return", mret);
                                        $tcs.setResult(mret.v);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.GeneratorServerBase", {
        fields: {
            name: null,
            index: 0,
            skel: null,
            ep: null,
            last_access_time: null
        },
        props: {
            Endpoint: {
                get: function () {
                    return this.ep.LocalEndpoint;
                }
            }
        },
        ctors: {
            init: function () {
                this.last_access_time = System.DateTime.getDefaultValue();
            },
            ctor: function (name, index, skel, ep) {
                this.$initialize();
                this.name = name;
                this.index = index;
                this.skel = skel;
                this.ep = ep;
            }
        }
    });

    Bridge.definei("RobotRaconteurWeb.Generator3$1", function (ParamType) { return {
        $kind: "interface"
    }; });

    Bridge.define("RobotRaconteurWeb.INamedArrayStub", {
        $kind: "interface"
    });

    Bridge.define("RobotRaconteurWeb.IPodStub", {
        $kind: "interface"
    });

    Bridge.define("RobotRaconteurWeb.IRate", {
        $kind: "interface"
    });

    Bridge.define("RobotRaconteurWeb.IRobotRaconteurMonitorObject", {
        $kind: "interface"
    });

    Bridge.define("RobotRaconteurWeb.IRobotRaconteurServiceObject", {
        $kind: "interface"
    });

    Bridge.define("RobotRaconteurWeb.ITimer", {
        $kind: "interface"
    });

    Bridge.define("RobotRaconteurWeb.MemberDefinition.MemberDefiniton_ParseResults", {
        $kind: "nested class",
        fields: {
            MemberType: null,
            Name: null,
            DataType: null,
            Parameters: null,
            Modifiers: null
        },
        ctors: {
            init: function () {
                this.Parameters = new (System.Collections.Generic.List$1(System.String)).ctor();
                this.Modifiers = new (System.Collections.Generic.List$1(System.String)).ctor();
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.MemberDefinition_Direction", {
        $kind: "enum",
        statics: {
            fields: {
                readonly_: 0,
                writeonly: 1,
                both: 2
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.Message", {
        fields: {
            header: null,
            entries: null
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                this.entries = new (System.Collections.Generic.List$1(RobotRaconteurWeb.MessageEntry)).ctor();
            }
        },
        methods: {
            ComputeSize: function () {
                var $t;
                var s = this.header.ComputeSize();
                $t = Bridge.getEnumerator(this.entries);
                try {
                    while ($t.moveNext()) {
                        var e = $t.Current;
                        s = (s + (e.ComputeSize())) >>> 0;
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
                return s;
            },
            Write: function (w) {
                var $t;
                w.PushRelativeLimit(this.ComputeSize());
                this.header.UpdateHeader(this.ComputeSize(), ((this.entries.Count) & 65535));
                this.header.Write(w);
                $t = Bridge.getEnumerator(this.entries);
                try {
                    while ($t.moveNext()) {
                        var e = $t.Current;
                        e.Write(w);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
                if (w.DistanceFromLimit !== 0) {
                    throw new RobotRaconteurWeb.IOException("Message write error");
                }
                w.PopLimit();

            },
            FindEntry: function (name) {
                var $t;

                if (this.entries == null) {
                    return null;
                }

                $t = Bridge.getEnumerator(this.entries);
                try {
                    while ($t.moveNext()) {
                        var m = $t.Current;
                        if (Bridge.referenceEquals(m.MemberName, name)) {
                            return m;
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }

                throw new RobotRaconteurWeb.MessageEntryNotFoundException("Element " + (name || "") + " not found.");

            },
            AddEntry: function (t, name) {
                var m = new RobotRaconteurWeb.MessageEntry.ctor();
                m.MemberName = name;
                m.EntryType = t;

                if (this.entries == null) {
                    this.entries = new (System.Collections.Generic.List$1(RobotRaconteurWeb.MessageEntry)).ctor();
                }
                this.entries.add(m);

                return m;
            },
            Read: function (r) {
                this.header = new RobotRaconteurWeb.MessageHeader();
                this.header.Read(r);

                r.PushRelativeLimit(((this.header.MessageSize - this.header.HeaderLength) >>> 0));

                var s = this.header.EntryCount;
                this.entries = new (System.Collections.Generic.List$1(RobotRaconteurWeb.MessageEntry)).$ctor2(s);
                for (var i = 0; i < s; i = (i + 1) | 0) {
                    var e = new RobotRaconteurWeb.MessageEntry.ctor();
                    e.Read(r);
                    this.entries.add(e);
                }

                r.PopLimit();

            }
        }
    });

    Bridge.define("RobotRaconteurWeb.MessageElement", {
        statics: {
            methods: {
                FindElement$1: function (m, name) {
                    var $t;
                    $t = Bridge.getEnumerator(m);
                    try {
                        while ($t.moveNext()) {
                            var e = $t.Current;
                            if (Bridge.referenceEquals(e.ElementName, name)) {
                                return e;
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                    throw new RobotRaconteurWeb.MessageElementNotFoundException("Could not find element " + (name || ""));
                },
                FindElement: function (m, name) {
                    return RobotRaconteurWeb.MessageElement.FindElement$1(m.elements, name);
                },
                CastData: function (T, Data) {
                    if (Data == null) {
                        return Bridge.getDefaultValue(T);
                    }
                    if (Bridge.is(Data, T)) {
                        return Bridge.cast(Bridge.unbox(Data, T), T);
                    }
                    throw new RobotRaconteurWeb.DataTypeException("Could not cast data to type " + (Bridge.getTypeName(T) || ""));
                }
            }
        },
        fields: {
            ElementSize: 0,
            ElementName: null,
            ElementType: 0,
            ElementTypeName: null,
            MetaData: null,
            DataCount: 0,
            dat: null
        },
        props: {
            Data: {
                get: function () {
                    return this.dat;
                },
                set: function (value) {
                    this.dat = value;

                    this.UpdateData();
                }
            }
        },
        ctors: {
            init: function () {
                this.ElementName = "";
                this.ElementTypeName = "";
                this.MetaData = "";
            },
            ctor: function () {
                this.$initialize();
            },
            $ctor1: function (name, datin) {
                this.$initialize();
                this.ElementName = name;
                this.Data = datin;
            }
        },
        methods: {
            ComputeSize: function () {
                var $t, $t1, $t2, $t3, $t4, $t5, $t6, $t7, $t8, $t9;
                var s = (((((16 + ((RobotRaconteurWeb.ArrayBinaryWriter.GetStringByteCount8(this.ElementName)) >>> 0)) >>> 0) + ((RobotRaconteurWeb.ArrayBinaryWriter.GetStringByteCount8(this.ElementTypeName)) >>> 0)) >>> 0) + ((RobotRaconteurWeb.ArrayBinaryWriter.GetStringByteCount8(this.MetaData)) >>> 0)) >>> 0;

                if (this.ElementType === RobotRaconteurWeb.DataTypes.structure_t) {

                    var d = Bridge.cast(this.Data, RobotRaconteurWeb.MessageElementStructure);


                    $t = Bridge.getEnumerator(d.Elements);
                    try {
                        while ($t.moveNext()) {
                            var e = $t.Current;
                            s = (s + (e.ComputeSize())) >>> 0;
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }


                } else if (this.ElementType === RobotRaconteurWeb.DataTypes.vector_t) {
                    var d1 = Bridge.cast(this.Data, RobotRaconteurWeb.MessageElementMap$1(System.Int32));


                    $t1 = Bridge.getEnumerator(d1.Elements);
                    try {
                        while ($t1.moveNext()) {
                            var e1 = $t1.Current;
                            s = (s + (e1.ComputeSize())) >>> 0;
                        }
                    } finally {
                        if (Bridge.is($t1, System.IDisposable)) {
                            $t1.System$IDisposable$Dispose();
                        }
                    }
                } else if (this.ElementType === RobotRaconteurWeb.DataTypes.dictionary_t) {
                    var d2 = Bridge.cast(this.Data, RobotRaconteurWeb.MessageElementMap$1(System.String));


                    $t2 = Bridge.getEnumerator(d2.Elements);
                    try {
                        while ($t2.moveNext()) {
                            var e2 = $t2.Current;
                            s = (s + (e2.ComputeSize())) >>> 0;
                        }
                    } finally {
                        if (Bridge.is($t2, System.IDisposable)) {
                            $t2.System$IDisposable$Dispose();
                        }
                    }
                } else if (this.ElementType === RobotRaconteurWeb.DataTypes.list_t) {
                    var d3 = Bridge.cast(this.Data, RobotRaconteurWeb.MessageElementList);


                    $t3 = Bridge.getEnumerator(d3.Elements);
                    try {
                        while ($t3.moveNext()) {
                            var e3 = $t3.Current;
                            s = (s + (e3.ComputeSize())) >>> 0;
                        }
                    } finally {
                        if (Bridge.is($t3, System.IDisposable)) {
                            $t3.System$IDisposable$Dispose();
                        }
                    }
                } else if (this.ElementType === RobotRaconteurWeb.DataTypes.multidimarray_t) {
                    var d4 = Bridge.cast(this.Data, RobotRaconteurWeb.MessageElementMultiDimArray);
                    $t4 = Bridge.getEnumerator(d4.Elements);
                    try {
                        while ($t4.moveNext()) {
                            var e4 = $t4.Current;
                            s = (s + (e4.ComputeSize())) >>> 0;
                        }
                    } finally {
                        if (Bridge.is($t4, System.IDisposable)) {
                            $t4.System$IDisposable$Dispose();
                        }
                    }
                } else if (this.ElementType === RobotRaconteurWeb.DataTypes.pod_t) {
                    var d5 = Bridge.cast(this.Data, RobotRaconteurWeb.MessageElementPod);
                    $t5 = Bridge.getEnumerator(d5.Elements);
                    try {
                        while ($t5.moveNext()) {
                            var e5 = $t5.Current;
                            s = (s + (e5.ComputeSize())) >>> 0;
                        }
                    } finally {
                        if (Bridge.is($t5, System.IDisposable)) {
                            $t5.System$IDisposable$Dispose();
                        }
                    }
                } else if (this.ElementType === RobotRaconteurWeb.DataTypes.pod_array_t) {
                    var d6 = Bridge.cast(this.Data, RobotRaconteurWeb.MessageElementPodArray);
                    $t6 = Bridge.getEnumerator(d6.Elements);
                    try {
                        while ($t6.moveNext()) {
                            var e6 = $t6.Current;
                            s = (s + (e6.ComputeSize())) >>> 0;
                        }
                    } finally {
                        if (Bridge.is($t6, System.IDisposable)) {
                            $t6.System$IDisposable$Dispose();
                        }
                    }
                } else if (this.ElementType === RobotRaconteurWeb.DataTypes.pod_multidimarray_t) {
                    var d7 = Bridge.cast(this.Data, RobotRaconteurWeb.MessageElementPodMultiDimArray);
                    $t7 = Bridge.getEnumerator(d7.Elements);
                    try {
                        while ($t7.moveNext()) {
                            var e7 = $t7.Current;
                            s = (s + (e7.ComputeSize())) >>> 0;
                        }
                    } finally {
                        if (Bridge.is($t7, System.IDisposable)) {
                            $t7.System$IDisposable$Dispose();
                        }
                    }
                } else if (this.ElementType === RobotRaconteurWeb.DataTypes.namedarray_array_t) {
                    var d8 = Bridge.cast(this.Data, RobotRaconteurWeb.MessageElementNamedArray);
                    $t8 = Bridge.getEnumerator(d8.Elements);
                    try {
                        while ($t8.moveNext()) {
                            var e8 = $t8.Current;
                            s = (s + (e8.ComputeSize())) >>> 0;
                        }
                    } finally {
                        if (Bridge.is($t8, System.IDisposable)) {
                            $t8.System$IDisposable$Dispose();
                        }
                    }
                } else if (this.ElementType === RobotRaconteurWeb.DataTypes.namedarray_multidimarray_t) {
                    var d9 = Bridge.cast(this.Data, RobotRaconteurWeb.MessageElementNamedMultiDimArray);
                    $t9 = Bridge.getEnumerator(d9.Elements);
                    try {
                        while ($t9.moveNext()) {
                            var e9 = $t9.Current;
                            s = (s + (e9.ComputeSize())) >>> 0;
                        }
                    } finally {
                        if (Bridge.is($t9, System.IDisposable)) {
                            $t9.System$IDisposable$Dispose();
                        }
                    }
                } else if (this.ElementType === RobotRaconteurWeb.DataTypes.void_t) {
                    s = (s + 0) >>> 0;
                } else {

                    s = (s + (Bridge.Int.umul(this.DataCount, RobotRaconteurWeb.DataTypeUtil.size(this.ElementType)))) >>> 0;
                }

                return s;
            },
            UpdateData: function () {
                var datatype;

                if (this.dat == null) {
                    datatype = "null";
                } else if (Bridge.is(this.dat, Array)) {
                    datatype = Bridge.getTypeName((Bridge.getType(this.dat).$elementType || null));
                    this.DataCount = (Bridge.cast(this.dat, Array).length) >>> 0;
                } else if (Bridge.is(this.dat, RobotRaconteurWeb.MessageElementStructure)) {
                    this.DataCount = (Bridge.cast(this.dat, RobotRaconteurWeb.MessageElementStructure).Elements.Count) >>> 0;
                    this.ElementTypeName = Bridge.cast(this.dat, RobotRaconteurWeb.MessageElementStructure).Type;
                    datatype = "RobotRaconteurWeb.MessageElementStructure";
                } else if (Bridge.is(this.dat, RobotRaconteurWeb.MessageElementMap$1(System.Int32))) {
                    this.DataCount = (Bridge.cast(this.dat, RobotRaconteurWeb.MessageElementMap$1(System.Int32)).Elements.Count) >>> 0;
                    datatype = "RobotRaconteurWeb.MessageElementMap<int>";
                } else if (Bridge.is(this.dat, RobotRaconteurWeb.MessageElementMap$1(System.String))) {
                    this.DataCount = (Bridge.cast(this.dat, RobotRaconteurWeb.MessageElementMap$1(System.String)).Elements.Count) >>> 0;
                    datatype = "RobotRaconteurWeb.MessageElementMap<string>";
                } else if (Bridge.is(this.dat, RobotRaconteurWeb.MessageElementList)) {
                    this.DataCount = (Bridge.cast(this.dat, RobotRaconteurWeb.MessageElementList).Elements.Count) >>> 0;
                    datatype = "RobotRaconteurWeb.MessageElementList";
                } else if (Bridge.is(this.dat, RobotRaconteurWeb.MessageElementMultiDimArray)) {
                    this.DataCount = (Bridge.cast(this.dat, RobotRaconteurWeb.MessageElementMultiDimArray).Elements.Count) >>> 0;
                    datatype = "RobotRaconteurWeb.MessageElementMultiDimArray";
                } else if (Bridge.is(this.dat, RobotRaconteurWeb.MessageElementPod)) {
                    this.DataCount = (Bridge.cast(this.dat, RobotRaconteurWeb.MessageElementPod).Elements.Count) >>> 0;
                    datatype = "RobotRaconteurWeb.MessageElementPod";
                } else if (Bridge.is(this.dat, RobotRaconteurWeb.MessageElementPodArray)) {
                    this.DataCount = (Bridge.cast(this.dat, RobotRaconteurWeb.MessageElementPodArray).Elements.Count) >>> 0;
                    this.ElementTypeName = Bridge.cast(this.dat, RobotRaconteurWeb.MessageElementPodArray).Type;
                    datatype = "RobotRaconteurWeb.MessageElementPodArray";
                } else if (Bridge.is(this.dat, RobotRaconteurWeb.MessageElementPodMultiDimArray)) {
                    this.DataCount = (Bridge.cast(this.dat, RobotRaconteurWeb.MessageElementPodMultiDimArray).Elements.Count) >>> 0;
                    this.ElementTypeName = Bridge.cast(this.dat, RobotRaconteurWeb.MessageElementPodMultiDimArray).Type;
                    datatype = "RobotRaconteurWeb.MessageElementPodMultiDimArray";
                } else if (Bridge.is(this.dat, RobotRaconteurWeb.MessageElementNamedArray)) {
                    this.DataCount = (Bridge.cast(this.dat, RobotRaconteurWeb.MessageElementNamedArray).Elements.Count) >>> 0;
                    this.ElementTypeName = Bridge.cast(this.dat, RobotRaconteurWeb.MessageElementNamedArray).Type;
                    datatype = "RobotRaconteurWeb.MessageElementNamedArray";
                } else if (Bridge.is(this.dat, RobotRaconteurWeb.MessageElementNamedMultiDimArray)) {
                    this.DataCount = (Bridge.cast(this.dat, RobotRaconteurWeb.MessageElementNamedMultiDimArray).Elements.Count) >>> 0;
                    this.ElementTypeName = Bridge.cast(this.dat, RobotRaconteurWeb.MessageElementNamedMultiDimArray).Type;
                    datatype = "RobotRaconteurWeb.MessageElementNamedMultiDimArray";
                } else if (Bridge.is(this.dat, System.String)) {
                    datatype = "System.String";
                    this.DataCount = (System.Text.Encoding.UTF8.GetByteCount$2(Bridge.cast(this.dat, System.String))) >>> 0;

                } else {

                    this.DataCount = 1;
                    datatype = Bridge.getTypeName(Bridge.getType(this.dat));
                }

                this.ElementType = RobotRaconteurWeb.DataTypeUtil.TypeIDFromString(datatype);

                if (this.ElementType !== RobotRaconteurWeb.DataTypes.void_t && this.ElementType < RobotRaconteurWeb.DataTypes.string_t && !(Bridge.is(this.dat, Array))) {
                    this.dat = RobotRaconteurWeb.DataTypeUtil.ArrayFromScalar(this.dat);
                }

                this.ElementSize = this.ComputeSize();

            },
            Write: function (w) {
                var $t, $t1, $t2, $t3, $t4, $t5, $t6, $t7, $t8, $t9;
                this.UpdateData();
                w.PushRelativeLimit(this.ElementSize);
                w.Write$16(this.ElementSize);
                w.Write$15(((RobotRaconteurWeb.ArrayBinaryWriter.GetStringByteCount8(this.ElementName)) & 65535));
                w.WriteString8(this.ElementName);
                w.Write$15((this.ElementType & 65535));
                w.Write$15(((RobotRaconteurWeb.ArrayBinaryWriter.GetStringByteCount8(this.ElementTypeName)) & 65535));
                w.WriteString8(this.ElementTypeName);
                w.Write$15(((RobotRaconteurWeb.ArrayBinaryWriter.GetStringByteCount8(this.MetaData)) & 65535));
                w.WriteString8(this.MetaData);
                w.Write$16(this.DataCount);
                if (this.dat == null) {

                } else if (Bridge.isArray(null, Bridge.getType(this.dat))) {
                    w.WriteArray(Bridge.cast(this.dat, Array));
                } else if (Bridge.is(this.dat, RobotRaconteurWeb.MessageElementStructure)) {
                    var l = Bridge.cast(this.dat, RobotRaconteurWeb.MessageElementStructure).Elements;
                    $t = Bridge.getEnumerator(l);
                    try {
                        while ($t.moveNext()) {
                            var e = $t.Current;
                            e.Write(w);
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }

                } else if (Bridge.is(this.dat, RobotRaconteurWeb.MessageElementMap$1(System.Int32))) {
                    var l1 = Bridge.cast(this.dat, RobotRaconteurWeb.MessageElementMap$1(System.Int32)).Elements;
                    $t1 = Bridge.getEnumerator(l1);
                    try {
                        while ($t1.moveNext()) {
                            var e1 = $t1.Current;
                            e1.Write(w);
                        }
                    } finally {
                        if (Bridge.is($t1, System.IDisposable)) {
                            $t1.System$IDisposable$Dispose();
                        }
                    }

                } else if (Bridge.is(this.dat, RobotRaconteurWeb.MessageElementMap$1(System.String))) {
                    var l2 = Bridge.cast(this.dat, RobotRaconteurWeb.MessageElementMap$1(System.String)).Elements;
                    $t2 = Bridge.getEnumerator(l2);
                    try {
                        while ($t2.moveNext()) {
                            var e2 = $t2.Current;
                            e2.Write(w);
                        }
                    } finally {
                        if (Bridge.is($t2, System.IDisposable)) {
                            $t2.System$IDisposable$Dispose();
                        }
                    }

                } else if (Bridge.is(this.dat, RobotRaconteurWeb.MessageElementList)) {
                    var l3 = Bridge.cast(this.dat, RobotRaconteurWeb.MessageElementList).Elements;
                    $t3 = Bridge.getEnumerator(l3);
                    try {
                        while ($t3.moveNext()) {
                            var e3 = $t3.Current;
                            e3.Write(w);
                        }
                    } finally {
                        if (Bridge.is($t3, System.IDisposable)) {
                            $t3.System$IDisposable$Dispose();
                        }
                    }

                } else if (Bridge.is(this.dat, System.String)) {
                    w.WriteString8(Bridge.cast(this.dat, System.String));
                } else if (Bridge.is(this.dat, RobotRaconteurWeb.MessageElementMultiDimArray)) {
                    var l4 = Bridge.cast(this.dat, RobotRaconteurWeb.MessageElementMultiDimArray).Elements;
                    $t4 = Bridge.getEnumerator(l4);
                    try {
                        while ($t4.moveNext()) {
                            var e4 = $t4.Current;
                            e4.Write(w);
                        }
                    } finally {
                        if (Bridge.is($t4, System.IDisposable)) {
                            $t4.System$IDisposable$Dispose();
                        }
                    }
                } else if (Bridge.is(this.dat, RobotRaconteurWeb.MessageElementPod)) {
                    var l5 = Bridge.cast(this.dat, RobotRaconteurWeb.MessageElementPod).Elements;
                    $t5 = Bridge.getEnumerator(l5);
                    try {
                        while ($t5.moveNext()) {
                            var e5 = $t5.Current;
                            e5.Write(w);
                        }
                    } finally {
                        if (Bridge.is($t5, System.IDisposable)) {
                            $t5.System$IDisposable$Dispose();
                        }
                    }
                } else if (Bridge.is(this.dat, RobotRaconteurWeb.MessageElementPodArray)) {
                    var l6 = Bridge.cast(this.dat, RobotRaconteurWeb.MessageElementPodArray).Elements;
                    $t6 = Bridge.getEnumerator(l6);
                    try {
                        while ($t6.moveNext()) {
                            var e6 = $t6.Current;
                            e6.Write(w);
                        }
                    } finally {
                        if (Bridge.is($t6, System.IDisposable)) {
                            $t6.System$IDisposable$Dispose();
                        }
                    }
                } else if (Bridge.is(this.dat, RobotRaconteurWeb.MessageElementPodMultiDimArray)) {
                    var l7 = Bridge.cast(this.dat, RobotRaconteurWeb.MessageElementPodMultiDimArray).Elements;
                    $t7 = Bridge.getEnumerator(l7);
                    try {
                        while ($t7.moveNext()) {
                            var e7 = $t7.Current;
                            e7.Write(w);
                        }
                    } finally {
                        if (Bridge.is($t7, System.IDisposable)) {
                            $t7.System$IDisposable$Dispose();
                        }
                    }
                } else if (Bridge.is(this.dat, RobotRaconteurWeb.MessageElementNamedArray)) {
                    var l8 = Bridge.cast(this.dat, RobotRaconteurWeb.MessageElementNamedArray).Elements;
                    $t8 = Bridge.getEnumerator(l8);
                    try {
                        while ($t8.moveNext()) {
                            var e8 = $t8.Current;
                            e8.Write(w);
                        }
                    } finally {
                        if (Bridge.is($t8, System.IDisposable)) {
                            $t8.System$IDisposable$Dispose();
                        }
                    }
                } else if (Bridge.is(this.dat, RobotRaconteurWeb.MessageElementNamedMultiDimArray)) {
                    var l9 = Bridge.cast(this.dat, RobotRaconteurWeb.MessageElementNamedMultiDimArray).Elements;
                    $t9 = Bridge.getEnumerator(l9);
                    try {
                        while ($t9.moveNext()) {
                            var e9 = $t9.Current;
                            e9.Write(w);
                        }
                    } finally {
                        if (Bridge.is($t9, System.IDisposable)) {
                            $t9.System$IDisposable$Dispose();
                        }
                    }
                } else {
                    w.WriteNumber(this.dat, this.ElementType);
                }

                if (w.DistanceFromLimit !== 0) {
                    throw new RobotRaconteurWeb.IOException("Message write error");
                }
                w.PopLimit();

            },
            Read: function (r) {
                this.ElementSize = r.ReadUInt32();
                r.PushRelativeLimit(((this.ElementSize - 4) >>> 0));
                var name_s = r.ReadUInt16();
                this.ElementName = r.ReadString8(name_s);
                this.ElementType = r.ReadUInt16();
                var nametype_s = r.ReadUInt16();
                this.ElementTypeName = r.ReadString8(nametype_s);
                var metadata_s = r.ReadUInt16();
                this.MetaData = r.ReadString8(metadata_s);
                this.DataCount = r.ReadUInt32();

                if (this.ElementType === RobotRaconteurWeb.DataTypes.void_t) {
                } else if (this.ElementType === RobotRaconteurWeb.DataTypes.structure_t) {
                    var l = new (System.Collections.Generic.List$1(RobotRaconteurWeb.MessageElement)).$ctor2((this.DataCount | 0));
                    for (var i = 0; System.Int64(i).lt(System.Int64(this.DataCount)); i = (i + 1) | 0) {
                        var m = new RobotRaconteurWeb.MessageElement.ctor();
                        m.Read(r);
                        l.add(m);

                    }

                    this.dat = new RobotRaconteurWeb.MessageElementStructure(this.ElementTypeName, l);
                } else if (this.ElementType === RobotRaconteurWeb.DataTypes.vector_t) {
                    var l1 = new (System.Collections.Generic.List$1(RobotRaconteurWeb.MessageElement)).$ctor2((this.DataCount | 0));
                    for (var i1 = 0; System.Int64(i1).lt(System.Int64(this.DataCount)); i1 = (i1 + 1) | 0) {
                        var m1 = new RobotRaconteurWeb.MessageElement.ctor();
                        m1.Read(r);
                        l1.add(m1);

                    }

                    this.dat = new (RobotRaconteurWeb.MessageElementMap$1(System.Int32))(l1);
                } else if (this.ElementType === RobotRaconteurWeb.DataTypes.dictionary_t) {
                    var l2 = new (System.Collections.Generic.List$1(RobotRaconteurWeb.MessageElement)).$ctor2((this.DataCount | 0));
                    for (var i2 = 0; System.Int64(i2).lt(System.Int64(this.DataCount)); i2 = (i2 + 1) | 0) {
                        var m2 = new RobotRaconteurWeb.MessageElement.ctor();
                        m2.Read(r);
                        l2.add(m2);

                    }

                    this.dat = new (RobotRaconteurWeb.MessageElementMap$1(System.String))(l2);
                } else if (this.ElementType === RobotRaconteurWeb.DataTypes.list_t) {
                    var l3 = new (System.Collections.Generic.List$1(RobotRaconteurWeb.MessageElement)).$ctor2((this.DataCount | 0));
                    for (var i3 = 0; System.Int64(i3).lt(System.Int64(this.DataCount)); i3 = (i3 + 1) | 0) {
                        var m3 = new RobotRaconteurWeb.MessageElement.ctor();
                        m3.Read(r);
                        l3.add(m3);

                    }

                    this.dat = new RobotRaconteurWeb.MessageElementList(l3);
                } else if (this.ElementType === RobotRaconteurWeb.DataTypes.string_t) {
                    if (System.Int64(this.DataCount).gt(System.Int64(r.DistanceFromLimit))) {
                        throw new RobotRaconteurWeb.IOException("Error reading message");
                    }
                    this.dat = r.ReadString8(this.DataCount);
                } else if (this.ElementType === RobotRaconteurWeb.DataTypes.multidimarray_t) {
                    var l4 = new (System.Collections.Generic.List$1(RobotRaconteurWeb.MessageElement)).$ctor2((this.DataCount | 0));
                    for (var i4 = 0; System.Int64(i4).lt(System.Int64(this.DataCount)); i4 = (i4 + 1) | 0) {
                        var m4 = new RobotRaconteurWeb.MessageElement.ctor();
                        m4.Read(r);
                        l4.add(m4);

                    }
                    this.dat = new RobotRaconteurWeb.MessageElementMultiDimArray(l4);
                } else if (this.ElementType === RobotRaconteurWeb.DataTypes.pod_t) {
                    var l5 = new (System.Collections.Generic.List$1(RobotRaconteurWeb.MessageElement)).$ctor2((this.DataCount | 0));
                    for (var i5 = 0; System.Int64(i5).lt(System.Int64(this.DataCount)); i5 = (i5 + 1) | 0) {
                        var m5 = new RobotRaconteurWeb.MessageElement.ctor();
                        m5.Read(r);
                        l5.add(m5);

                    }
                    this.dat = new RobotRaconteurWeb.MessageElementPod(l5);
                } else if (this.ElementType === RobotRaconteurWeb.DataTypes.pod_array_t) {
                    var l6 = new (System.Collections.Generic.List$1(RobotRaconteurWeb.MessageElement)).$ctor2((this.DataCount | 0));
                    for (var i6 = 0; System.Int64(i6).lt(System.Int64(this.DataCount)); i6 = (i6 + 1) | 0) {
                        var m6 = new RobotRaconteurWeb.MessageElement.ctor();
                        m6.Read(r);
                        l6.add(m6);

                    }
                    this.dat = new RobotRaconteurWeb.MessageElementPodArray(this.ElementTypeName, l6);
                } else if (this.ElementType === RobotRaconteurWeb.DataTypes.pod_multidimarray_t) {
                    var l7 = new (System.Collections.Generic.List$1(RobotRaconteurWeb.MessageElement)).$ctor2((this.DataCount | 0));
                    for (var i7 = 0; System.Int64(i7).lt(System.Int64(this.DataCount)); i7 = (i7 + 1) | 0) {
                        var m7 = new RobotRaconteurWeb.MessageElement.ctor();
                        m7.Read(r);
                        l7.add(m7);

                    }
                    this.dat = new RobotRaconteurWeb.MessageElementPodMultiDimArray(this.ElementTypeName, l7);
                } else if (this.ElementType === RobotRaconteurWeb.DataTypes.pod_t) {
                    var l8 = new (System.Collections.Generic.List$1(RobotRaconteurWeb.MessageElement)).$ctor2((this.DataCount | 0));
                    for (var i8 = 0; System.Int64(i8).lt(System.Int64(this.DataCount)); i8 = (i8 + 1) | 0) {
                        var m8 = new RobotRaconteurWeb.MessageElement.ctor();
                        m8.Read(r);
                        l8.add(m8);

                    }
                    this.dat = new RobotRaconteurWeb.MessageElementPod(l8);
                } else if (this.ElementType === RobotRaconteurWeb.DataTypes.namedarray_array_t) {
                    var l9 = new (System.Collections.Generic.List$1(RobotRaconteurWeb.MessageElement)).$ctor2((this.DataCount | 0));
                    for (var i9 = 0; System.Int64(i9).lt(System.Int64(this.DataCount)); i9 = (i9 + 1) | 0) {
                        var m9 = new RobotRaconteurWeb.MessageElement.ctor();
                        m9.Read(r);
                        l9.add(m9);

                    }
                    this.dat = new RobotRaconteurWeb.MessageElementNamedArray(this.ElementTypeName, l9);
                } else if (this.ElementType === RobotRaconteurWeb.DataTypes.namedarray_multidimarray_t) {
                    var l10 = new (System.Collections.Generic.List$1(RobotRaconteurWeb.MessageElement)).$ctor2((this.DataCount | 0));
                    for (var i10 = 0; System.Int64(i10).lt(System.Int64(this.DataCount)); i10 = (i10 + 1) | 0) {
                        var m10 = new RobotRaconteurWeb.MessageElement.ctor();
                        m10.Read(r);
                        l10.add(m10);

                    }
                    this.dat = new RobotRaconteurWeb.MessageElementNamedMultiDimArray(this.ElementTypeName, l10);
                } else {
                    if (System.Int64(Bridge.Int.umul(this.DataCount, RobotRaconteurWeb.DataTypeUtil.size(this.ElementType))).gt(System.Int64(r.DistanceFromLimit))) {
                        throw new RobotRaconteurWeb.IOException("Error reading message");
                    }
                    var d = RobotRaconteurWeb.DataTypeUtil.ArrayFromDataType(this.ElementType, this.DataCount);
                    r.ReadArray(d);
                    this.dat = d;

                }

                if (r.DistanceFromLimit !== 0) {
                    throw new RobotRaconteurWeb.IOException("Error reading message");
                }
                r.PopLimit();

            },
            CastData: function (T) {
                if (this.Data == null) {
                    return Bridge.getDefaultValue(T);
                }
                if (Bridge.is(this.Data, T)) {
                    return Bridge.cast(Bridge.unbox(this.Data, T), T);
                }
                throw new RobotRaconteurWeb.DataTypeException("Could not cast data to type " + (Bridge.getTypeName(T) || ""));
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.MessageElementList", {
        fields: {
            Elements: null
        },
        ctors: {
            ctor: function (e) {
                this.$initialize();
                this.Elements = e;
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.MessageElementMap$1", function (T) { return {
        fields: {
            Elements: null
        },
        ctors: {
            ctor: function (e) {
                this.$initialize();
                this.Elements = e;
            }
        }
    }; });

    Bridge.define("RobotRaconteurWeb.MessageElementMultiDimArray", {
        fields: {
            Elements: null
        },
        ctors: {
            ctor: function (e) {
                this.$initialize();
                this.Elements = e;
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.MessageElementNamedArray", {
        fields: {
            Type: null,
            Elements: null
        },
        ctors: {
            ctor: function (type, e) {
                this.$initialize();
                this.Elements = e;
                this.Type = type;
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.MessageElementNamedMultiDimArray", {
        fields: {
            Type: null,
            Elements: null
        },
        ctors: {
            ctor: function (type, e) {
                this.$initialize();
                this.Elements = e;
                this.Type = type;
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.MessageElementPod", {
        fields: {
            Elements: null
        },
        ctors: {
            ctor: function (e) {
                this.$initialize();
                this.Elements = e;
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.MessageElementPodArray", {
        fields: {
            Type: null,
            Elements: null
        },
        ctors: {
            ctor: function (type, e) {
                this.$initialize();
                this.Elements = e;
                this.Type = type;
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.MessageElementPodMultiDimArray", {
        fields: {
            Type: null,
            Elements: null
        },
        ctors: {
            ctor: function (type, e) {
                this.$initialize();
                this.Elements = e;
                this.Type = type;
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.MessageElementStructure", {
        fields: {
            Elements: null,
            Type: null
        },
        ctors: {
            ctor: function (type_, elements_) {
                this.$initialize();
                this.Elements = elements_;
                this.Type = type_;
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.MessageElementUtil", {
        statics: {
            methods: {
                NewMessageElement$1: function (name, data) {
                    var m = new RobotRaconteurWeb.MessageElement.ctor();
                    m.ElementName = name;
                    m.Data = data;
                    return m;
                },
                NewMessageElement: function (i, data) {
                    var m = new RobotRaconteurWeb.MessageElement.ctor();
                    m.ElementName = Bridge.toString(i);
                    m.Data = data;
                    return m;
                },
                AddMessageElement$5: function (vct, name, data) {
                    var m = RobotRaconteurWeb.MessageElementUtil.NewMessageElement$1(name, data);
                    vct.add(m);
                },
                AddMessageElement$2: function (m, name, data) {
                    var m1 = RobotRaconteurWeb.MessageElementUtil.NewMessageElement$1(name, data);
                    m.AddElement(m1);
                },
                AddMessageElement$4: function (vct, i, data) {
                    var m = RobotRaconteurWeb.MessageElementUtil.NewMessageElement(i, data);
                    vct.add(m);
                },
                AddMessageElement$1: function (m, i, data) {
                    var m1 = RobotRaconteurWeb.MessageElementUtil.NewMessageElement(i, data);
                    m.AddElement(m1);
                },
                AddMessageElement$3: function (vct, m) {
                    vct.add(m);
                },
                AddMessageElement: function (m, mm) {
                    m.AddElement(mm);
                },
                FindElementAndCast: function (T, elems, name) {
                    var e = RobotRaconteurWeb.MessageElement.FindElement$1(elems, name);

                    return e.CastData(T);
                },
                FindElement$1: function (elems, name) {
                    return RobotRaconteurWeb.MessageElement.FindElement$1(elems, name);
                },
                FindElement: function (m, name) {
                    return RobotRaconteurWeb.MessageElement.FindElement(m, name);
                },
                CastData: function (T, m) {
                    return m.CastData(T);
                },
                GetMessageElementNumber: function (e) {
                    var res = { };
                    if (!System.Int32.tryParse(e.ElementName, res)) {
                        throw new RobotRaconteurWeb.ProtocolException("Could not determine Element Number");
                    }
                    return res.v;
                },
                PackScalar: function (T, name, val) {
                    return RobotRaconteurWeb.MessageElementUtil.NewMessageElement$1(name, System.Array.init([val], T));
                },
                PackArray: function (T, name, val) {
                    if (val == null) {
                        throw new System.NullReferenceException.ctor();
                    }
                    return RobotRaconteurWeb.MessageElementUtil.NewMessageElement$1(name, val);
                },
                PackMultiDimArray: function (node, name, val) {
                    if (val == null) {
                        throw new System.NullReferenceException.ctor();
                    }

                    return RobotRaconteurWeb.MessageElementUtil.NewMessageElement$1(name, node.PackMultiDimArray(val));
                },
                PackString: function (name, val) {
                    if (val == null) {
                        throw new System.NullReferenceException.ctor();
                    }
                    return RobotRaconteurWeb.MessageElementUtil.NewMessageElement$1(name, val);
                },
                PackStructure: function (node, client, name, val) {
                    return RobotRaconteurWeb.MessageElementUtil.NewMessageElement$1(name, node.PackStructure(val, client));
                },
                PackVarType: function (node, client, name, val) {
                    return RobotRaconteurWeb.MessageElementUtil.NewMessageElement$1(name, node.PackVarType(val, client));
                },
                PackMapType: function (K, T, node, client, name, val) {
                    return RobotRaconteurWeb.MessageElementUtil.NewMessageElement$1(name, node.PackMapType(K, T, val, client));
                },
                PackListType: function (T, node, client, name, val) {
                    return RobotRaconteurWeb.MessageElementUtil.NewMessageElement$1(name, node.PackListType(T, val, client));
                },
                PackEnum: function (T, name, val) {
                    return RobotRaconteurWeb.MessageElementUtil.NewMessageElement$1(name, System.Array.init([System.Nullable.getValue(Bridge.cast(Bridge.unbox(val, System.Int32), System.Int32))], System.Int32));
                },
                PackPodToArray: function (T, node, client, name, val) {
                    return RobotRaconteurWeb.MessageElementUtil.NewMessageElement$1(name, node.PackPodToArray(T, val, client));
                },
                PackPodArray: function (T, node, client, name, val) {
                    return RobotRaconteurWeb.MessageElementUtil.NewMessageElement$1(name, node.PackPodArray(T, val, client));
                },
                PackPodMultiDimArray: function (T, node, client, name, val) {
                    return RobotRaconteurWeb.MessageElementUtil.NewMessageElement$1(name, node.PackPodMultiDimArray(T, val, client));
                },
                PackNamedArrayToArray: function (T, node, client, name, val) {
                    return RobotRaconteurWeb.MessageElementUtil.NewMessageElement$1(name, node.PackNamedArrayToArray(T, val, client));
                },
                PackNamedArray: function (T, node, client, name, val) {
                    return RobotRaconteurWeb.MessageElementUtil.NewMessageElement$1(name, node.PackNamedArray(T, val, client));
                },
                PackNamedMultiDimArray: function (T, node, client, name, val) {
                    return RobotRaconteurWeb.MessageElementUtil.NewMessageElement$1(name, node.PackNamedMultiDimArray(T, val, client));
                },
                UnpackScalar: function (T, m) {
                    var a = RobotRaconteurWeb.MessageElementUtil.CastData(System.Array.type(T), m);
                    if (a.length !== 1) {
                        throw new RobotRaconteurWeb.DataTypeException("Invalid scalar");
                    }
                    return a[System.Array.index(0, a)];
                },
                UnpackArray: function (T, m) {
                    var a = RobotRaconteurWeb.MessageElementUtil.CastData(System.Array.type(T), m);
                    if (a == null) {
                        throw new System.NullReferenceException.ctor();
                    }
                    return a;
                },
                UnpackMultiDimArray: function (node, m) {
                    var a = node.UnpackMultiDimArray(RobotRaconteurWeb.MessageElementUtil.CastData(RobotRaconteurWeb.MessageElementMultiDimArray, m));
                    if (a == null) {
                        throw new System.NullReferenceException.ctor();
                    }
                    return a;
                },
                UnpackString: function (m) {
                    var s = RobotRaconteurWeb.MessageElementUtil.CastData(System.String, m);
                    if (s == null) {
                        throw new System.NullReferenceException.ctor();
                    }
                    return s;
                },
                UnpackStructure: function (T, node, client, m) {
                    return node.UnpackStructure(T, RobotRaconteurWeb.MessageElementUtil.CastData(RobotRaconteurWeb.MessageElementStructure, m), client);
                },
                UnpackVarType: function (node, client, m) {
                    return node.UnpackVarType(m, client);
                },
                UnpackMap: function (K, T, node, client, m) {
                    return Bridge.cast(node.UnpackMapType(K, T, m.Data, client), System.Collections.Generic.Dictionary$2(K,T));
                },
                UnpackList: function (T, node, client, m) {
                    return Bridge.cast(node.UnpackListType(T, m.Data, client), System.Collections.Generic.List$1(T));
                },
                UnpackEnum: function (T, m) {
                    var a = RobotRaconteurWeb.MessageElementUtil.CastData(System.Array.type(System.Int32), m);
                    if (a.length !== 1) {
                        throw new RobotRaconteurWeb.DataTypeException("Invalid enum");
                    }
                    return Bridge.cast(Bridge.unbox(Bridge.box(a[System.Array.index(0, a)], System.Int32), T), T);
                },
                UnpackPodFromArray: function (T, node, client, m) {
                    return node.UnpackPodFromArray(T, RobotRaconteurWeb.MessageElementUtil.CastData(RobotRaconteurWeb.MessageElementPodArray, m), client);
                },
                UnpackPodArray: function (T, node, client, m) {
                    return node.UnpackPodArray(T, RobotRaconteurWeb.MessageElementUtil.CastData(RobotRaconteurWeb.MessageElementPodArray, m), client);
                },
                UnpackPodMultiDimArray: function (T, node, client, m) {
                    return node.UnpackPodMultiDimArray(T, RobotRaconteurWeb.MessageElementUtil.CastData(RobotRaconteurWeb.MessageElementPodMultiDimArray, m), client);
                },
                UnpackNamedArrayFromArray: function (T, node, client, m) {
                    return node.UnpackNamedArrayFromArray(T, RobotRaconteurWeb.MessageElementUtil.CastData(RobotRaconteurWeb.MessageElementNamedArray, m), client);
                },
                UnpackNamedArray: function (T, node, client, m) {
                    return node.UnpackNamedArray(T, RobotRaconteurWeb.MessageElementUtil.CastData(RobotRaconteurWeb.MessageElementNamedArray, m), client);
                },
                UnpackNamedMultiDimArray: function (T, node, client, m) {
                    return node.UnpackNamedMultiDimArray(T, RobotRaconteurWeb.MessageElementUtil.CastData(RobotRaconteurWeb.MessageElementNamedMultiDimArray, m), client);
                },
                GetMessageElementDataTypeString: function (o) {
                    var f = Bridge.Reflection.getMembers(Bridge.getType(o), 4, 284, "Type");
                    return Bridge.cast(Bridge.Reflection.fieldAccess(f, Bridge.unbox(o)), System.String);
                }
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.MessageEntry", {
        fields: {
            EntrySize: 0,
            EntryType: 0,
            ServicePath: null,
            MemberName: null,
            RequestID: 0,
            Error: 0,
            MetaData: null,
            elements: null
        },
        ctors: {
            init: function () {
                this.ServicePath = "";
                this.MemberName = "";
                this.MetaData = "";
            },
            ctor: function () {
                this.$initialize();
                this.elements = new (System.Collections.Generic.List$1(RobotRaconteurWeb.MessageElement)).ctor();
            },
            $ctor1: function (t, n) {
                this.$initialize();
                this.elements = new (System.Collections.Generic.List$1(RobotRaconteurWeb.MessageElement)).ctor();
                this.EntryType = t;
                this.MemberName = n;
            }
        },
        methods: {
            ComputeSize: function () {
                var $t;
                var s = 22;
                $t = Bridge.getEnumerator(this.elements);
                try {
                    while ($t.moveNext()) {
                        var e = $t.Current;
                        s = (s + (e.ComputeSize())) >>> 0;
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }

                s = (s + ((RobotRaconteurWeb.ArrayBinaryWriter.GetStringByteCount8(this.ServicePath)) >>> 0)) >>> 0;
                s = (s + ((RobotRaconteurWeb.ArrayBinaryWriter.GetStringByteCount8(this.MemberName)) >>> 0)) >>> 0;
                s = (s + ((RobotRaconteurWeb.ArrayBinaryWriter.GetStringByteCount8(this.MetaData)) >>> 0)) >>> 0;

                return s;
            },
            FindElement: function (name) {
                var $t;

                if (this.elements == null) {
                    return null;
                }

                $t = Bridge.getEnumerator(this.elements);
                try {
                    while ($t.moveNext()) {
                        var m = $t.Current;
                        if (Bridge.referenceEquals(m.ElementName, name)) {
                            return m;
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }

                throw new RobotRaconteurWeb.MessageElementNotFoundException("Element " + (name || "") + " not found.");

            },
            TryFindElement: function (name, m) {
                var $t;
                if (this.elements != null) {
                    $t = Bridge.getEnumerator(this.elements);
                    try {
                        while ($t.moveNext()) {
                            var m1 = $t.Current;
                            if (Bridge.referenceEquals(m1.ElementName, name)) {
                                m.v = m1;
                                return false;
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                }
                m.v = null;
                return false;
            },
            AddElement$1: function (name, data) {
                var m = new RobotRaconteurWeb.MessageElement.ctor();
                m.ElementName = name;
                m.Data = data;

                if (this.elements == null) {
                    this.elements = new (System.Collections.Generic.List$1(RobotRaconteurWeb.MessageElement)).ctor();
                }
                this.elements.add(m);

                return m;
            },
            AddElement: function (m) {
                if (this.elements == null) {
                    this.elements = new (System.Collections.Generic.List$1(RobotRaconteurWeb.MessageElement)).ctor();
                }
                this.elements.add(m);

                return m;
            },
            Write: function (w) {
                var $t;

                this.EntrySize = this.ComputeSize();
                w.PushRelativeLimit(this.EntrySize);
                w.Write$16(this.EntrySize);
                w.Write$15((this.EntryType & 65535));
                w.Write$15(0);

                w.Write$15(((RobotRaconteurWeb.ArrayBinaryWriter.GetStringByteCount8(this.ServicePath)) & 65535));
                w.WriteString8(this.ServicePath);
                w.Write$15(((RobotRaconteurWeb.ArrayBinaryWriter.GetStringByteCount8(this.MemberName)) & 65535));
                w.WriteString8(this.MemberName);
                w.Write$16(this.RequestID);
                w.Write$15((this.Error & 65535));
                w.Write$15(((RobotRaconteurWeb.ArrayBinaryWriter.GetStringByteCount8(this.MetaData)) & 65535));
                w.WriteString8(this.MetaData);
                w.Write$15(((this.elements.Count) & 65535));

                $t = Bridge.getEnumerator(this.elements);
                try {
                    while ($t.moveNext()) {
                        var e = $t.Current;
                        e.Write(w);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }

                if (w.DistanceFromLimit !== 0) {
                    throw new RobotRaconteurWeb.IOException("Message write error");
                }
                w.PopLimit();
            },
            Read: function (r) {
                this.EntrySize = r.ReadUInt32();

                r.PushRelativeLimit(((this.EntrySize - 4) >>> 0));

                this.EntryType = r.ReadUInt16();
                r.ReadUInt16();

                var sname_s = r.ReadUInt16();
                this.ServicePath = r.ReadString8(sname_s);
                var mname_s = r.ReadUInt16();
                this.MemberName = r.ReadString8(mname_s);
                this.RequestID = r.ReadUInt32();
                this.Error = r.ReadUInt16();

                var metadata_s = r.ReadUInt16();
                this.MetaData = r.ReadString8(metadata_s);

                var ecount = r.ReadUInt16();



                this.elements = new (System.Collections.Generic.List$1(RobotRaconteurWeb.MessageElement)).$ctor2(ecount);
                for (var i = 0; i < ecount; i = (i + 1) | 0) {
                    var e = new RobotRaconteurWeb.MessageElement.ctor();
                    e.Read(r);
                    this.elements.add(e);
                }

                if (r.DistanceFromLimit !== 0) {
                    throw new RobotRaconteurWeb.IOException("Error reading message");
                }
                r.PopLimit();

            }
        }
    });

    Bridge.define("RobotRaconteurWeb.MessageEntryType", {
        $kind: "enum",
        statics: {
            fields: {
                Null: 0,
                StreamOp: 1,
                StreamOpRet: 2,
                StreamCheckCapability: 3,
                StreamCheckCapabilityRet: 4,
                StringTableOp: 5,
                StringTableOpRet: 6,
                GetServiceDesc: 101,
                GetServiceDescRet: 102,
                ObjectTypeName: 103,
                ObjectTypeNameRet: 104,
                ServiceClosed: 105,
                ServiceClosedRet: 106,
                ConnectClient: 107,
                ConnectClientRet: 108,
                DisconnectClient: 109,
                DisconnectClientRet: 110,
                ConnectionTest: 111,
                ConnectionTestRet: 112,
                GetNodeInfo: 113,
                GetNodeInfoRet: 114,
                ReconnectClient: 115,
                ReconnectClientRet: 116,
                NodeCheckCapability: 117,
                NodeCheckCapabilityRet: 118,
                GetServiceAttributes: 119,
                GetServiceAttributesRet: 120,
                ConnectClientCombined: 121,
                ConnectClientCombinedRet: 122,
                EndpointCheckCapability: 501,
                EndpointCheckCapabilityRet: 502,
                ServiceCheckCapabilityReq: 1101,
                ServiceCheckCapabilityRet: 1102,
                ClientKeepAliveReq: 1105,
                ClientKeepAliveRet: 1106,
                ClientSessionOpReq: 1107,
                ClientSessionOpRet: 1108,
                ServicePathReleasedReq: 1109,
                ServicePathReleasedRet: 1110,
                PropertyGetReq: 1111,
                PropertyGetRes: 1112,
                PropertySetReq: 1113,
                PropertySetRes: 1114,
                FunctionCallReq: 1121,
                FunctionCallRes: 1122,
                GeneratorNextReq: 1123,
                GeneratorNextRes: 1124,
                EventReq: 1131,
                EventRes: 1132,
                PipePacket: 1141,
                PipePacketRet: 1142,
                PipeConnectReq: 1143,
                PipeConnectRet: 1144,
                PipeDisconnectReq: 1145,
                PipeDisconnectRet: 1146,
                PipeClosed: 1147,
                PipeClosedRet: 1148,
                CallbackCallReq: 1151,
                CallbackCallRet: 1152,
                WirePacket: 1161,
                WirePacketRet: 1162,
                WireConnectReq: 1163,
                WireConnectRet: 1164,
                WireDisconnectReq: 1165,
                WireDisconnectRet: 1166,
                WireClosed: 1167,
                WireClosedRet: 1168,
                MemoryRead: 1171,
                MemoryReadRet: 1172,
                MemoryWrite: 1173,
                MemoryWriteRet: 1174,
                MemoryGetParam: 1175,
                MemoryGetParamRet: 1176,
                WirePeekInValueReq: 1181,
                WirePeekInValueRet: 1182,
                WirePeekOutValueReq: 1183,
                WirePeekOutValueRet: 1184,
                WirePokeOutValueReq: 1185,
                WirePokeOutValueRet: 1186,
                WireTransportOpReq: 11161,
                WireTransportOpRet: 11162,
                WireTransportEvent: 11163,
                WireTransportEventRet: 11164
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.MessageErrorType", {
        $kind: "enum",
        statics: {
            fields: {
                None: 0,
                ConnectionError: 1,
                ProtocolError: 2,
                ServiceNotFound: 3,
                ObjectNotFound: 4,
                InvalidEndpoint: 5,
                EndpointCommunicationFatalError: 6,
                NodeNotFound: 7,
                ServiceError: 8,
                MemberNotFound: 9,
                MemberFormatMismatch: 10,
                DataTypeMismatch: 11,
                DataTypeError: 12,
                DataSerializationError: 13,
                MessageEntryNotFound: 14,
                MessageElementNotFound: 15,
                UnknownError: 16,
                InvalidOperation: 17,
                InvalidArgument: 18,
                OperationFailed: 19,
                NullValue: 20,
                InternalError: 21,
                SystemResourcePermissionDenied: 22,
                OutOfSystemResource: 23,
                SystemResourceError: 24,
                ResourceNotFound: 25,
                IOError: 26,
                BufferLimitViolation: 27,
                ServiceDefinitionError: 28,
                OutOfRange: 29,
                KeyNotFound: 30,
                RemoteError: 100,
                RequestTimeout: 101,
                ReadOnlyMember: 102,
                WriteOnlyMember: 103,
                NotImplementedError: 104,
                MemberBusy: 105,
                ValueNotSet: 106,
                AbortOperation: 107,
                OperationAborted: 108,
                StopIteration: 109,
                AuthenticationError: 150,
                ObjectLockedError: 151,
                PermissionDenied: 152
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.MessageHeader", {
        fields: {
            HeaderLength: 0,
            SenderEndpoint: 0,
            ReceiverEndpoint: 0,
            SenderNodeName: null,
            ReceiverNodeName: null,
            SenderNodeID: null,
            ReceiverNodeID: null,
            MetaData: null,
            EntryCount: 0,
            MessageID: 0,
            MessageResID: 0,
            MessageSize: 0
        },
        ctors: {
            init: function () {
                this.SenderNodeName = "";
                this.ReceiverNodeName = "";
                this.SenderNodeID = new RobotRaconteurWeb.NodeID.ctor(System.Array.init([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], System.Byte));
                this.ReceiverNodeID = new RobotRaconteurWeb.NodeID.ctor(System.Array.init([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], System.Byte));
                this.MetaData = "";
            }
        },
        methods: {
            ComputeSize: function () {
                return ((((((((64 + RobotRaconteurWeb.ArrayBinaryWriter.GetStringByteCount8(this.SenderNodeName)) | 0) + RobotRaconteurWeb.ArrayBinaryWriter.GetStringByteCount8(this.ReceiverNodeName)) | 0) + RobotRaconteurWeb.ArrayBinaryWriter.GetStringByteCount8(this.MetaData)) | 0)) & 65535);
            },
            UpdateHeader: function (message_size, entry_count) {
                this.HeaderLength = this.ComputeSize();
                this.MessageSize = message_size;
                this.EntryCount = entry_count;
            },
            Write: function (w) {
                w.PushRelativeLimit(this.HeaderLength);
                w.WriteString8("RRAC");
                w.Write$16(this.MessageSize);
                w.Write$15(2);

                w.Write$15(this.HeaderLength);

                var bSenderNodeID = this.SenderNodeID.ToByteArray();
                var bReceiverNodeID = this.ReceiverNodeID.ToByteArray();
                for (var i = 0; i < 16; i = (i + 1) | 0) {
                    w.Write$1(bSenderNodeID[System.Array.index(i, bSenderNodeID)]);
                }
                ;
                for (var i1 = 0; i1 < 16; i1 = (i1 + 1) | 0) {
                    w.Write$1(bReceiverNodeID[System.Array.index(i1, bReceiverNodeID)]);
                }
                ;
                w.Write$16(this.SenderEndpoint);
                w.Write$16(this.ReceiverEndpoint);
                w.Write$15(((RobotRaconteurWeb.ArrayBinaryWriter.GetStringByteCount8(this.SenderNodeName)) & 65535));
                w.WriteString8(this.SenderNodeName);
                w.Write$15(((RobotRaconteurWeb.ArrayBinaryWriter.GetStringByteCount8(this.ReceiverNodeName)) & 65535));
                w.WriteString8(this.ReceiverNodeName);
                w.Write$15(((RobotRaconteurWeb.ArrayBinaryWriter.GetStringByteCount8(this.MetaData)) & 65535));
                w.WriteString8(this.MetaData);
                w.Write$15(this.EntryCount);
                w.Write$15(this.MessageID);
                w.Write$15(this.MessageResID);

                if (w.DistanceFromLimit !== 0) {
                    throw new RobotRaconteurWeb.IOException("Message write error");
                }
                w.PopLimit();

            },
            Read: function (r) {
                var seed = r.ReadString8(4);
                if (!Bridge.referenceEquals(seed, "RRAC")) {
                    throw new RobotRaconteurWeb.ProtocolException("Incorrect message seed");
                }
                this.MessageSize = r.ReadUInt32();
                var version = r.ReadUInt16();
                if (version !== 2) {
                    throw new RobotRaconteurWeb.ProtocolException("Uknown protocol version");
                }

                this.HeaderLength = r.ReadUInt16();

                r.PushRelativeLimit(((((this.HeaderLength - 12) | 0)) >>> 0));

                var bSenderNodeID = System.Array.init([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], System.Byte);
                for (var i = 0; i < 16; i = (i + 1) | 0) {
                    bSenderNodeID[System.Array.index(i, bSenderNodeID)] = r.ReadByte();
                }
                ;
                this.SenderNodeID = new RobotRaconteurWeb.NodeID.ctor(bSenderNodeID);
                var bReceiverNodeID = System.Array.init([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], System.Byte);
                for (var i1 = 0; i1 < 16; i1 = (i1 + 1) | 0) {
                    bReceiverNodeID[System.Array.index(i1, bReceiverNodeID)] = r.ReadByte();
                }
                ;
                this.ReceiverNodeID = new RobotRaconteurWeb.NodeID.ctor(bReceiverNodeID);
                this.SenderEndpoint = r.ReadUInt32();
                this.ReceiverEndpoint = r.ReadUInt32();
                var pname_s = r.ReadUInt16();
                this.SenderNodeName = r.ReadString8(pname_s);
                var pname_r = r.ReadUInt16();
                this.ReceiverNodeName = r.ReadString8(pname_r);
                var meta_s = r.ReadUInt16();
                this.MetaData = r.ReadString8(meta_s);

                this.EntryCount = r.ReadUInt16();
                this.MessageID = r.ReadUInt16();
                this.MessageResID = r.ReadUInt16();
                if (r.DistanceFromLimit !== 0) {
                    throw new RobotRaconteurWeb.IOException("Error reading message");
                }
                r.PopLimit();

            }
        }
    });

    Bridge.define("RobotRaconteurWeb.MultiDimArray", {
        fields: {
            Dims: null,
            Array_: null
        },
        ctors: {
            ctor: function () {
                this.$initialize();
            },
            $ctor1: function (Dims, Array_) {
                this.$initialize();

                this.Dims = Dims;
                this.Array_ = Array_;
            }
        },
        methods: {
            RetrieveSubArray: function (memorypos, buffer, bufferpos, count) {

                var mema = this;
                var memb = buffer;

                var iter = RobotRaconteurWeb.MultiDimArray_CalculateCopyIndicesIter.BeginIter(mema.Dims, memorypos, memb.Dims, bufferpos, count);

                var indexa = { };
                var indexb = { };
                var len = { };

                while (iter.Next(indexa, indexb, len)) {
                    System.Array.copy(mema.Array_, System.Int64(indexa.v).toNumber(), memb.Array_, System.Int64(indexb.v).toNumber(), System.Int64(len.v).toNumber());
                }

            },
            AssignSubArray: function (memorypos, buffer, bufferpos, count) {


                var mema = this;
                var memb = buffer;

                var iter = RobotRaconteurWeb.MultiDimArray_CalculateCopyIndicesIter.BeginIter(mema.Dims, memorypos, memb.Dims, bufferpos, count);

                var indexa = { };
                var indexb = { };
                var len = { };

                while (iter.Next(indexa, indexb, len)) {
                    System.Array.copy(memb.Array_, System.Int64(indexb.v).toNumber(), mema.Array_, System.Int64(indexa.v).toNumber(), System.Int64(len.v).toNumber());

                }
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.MultiDimArray_CalculateCopyIndicesIter", {
        statics: {
            methods: {
                BeginIter: function (mema_dims, mema_pos, memb_dims, memb_pos, count) {
                    if (count.length === 0) {
                        throw new System.ArgumentException.$ctor1("MultiDimArray count invalid");
                    }

                    if (count.length > mema_dims.length || count.length > memb_dims.length) {
                        throw new System.ArgumentException.$ctor1("MultiDimArray copy count invalid");
                    }
                    if (count.length > memb_dims.length || count.length > memb_dims.length) {
                        throw new System.ArgumentException.$ctor1("MultiDimArray copy count invalid");
                    }

                    for (var i = 0; i < mema_dims.length; i = (i + 1) | 0) {
                        if (mema_dims[System.Array.index(i, mema_dims)] < 0) {
                            throw new System.ArgumentException.$ctor1("MultiDimArray mema_dims invalid");
                        }
                    }

                    for (var i1 = 0; i1 < memb_dims.length; i1 = (i1 + 1) | 0) {
                        if (memb_dims[System.Array.index(i1, memb_dims)] < 0) {
                            throw new System.ArgumentException.$ctor1("MultiDimArray memb_dims invalid");
                        }
                    }

                    for (var i2 = 0; i2 < count.length; i2 = (i2 + 1) | 0) {
                        if (count[System.Array.index(i2, count)] < 0) {
                            throw new System.ArgumentException.$ctor1("MultiDimArray count invalid");
                        }
                    }

                    for (var i3 = 0; i3 < mema_dims.length && i3 < count.length; i3 = (i3 + 1) | 0) {
                        if (mema_pos[System.Array.index(i3, mema_pos)] > mema_dims[System.Array.index(i3, mema_dims)] || (((mema_pos[System.Array.index(i3, mema_pos)] + count[System.Array.index(i3, count)]) >>> 0)) > mema_dims[System.Array.index(i3, mema_dims)]) {
                            throw new System.ArgumentException.$ctor1("MultiDimArray A count invalid");
                        }
                    }

                    for (var i4 = 0; i4 < memb_dims.length && i4 < count.length; i4 = (i4 + 1) | 0) {
                        if (memb_pos[System.Array.index(i4, memb_pos)] > memb_dims[System.Array.index(i4, memb_dims)] || (((memb_pos[System.Array.index(i4, memb_pos)] + count[System.Array.index(i4, count)]) >>> 0)) > memb_dims[System.Array.index(i4, memb_dims)]) {
                            throw new System.ArgumentException.$ctor1("MultiDimArray B count invalid");
                        }
                    }

                    var stridea = System.Array.init(count.length, 0, System.UInt32);
                    stridea[System.Array.index(0, stridea)] = 1;
                    for (var i5 = 1; i5 < ((count.length) >>> 0); i5 = (i5 + 1) >>> 0) {
                        stridea[System.Array.index(i5, stridea)] = Bridge.Int.umul(stridea[System.Array.index(((i5 - 1) >>> 0), stridea)], mema_dims[System.Array.index(((i5 - 1) >>> 0), mema_dims)]);
                    }

                    var strideb = System.Array.init(count.length, 0, System.UInt32);
                    strideb[System.Array.index(0, strideb)] = 1;
                    for (var i6 = 1; i6 < ((count.length) >>> 0); i6 = (i6 + 1) >>> 0) {
                        strideb[System.Array.index(i6, strideb)] = Bridge.Int.umul(strideb[System.Array.index(((i6 - 1) >>> 0), strideb)], memb_dims[System.Array.index(((i6 - 1) >>> 0), memb_dims)]);
                    }

                    var o = new RobotRaconteurWeb.MultiDimArray_CalculateCopyIndicesIter();

                    o.mema_dims = mema_dims;
                    o.memb_dims = memb_dims;
                    o.mema_pos = mema_pos;
                    o.memb_pos = memb_pos;
                    o.count = count;
                    o.current_count = System.Array.init(count.length, 0, System.UInt32);
                    o.done = false;
                    o.stridea = stridea;
                    o.strideb = strideb;
                    return o;
                }
            }
        },
        fields: {
            mema_dims: null,
            memb_dims: null,
            mema_pos: null,
            memb_pos: null,
            count: null,
            stridea: null,
            strideb: null,
            current_count: null,
            done: false
        },
        methods: {
            Next: function (indexa, indexb, len) {
                var $t;
                if (this.done) {
                    indexa.v = 0;
                    indexb.v = 0;
                    len.v = 0;
                    return false;
                }

                var a = 0;
                var b = 0;

                indexa.v = 0;
                for (var j = 0; j < ((this.count.length) >>> 0); j = (j + 1) >>> 0) {
                    indexa.v = (indexa.v + (Bridge.Int.umul((((this.current_count[System.Array.index(j, this.current_count)] + this.mema_pos[System.Array.index(j, this.mema_pos)]) >>> 0)), this.stridea[System.Array.index(j, this.stridea)]))) >>> 0;
                }
                indexb.v = 0;
                for (var j1 = 0; j1 < ((this.count.length) >>> 0); j1 = (j1 + 1) >>> 0) {
                    indexb.v = (indexb.v + (Bridge.Int.umul((((this.current_count[System.Array.index(j1, this.current_count)] + this.memb_pos[System.Array.index(j1, this.memb_pos)]) >>> 0)), this.strideb[System.Array.index(j1, this.strideb)]))) >>> 0;
                }

                len.v = this.count[System.Array.index(0, this.count)];

                if (this.count.length <= 1) {
                    this.done = true;
                    return true;
                }

                this.current_count[System.Array.index(1, this.current_count)] = (this.current_count[System.Array.index(1, this.current_count)] + 1) >>> 0;
                for (var j2 = 1; j2 < ((this.count.length) >>> 0); j2 = (j2 + 1) >>> 0) {
                    if (this.current_count[System.Array.index(j2, this.current_count)] > (((this.count[System.Array.index(j2, this.count)] - 1) >>> 0))) {
                        this.current_count[System.Array.index(j2, this.current_count)] = (this.current_count[System.Array.index(j2, this.current_count)] - this.count[System.Array.index(j2, this.count)]) >>> 0;
                        if (j2 < ((((this.count.length) >>> 0) - 1) >>> 0)) {
                            this.current_count[System.Array.index(($t = ((j2 + 1) >>> 0)), this.current_count)] = (this.current_count[System.Array.index($t, this.current_count)] + 1) >>> 0;
                        } else {
                            this.done = true;
                            return true;
                        }
                    }
                }

                return true;
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.MultiDimArrayMemoryBase");

    Bridge.define("RobotRaconteurWeb.MultiDimArrayMemoryClientImplBase", {
        statics: {
            methods: {
                CalculateMatrixBlocks: function (element_size, count, max_elems, split_dim, split_dim_block, split_elem_count, splits_count, split_remainder, block_count, block_count_edge) {
                    split_elem_count.v = System.UInt64(1);
                    split_dim.v = -1;
                    split_dim_block.v = System.UInt64(0);
                    var split_dim_found = false;
                    block_count.v = System.Array.init(count.length, System.UInt64(0), System.UInt64);
                    splits_count.v = 0;
                    split_remainder.v = 0;
                    for (var i = 0; i < count.length; i = (i + 1) | 0) {
                        if (!split_dim_found) {
                            var temp_elem_count1 = split_elem_count.v.mul(count[System.Array.index(i, count)]);
                            if (temp_elem_count1.gt(max_elems)) {
                                split_dim.v = i;
                                split_dim_block.v = max_elems.div(split_elem_count.v);
                                split_dim_found = true;
                                block_count.v[System.Array.index(i, block_count.v)] = split_dim_block.v;
                                splits_count.v = System.Int64.clip32(count[System.Array.index(i, count)].div(split_dim_block.v));
                                split_remainder.v = System.Int64.clip32(count[System.Array.index(i, count)].mod(split_dim_block.v));
                            } else {
                                split_elem_count.v = temp_elem_count1;
                                block_count.v[System.Array.index(i, block_count.v)] = count[System.Array.index(i, count)];
                            }
                        } else {
                            block_count.v[System.Array.index(i, block_count.v)] = System.UInt64(1);
                        }
                    }

                    block_count_edge.v = System.Array.init(block_count.v.length, System.UInt64(0), System.UInt64);
                    System.Array.copy(block_count.v, 0, block_count_edge.v, 0, block_count.v.length);
                    block_count_edge.v[System.Array.index(split_dim.v, block_count_edge.v)] = count[System.Array.index(split_dim.v, count)].mod(split_dim_block.v);
                }
            }
        },
        fields: {
            m_MemberName: null,
            stub: null,
            direction: 0,
            element_type: 0,
            element_size: 0,
            max_size_read: false,
            remote_max_size: 0
        },
        props: {
            MemberName: {
                get: function () {
                    return this.m_MemberName;
                }
            },
            Direction: {
                get: function () {
                    return this.direction;
                }
            }
        },
        ctors: {
            ctor: function (membername, stub, element_type, element_size, direction) {
                this.$initialize();
                this.stub = stub;
                this.m_MemberName = membername;
                this.direction = direction;
                this.element_type = element_type;
                this.element_size = element_size;
            }
        },
        methods: {
            GetDimCount: function (cancel) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    m, 
                    ret, 
                    $t, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        if (cancel === void 0) { cancel = new System.Threading.CancellationToken(); }
                                        m = new RobotRaconteurWeb.MessageEntry.$ctor1(RobotRaconteurWeb.MessageEntryType.MemoryGetParam, this.MemberName);
                                        m.AddElement$1("parameter", "DimCount");
                                        $task1 = this.stub.ProcessRequest(m, cancel);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        ret = $taskResult1;
                                        $tcs.setResult(($t = ret.FindElement("return").CastData(System.Array.type(System.UInt64)))[System.Array.index(0, $t)]);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            GetDimensions: function (cancel) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    m, 
                    ret, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        if (cancel === void 0) { cancel = new System.Threading.CancellationToken(); }
                                        m = new RobotRaconteurWeb.MessageEntry.$ctor1(RobotRaconteurWeb.MessageEntryType.MemoryGetParam, this.MemberName);
                                        m.AddElement$1("parameter", "Dimensions");
                                        $task1 = this.stub.ProcessRequest(m, cancel);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        ret = $taskResult1;
                                        $tcs.setResult(ret.FindElement("return").CastData(System.Array.type(System.UInt64)));
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            GetMaxTransferSize: function (cancel) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    my_max_size, 
                    m, 
                    ret, 
                    remote_max_size1, 
                    $t, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        if (cancel === void 0) { cancel = new System.Threading.CancellationToken(); }
                                        my_max_size = this.stub.rr_node.MemoryMaxTransferSize;
                                        this;
                                        {
                                            if (this.max_size_read) {
                                                if (this.remote_max_size > my_max_size) {
                                                    $tcs.setResult(my_max_size);
                                                    return;
                                                } else {
                                                    $tcs.setResult(this.remote_max_size);
                                                    return;
                                                }
                                            }
                                        }

                                        m = new RobotRaconteurWeb.MessageEntry.$ctor1(RobotRaconteurWeb.MessageEntryType.MemoryGetParam, this.MemberName);
                                        m.AddElement$1("parameter", "MaxTransferSize");
                                        $task1 = this.stub.ProcessRequest(m, cancel);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        ret = $taskResult1;
                                        remote_max_size1 = ($t = ret.FindElement("return").CastData(System.Array.type(System.UInt32)))[System.Array.index(0, $t)];
                                        this;
                                        {
                                            if (!this.max_size_read) {
                                                this.remote_max_size = remote_max_size1;
                                                this.max_size_read = true;
                                            }

                                            if (this.remote_max_size > my_max_size) {
                                                $tcs.setResult(my_max_size);
                                                return;
                                            } else {
                                                $tcs.setResult(this.remote_max_size);
                                                return;
                                            }
                                        }
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            ReadImpl: function (memorypos, buffer, bufferpos, count, cancel) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $task3, 
                    $task4, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    max_transfer_size, 
                    elemcount, 
                    max_elems, 
                    e, 
                    ret, 
                    split_dim, 
                    split_dim_block, 
                    split_elem_count, 
                    splits_count, 
                    split_remainder, 
                    block_count, 
                    block_count_edge, 
                    done, 
                    current_pos, 
                    i, 
                    current_buf_pos, 
                    current_mem_pos, 
                    current_buf_pos1, 
                    current_mem_pos1, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,16], $step);
                                switch ($step) {
                                    case 0: {
                                        if (cancel === void 0) { cancel = new System.Threading.CancellationToken(); }
                                        if (this.direction === RobotRaconteurWeb.MemberDefinition_Direction.writeonly) {
                                            throw new RobotRaconteurWeb.WriteOnlyMemberException("Write only member");
                                        }

                                        $task1 = this.GetMaxTransferSize(cancel);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        max_transfer_size = $taskResult1;

                                        elemcount = System.Linq.Enumerable.from(count, System.UInt64).aggregate(System.UInt64(1), function (x, y) {
                                            return x.mul(y);
                                        });
                                        max_elems = System.UInt64(Bridge.Int.div(max_transfer_size, this.element_size));

                                        if (elemcount.lte(max_elems)) {
                                            $step = 2;
                                            continue;
                                        } else  {
                                            $step = 4;
                                            continue;
                                        }
                                    }
                                    case 2: {
                                        e = new RobotRaconteurWeb.MessageEntry.$ctor1(RobotRaconteurWeb.MessageEntryType.MemoryRead, this.MemberName);
                                        e.AddElement$1("memorypos", memorypos);
                                        e.AddElement$1("count", count);
                                        $task2 = this.stub.ProcessRequest(e, cancel);
                                        $step = 3;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 3: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        ret = $taskResult2;

                                        this.UnpackReadResult(ret.FindElement("data").Data, buffer, bufferpos, count, elemcount);
                                        $step = 16;
                                        continue;
                                    }
                                    case 4: {
                                        split_dim = { };
                                        split_dim_block = { };
                                        split_elem_count = { };
                                        splits_count = { };
                                        split_remainder = { };
                                        block_count = { };
                                        block_count_edge = { };

                                        RobotRaconteurWeb.MultiDimArrayMemoryClientImplBase.CalculateMatrixBlocks(this.element_size, count, max_elems, split_dim, split_dim_block, split_elem_count, splits_count, split_remainder, block_count, block_count_edge);

                                        done = false;
                                        current_pos = System.Array.init(count.length, System.UInt64(0), System.UInt64);

                                        
                                        $step = 5;
                                        continue;
                                    }
                                    case 5: {
                                        if ( !done ) {
                                            $step = 6;
                                            continue;
                                        } 
                                        $step = 15;
                                        continue;
                                    }
                                    case 6: {
                                        i = 0;
                                        $step = 7;
                                        continue;
                                    }
                                    case 7: {
                                        if ( System.Int64(i).lt(System.Int64(splits_count.v)) ) {
                                            $step = 8;
                                            continue;
                                        }
                                        $step = 11;
                                        continue;
                                    }
                                    case 8: {
                                        current_pos[System.Array.index(split_dim.v, current_pos)] = split_dim_block.v.mul(System.UInt64(i));

                                        current_buf_pos = System.Array.init(bufferpos.length, System.UInt64(0), System.UInt64);
                                        current_mem_pos = System.Array.init(bufferpos.length, System.UInt64(0), System.UInt64);

                                        for (var j = System.Int64(0); j.lt(System.Array.getLongLength(current_buf_pos)); j = j.inc()) {
                                            current_buf_pos[System.Array.index(System.Int64.toNumber(j), current_buf_pos)] = current_pos[System.Array.index(System.Int64.toNumber(j), current_pos)].add(bufferpos[System.Array.index(System.Int64.toNumber(j), bufferpos)]);
                                            current_mem_pos[System.Array.index(System.Int64.toNumber(j), current_mem_pos)] = current_pos[System.Array.index(System.Int64.toNumber(j), current_pos)].add(memorypos[System.Array.index(System.Int64.toNumber(j), memorypos)]);
                                        }

                                        $task3 = this.ReadImpl(current_mem_pos, buffer, current_buf_pos, block_count.v);
                                        $step = 9;
                                        if ($task3.isCompleted()) {
                                            continue;
                                        }
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 9: {
                                        $task3.getAwaitedResult();
                                        $step = 10;
                                        continue;
                                    }
                                    case 10: {
                                        i = (i + 1) >>> 0;
                                        $step = 7;
                                        continue;
                                    }
                                    case 11: {
                                        if (split_remainder.v !== 0) {
                                            $step = 12;
                                            continue;
                                        } 
                                        $step = 14;
                                        continue;
                                    }
                                    case 12: {
                                        current_pos[System.Array.index(split_dim.v, current_pos)] = split_dim_block.v.mul(Bridge.Int.clipu64(splits_count.v));
                                        current_buf_pos1 = System.Array.init(bufferpos.length, System.UInt64(0), System.UInt64);
                                        current_mem_pos1 = System.Array.init(bufferpos.length, System.UInt64(0), System.UInt64);

                                        for (var j1 = System.Int64(0); j1.lt(System.Array.getLongLength(current_buf_pos1)); j1 = j1.inc()) {
                                            current_buf_pos1[System.Array.index(System.Int64.toNumber(j1), current_buf_pos1)] = current_pos[System.Array.index(System.Int64.toNumber(j1), current_pos)].add(bufferpos[System.Array.index(System.Int64.toNumber(j1), bufferpos)]);
                                            current_mem_pos1[System.Array.index(System.Int64.toNumber(j1), current_mem_pos1)] = current_pos[System.Array.index(System.Int64.toNumber(j1), current_pos)].add(memorypos[System.Array.index(System.Int64.toNumber(j1), memorypos)]);
                                        }

                                        $task4 = this.ReadImpl(current_mem_pos1, buffer, current_buf_pos1, block_count_edge.v);
                                        $step = 13;
                                        if ($task4.isCompleted()) {
                                            continue;
                                        }
                                        $task4.continue($asyncBody);
                                        return;
                                    }
                                    case 13: {
                                        $task4.getAwaitedResult();
                                        $step = 14;
                                        continue;
                                    }
                                    case 14: {
                                        if (split_dim.v === ((count.length - 1) | 0)) {
                                            done = true;
                                        } else {
                                            current_pos[System.Array.index(((split_dim.v + 1) | 0), current_pos)] = current_pos[System.Array.index(((split_dim.v + 1) | 0), current_pos)].inc();
                                            if (current_pos[System.Array.index(((split_dim.v + 1) | 0), current_pos)].gte(count[System.Array.index(((split_dim.v + 1) | 0), count)])) {
                                                if (((split_dim.v + 1) | 0) === ((count.length - 1) | 0)) {
                                                    done = true;
                                                } else {
                                                    current_pos[System.Array.index(((split_dim.v + 1) | 0), current_pos)] = System.UInt64(0);
                                                    for (var j2 = (split_dim.v + 2) | 0; j2 < count.length; j2 = (j2 + 1) | 0) {
                                                        if (current_pos[System.Array.index(((j2 - 1) | 0), current_pos)].gte(count[System.Array.index(((j2 - 1) | 0), count)])) {
                                                            current_pos[System.Array.index(j2, current_pos)] = current_pos[System.Array.index(j2, current_pos)].inc();
                                                        }
                                                    }
                                                    if (current_pos[System.Array.index(((count.length - 1) | 0), current_pos)].gte(count[System.Array.index(((count.length - 1) | 0), count)])) {
                                                        done = true;
                                                    }
                                                }
                                            }
                                        }

                                        $step = 5;
                                        continue;
                                    }

                                    case 16: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            WriteImpl: function (memorypos, buffer, bufferpos, count, cancel) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $task3, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    max_transfer_size, 
                    elemcount, 
                    max_elems, 
                    e, 
                    ret, 
                    split_dim, 
                    split_dim_block, 
                    split_elem_count, 
                    splits_count, 
                    split_remainder, 
                    block_count, 
                    block_count_edge, 
                    done, 
                    current_pos, 
                    i, 
                    current_buf_pos, 
                    current_mem_pos, 
                    current_buf_pos1, 
                    current_mem_pos1, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,6,7,8,9,10,11,12,13,15], $step);
                                switch ($step) {
                                    case 0: {
                                        if (cancel === void 0) { cancel = new System.Threading.CancellationToken(); }
                                        if (this.direction === RobotRaconteurWeb.MemberDefinition_Direction.readonly_) {
                                            throw new RobotRaconteurWeb.ReadOnlyMemberException("Read only member");
                                        }

                                        $task1 = this.GetMaxTransferSize();
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        max_transfer_size = $taskResult1;

                                        elemcount = System.Linq.Enumerable.from(count, System.UInt64).aggregate(System.UInt64(1), function (x, y) {
                                            return x.mul(y);
                                        });

                                        max_elems = (Bridge.Int.div(max_transfer_size, this.element_size)) >>> 0;

                                        if (elemcount.lte(System.UInt64(max_elems))) {
                                            $step = 2;
                                            continue;
                                        } else  {
                                            $step = 3;
                                            continue;
                                        }
                                    }
                                    case 2: {
                                        e = new RobotRaconteurWeb.MessageEntry.$ctor1(RobotRaconteurWeb.MessageEntryType.MemoryWrite, this.MemberName);
                                        e.AddElement$1("memorypos", memorypos);
                                        e.AddElement$1("count", count);

                                        e.AddElement$1("data", this.PackWriteRequest(buffer, bufferpos, count, elemcount));

                                        ret = this.stub.ProcessRequest(e, cancel);
                                        $step = 15;
                                        continue;
                                    }
                                    case 3: {
                                        split_dim = { };
                                        split_dim_block = { };
                                        split_elem_count = { };
                                        splits_count = { };
                                        split_remainder = { };
                                        block_count = { };
                                        block_count_edge = { };

                                        RobotRaconteurWeb.MultiDimArrayMemoryClientImplBase.CalculateMatrixBlocks(this.element_size, count, System.UInt64(max_elems), split_dim, split_dim_block, split_elem_count, splits_count, split_remainder, block_count, block_count_edge);

                                        done = false;
                                        current_pos = System.Array.init(count.length, System.UInt64(0), System.UInt64);

                                        
                                        $step = 4;
                                        continue;
                                    }
                                    case 4: {
                                        if ( !done ) {
                                            $step = 5;
                                            continue;
                                        } 
                                        $step = 14;
                                        continue;
                                    }
                                    case 5: {
                                        i = 0;
                                        $step = 6;
                                        continue;
                                    }
                                    case 6: {
                                        if ( System.Int64(i).lt(System.Int64(splits_count.v)) ) {
                                            $step = 7;
                                            continue;
                                        }
                                        $step = 10;
                                        continue;
                                    }
                                    case 7: {
                                        current_pos[System.Array.index(split_dim.v, current_pos)] = split_dim_block.v.mul(System.UInt64(i));

                                        current_buf_pos = System.Array.init(bufferpos.length, System.UInt64(0), System.UInt64);
                                        current_mem_pos = System.Array.init(bufferpos.length, System.UInt64(0), System.UInt64);

                                        for (var j = System.Int64(0); j.lt(System.Array.getLongLength(current_buf_pos)); j = j.inc()) {
                                            current_buf_pos[System.Array.index(System.Int64.toNumber(j), current_buf_pos)] = current_pos[System.Array.index(System.Int64.toNumber(j), current_pos)].add(bufferpos[System.Array.index(System.Int64.toNumber(j), bufferpos)]);
                                            current_mem_pos[System.Array.index(System.Int64.toNumber(j), current_mem_pos)] = current_pos[System.Array.index(System.Int64.toNumber(j), current_pos)].add(memorypos[System.Array.index(System.Int64.toNumber(j), memorypos)]);
                                        }

                                        $task2 = this.WriteImpl(current_mem_pos, buffer, current_buf_pos, block_count.v);
                                        $step = 8;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 8: {
                                        $task2.getAwaitedResult();
                                        $step = 9;
                                        continue;
                                    }
                                    case 9: {
                                        i = (i + 1) >>> 0;
                                        $step = 6;
                                        continue;
                                    }
                                    case 10: {
                                        if (split_remainder.v !== 0) {
                                            $step = 11;
                                            continue;
                                        } 
                                        $step = 13;
                                        continue;
                                    }
                                    case 11: {
                                        current_pos[System.Array.index(split_dim.v, current_pos)] = split_dim_block.v.mul(Bridge.Int.clipu64(splits_count.v));
                                        current_buf_pos1 = System.Array.init(bufferpos.length, System.UInt64(0), System.UInt64);
                                        current_mem_pos1 = System.Array.init(bufferpos.length, System.UInt64(0), System.UInt64);

                                        for (var j1 = System.Int64(0); j1.lt(System.Array.getLongLength(current_buf_pos1)); j1 = j1.inc()) {
                                            current_buf_pos1[System.Array.index(System.Int64.toNumber(j1), current_buf_pos1)] = current_pos[System.Array.index(System.Int64.toNumber(j1), current_pos)].add(bufferpos[System.Array.index(System.Int64.toNumber(j1), bufferpos)]);
                                            current_mem_pos1[System.Array.index(System.Int64.toNumber(j1), current_mem_pos1)] = current_pos[System.Array.index(System.Int64.toNumber(j1), current_pos)].add(memorypos[System.Array.index(System.Int64.toNumber(j1), memorypos)]);
                                        }

                                        $task3 = this.WriteImpl(current_mem_pos1, buffer, current_buf_pos1, block_count_edge.v);
                                        $step = 12;
                                        if ($task3.isCompleted()) {
                                            continue;
                                        }
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 12: {
                                        $task3.getAwaitedResult();
                                        $step = 13;
                                        continue;
                                    }
                                    case 13: {
                                        if (split_dim.v === (((count.length - 1) | 0))) {
                                            done = true;
                                        } else {
                                            current_pos[System.Array.index(((split_dim.v + 1) | 0), current_pos)] = current_pos[System.Array.index(((split_dim.v + 1) | 0), current_pos)].inc();
                                            if (current_pos[System.Array.index(((split_dim.v + 1) | 0), current_pos)].gte(count[System.Array.index(((split_dim.v + 1) | 0), count)])) {
                                                if (((split_dim.v + 1) | 0) === (((count.length - 1) | 0))) {
                                                    done = true;
                                                } else {
                                                    current_pos[System.Array.index(((split_dim.v + 1) | 0), current_pos)] = System.UInt64(0);
                                                    for (var j2 = (split_dim.v + 2) | 0; j2 < count.length; j2 = (j2 + 1) | 0) {
                                                        if (current_pos[System.Array.index(((j2 - 1) | 0), current_pos)].gte(count[System.Array.index(((j2 - 1) | 0), count)])) {
                                                            current_pos[System.Array.index(j2, current_pos)] = current_pos[System.Array.index(j2, current_pos)].inc();
                                                        }
                                                    }
                                                    if (current_pos[System.Array.index(System.Int64.toNumber(System.Array.getLongLength(count).sub(System.Int64(1))), current_pos)].gte(count[System.Array.index(System.Int64.toNumber(System.Array.getLongLength(count).sub(System.Int64(1))), count)])) {
                                                        done = true;
                                                    }
                                                }
                                            }
                                        }

                                        $step = 4;
                                        continue;
                                    }

                                    case 15: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.MultiDimArrayMemoryServiceSkelBase", {
        fields: {
            m_MemberName: null,
            skel: null,
            direction: 0,
            element_type: 0,
            element_size: 0
        },
        props: {
            MemberName: {
                get: function () {
                    return this.m_MemberName;
                }
            }
        },
        ctors: {
            ctor: function (membername, skel, element_type, element_size, direction) {
                this.$initialize();
                this.m_MemberName = membername;
                this.skel = skel;
                this.direction = direction;
                this.element_type = element_type;
                this.element_size = element_size;
            }
        },
        methods: {
            CallMemoryFunction: function (m, e, mem) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $task3, 
                    $taskResult3, 
                    $task4, 
                    $taskResult4, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $t, 
                    memorypos, 
                    count, 
                    elem_count, 
                    data, 
                    ret, 
                    memorypos1, 
                    count1, 
                    elem_count1, 
                    data1, 
                    ret1, 
                    param, 
                    ret2, 
                    l, 
                    ret3, 
                    l1, 
                    ret4, 
                    MaxTransferSize, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14], $step);
                                switch ($step) {
                                    case 0: {
                                        $t = m.EntryType;
                                        if ($t === RobotRaconteurWeb.MessageEntryType.MemoryRead) {
                                            $step = 1;
                                            continue;
                                        }
                                        else if ($t === RobotRaconteurWeb.MessageEntryType.MemoryWrite) {
                                            $step = 3;
                                            continue;
                                        }
                                        else if ($t === RobotRaconteurWeb.MessageEntryType.MemoryGetParam) {
                                            $step = 5;
                                            continue;
                                        }
                                        else  {
                                            $step = 13;
                                            continue;
                                        }
                                        $step = 14;
                                        continue;
                                    }
                                    case 1: {
                                        if (this.direction === RobotRaconteurWeb.MemberDefinition_Direction.writeonly) {
                                            throw new RobotRaconteurWeb.WriteOnlyMemberException("Write only member");
                                        }

                                        memorypos = m.FindElement("memorypos").CastData(System.Array.type(System.UInt64));
                                        count = m.FindElement("count").CastData(System.Array.type(System.UInt64));
                                        elem_count = System.Linq.Enumerable.from(count, System.UInt64).aggregate(System.UInt64(1), function (x, y) {
                                            return x.mul(y);
                                        });
                                        $task1 = this.DoRead(memorypos, System.Array.init(count.length, System.UInt64(0), System.UInt64), count, elem_count, mem);
                                        $step = 2;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        data = $taskResult1;
                                        ret = new RobotRaconteurWeb.MessageEntry.$ctor1(RobotRaconteurWeb.MessageEntryType.MemoryReadRet, this.MemberName);
                                        ret.AddElement$1("memorypos", memorypos);
                                        ret.AddElement$1("count", count);
                                        ret.AddElement$1("data", data);
                                        $tcs.setResult(ret);
                                        return;
                                    }
                                    case 3: {
                                        if (this.direction === RobotRaconteurWeb.MemberDefinition_Direction.readonly_) {
                                            throw new RobotRaconteurWeb.ReadOnlyMemberException("Read only member");
                                        }

                                        memorypos1 = m.FindElement("memorypos").CastData(System.Array.type(System.UInt64));
                                        count1 = m.FindElement("count").CastData(System.Array.type(System.UInt64));
                                        elem_count1 = System.Linq.Enumerable.from(count1, System.UInt64).aggregate(System.UInt64(1), function (x, y) {
                                            return x.mul(y);
                                        });
                                        data1 = m.FindElement("data").Data;
                                        $task2 = this.DoWrite(memorypos1, data1, System.Array.init(count1.length, System.UInt64(0), System.UInt64), count1, elem_count1, mem);
                                        $step = 4;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 4: {
                                        $task2.getAwaitedResult();
                                        ret1 = new RobotRaconteurWeb.MessageEntry.$ctor1(RobotRaconteurWeb.MessageEntryType.MemoryReadRet, this.MemberName);
                                        ret1.AddElement$1("memorypos", memorypos1);
                                        ret1.AddElement$1("count", count1);
                                        $tcs.setResult(ret1);
                                        return;
                                    }
                                    case 5: {
                                        param = m.FindElement("parameter").CastData(System.String);
                                        if (Bridge.referenceEquals(param, "Dimensions")) {
                                            $step = 6;
                                            continue;
                                        } 
                                        $step = 8;
                                        continue;
                                    }
                                    case 6: {
                                        ret2 = new RobotRaconteurWeb.MessageEntry.$ctor1(RobotRaconteurWeb.MessageEntryType.MemoryGetParamRet, this.MemberName);
                                        $task3 = mem.GetDimensions();
                                        $step = 7;
                                        if ($task3.isCompleted()) {
                                            continue;
                                        }
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 7: {
                                        $taskResult3 = $task3.getAwaitedResult();
                                        l = $taskResult3;
                                        ret2.AddElement$1("return", l);
                                        $tcs.setResult(ret2);
                                        return;
                                    }
                                    case 8: {
                                        if (Bridge.referenceEquals(param, "DimCount")) {
                                            $step = 9;
                                            continue;
                                        } else  {
                                            $step = 11;
                                            continue;
                                        }
                                    }
                                    case 9: {
                                        ret3 = new RobotRaconteurWeb.MessageEntry.$ctor1(RobotRaconteurWeb.MessageEntryType.MemoryGetParamRet, this.MemberName);
                                        $task4 = mem.GetDimCount();
                                        $step = 10;
                                        if ($task4.isCompleted()) {
                                            continue;
                                        }
                                        $task4.continue($asyncBody);
                                        return;
                                    }
                                    case 10: {
                                        $taskResult4 = $task4.getAwaitedResult();
                                        l1 = $taskResult4;
                                        ret3.AddElement$1("return", l1);
                                        $tcs.setResult(ret3);
                                        return;
                                    }
                                    case 11: {
                                        if (Bridge.referenceEquals(param, "MaxTransferSize")) {
                                            ret4 = new RobotRaconteurWeb.MessageEntry.$ctor1(RobotRaconteurWeb.MessageEntryType.MemoryGetParamRet, this.MemberName);
                                            MaxTransferSize = this.skel.rr_node.MemoryMaxTransferSize;
                                            ret4.AddElement$1("return", Bridge.box(MaxTransferSize, System.UInt32));
                                            $tcs.setResult(ret4);
                                            return;

                                        } else {
                                            throw new System.InvalidOperationException.$ctor1("Unknown parameter");
                                        }
                                        $step = 12;
                                        continue;
                                    }
                                    case 12: {

                                    }
                                    case 13: {
                                        throw new RobotRaconteurWeb.ProtocolException("Invalid command");
                                    }
                                    case 14: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.NamedMultiDimArray", {
        fields: {
            Dims: null,
            namedarray_array: null
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                this.Dims = System.Array.init([0], System.UInt32);
            },
            $ctor1: function (dims, array) {
                this.$initialize();
                this.Dims = dims;
                this.namedarray_array = array;
            }
        },
        methods: {
            RetrieveSubArray: function (memorypos, buffer, bufferpos, count) {

                var mema = this;
                var memb = buffer;

                var iter = RobotRaconteurWeb.MultiDimArray_CalculateCopyIndicesIter.BeginIter(mema.Dims, memorypos, memb.Dims, bufferpos, count);

                var indexa = { };
                var indexb = { };
                var len = { };

                while (iter.Next(indexa, indexb, len)) {
                    System.Array.copy(mema.namedarray_array, System.Int64(indexa.v).toNumber(), memb.namedarray_array, System.Int64(indexb.v).toNumber(), System.Int64(len.v).toNumber());
                }

            },
            AssignSubArray: function (memorypos, buffer, bufferpos, count) {
                var mema = this;
                var memb = buffer;

                var iter = RobotRaconteurWeb.MultiDimArray_CalculateCopyIndicesIter.BeginIter(mema.Dims, memorypos, memb.Dims, bufferpos, count);

                var indexa = { };
                var indexb = { };
                var len = { };

                while (iter.Next(indexa, indexb, len)) {
                    System.Array.copy(memb.namedarray_array, System.Int64(indexb.v).toNumber(), mema.namedarray_array, System.Int64(indexa.v).toNumber(), System.Int64(len.v).toNumber());
                }
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.NodeDiscoveryInfo", {
        fields: {
            NodeID: null,
            NodeName: null,
            URLs: null
        },
        ctors: {
            init: function () {
                this.NodeName = "";
                this.URLs = new (System.Collections.Generic.List$1(RobotRaconteurWeb.NodeDiscoveryInfoURL)).ctor();
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.NodeDiscoveryInfoURL", {
        fields: {
            URL: null,
            LastAnnounceTime: null
        },
        ctors: {
            init: function () {
                this.LastAnnounceTime = System.DateTime.getDefaultValue();
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.NodeID", {
        statics: {
            props: {
                Any: {
                    get: function () {
                        return new RobotRaconteurWeb.NodeID.ctor(System.Array.init(16, 0, System.Byte));
                    }
                }
            },
            methods: {
                TryParse$1: function (stringid, bytes) {
                    if (Bridge.referenceEquals(stringid, "{0}")) {
                        bytes.v = System.Array.init(16, 0, System.Byte);
                        return true;
                    }

                    bytes.v = null;
                    var r = new System.Text.RegularExpressions.Regex.ctor("\\{?([a-fA-F0-9]{8})-([a-fA-F0-9]{4})-([a-fA-F0-9]{4})-([a-fA-F0-9]{4})-([a-fA-F0-9]{12})\\}?");
                    var res = r.match(stringid);
                    if (!res.getSuccess()) {
                        return false;
                    }
                    var res1 = "";
                    for (var i = 1; i < 6; i = (i + 1) | 0) {
                        res1 = (res1 || "") + (res.getGroups().get(i).getValue() || "");
                    }
                    bytes.v = System.Array.init(16, 0, System.Byte);
                    for (var i1 = 0; i1 < 16; i1 = (i1 + 1) | 0) {
                        bytes.v[System.Array.index(i1, bytes.v)] = System.Convert.toNumberInBase(res1.substr(Bridge.Int.mul(i1, 2), 2), 16, 6);
                    }
                    return true;
                },
                TryParse: function (stringid, nodeid) {
                    var bytes = { };
                    nodeid.v = null;
                    if (!RobotRaconteurWeb.NodeID.TryParse$1(stringid, bytes)) {
                        return false;
                    }
                    nodeid.v = new RobotRaconteurWeb.NodeID.ctor(bytes.v);
                    return true;
                },
                NewUniqueID: function () {
                    var guid = System.Guid.NewGuid().ToString("B");
                    return new RobotRaconteurWeb.NodeID.$ctor1(guid);
                },
                op_Explicit: function (i) {
                    return i.ToByteArray();
                },
                op_Equality: function (id1, id2) {
                    if (id1 == null && id2 == null) {
                        return true;
                    }
                    if ((id1 == null && id2 != null) || (id1 != null && id2 == null)) {
                        return false;
                    }

                    return System.Linq.Enumerable.from(id1.id, System.Byte).sequenceEqual(id2.id);
                },
                op_Inequality: function (id1, id2) {
                    if (id1 == null && id2 == null) {
                        return false;
                    }
                    if ((id1 == null && id2 != null) || (id1 != null && id2 == null)) {
                        return true;
                    }

                    return !System.Linq.Enumerable.from(id1.id, System.Byte).sequenceEqual(id2.id);
                }
            }
        },
        fields: {
            id: null
        },
        props: {
            IsAnyNode: {
                get: function () {
                    return System.Linq.Enumerable.from(this.id, System.Byte).all(function (x) {
                            return x === 0;
                        });
                }
            }
        },
        ctors: {
            ctor: function (id) {
                this.$initialize();
                if (id.length !== 16) {
                    throw new System.InvalidOperationException.$ctor1("Node ID must be 128 bits long");
                }
                this.id = id;
            },
            $ctor1: function (id) {
                this.$initialize();
                var id1 = { v : null };
                if (RobotRaconteurWeb.NodeID.TryParse$1(id, id1)) {
                    this.id = id1.v;
                    return;
                }

                if (id1.v == null) {
                    throw new System.InvalidOperationException.$ctor1("Invalid format for NodeID");
                }
                this.id = id1.v;
            }
        },
        methods: {
            ToByteArray: function () {
                var bid = System.Array.init(16, 0, System.Byte);
                System.Array.copy(this.id, 0, bid, 0, 16);
                return bid;
            },
            toString: function () {
                var hexvals = System.Linq.Enumerable.from(this.id, System.Byte).select(function (x) {
                        return System.String.format("{0:x2}", [Bridge.box(x, System.Byte)]);
                    }).ToArray(System.String);
                var g1 = hexvals.slice(0, 0 + 4).join("");
                var g2 = hexvals.slice(4, 4 + 2).join("");
                var g3 = hexvals.slice(6, 6 + 2).join("");
                var g4 = hexvals.slice(8, 8 + 2).join("");
                var g5 = hexvals.slice(10, 10 + 6).join("");

                return "{" + (System.Array.init([g1, g2, g3, g4, g5], System.String).join("-") || "") + "}";
            },
            equals: function (obj) {
                if (obj == null) {
                    return false;
                }
                if (!(Bridge.is(obj, RobotRaconteurWeb.NodeID))) {
                    return false;
                }
                return RobotRaconteurWeb.NodeID.op_Equality(this, Bridge.cast(obj, RobotRaconteurWeb.NodeID));
            },
            getHashCode: function () {
                var $t;
                var sum = 0;
                $t = Bridge.getEnumerator(this.id);
                try {
                    while ($t.moveNext()) {
                        var b = $t.Current;
                        sum = (sum + b) | 0;
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
                return sum;
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.NodeInfo2", {
        fields: {
            NodeID: null,
            NodeName: null,
            ConnectionURL: null
        }
    });

    Bridge.define("RobotRaconteurWeb.ParseConnectionUrlResult", {
        fields: {
            scheme: null,
            host: null,
            port: 0,
            path: null,
            nodeid: null,
            nodename: null,
            service: null
        },
        ctors: {
            init: function () {
                this.port = 0;
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.PeriodicTask", {
        statics: {
            methods: {
                Run$1: function (action, period, cancellationToken) {
                    var $step = 0,
                        $task1, 
                        $jumpFromFinally, 
                        $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                        $returnValue, 
                        $async_e, 
                        $asyncBody = Bridge.fn.bind(this, function () {
                            try {
                                for (;;) {
                                    $step = System.Array.min([1,2,3,4], $step);
                                    switch ($step) {

                                        case 1: {
                                            if ( !cancellationToken.getIsCancellationRequested() ) {
                                                $step = 2;
                                                continue;
                                            } 
                                            $step = 4;
                                            continue;
                                        }
                                        case 2: {
                                            $task1 = System.Threading.Tasks.Task.delay(period, cancellationToken);
                                            $step = 3;
                                            if ($task1.isCompleted()) {
                                                continue;
                                            }
                                            $task1.continue($asyncBody);
                                            return;
                                        }
                                        case 3: {
                                            $task1.getAwaitedResult();
                                            if (cancellationToken.getIsCancellationRequested()) {
                                                $step = 4;
                                                continue;
                                            }
                                            action();

                                            $step = 1;
                                            continue;
                                        }
                                        case 4: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        default: {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                    }
                                }
                            } catch($async_e1) {
                                $async_e = System.Exception.create($async_e1);
                                $tcs.setException($async_e);
                            }
                        }, arguments);

                    $asyncBody();
                    return $tcs.task;
                },
                Run: function (action, period) {
                    return RobotRaconteurWeb.PeriodicTask.Run$1(action, period, System.Threading.CancellationToken.none);
                }
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.Pipe$1", function (T) { return {
        statics: {
            fields: {
                ANY_INDEX: 0
            },
            ctors: {
                init: function () {
                    this.ANY_INDEX = -1;
                }
            }
        },
        fields: {
            rawelements: false
        },
        ctors: {
            init: function () {
                this.rawelements = false;
            },
            ctor: function () {
                this.$initialize();
                if (Bridge.referenceEquals(T, RobotRaconteurWeb.MessageElement)) {
                    this.rawelements = true;
                }

            }
        },
        methods: {
            DispatchPacketAck: function (me, e) {
                var $t;
                var pnum = ($t = me.CastData(System.Array.type(System.UInt32)))[System.Array.index(0, $t)];
                e.PipePacketAckReceived(pnum);
            },
            DispatchPacket: function (me, e, packetnumber) {
                var $t, $t1;
                var index = System.Int32.parse(me.ElementName);
                var elems = Bridge.cast(me.Data, RobotRaconteurWeb.MessageElementMap$1(System.String)).Elements;
                packetnumber.v = ($t = (RobotRaconteurWeb.MessageElement.FindElement$1(elems, "packetnumber").CastData(System.Array.type(System.UInt32))))[System.Array.index(0, $t)];
                var data;
                if (!this.rawelements) {
                    data = this.UnpackVarType(RobotRaconteurWeb.MessageElement.FindElement$1(elems, "packet"));
                } else {
                    data = RobotRaconteurWeb.MessageElement.FindElement$1(elems, "packet");
                }

                if (Bridge.is(data, Array)) {
                    if (Bridge.isArray(null, T)) {
                        e.PipePacketReceived(Bridge.cast(Bridge.unbox(data, T), T), packetnumber.v);
                    } else {
                        e.PipePacketReceived(($t1 = Bridge.cast(data, System.Array.type(T)))[System.Array.index(0, $t1)], packetnumber.v);
                    }
                } else {
                    e.PipePacketReceived(Bridge.cast(Bridge.unbox(data, T), T), packetnumber.v);
                }

                var requestack = (System.Linq.Enumerable.from(elems, RobotRaconteurWeb.MessageElement).any(function (x) {
                        return Bridge.referenceEquals(x.ElementName, "requestack");
                    }));
                return requestack;
            },
            PackPacket: function (data, index, packetnumber, requestack) {
                var elems = new (System.Collections.Generic.List$1(RobotRaconteurWeb.MessageElement)).ctor();
                elems.add(new RobotRaconteurWeb.MessageElement.$ctor1("packetnumber", Bridge.box(packetnumber, System.UInt32)));
                if (!this.rawelements) {
                    var pdata = this.PackVarType(data);
                    elems.add(new RobotRaconteurWeb.MessageElement.$ctor1("packet", pdata));
                } else {
                    var pme = Bridge.cast(data, RobotRaconteurWeb.MessageElement);
                    pme.ElementName = "packet";
                    elems.add(pme);
                }

                if (requestack) {
                    elems.add(new RobotRaconteurWeb.MessageElement.$ctor1("requestack", System.Array.init([1], System.Int32)));
                }

                var delems = new (RobotRaconteurWeb.MessageElementMap$1(System.String))(elems);

                var me = new RobotRaconteurWeb.MessageElement.$ctor1(Bridge.toString(index), delems);

                return me;
            }
        }
    }; });

    Bridge.define("RobotRaconteurWeb.Pipe$1.PipeEndpoint", function (T) { return {
        $kind: "nested class",
        fields: {
            send_packet_number: 0,
            recv_packet_number: 0,
            parent: null,
            index: 0,
            endpoint: null,
            RequestPacketAck: false,
            send_mutex: null,
            out_of_order_packets: null,
            recv_lock: null,
            recv_packets: null,
            close_callback: null
        },
        events: {
            PacketReceivedEvent: null,
            PacketAckReceivedEvent: null
        },
        props: {
            Index: {
                get: function () {
                    return this.index;
                }
            },
            Endpoint: {
                get: function () {
                    return this.endpoint.LocalEndpoint;
                }
            },
            Available: {
                get: function () {
                    this.recv_lock;
                    {
                        return this.recv_packets.Count;
                    }
                }
            },
            PipeCloseCallback: {
                get: function () {
                    return this.close_callback;
                },
                set: function (value) {
                    this.close_callback = value;
                }
            }
        },
        ctors: {
            init: function () {
                this.send_packet_number = 0;
                this.recv_packet_number = 0;
                this.RequestPacketAck = false;
                this.send_mutex = new RobotRaconteurWeb.AsyncMutex();
                this.out_of_order_packets = new (System.Collections.Generic.Dictionary$2(System.UInt32,T)).ctor();
                this.recv_lock = { };
                this.recv_packets = new (System.Collections.Generic.Queue$1(T)).ctor();
            },
            ctor: function (parent, index, endpoint) {
                if (endpoint === void 0) { endpoint = null; }

                this.$initialize();
                this.parent = parent;
                this.index = index;
                this.endpoint = endpoint;
            }
        },
        methods: {
            SendPacket: function (packet, cancel) {
                var $step = 0,
                    $task1, 
                    $task2, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    mutex, 
                    $async_e, 
                    $async_e1, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5], $step);
                                switch ($step) {
                                    case 0: {
                                        if (cancel === void 0) { cancel = new System.Threading.CancellationToken(); }
                                        mutex = this.send_mutex.Enter();
                                        
                                        $step = 1;
                                        continue;
                                    }
                                    case 1: {
                                        $task1 = mutex;
                                        $step = 2;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $task1.getAwaitedResult();
                                        this.send_packet_number = (this.send_packet_number < 4294967295) ? ((this.send_packet_number + 1) >>> 0) : 0;

                                        $task2 = this.parent.SendPipePacket(packet, this.index, this.send_packet_number, this.RequestPacketAck, this.endpoint, cancel);
                                        $step = 3;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 3: {
                                        $task2.getAwaitedResult();
                                        $returnValue = this.send_packet_number;
                                        $step = 4;
                                        continue;
                                    }
                                    case 4: {
                                        this.send_mutex.Exit(mutex);

                                        if ($jumpFromFinally > -1) {
                                            $step = $jumpFromFinally;
                                            $jumpFromFinally = null;
                                        } else if ($async_e) {
                                            $tcs.setException($async_e);
                                            return;
                                        } else if (Bridge.isDefined($returnValue)) {
                                            $tcs.setResult($returnValue);
                                            return;
                                        }
                                        $step = 5;
                                        continue;
                                    }
                                    case 5: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            if ($step >= 1 && $step <= 3) {
                                $step = 4;
                                $asyncBody();
                                return;
                            }
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            Close: function () {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = this.parent.Close(this);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            increment_packet_number: function (packetnum) {
                return (packetnum < 4294967295) ? ((packetnum + 1) >>> 0) : 0;

            },
            PipePacketReceived: function (packet, packetnum) {
                this.recv_lock;
                {
                    if (packetnum === this.increment_packet_number(this.recv_packet_number)) {
                        this.recv_packets.Enqueue(packet);
                        this.recv_packet_number = this.increment_packet_number(this.recv_packet_number);
                        if (this.out_of_order_packets.Count > 0) {
                            while (System.Linq.Enumerable.from(this.out_of_order_packets.Keys, System.UInt32).contains(this.increment_packet_number(this.recv_packet_number))) {
                                this.recv_packet_number = this.increment_packet_number(this.recv_packet_number);
                                var opacket = this.out_of_order_packets.getItem(this.recv_packet_number);
                                this.recv_packets.Enqueue(opacket);
                                this.out_of_order_packets.remove(this.recv_packet_number);
                            }
                        }

                        if (!Bridge.staticEquals(this.PacketReceivedEvent, null)) {
                            try {
                                this.PacketReceivedEvent(this);
                            } catch ($e1) {
                                $e1 = System.Exception.create($e1);
                            }
                        }
                    } else {
                        this.out_of_order_packets.add(packetnum, packet);
                    }
                }
            },
            PipePacketAckReceived: function (packetnum) {
                this.PacketAckReceivedEvent(this, packetnum);
            },
            PeekNextPacket: function () {
                this.recv_lock;
                {
                    return this.recv_packets.Peek();
                }
            },
            ReceivePacket: function () {
                this.recv_lock;
                {
                    return this.recv_packets.Dequeue();
                }
            },
            RemoteClose: function () {
                if (!Bridge.staticEquals(this.close_callback, null)) {
                    try {
                        this.close_callback(this);
                    } catch ($e1) {
                        $e1 = System.Exception.create($e1);
                    }
                }
                ;
                try {
                    RobotRaconteurWeb.Extensions.Extensions.IgnoreResult(this.Close());
                } catch ($e2) {
                    $e2 = System.Exception.create($e2);
                }
            }
        }
    }; });

    Bridge.define("RobotRaconteurWeb.PipeBroadcaster$1", function (T) { return {
        fields: {
            pipe: null,
            endpoints: null,
            maximum_backlog: 0
        },
        props: {
            Pipe: {
                get: function () {
                    return this.pipe;
                }
            }
        },
        ctors: {
            init: function () {
                this.endpoints = new (System.Collections.Generic.List$1(RobotRaconteurWeb.PipeBroadcaster$1.connected_endpoint(T))).ctor();
            },
            ctor: function (pipe, maximum_backlog) {
                if (maximum_backlog === void 0) { maximum_backlog = -1; }

                this.$initialize();
                this.pipe = pipe;
                this.maximum_backlog = maximum_backlog;
                pipe.PipeConnectCallback = Bridge.fn.cacheBind(this, this.EndpointConnected);
            }
        },
        methods: {
            EndpointConnected: function (ep) {
                this.endpoints;
                {
                    var cep = new (RobotRaconteurWeb.PipeBroadcaster$1.connected_endpoint(T))(ep);
                    ep.PipeCloseCallback = Bridge.fn.bind(this, function (ep1) {
                        this.EndpointClosed(cep);
                    });
                    ep.addPacketReceivedEvent(Bridge.fn.cacheBind(this, this.PacketReceived));
                    ep.addPacketAckReceivedEvent(Bridge.fn.bind(this, function (ep1, pnum) {
                        this.PacketAckReceived(cep, pnum);
                    }));
                    ep.RequestPacketAck = true;
                    this.endpoints.add(cep);
                }
            },
            EndpointClosed: function (ep) {
                this.endpoints;
                {

                    try {
                        this.endpoints.remove(ep);
                    } catch ($e1) {
                        $e1 = System.Exception.create($e1);
                    }
                }
            },
            PacketReceived: function (ep) {
                this.endpoints;
                {
                    try {
                        while (ep.Available > 0) {
                            ep.ReceivePacket();
                        }
                    } catch ($e1) {
                        $e1 = System.Exception.create($e1);
                    }
                }
            },
            PacketAckReceived: function (ep, pnum) {
                this.endpoints;
                {
                    try {
                        if (System.Linq.Enumerable.from(ep.backlog, System.UInt32).count(function (x) {
                                return x === pnum;
                            }) === 0) {
                            ep.forward_backlog.add(pnum);
                        } else {
                            ep.backlog.remove(pnum);
                        }
                    } catch ($e1) {
                        $e1 = System.Exception.create($e1);
                    }
                }
            },
            AsyncSendPacket: function (packet, cancel) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    endpoints1, 
                    eps, 
                    $t, 
                    cep, 
                    ep, 
                    t, 
                    send_key, 
                    $e1, 
                    i, 
                    t1, 
                    cep1, 
                    pnum, 
                    $async_e, 
                    $async_e1, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,7,8,9,10,11,13,14,15], $step);
                                switch ($step) {
                                    case 0: {
                                        if (cancel === void 0) { cancel = new System.Threading.CancellationToken(); }
                                        endpoints1 = new (System.Collections.Generic.List$1(RobotRaconteurWeb.PipeBroadcaster$1.connected_endpoint(T))).ctor();
                                        this.endpoints;
                                        {
                                            this.endpoints.ForEach(function (item) {
                                                endpoints1.add(item);
                                            });
                                        }

                                        eps = new (System.Collections.Generic.List$1(System.Tuple$3(System.Threading.Tasks.Task$1(System.UInt32),RobotRaconteurWeb.PipeBroadcaster$1.connected_endpoint(T),System.Object))).ctor();

                                        $t = Bridge.getEnumerator(endpoints1);
                                        try {
                                            while ($t.moveNext()) {
                                                cep = $t.Current;
                                                try {
                                                    ep = cep.ep;
                                                    if (ep == null) {
                                                        this.endpoints;
                                                        {
                                                            this.endpoints.remove(cep);

                                                        }
                                                        continue;
                                                    }


                                                    this.endpoints;
                                                    {
                                                        if (this.maximum_backlog !== -1 && ((cep.backlog.Count + cep.active_sends.Count) | 0) > this.maximum_backlog) {
                                                            continue;
                                                        }
                                                    }
                                                    t = ep.SendPacket(packet, cancel);
                                                    send_key = { };

                                                    this.endpoints;
                                                    {
                                                        cep.active_sends.add(send_key);
                                                    }
                                                    eps.add({ Item1: t, Item2: cep, Item3: send_key });
                                                } catch ($e1) {
                                                    $e1 = System.Exception.create($e1);
                                                }
                                            }
                                        } finally {
                                            if (Bridge.is($t, System.IDisposable)) {
                                                $t.System$IDisposable$Dispose();
                                            }
                                        }

                                        
                                        $step = 1;
                                        continue;
                                    }
                                    case 1: {
                                        if ( eps.Count > 0 ) {
                                            $step = 2;
                                            continue;
                                        } 
                                        $step = 15;
                                        continue;
                                    }
                                    case 2: {
                                        $task1 = System.Threading.Tasks.Task.whenAny.apply(System.Threading.Tasks.Task, System.Linq.Enumerable.from(eps, System.Tuple$3(System.Threading.Tasks.Task$1(System.UInt32),RobotRaconteurWeb.PipeBroadcaster$1.connected_endpoint(T),System.Object)).select(function (x) {
                                            return x.Item1;
                                        }).ToArray(System.Threading.Tasks.Task$1(System.UInt32)));
                                        $step = 3;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 3: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        i = 0;
                                        $step = 4;
                                        continue;
                                    }
                                    case 4: {
                                        if ( i < eps.Count ) {
                                            $step = 5;
                                            continue;
                                        }
                                        $step = 14;
                                        continue;
                                    }
                                    case 5: {
                                        t1 = eps.getItem(i).Item1;
                                        cep1 = eps.getItem(i).Item2;
                                        if (t1.isCompleted() || t1.isFaulted() || t1.isCanceled()) {
                                            $step = 6;
                                            continue;
                                        } else  {
                                            $step = 11;
                                            continue;
                                        }
                                    }

                                    case 7: {
                                        $task2 = t1;
                                        $step = 8;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 8: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        pnum = { v : $taskResult2 };
                                        this.endpoints;
                                        {
                                            cep1.active_sends.remove(eps.getItem(i).Item3);
                                            if (this.maximum_backlog !== -1) {
                                                if (System.Linq.Enumerable.from(cep1.forward_backlog, System.UInt32).count((function ($me, pnum) {
                                                    return function (x) {
                                                        return x === pnum.v;
                                                    };
                                                })(this, pnum)) !== 0) {
                                                    cep1.forward_backlog.remove(pnum.v);
                                                } else {
                                                    cep1.backlog.add(pnum.v);
                                                }
                                            }
                                        }
                                        $step = 10;
                                        continue;
                                    }
                                    case 9: {
                                        this.endpoints;
                                        {
                                            this.endpoints.remove(cep1);
                                        }
                                        $async_e = null;
                                        $step = 10;
                                        continue;
                                    }
                                    case 10: {
                                        eps.removeAt(i);
                                        $step = 12;
                                        continue;
                                    }
                                    case 11: {
                                        i = (i + 1) | 0;
                                        $step = 12;
                                        continue;
                                    }

                                    case 13: {
                                        $step = 4;
                                        continue;
                                    }
                                    case 14: {
                                        
                                        $step = 1;
                                        continue;
                                    }
                                    case 15: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            if ( $step >= 7 && $step <= 8 ) {
                                $step = 9;
                                $asyncBody();
                                return;
                            }
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            }
        }
    }; });

    Bridge.define("RobotRaconteurWeb.PipeBroadcaster$1.connected_endpoint", function (T) { return {
        $kind: "nested class",
        fields: {
            ep: null,
            backlog: null,
            forward_backlog: null,
            sending: false,
            active_sends: null
        },
        ctors: {
            init: function () {
                this.backlog = new (System.Collections.Generic.List$1(System.UInt32)).ctor();
                this.forward_backlog = new (System.Collections.Generic.List$1(System.UInt32)).ctor();
                this.sending = false;
                this.active_sends = new (System.Collections.Generic.List$1(System.Object)).ctor();
            },
            ctor: function (ep) {
                this.$initialize();
                this.ep = ep;
            }
        }
    }; });

    Bridge.define("RobotRaconteurWeb.PodMultiDimArray", {
        fields: {
            Dims: null,
            pod_array: null
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                this.Dims = System.Array.init([0], System.UInt32);
            },
            $ctor1: function (dims, array) {
                this.$initialize();
                this.Dims = dims;
                this.pod_array = array;
            }
        },
        methods: {
            RetrieveSubArray: function (memorypos, buffer, bufferpos, count) {

                var mema = this;
                var memb = buffer;

                var iter = RobotRaconteurWeb.MultiDimArray_CalculateCopyIndicesIter.BeginIter(mema.Dims, memorypos, memb.Dims, bufferpos, count);

                var indexa = { };
                var indexb = { };
                var len = { };

                while (iter.Next(indexa, indexb, len)) {
                    System.Array.copy(mema.pod_array, System.Int64(indexa.v).toNumber(), memb.pod_array, System.Int64(indexb.v).toNumber(), System.Int64(len.v).toNumber());
                }

            },
            AssignSubArray: function (memorypos, buffer, bufferpos, count) {
                var mema = this;
                var memb = buffer;

                var iter = RobotRaconteurWeb.MultiDimArray_CalculateCopyIndicesIter.BeginIter(mema.Dims, memorypos, memb.Dims, bufferpos, count);

                var indexa = { };
                var indexb = { };
                var len = { };

                while (iter.Next(indexa, indexb, len)) {
                    System.Array.copy(memb.pod_array, System.Int64(indexb.v).toNumber(), mema.pod_array, System.Int64(indexa.v).toNumber(), System.Int64(len.v).toNumber());
                }
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.RobotRaconteurExceptionUtil", {
        statics: {
            methods: {
                ExceptionToMessageEntry: function (exception, entry) {


                    if (Bridge.is(exception, System.InvalidOperationException)) {
                        entry.Error = RobotRaconteurWeb.MessageErrorType.InvalidOperation;
                        entry.AddElement$1("errorname", "RobotRaconteur.InvalidOperation");
                        entry.AddElement$1("errorstring", exception.Message);
                        return;
                    }

                    if (Bridge.is(exception, System.ArgumentException)) {
                        entry.Error = RobotRaconteurWeb.MessageErrorType.InvalidArgument;
                        entry.AddElement$1("errorname", "RobotRaconteur.InvalidArgument");
                        entry.AddElement$1("errorstring", exception.Message);
                        return;
                    }

                    if (Bridge.is(exception, System.NullReferenceException)) {
                        entry.Error = RobotRaconteurWeb.MessageErrorType.NullValue;
                        entry.AddElement$1("errorname", "RobotRaconteur.NullValue");
                        entry.AddElement$1("errorstring", exception.Message);
                        return;
                    }

                    if (Bridge.is(exception, System.NotImplementedException)) {
                        entry.Error = RobotRaconteurWeb.MessageErrorType.NotImplementedError;
                        entry.AddElement$1("errorname", "RobotRaconteur.NotImplementedError");
                        entry.AddElement$1("errorstring", exception.Message);
                        return;
                    }


                    if (Bridge.is(exception, RobotRaconteurWeb.RobotRaconteurException)) {
                        var r = Bridge.cast(exception, RobotRaconteurWeb.RobotRaconteurException);
                        entry.Error = r.errorCode;
                        entry.AddElement$1("errorname", r.error);
                        entry.AddElement$1("errorstring", r.Message);

                    } else {
                        entry.Error = RobotRaconteurWeb.MessageErrorType.RemoteError;
                        entry.AddElement$1("errorname", Bridge.getTypeName(Bridge.getType(exception)));
                        entry.AddElement$1("errorstring", exception.Message);


                    }

                },
                MessageEntryToException: function (entry) {
                    var error_code = entry.Error;
                    var errorname = entry.FindElement("errorname").CastData(System.String);
                    var errorstring = entry.FindElement("errorstring").CastData(System.String);

                    switch (error_code) {
                        case RobotRaconteurWeb.MessageErrorType.RemoteError: 
                            var e1 = new RobotRaconteurWeb.RobotRaconteurRemoteException(errorname, errorstring);
                            return e1;
                        case RobotRaconteurWeb.MessageErrorType.ConnectionError: 
                            return new RobotRaconteurWeb.ConnectionException(errorstring);
                        case RobotRaconteurWeb.MessageErrorType.ProtocolError: 
                            return new RobotRaconteurWeb.ProtocolException(errorstring);
                        case RobotRaconteurWeb.MessageErrorType.ServiceNotFound: 
                            return new RobotRaconteurWeb.ServiceNotFoundException(errorstring);
                        case RobotRaconteurWeb.MessageErrorType.ObjectNotFound: 
                            return new RobotRaconteurWeb.ObjectNotFoundException(errorstring);
                        case RobotRaconteurWeb.MessageErrorType.InvalidEndpoint: 
                            return new RobotRaconteurWeb.InvalidEndpointException(errorstring);
                        case RobotRaconteurWeb.MessageErrorType.EndpointCommunicationFatalError: 
                            return new RobotRaconteurWeb.EndpointCommunicationFatalException(errorstring);
                        case RobotRaconteurWeb.MessageErrorType.NodeNotFound: 
                            return new RobotRaconteurWeb.NodeNotFoundException(errorstring);
                        case RobotRaconteurWeb.MessageErrorType.ServiceError: 
                            return new RobotRaconteurWeb.ServiceException(errorstring);
                        case RobotRaconteurWeb.MessageErrorType.MemberNotFound: 
                            return new RobotRaconteurWeb.MemberNotFoundException(errorstring);
                        case RobotRaconteurWeb.MessageErrorType.MemberFormatMismatch: 
                            return new RobotRaconteurWeb.MemberFormatMismatchException(errorstring);
                        case RobotRaconteurWeb.MessageErrorType.DataTypeMismatch: 
                            return new RobotRaconteurWeb.DataTypeMismatchException(errorstring);
                        case RobotRaconteurWeb.MessageErrorType.DataTypeError: 
                            return new RobotRaconteurWeb.DataTypeException(errorstring);
                        case RobotRaconteurWeb.MessageErrorType.DataSerializationError: 
                            return new RobotRaconteurWeb.DataSerializationException(errorstring);
                        case RobotRaconteurWeb.MessageErrorType.MessageEntryNotFound: 
                            return new RobotRaconteurWeb.MessageEntryNotFoundException(errorstring);
                        case RobotRaconteurWeb.MessageErrorType.MessageElementNotFound: 
                            return new RobotRaconteurWeb.MessageElementNotFoundException(errorstring);
                        case RobotRaconteurWeb.MessageErrorType.UnknownError: 
                            return new RobotRaconteurWeb.UnknownException(errorname, errorstring);
                        case RobotRaconteurWeb.MessageErrorType.InvalidOperation: 
                            return new System.InvalidOperationException.$ctor1(errorstring);
                        case RobotRaconteurWeb.MessageErrorType.InvalidArgument: 
                            return new System.ArgumentException.$ctor1(errorstring);
                        case RobotRaconteurWeb.MessageErrorType.OperationFailed: 
                            return new RobotRaconteurWeb.OperationFailedException(errorstring);
                        case RobotRaconteurWeb.MessageErrorType.NullValue: 
                            return new System.NullReferenceException.$ctor1(errorstring);
                        case RobotRaconteurWeb.MessageErrorType.InternalError: 
                            return new RobotRaconteurWeb.InternalErrorException(errorstring);
                        case RobotRaconteurWeb.MessageErrorType.SystemResourcePermissionDenied: 
                            return new RobotRaconteurWeb.SystemResourcePermissionDeniedException(errorstring);
                        case RobotRaconteurWeb.MessageErrorType.OutOfSystemResource: 
                            return new RobotRaconteurWeb.OutOfSystemResourceException(errorstring);
                        case RobotRaconteurWeb.MessageErrorType.SystemResourceError: 
                            return new RobotRaconteurWeb.SystemResourceException(errorstring);
                        case RobotRaconteurWeb.MessageErrorType.ResourceNotFound: 
                            return new RobotRaconteurWeb.ResourceNotFoundException(errorstring);
                        case RobotRaconteurWeb.MessageErrorType.IOError: 
                            return new RobotRaconteurWeb.IOException(errorstring);
                        case RobotRaconteurWeb.MessageErrorType.BufferLimitViolation: 
                            return new RobotRaconteurWeb.BufferLimitViolationException(errorstring);
                        case RobotRaconteurWeb.MessageErrorType.ServiceDefinitionError: 
                            return new RobotRaconteurWeb.ServiceDefinitionException(errorstring);
                        case RobotRaconteurWeb.MessageErrorType.OutOfRange: 
                            return new RobotRaconteurWeb.OutOfRangeException(errorstring);
                        case RobotRaconteurWeb.MessageErrorType.KeyNotFound: 
                            return new RobotRaconteurWeb.KeyNotFoundException(errorstring);
                        case RobotRaconteurWeb.MessageErrorType.RequestTimeout: 
                            return new RobotRaconteurWeb.RequestTimeoutException(errorstring);
                        case RobotRaconteurWeb.MessageErrorType.ReadOnlyMember: 
                            return new RobotRaconteurWeb.ReadOnlyMemberException(errorstring);
                        case RobotRaconteurWeb.MessageErrorType.WriteOnlyMember: 
                            return new RobotRaconteurWeb.WriteOnlyMemberException(errorstring);
                        case RobotRaconteurWeb.MessageErrorType.NotImplementedError: 
                            return new System.NotImplementedException.$ctor1(errorstring);
                        case RobotRaconteurWeb.MessageErrorType.MemberBusy: 
                            return new RobotRaconteurWeb.MemberBusyException(errorstring);
                        case RobotRaconteurWeb.MessageErrorType.ValueNotSet: 
                            return new RobotRaconteurWeb.ValueNotSetException(errorstring);
                        case RobotRaconteurWeb.MessageErrorType.AuthenticationError: 
                            return new RobotRaconteurWeb.AuthenticationException(errorstring);
                        case RobotRaconteurWeb.MessageErrorType.ObjectLockedError: 
                            return new RobotRaconteurWeb.ObjectLockedException(errorstring);
                        case RobotRaconteurWeb.MessageErrorType.PermissionDenied: 
                            return new RobotRaconteurWeb.PermissionDeniedException(errorstring);
                        case RobotRaconteurWeb.MessageErrorType.AbortOperation: 
                            return new RobotRaconteurWeb.AbortOperationException(errorstring);
                        case RobotRaconteurWeb.MessageErrorType.OperationAborted: 
                            return new RobotRaconteurWeb.OperationAbortedException(errorstring);
                        case RobotRaconteurWeb.MessageErrorType.StopIteration: 
                            return new RobotRaconteurWeb.StopIterationException(errorstring);
                    }

                    return new RobotRaconteurWeb.RobotRaconteurException.$ctor1(error_code, errorname, errorstring);

                }
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.RobotRaconteurNamedArrayElementTypeAndCount", {
        inherits: [System.Attribute],
        fields: {
            RRType: null,
            ElementArrayType: null,
            ElementArrayCount: 0
        },
        ctors: {
            ctor: function (rr_type, element_type, element_array_count) {
                this.$initialize();
                System.Attribute.ctor.call(this);
                this.RRType = rr_type;
                this.ElementArrayType = element_type;
                this.ElementArrayCount = element_array_count;
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.RobotRaconteurNode", {
        statics: {
            fields: {
                Version: null,
                sp: null
            },
            props: {
                s: {
                    get: function () {
                        if (RobotRaconteurWeb.RobotRaconteurNode.sp == null) {
                            RobotRaconteurWeb.RobotRaconteurNode.sp = new RobotRaconteurWeb.RobotRaconteurNode();
                        }
                        return RobotRaconteurWeb.RobotRaconteurNode.sp;
                    }
                }
            },
            ctors: {
                init: function () {
                    this.Version = "0.9.0";
                }
            },
            methods: {
                SelectRemoteNodeURL: function (urls) {
                    var $t;
                    var url_order = System.Array.init(["rr+local://", "rr+pci://", "rr+usb://", "rr+tcp://127.0.0.1", "tcp://127.0.0.1", "rr+tcp://[::1]", "tcp://[::1]", "rr+tcp://localhost", "tcp://localhost", "rrs+tcp://[fe80", "rrs+wss://[fe80", "rrs+ws://[fe80", "rrs+tcp://", "rrs+wss://", "rrs+ws://", "rr+tcp://[fe80", "rr+wss://[fe80", "rr+ws://[fe80", "rr+tcp://", "rr+wss://", "rr+ws://"], System.String);

                    $t = Bridge.getEnumerator(url_order);
                    try {
                        while ($t.moveNext()) {
                            var u = { v : $t.Current };
                            var u1 = System.Linq.Enumerable.from(urls, System.String).firstOrDefault((function ($me, u) {
                                    return function (x) {
                                        return System.String.startsWith(x.toLowerCase(), u.v);
                                    };
                                })(this, u), null);
                            if (u1 != null) {
                                return u1;
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }

                    return System.Linq.Enumerable.from(urls, System.String).first();
                }
            }
        },
        fields: {
            m_NodeID: null,
            m_NodeName: null,
            endpoints: null,
            transports: null,
            service_factories: null,
            dynamic_factory: null,
            services: null,
            transport_count: 0,
            EndpointInactivityTimeout: 0,
            TransportInactivityTimeout: 0,
            RequestTimeout: 0,
            serviceindexer: null,
            MemoryMaxTransferSize: 0,
            browser_transport: null,
            shutdown_token: null,
            m_DiscoveredNodes: null,
            cleandiscoverednodes_task: null,
            service_state_nonce: null
        },
        props: {
            NodeID: {
                get: function () {
                    if (RobotRaconteurWeb.NodeID.op_Equality(this.m_NodeID, null)) {
                        this.m_NodeID = RobotRaconteurWeb.NodeID.NewUniqueID();
                    }
                    return this.m_NodeID;
                },
                set: function (value) {
                    if (RobotRaconteurWeb.NodeID.op_Equality(this.m_NodeID, null)) {
                        this.m_NodeID = value;

                    } else {
                        throw new System.InvalidOperationException.$ctor1("NodeID cannot be changed once it is set");
                    }
                }
            },
            NodeName: {
                get: function () {
                    if (this.m_NodeName == null) {
                        this.m_NodeName = "";
                    }
                    return this.m_NodeName;
                },
                set: function (value) {
                    if (this.m_NodeName == null) {

                        if (!System.Text.RegularExpressions.Regex.match(value, "^[a-zA-Z][a-zA-Z0-9_\\.\\-]*$").getSuccess()) {
                            throw new System.InvalidOperationException.$ctor1("Invalid node name");
                        }

                        this.m_NodeName = value;

                    } else {
                        throw new System.InvalidOperationException.$ctor1("NodeName cannot be changed once it is set");
                    }
                }
            },
            DynamicServiceFactory: {
                get: function () {
                    return this.dynamic_factory;
                }
            },
            DiscoveredNodes: {
                get: function () {
                    return this.m_DiscoveredNodes;
                }
            },
            UtcNow: {
                get: function () {
                    return System.DateTime.getUtcNow();
                }
            },
            ServiceStateNonce: {
                get: function () {
                    this;
                    {
                        return this.service_state_nonce;
                    }
                }
            }
        },
        ctors: {
            init: function () {
                this.endpoints = new (System.Collections.Generic.Dictionary$2(System.UInt32,RobotRaconteurWeb.Endpoint)).ctor();
                this.transports = new (System.Collections.Generic.Dictionary$2(System.UInt32,RobotRaconteurWeb.Transport)).ctor();
                this.service_factories = new (System.Collections.Generic.Dictionary$2(System.String,RobotRaconteurWeb.ServiceFactory)).ctor();
                this.services = new (System.Collections.Generic.Dictionary$2(System.String,RobotRaconteurWeb.ServerContext)).ctor();
                this.transport_count = 0;
                this.EndpointInactivityTimeout = 600000;
                this.TransportInactivityTimeout = 600000;
                this.RequestTimeout = 15000;
                this.MemoryMaxTransferSize = 102400;
                this.shutdown_token = new System.Threading.CancellationTokenSource();
                this.m_DiscoveredNodes = new (System.Collections.Generic.Dictionary$2(System.String,RobotRaconteurWeb.NodeDiscoveryInfo)).ctor();
            },
            ctor: function () {
                this.$initialize();
                this.serviceindexer = new RobotRaconteurWeb.RobotRaconteurNode.ServiceIndexer(this);
                this.RegisterServiceType(new RobotRaconteurServiceIndex.RobotRaconteurServiceIndexFactory(this));
                this.RegisterService$1("RobotRaconteurServiceIndex", "RobotRaconteurServiceIndex", this.serviceindexer);
                this.cleandiscoverednodes_task = RobotRaconteurWeb.PeriodicTask.Run$1(Bridge.fn.cacheBind(this, this.CleanDiscoveredNodes), System.TimeSpan.fromSeconds(5), this.shutdown_token.token);
                this.browser_transport = new RobotRaconteurWeb.BrowserWebSocketTransport(this);
                this.RegisterTransport(this.browser_transport);
            }
        },
        methods: {
            GetServiceFactoryForType: function (type, context) {
                var servicename = RobotRaconteurWeb.ServiceDefinitionUtil.SplitQualifiedName(type).Item1;

                if (context != null) {
                    var f = { };
                    if (context.TryGetPulledServiceType(servicename, f)) {
                        return f.v;
                    }
                }
                return this.GetServiceType(servicename);
            },
            GetServiceFactoryForType$1: function (type, context) {
                return this.GetServiceFactoryForType(RobotRaconteurWeb.ServiceDefinitionUtil.FindStructRRType(type), context);
            },
            PackStructure: function (s, context) {
                if (s == null) {
                    return null;
                }

                return this.GetServiceFactoryForType$1(Bridge.getType(s), context).PackStructure(s);
            },
            UnpackStructure: function (T, l, context) {
                if (l == null) {
                    return Bridge.getDefaultValue(T);
                }
                return this.GetServiceFactoryForType(l.Type, context).UnpackStructure(T, l);
            },
            PackPodToArray: function (T, s, context) {
                return this.GetServiceFactoryForType$1(Bridge.getType(s.v, T), context).PackPodToArray(T, s);
            },
            UnpackPodFromArray: function (T, l, context) {
                return this.GetServiceFactoryForType(l.Type, context).UnpackPodFromArray(T, l);
            },
            PackPodArray: function (T, s, context) {
                if (s == null) {
                    return null;
                }
                return this.GetServiceFactoryForType$1(Bridge.getType(s), context).PackPodArray(T, s);
            },
            UnpackPodArray: function (T, l, context) {
                if (l == null) {
                    return null;
                }
                return this.GetServiceFactoryForType(l.Type, context).UnpackPodArray(T, l);
            },
            PackPodMultiDimArray: function (T, s, context) {
                if (s == null) {
                    return null;
                }
                return this.GetServiceFactoryForType$1(Bridge.getType(s.pod_array), context).PackPodMultiDimArray(T, s);
            },
            UnpackPodMultiDimArray: function (T, l, context) {
                if (l == null) {
                    return null;
                }
                return this.GetServiceFactoryForType(l.Type, context).UnpackPodMultiDimArray(T, l);
            },
            PackPod: function (s, context) {
                var t = Bridge.getType(s);

                if (Bridge.Reflection.isValueType(t)) {
                    return this.GetServiceFactoryForType$1(t, context).PackPod(s);
                } else if (Bridge.isArray(null, t)) {
                    return this.GetServiceFactoryForType$1((t.$elementType || null), context).PackPod(s);
                } else if (Bridge.referenceEquals(t, RobotRaconteurWeb.PodMultiDimArray)) {
                    return this.GetServiceFactoryForType$1((Bridge.getType(Bridge.cast(s, RobotRaconteurWeb.PodMultiDimArray).pod_array).$elementType || null), context).PackPod(s);
                } else if (Bridge.referenceEquals(t, RobotRaconteurWeb.NamedMultiDimArray)) {
                    return this.GetServiceFactoryForType$1((Bridge.getType(Bridge.cast(s, RobotRaconteurWeb.NamedMultiDimArray).namedarray_array).$elementType || null), context).PackNamedArray$1(s);
                }
                throw new RobotRaconteurWeb.DataTypeException("Invalid pod object");
            },
            UnpackPod: function (l, context) {
                return this.GetServiceFactoryForType(RobotRaconteurWeb.MessageElementUtil.GetMessageElementDataTypeString(l), context).UnpackPod(l);
            },
            PackNamedArrayToArray: function (T, s, context) {
                return this.GetServiceFactoryForType$1(Bridge.getType(s.v, T), context).PackNamedArrayToArray(T, s);
            },
            UnpackNamedArrayFromArray: function (T, l, context) {
                return this.GetServiceFactoryForType(l.Type, context).UnpackNamedArrayFromArray(T, l);
            },
            PackNamedArray: function (T, s, context) {
                if (s == null) {
                    return null;
                }
                return this.GetServiceFactoryForType$1(Bridge.getType(s), context).PackNamedArray(T, s);
            },
            PackNamedArray$1: function (s, context) {
                var t = Bridge.getType(s);

                if (Bridge.Reflection.isValueType(t)) {
                    return this.GetServiceFactoryForType$1(t, context).PackNamedArray$1(s);
                } else if (Bridge.isArray(null, t)) {
                    return this.GetServiceFactoryForType$1((t.$elementType || null), context).PackNamedArray$1(s);
                } else if (Bridge.referenceEquals(t, RobotRaconteurWeb.NamedMultiDimArray)) {
                    return this.GetServiceFactoryForType$1((Bridge.getType(Bridge.cast(s, RobotRaconteurWeb.NamedMultiDimArray).namedarray_array).$elementType || null), context).PackNamedArray$1(s);
                }
                throw new RobotRaconteurWeb.DataTypeException("Invalid pod object");
            },
            UnpackNamedArray: function (T, l, context) {
                if (l == null) {
                    return null;
                }
                return this.GetServiceFactoryForType(l.Type, context).UnpackNamedArray(T, l);
            },
            UnpackNamedArray$1: function (l, context) {
                return this.GetServiceFactoryForType(RobotRaconteurWeb.MessageElementUtil.GetMessageElementDataTypeString(l), context).UnpackNamedArray$1(l);
            },
            PackNamedMultiDimArray: function (T, s, context) {
                if (s == null) {
                    return null;
                }
                return this.GetServiceFactoryForType$1(Bridge.getType(s.namedarray_array), context).PackNamedMultiDimArray(T, s);
            },
            UnpackNamedMultiDimArray: function (T, l, context) {
                if (l == null) {
                    return null;
                }
                return this.GetServiceFactoryForType(l.Type, context).UnpackNamedMultiDimArray(T, l);
            },
            PackContainerValue$1: function (T, name, data, context) {
                var t = T;

                if (Bridge.referenceEquals(t, System.Object)) {
                    return RobotRaconteurWeb.MessageElementUtil.NewMessageElement$1(name, this.PackVarType(data.v, context));
                }

                var is_array = Bridge.isArray(null, t);
                if (!(Bridge.Reflection.isValueType(t) || !System.Collections.Generic.EqualityComparer$1(T).def.equals2(data.v, Bridge.getDefaultValue(T)))) {
                    return RobotRaconteurWeb.MessageElementUtil.NewMessageElement$1(name, null);
                }

                if (Bridge.Reflection.isPrimitive(t)) {
                    return RobotRaconteurWeb.MessageElementUtil.NewMessageElement$1(name, System.Array.init([data.v], T));
                }

                if (is_array && Bridge.Reflection.isPrimitive((t.$elementType || null))) {
                    return RobotRaconteurWeb.MessageElementUtil.NewMessageElement$1(name, data.v);
                }

                if (Bridge.referenceEquals(t, System.String)) {
                    return RobotRaconteurWeb.MessageElementUtil.NewMessageElement$1(name, data.v);
                }

                if (Bridge.referenceEquals(t, RobotRaconteurWeb.CDouble) || Bridge.referenceEquals(t, RobotRaconteurWeb.CSingle)) {
                    return RobotRaconteurWeb.MessageElementUtil.NewMessageElement$1(name, data.v);
                }

                if (is_array) {
                    var t2 = (t.$elementType || null);
                    if (Bridge.referenceEquals(t2, RobotRaconteurWeb.CDouble) || Bridge.referenceEquals(t2, RobotRaconteurWeb.CSingle)) {
                        return RobotRaconteurWeb.MessageElementUtil.NewMessageElement$1(name, data.v);
                    }
                }

                if (Bridge.referenceEquals(t, RobotRaconteurWeb.MultiDimArray)) {
                    return RobotRaconteurWeb.MessageElementUtil.NewMessageElement$1(name, this.PackMultiDimArray(Bridge.cast(data.v, RobotRaconteurWeb.MultiDimArray)));
                }

                if (Bridge.referenceEquals(t, RobotRaconteurWeb.PodMultiDimArray)) {
                    return RobotRaconteurWeb.MessageElementUtil.NewMessageElement$1(name, this.PackPod(data.v, context));
                }

                if (Bridge.referenceEquals(t, RobotRaconteurWeb.NamedMultiDimArray)) {
                    return RobotRaconteurWeb.MessageElementUtil.NewMessageElement$1(name, this.PackNamedArray$1(data.v, context));
                }

                if (Bridge.Reflection.isGenericType(t)) {
                    throw new RobotRaconteurWeb.DataTypeException("Invalid Robot Raconteur container value type");
                }

                if (!Bridge.Reflection.isValueType(t) && !is_array && !Bridge.referenceEquals(t, RobotRaconteurWeb.PodMultiDimArray) && !Bridge.referenceEquals(t, RobotRaconteurWeb.NamedMultiDimArray)) {
                    return RobotRaconteurWeb.MessageElementUtil.NewMessageElement$1(name, this.PackStructure(data.v, context));
                } else {
                    var t21 = t;
                    if (Bridge.isArray(null, t)) {
                        t21 = (t.$elementType || null);
                    }
                    if (Bridge.Reflection.getAttributes(t21, RobotRaconteurWeb.RobotRaconteurNamedArrayElementTypeAndCount, false).length > 0) {
                        return RobotRaconteurWeb.MessageElementUtil.NewMessageElement$1(name, this.PackNamedArray$1(data.v, context));
                    } else {
                        return RobotRaconteurWeb.MessageElementUtil.NewMessageElement$1(name, this.PackPod(data.v, context));
                    }
                }
            },
            PackContainerValue: function (T, num, data, context) {
                return this.PackContainerValue$1(T, Bridge.toString(num), data, context);
            },
            UnpackContainerValue: function (T, e, context) {
                var $t, $t1, $t2;
                switch (e.ElementType) {
                    case RobotRaconteurWeb.DataTypes.void_t: 
                        if (Bridge.Reflection.isValueType(T)) {
                            throw new RobotRaconteurWeb.DataTypeException("Primitive types may not be null");
                        }
                        return Bridge.getDefaultValue(T);
                    case RobotRaconteurWeb.DataTypes.double_t: 
                    case RobotRaconteurWeb.DataTypes.single_t: 
                    case RobotRaconteurWeb.DataTypes.int8_t: 
                    case RobotRaconteurWeb.DataTypes.uint8_t: 
                    case RobotRaconteurWeb.DataTypes.int16_t: 
                    case RobotRaconteurWeb.DataTypes.uint16_t: 
                    case RobotRaconteurWeb.DataTypes.int32_t: 
                    case RobotRaconteurWeb.DataTypes.uint32_t: 
                    case RobotRaconteurWeb.DataTypes.int64_t: 
                    case RobotRaconteurWeb.DataTypes.uint64_t: 
                    case RobotRaconteurWeb.DataTypes.cdouble_t: 
                    case RobotRaconteurWeb.DataTypes.csingle_t: 
                    case RobotRaconteurWeb.DataTypes.bool_t: 
                        if (Bridge.isArray(null, T)) {
                            return Bridge.cast(Bridge.unbox(e.Data, T), T);
                        } else {
                            return (Bridge.referenceEquals(T, System.Object)) ? Bridge.cast(Bridge.unbox(e.Data, T), T) : ($t = Bridge.cast(e.Data, System.Array.type(T)))[System.Array.index(0, $t)];
                        }
                    case RobotRaconteurWeb.DataTypes.string_t: 
                        return Bridge.cast(Bridge.unbox(e.Data, T), T);
                    case RobotRaconteurWeb.DataTypes.multidimarray_t: 
                        {
                            var md = Bridge.cast(e.Data, RobotRaconteurWeb.MessageElementMultiDimArray);
                            return Bridge.cast(Bridge.unbox(this.UnpackMultiDimArray(md), T), T);
                        }
                    case RobotRaconteurWeb.DataTypes.structure_t: 
                        {
                            var md1 = Bridge.cast(e.Data, RobotRaconteurWeb.MessageElementStructure);
                            return this.UnpackStructure(T, md1, context);
                        }
                    case RobotRaconteurWeb.DataTypes.pod_array_t: 
                        {
                            var md2 = Bridge.cast(e.Data, RobotRaconteurWeb.MessageElementPodArray);
                            if (Bridge.Reflection.isValueType(T)) {
                                if (md2.Elements.Count !== 1) {
                                    throw new RobotRaconteurWeb.DataTypeException("Invalid array size for scalar structure");
                                }
                                return ($t1 = Bridge.cast(this.UnpackPod(md2, context), System.Array.type(T)))[System.Array.index(0, $t1)];
                            } else {
                                return Bridge.cast(Bridge.unbox(this.UnpackPod(md2, context), T), T);
                            }
                        }
                    case RobotRaconteurWeb.DataTypes.pod_multidimarray_t: 
                        {
                            return Bridge.cast(Bridge.unbox(this.UnpackPod(e.Data, context), T), T);
                        }
                    case RobotRaconteurWeb.DataTypes.namedarray_array_t: 
                        {
                            var md3 = Bridge.cast(e.Data, RobotRaconteurWeb.MessageElementNamedArray);
                            if (Bridge.Reflection.isValueType(T)) {
                                if (md3.Elements.Count !== 1) {
                                    throw new RobotRaconteurWeb.DataTypeException("Invalid array size for scalar structure");
                                }

                                return ($t2 = Bridge.cast(this.UnpackNamedArray$1(md3, context), System.Array.type(T)))[System.Array.index(0, $t2)];

                            } else {
                                return Bridge.cast(Bridge.unbox(this.UnpackNamedArray$1(md3, context), T), T);
                            }
                        }
                    case RobotRaconteurWeb.DataTypes.namedarray_multidimarray_t: 
                        {
                            return Bridge.cast(Bridge.unbox(this.UnpackNamedArray$1(e.Data, context), T), T);
                        }
                    default: 
                        throw new RobotRaconteurWeb.DataTypeException("Invalid container data type");
                }
            },
            UnpackContainerValue$1: function (T, e, name, context) {
                name.v = e.ElementName;
                return this.UnpackContainerValue(T, e, context);
            },
            UnpackContainerValue$2: function (T, e, num, context) {
                num.v = RobotRaconteurWeb.MessageElementUtil.GetMessageElementNumber(e);
                return this.UnpackContainerValue(T, e, context);
            },
            PackMapType: function (Tkey, Tvalue, data, context) {
                var $t, $t1;
                if (data == null) {
                    return null;
                }

                if (Bridge.referenceEquals(Tkey, System.Int32)) {
                    var m = new (System.Collections.Generic.List$1(RobotRaconteurWeb.MessageElement)).ctor();

                    var ddata = Bridge.cast(data, System.Collections.Generic.Dictionary$2(Tkey,Tvalue));

                    $t = Bridge.getEnumerator(ddata);
                    try {
                        while ($t.moveNext()) {
                            var d = $t.Current;
                            var v = { v : d.value };
                            RobotRaconteurWeb.MessageElementUtil.AddMessageElement$3(m, this.PackContainerValue(Tvalue, System.Convert.toInt32(d.key), v, context));
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                    return new (RobotRaconteurWeb.MessageElementMap$1(System.Int32))(m);
                }

                if (Bridge.referenceEquals(Tkey, System.String)) {
                    var m1 = new (System.Collections.Generic.List$1(RobotRaconteurWeb.MessageElement)).ctor();
                    var ddata1 = Bridge.cast(data, System.Collections.Generic.Dictionary$2(Tkey,Tvalue));

                    $t1 = Bridge.getEnumerator(ddata1);
                    try {
                        while ($t1.moveNext()) {
                            var d1 = $t1.Current;
                            var v1 = { v : d1.value };
                            RobotRaconteurWeb.MessageElementUtil.AddMessageElement$3(m1, this.PackContainerValue$1(Tvalue, Bridge.toString(d1.key), v1, context));
                        }
                    } finally {
                        if (Bridge.is($t1, System.IDisposable)) {
                            $t1.System$IDisposable$Dispose();
                        }
                    }
                    return new (RobotRaconteurWeb.MessageElementMap$1(System.String))(m1);
                }

                throw new RobotRaconteurWeb.DataTypeException("Indexed types can only be indexed by int32 and string");
            },
            UnpackMapType: function (Tkey, Tvalue, data, context) {
                var $t, $t1;
                if (data == null) {
                    return null;
                }

                if (Bridge.is(data, RobotRaconteurWeb.MessageElementMap$1(System.Int32))) {
                    var o = new (System.Collections.Generic.Dictionary$2(System.Int32,Tvalue)).ctor();

                    var cdata = Bridge.cast(data, RobotRaconteurWeb.MessageElementMap$1(System.Int32));
                    var cdataElements = cdata.Elements;
                    {
                        $t = Bridge.getEnumerator(cdataElements);
                        try {
                            while ($t.moveNext()) {
                                var e = $t.Current;
                                var num = { };
                                var val = this.UnpackContainerValue$2(Tvalue, e, num, context);
                                o.add(num.v, val);

                            }
                        } finally {
                            if (Bridge.is($t, System.IDisposable)) {
                                $t.System$IDisposable$Dispose();
                            }
                        }
                        return o;
                    }
                } else if (Bridge.is(data, RobotRaconteurWeb.MessageElementMap$1(System.String))) {
                    var o1 = new (System.Collections.Generic.Dictionary$2(System.String,Tvalue)).ctor();

                    var cdata1 = Bridge.cast(data, RobotRaconteurWeb.MessageElementMap$1(System.String));
                    var cdataElements1 = cdata1.Elements;
                    {
                        $t1 = Bridge.getEnumerator(cdataElements1);
                        try {
                            while ($t1.moveNext()) {
                                var e1 = $t1.Current;
                                var name = { };
                                var val1 = this.UnpackContainerValue$1(Tvalue, e1, name, context);
                                o1.add(name.v, val1);
                            }
                        } finally {
                            if (Bridge.is($t1, System.IDisposable)) {
                                $t1.System$IDisposable$Dispose();
                            }
                        }
                        return o1;
                    }
                } else {
                    throw new RobotRaconteurWeb.DataTypeException("Indexed types can only be indexed by int32 and string");
                }
            },
            PackListType: function (Tvalue, data, context) {
                var $t;
                if (data == null) {
                    return null;
                }

                var m = new (System.Collections.Generic.List$1(RobotRaconteurWeb.MessageElement)).ctor();
                {
                    var ddata = Bridge.cast(data, System.Collections.Generic.List$1(Tvalue));

                    var count = 0;
                    $t = Bridge.getEnumerator(ddata);
                    try {
                        while ($t.moveNext()) {
                            var d = $t.Current;
                            var v = { v : d };
                            RobotRaconteurWeb.MessageElementUtil.AddMessageElement$3(m, this.PackContainerValue(Tvalue, count, v, context));
                            count = (count + 1) | 0;
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }

                    return new RobotRaconteurWeb.MessageElementList(m);
                }
            },
            UnpackListType: function (Tvalue, data, context) {
                var $t;
                if (data == null) {
                    return null;
                }
                var o = new (System.Collections.Generic.List$1(Tvalue)).ctor();
                var count = 0;
                var cdata = Bridge.cast(data, RobotRaconteurWeb.MessageElementList);
                var cdataElements = cdata.Elements;
                {
                    $t = Bridge.getEnumerator(cdataElements);
                    try {
                        while ($t.moveNext()) {
                            var e = $t.Current;
                            var num = { };
                            var val = this.UnpackContainerValue$2(Tvalue, e, num, context);
                            if (count !== num.v) {
                                throw new RobotRaconteurWeb.DataTypeException("Error in list format");
                            }
                            o.add(val);
                            count = (count + 1) | 0;
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                    return o;
                }
            },
            PackVarType: function (data, context) {
                if (data == null) {
                    return null;
                }

                var t = Bridge.getType(data);

                if (Bridge.referenceEquals(t, System.Collections.Generic.Dictionary$2(System.Int32,System.Object))) {
                    return this.PackMapType(System.Int32, System.Object, data, context);

                } else if (Bridge.referenceEquals(t, System.Collections.Generic.Dictionary$2(System.String,System.Object))) {
                    return this.PackMapType(System.String, System.Object, data, context);

                } else if (Bridge.referenceEquals(t, System.Collections.Generic.List$1(System.Object))) {
                    return this.PackListType(System.Object, data, context);

                }

                var is_array = Bridge.isArray(null, t);

                if (Bridge.Reflection.isPrimitive(t) || (is_array && Bridge.Reflection.isPrimitive((t.$elementType || null)))) {
                    return data;
                }

                if (Bridge.referenceEquals(t, System.String)) {
                    return data;
                }

                if (Bridge.referenceEquals(t, RobotRaconteurWeb.MultiDimArray)) {
                    return this.PackMultiDimArray(Bridge.cast(data, RobotRaconteurWeb.MultiDimArray));
                }

                if (Bridge.referenceEquals(t, RobotRaconteurWeb.PodMultiDimArray)) {
                    return this.PackPod(data, context);
                }

                if (Bridge.Reflection.isGenericType(t)) {
                    throw new RobotRaconteurWeb.DataTypeException("Invalid Robot Raconteur varvalue type");
                }

                if (!Bridge.Reflection.isValueType(t) && !is_array && !Bridge.referenceEquals(t, RobotRaconteurWeb.PodMultiDimArray) && !Bridge.referenceEquals(t, RobotRaconteurWeb.NamedMultiDimArray)) {
                    return this.PackStructure(data, context);
                } else {
                    var t2 = t;
                    if (Bridge.isArray(null, t)) {
                        t2 = (t.$elementType || null);
                    }
                    if (Bridge.Reflection.getAttributes(t2, RobotRaconteurWeb.RobotRaconteurNamedArrayElementTypeAndCount, false).length > 0) {
                        return this.PackNamedArray$1(data, context);
                    } else {
                        return this.PackPod(data, context);
                    }
                }
            },
            UnpackVarType: function (me, context) {
                if (me == null) {
                    return null;
                }

                switch (me.ElementType) {
                    case RobotRaconteurWeb.DataTypes.void_t: 
                        return null;
                    case RobotRaconteurWeb.DataTypes.double_t: 
                    case RobotRaconteurWeb.DataTypes.single_t: 
                    case RobotRaconteurWeb.DataTypes.int8_t: 
                    case RobotRaconteurWeb.DataTypes.uint8_t: 
                    case RobotRaconteurWeb.DataTypes.int16_t: 
                    case RobotRaconteurWeb.DataTypes.uint16_t: 
                    case RobotRaconteurWeb.DataTypes.int32_t: 
                    case RobotRaconteurWeb.DataTypes.uint32_t: 
                    case RobotRaconteurWeb.DataTypes.int64_t: 
                    case RobotRaconteurWeb.DataTypes.uint64_t: 
                    case RobotRaconteurWeb.DataTypes.string_t: 
                        return me.Data;
                    case RobotRaconteurWeb.DataTypes.multidimarray_t: 
                        {
                            var md = Bridge.cast(me.Data, RobotRaconteurWeb.MessageElementMultiDimArray);
                            return this.UnpackMultiDimArray(md);
                        }
                    case RobotRaconteurWeb.DataTypes.structure_t: 
                        {
                            var md1 = Bridge.cast(me.Data, RobotRaconteurWeb.MessageElementStructure);
                            return this.UnpackStructure(System.Object, md1, context);
                        }
                    case RobotRaconteurWeb.DataTypes.pod_array_t: 
                    case RobotRaconteurWeb.DataTypes.pod_multidimarray_t: 
                        {
                            return this.UnpackPod(me.Data, context);
                        }
                    case RobotRaconteurWeb.DataTypes.namedarray_array_t: 
                    case RobotRaconteurWeb.DataTypes.namedarray_multidimarray_t: 
                        {
                            return this.UnpackNamedArray$1(me.Data, context);
                        }
                    case RobotRaconteurWeb.DataTypes.vector_t: 
                        {
                            return this.UnpackMapType(System.Int32, System.Object, me.Data, context);
                        }
                    case RobotRaconteurWeb.DataTypes.dictionary_t: 
                        {
                            return this.UnpackMapType(System.String, System.Object, me.Data, context);
                        }
                    case RobotRaconteurWeb.DataTypes.list_t: 
                        {
                            return this.UnpackListType(System.Object, me.Data, context);
                        }
                    default: 
                        throw new RobotRaconteurWeb.DataTypeException("Invalid varvalue data type");
                }
            },
            PackMultiDimArray: function (array) {
                if (array == null) {
                    return null;
                }
                var l = new (System.Collections.Generic.List$1(RobotRaconteurWeb.MessageElement)).ctor();
                l.add(new RobotRaconteurWeb.MessageElement.$ctor1("dims", array.Dims));
                l.add(new RobotRaconteurWeb.MessageElement.$ctor1("array", array.Array_));
                return new RobotRaconteurWeb.MessageElementMultiDimArray(l);
            },
            UnpackMultiDimArray: function (marray) {
                if (marray == null) {
                    return null;
                }

                var m = new RobotRaconteurWeb.MultiDimArray.ctor();

                m.Dims = (RobotRaconteurWeb.MessageElement.FindElement$1(marray.Elements, "dims").CastData(System.Array.type(System.UInt32)));
                m.Array_ = (RobotRaconteurWeb.MessageElement.FindElement$1(marray.Elements, "array").CastData(Array));
                return m;
            },
            SendMessage: function (m, cancel) {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    e, 
                    $e1, 
                    c, 
                    $e2, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        if (RobotRaconteurWeb.NodeID.op_Inequality(m.header.SenderNodeID, this.NodeID)) {

                                            throw new RobotRaconteurWeb.ConnectionException("Could not route message");

                                        }

                                        try {
                                            this.endpoints;
                                            {
                                                e = this.endpoints.getItem(m.header.SenderEndpoint);
                                            }
                                        } catch ($e1) {
                                            $e1 = System.Exception.create($e1);
                                            if (Bridge.is($e1, RobotRaconteurWeb.KeyNotFoundException)) {
                                                throw new RobotRaconteurWeb.InvalidEndpointException("Could not find endpoint");
                                            } else {
                                                throw $e1;
                                            }
                                        }


                                        try {
                                            this.transports;
                                            {
                                                c = this.transports.getItem(e.transport);
                                            }
                                        } catch ($e2) {
                                            $e2 = System.Exception.create($e2);
                                            if (Bridge.is($e2, RobotRaconteurWeb.KeyNotFoundException)) {
                                                throw new RobotRaconteurWeb.ConnectionException("Could not find transport");
                                            } else {
                                                throw $e2;
                                            }
                                        }

                                        $task1 = c.SendMessage(m, cancel);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            MessageReceived: function (m) {
                if (RobotRaconteurWeb.NodeID.op_Inequality(m.header.ReceiverNodeID, this.NodeID)) {
                    var eret = this.GenerateErrorReturnMessage(m, RobotRaconteurWeb.MessageErrorType.NodeNotFound, "RobotRaconteur.NodeNotFound", "Could not find route to remote node");
                    if (eret.entries.Count > 0) {
                        RobotRaconteurWeb.Extensions.Extensions.IgnoreResult(this.SendMessage(eret, Bridge.getDefaultValue(System.Threading.CancellationToken)));
                    }

                } else {



                    try {

                        var e;
                        this.endpoints;
                        {
                            e = this.endpoints.getItem(m.header.ReceiverEndpoint);
                        }

                        e.MessageReceived(m);
                    } catch ($e1) {
                        $e1 = System.Exception.create($e1);
                        if (Bridge.is($e1, RobotRaconteurWeb.KeyNotFoundException)) {
                            var eret1 = this.GenerateErrorReturnMessage(m, RobotRaconteurWeb.MessageErrorType.InvalidEndpoint, "RobotRaconteur.InvalidEndpoint", "Invalid destination endpoint");
                            if (eret1.entries.Count > 0) {
                                RobotRaconteurWeb.Extensions.Extensions.IgnoreResult(this.SendMessage(eret1, Bridge.getDefaultValue(System.Threading.CancellationToken)));
                            }
                        } else {
                            throw $e1;
                        }
                    }
                }



            },
            GenerateErrorReturnMessage: function (m, err, errname, errdesc) {
                var $t;
                var ret = new RobotRaconteurWeb.Message();
                ret.header = new RobotRaconteurWeb.MessageHeader();
                ret.header.ReceiverNodeName = m.header.SenderNodeName;
                ret.header.SenderNodeName = m.header.ReceiverNodeName;
                ret.header.ReceiverNodeID = m.header.SenderNodeID;
                ret.header.ReceiverEndpoint = m.header.SenderEndpoint;
                ret.header.SenderEndpoint = m.header.ReceiverEndpoint;
                ret.header.SenderNodeID = m.header.ReceiverNodeID;
                $t = Bridge.getEnumerator(m.entries);
                try {
                    while ($t.moveNext()) {
                        var me = $t.Current;
                        if (me.EntryType % 2 === 1) {
                            var eret = new RobotRaconteurWeb.MessageEntry.$ctor1(((me.EntryType + 1) | 0), me.MemberName);
                            eret.RequestID = me.RequestID;
                            eret.ServicePath = me.ServicePath;
                            eret.AddElement$1("errorname", errname);
                            eret.AddElement$1("errorstring", errdesc);
                            eret.Error = err;
                            ret.entries.add(eret);
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }

                return ret;

            },
            RegisterServiceType: function (f) {
                this.service_factories;
                {
                    this.service_factories.add(f.GetServiceName(), f);
                }
            },
            GetServiceType: function (servicetype) {
                var f = { };
                if (!this.TryGetServiceType(servicetype, f)) {
                    throw new RobotRaconteurWeb.ServiceException("Service factory not found for " + (servicetype || ""));
                }
                return f.v;
            },
            TryGetServiceType: function (servicetype, f) {
                this.service_factories;
                {
                    return this.service_factories.tryGetValue(servicetype, f);
                }
            },
            GetServiceTypes: function () {
                var $t;
                this.service_factories;
                {
                    return ($t = System.String, System.Linq.Enumerable.from(this.service_factories.Keys, $t).ToArray($t));
                }
            },
            RegisterDynamicServiceFactory: function (f) {
                if (this.dynamic_factory != null) {
                    throw new System.InvalidOperationException.$ctor1("Dynamic service factory already set");
                }
                this.dynamic_factory = f;
            },
            RegisterService$1: function (name, servicetype, obj, securitypolicy) {
                if (securitypolicy === void 0) { securitypolicy = null; }
                this.services;
                {

                    if (System.Linq.Enumerable.from(this.services.Keys, System.String).contains(name)) {
                        this.CloseService(name);
                    }

                    var c = new RobotRaconteurWeb.ServerContext(this.GetServiceType(servicetype), this);
                    c.SetBaseObject(name, obj, securitypolicy);

                    this.services.add(name, c);

                    this.UpdateServiceStateNonce();

                    return c;
                }
            },
            RegisterService: function (c) {
                this.services;
                {
                    if (System.Linq.Enumerable.from(this.services.Keys, System.String).contains(c.ServiceName)) {
                        this.CloseService(c.ServiceName);
                    }

                    this.services.add(c.ServiceName, c);
                    return c;
                }
            },
            CloseService: function (sname) {
                this.services;
                {
                    var s = this.GetService(sname);



                    s.Close();

                    this.services.remove(sname);
                }




            },
            GetService: function (name) {
                try {
                    this.services;
                    {
                        return this.services.getItem(name);
                    }
                } catch ($e1) {
                    $e1 = System.Exception.create($e1);
                    if (Bridge.is($e1, RobotRaconteurWeb.KeyNotFoundException)) {
                        throw new RobotRaconteurWeb.ServiceNotFoundException("Service " + (name || "") + " not found");
                    } else {
                        throw $e1;
                    }
                }


            },
            RegisterTransport: function (c) {
                this.transports;
                {
                    this.transport_count = (this.transport_count + 1) >>> 0;
                    c.TransportID = this.transport_count;
                    this.transports.add(this.transport_count, c);
                    return this.transport_count;
                }
            },
            SpecialRequest: function (m, transportid) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    ret, 
                    $t, 
                    e, 
                    eret, 
                    $t1, 
                    path, 
                    s1, 
                    s, 
                    objtype, 
                    $async_e, 
                    name, 
                    servicedef, 
                    $e1, 
                    name1, 
                    c, 
                    se, 
                    $e2, 
                    name2, 
                    se1, 
                    $e3, 
                    path1, 
                    s11, 
                    attr, 
                    $e4, 
                    $async_e1, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17], $step);
                                switch ($step) {
                                    case 0: {
                                        if (!(RobotRaconteurWeb.NodeID.op_Equality(m.header.ReceiverNodeID, RobotRaconteurWeb.NodeID.Any) && (Bridge.referenceEquals(m.header.ReceiverNodeName, "") || Bridge.referenceEquals(m.header.ReceiverNodeName, this.NodeName))) && !(RobotRaconteurWeb.NodeID.op_Equality(m.header.ReceiverNodeID, this.NodeID))) {
                                            $tcs.setResult(this.GenerateErrorReturnMessage(m, RobotRaconteurWeb.MessageErrorType.NodeNotFound, "RobotRaconteur.NodeNotFound", "Could not find route to remote node"));
                                            return;
                                        }


                                        ret = new RobotRaconteurWeb.Message();
                                        ret.header = new RobotRaconteurWeb.MessageHeader();
                                        ret.header.ReceiverNodeName = m.header.SenderNodeName;
                                        ret.header.SenderNodeName = this.NodeName;
                                        ret.header.ReceiverNodeID = m.header.SenderNodeID;
                                        ret.header.ReceiverEndpoint = m.header.SenderEndpoint;
                                        ret.header.SenderEndpoint = m.header.ReceiverEndpoint;
                                        ret.header.SenderNodeID = this.NodeID;

                                        $t = Bridge.getEnumerator(m.entries);
                                        $step = 1;
                                        continue;
                                    }
                                    case 1: {
                                        if ($t.moveNext()) {
                                            e = $t.Current;
                                            $step = 2;
                                            continue;
                                        }
                                        $step = 17;
                                        continue;
                                    }
                                    case 2: {
                                        eret = ret.AddEntry(((e.EntryType + 1) | 0), e.MemberName);
                                        eret.RequestID = e.RequestID;
                                        eret.ServicePath = e.ServicePath;

                                        $t1 = e.EntryType;
                                        if ($t1 === RobotRaconteurWeb.MessageEntryType.GetNodeInfo) {
                                            $step = 3;
                                            continue;
                                        }
                                        else if ($t1 === RobotRaconteurWeb.MessageEntryType.ObjectTypeName) {
                                            $step = 4;
                                            continue;
                                        }
                                        else if ($t1 === RobotRaconteurWeb.MessageEntryType.GetServiceDesc) {
                                            $step = 9;
                                            continue;
                                        }
                                        else if ($t1 === RobotRaconteurWeb.MessageEntryType.ConnectClient) {
                                            $step = 10;
                                            continue;
                                        }
                                        else if ($t1 === RobotRaconteurWeb.MessageEntryType.DisconnectClient) {
                                            $step = 11;
                                            continue;
                                        }
                                        else if ($t1 === RobotRaconteurWeb.MessageEntryType.ConnectionTest) {
                                            $step = 12;
                                            continue;
                                        }
                                        else if ($t1 === RobotRaconteurWeb.MessageEntryType.NodeCheckCapability) {
                                            $step = 13;
                                            continue;
                                        }
                                        else if ($t1 === RobotRaconteurWeb.MessageEntryType.GetServiceAttributes) {
                                            $step = 14;
                                            continue;
                                        }
                                        else  {
                                            $step = 15;
                                            continue;
                                        }
                                        $step = 16;
                                        continue;
                                    }
                                    case 3: {
                                        $step = 16;
                                        continue;
                                    }
                                    case 4: {
                                        path = e.ServicePath;
                                        s1 = System.String.split(path, System.Array.init([46], System.Char).map(function (i) {{ return String.fromCharCode(i); }}), 2);
                                        
                                        $step = 5;
                                        continue;
                                    }
                                    case 5: {
                                        s = this.GetService(s1[System.Array.index(0, s1)]);

                                        $task1 = s.GetObjectType(path);
                                        $step = 6;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 6: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        objtype = $taskResult1;
                                        eret.AddElement$1("objecttype", objtype);
                                        $step = 8;
                                        continue;
                                    }
                                    case 7: {
                                        eret.AddElement$1("errorname", "RobotRaconteur.ObjectNotFoundException");
                                        eret.AddElement$1("errorstring", "Object not found");
                                        eret.Error = RobotRaconteurWeb.MessageErrorType.ObjectNotFound;
                                        $async_e = null;
                                        $step = 8;
                                        continue;
                                    }
                                    case 8: {
                                        $step = 16;
                                        continue;
                                    }
                                    case 9: {
                                        {
                                            name = e.ServicePath;
                                            try {
                                                servicedef = "";
                                                if (System.Linq.Enumerable.from(e.elements, RobotRaconteurWeb.MessageElement).any(function (x) {
                                                    return Bridge.referenceEquals(x.ElementName, "ServiceType");
                                                })) {
                                                    name = e.FindElement("ServiceType").CastData(System.String);
                                                    servicedef = this.GetServiceType(name).DefString();
                                                } else if (System.Linq.Enumerable.from(e.elements, RobotRaconteurWeb.MessageElement).any(function (x) {
                                                    return Bridge.referenceEquals(x.ElementName, "servicetype");
                                                })) {
                                                    name = e.FindElement("servicetype").CastData(System.String);
                                                    servicedef = this.GetServiceType(name).DefString();
                                                } else {
                                                    servicedef = this.GetService(name).ServiceDef.DefString();
                                                    eret.AddElement$1("attributes", this.PackMapType(System.String, System.Object, this.GetService(name).Attributes, null));
                                                }
                                                eret.AddElement$1("servicedef", servicedef);
                                            } catch ($e1) {
                                                $e1 = System.Exception.create($e1);
                                                eret.AddElement$1("errorname", "RobotRaconteur.ServiceNotFoundException");
                                                eret.AddElement$1("errorstring", "Service not found");
                                                eret.Error = RobotRaconteurWeb.MessageErrorType.ServiceNotFound;
                                            }
                                        }
                                        $step = 16;
                                        continue;
                                    }
                                    case 10: {
                                        {
                                            name1 = e.ServicePath;

                                            try {


                                                c = this.GetService(name1);
                                                se = new RobotRaconteurWeb.ServerEndpoint(c, this);

                                                se.m_RemoteEndpoint = m.header.SenderEndpoint;
                                                se.m_RemoteNodeID = m.header.SenderNodeID;
                                                this.RegisterEndpoint(se);

                                                se.transport = transportid;

                                                c.AddClient(se);

                                                ret.header.SenderEndpoint = se.LocalEndpoint;


                                            } catch ($e2) {
                                                $e2 = System.Exception.create($e2);
                                                eret.AddElement$1("errorname", "RobotRaconteur.ServiceNotFoundException");
                                                eret.AddElement$1("errorstring", "Service not found");
                                                eret.Error = RobotRaconteurWeb.MessageErrorType.ServiceNotFound;
                                            }
                                        }
                                        $step = 16;
                                        continue;
                                    }
                                    case 11: {
                                        {


                                            try {
                                                name2 = e.FindElement("servicename").CastData(System.String);
                                        this.endpoints;
                                                {
                                                    se1 = Bridge.cast(this.endpoints.getItem(m.header.ReceiverEndpoint), RobotRaconteurWeb.ServerEndpoint);
                                                }

                                                this.services;
                                                {
                                                    this.GetService(name2).RemoveClient(se1);
                                                }
                                                this.DeleteEndpoint(se1);
                                            } catch ($e3) {
                                                $e3 = System.Exception.create($e3);
                                                eret.AddElement$1("errorname", "RobotRaconteur.ServiceNotFoundException");
                                                eret.AddElement$1("errorstring", "Service not found");
                                                eret.Error = RobotRaconteurWeb.MessageErrorType.ServiceNotFound;
                                            }
                                        }
                                        $step = 16;
                                        continue;
                                    }
                                    case 12: {
                                        $step = 16;
                                        continue;
                                    }
                                    case 13: {
                                        eret.AddElement$1("return", Bridge.box(0, System.UInt32));
                                        $step = 16;
                                        continue;
                                    }
                                    case 14: {
                                        {
                                            path1 = e.ServicePath;
                                            s11 = System.String.split(path1, System.Array.init([46], System.Char).map(function (i) {{ return String.fromCharCode(i); }}), 2);
                                            try {

                                                s1 = this.GetService(s11[System.Array.index(0, s11)]);

                                                attr = s1.Attributes;
                                                eret.AddElement$1("return", this.PackMapType(System.String, System.Object, attr, null));
                                            } catch ($e4) {
                                                $e4 = System.Exception.create($e4);
                                                eret.AddElement$1("errorname", "RobotRaconteur.ServiceError");
                                                eret.AddElement$1("errorstring", "Service not found");
                                                eret.Error = RobotRaconteurWeb.MessageErrorType.ServiceError;
                                            }
                                        }
                                        $step = 16;
                                        continue;
                                    }
                                    case 15: {
                                        eret.Error = RobotRaconteurWeb.MessageErrorType.ProtocolError;
                                        eret.AddElement$1("errorname", "RobotRaconteur.ProtocolError");
                                        eret.AddElement$1("errorstring", "Invalid Special Operation");
                                        $step = 16;
                                        continue;
                                    }
                                    case 16: {
                                        $step = 1;
                                        continue;
                                    }
                                    case 17: {
                                        $tcs.setResult(ret);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            if ( $step >= 5 && $step <= 6 ) {
                                $step = 7;
                                $asyncBody();
                                return;
                            }
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            ConnectService: function (url, username, credentials, listener, objecttype, cancel) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    c, 
                    atransports, 
                    $t, 
                    $t1, 
                    end, 
                    r, 
                    $e1, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,7,8], $step);
                                switch ($step) {
                                    case 0: {
                                        if (username === void 0) { username = null; }
                                        if (credentials === void 0) { credentials = null; }
                                        if (listener === void 0) { listener = null; }
                                        if (objecttype === void 0) { objecttype = null; }
                                        if (cancel === void 0) { cancel = new System.Threading.CancellationToken(); }


                                        c = new RobotRaconteurWeb.ClientContext.ctor(this);
                                        this.RegisterEndpoint(c);
                                        this.transports;
                                        {
                                            atransports = ($t = RobotRaconteurWeb.Transport, System.Linq.Enumerable.from(this.transports.Values, $t).ToArray($t));
                                        }
                                        $t1 = Bridge.getEnumerator(atransports);
                                        $step = 1;
                                        continue;
                                    }
                                    case 1: {
                                        if ($t1.moveNext()) {
                                            end = $t1.Current;
                                            $step = 2;
                                            continue;
                                        }
                                        $step = 8;
                                        continue;
                                    }
                                    case 2: {
                                        if (end == null) {
                                            $step = 1;
                                            continue;
                                        }
                                        if (end.IsClient) {
                                            $step = 3;
                                            continue;
                                        } 
                                        $step = 7;
                                        continue;
                                    }
                                    case 3: {
                                        if (end.CanConnectService(url)) {
                                            $step = 4;
                                            continue;
                                        } 
                                        $step = 6;
                                        continue;
                                    }
                                    case 4: {
                                        $task1 = c.ConnectService(end, url, username, credentials, objecttype, cancel);
                                        $step = 5;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 5: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        r = $taskResult1;

                                        if (!Bridge.staticEquals(listener, null)) {
                                            c.addClientServiceListener(listener);
                                        }
                                        $tcs.setResult(r);
                                        return;
                                    }

                                    case 7: {
                                        $step = 1;
                                        continue;
                                    }
                                    case 8: {
                                        try {
                                            this.DeleteEndpoint(c);
                                        } catch ($e1) {
                                            $e1 = System.Exception.create($e1);
                                        }
                                        ;

                                        throw new RobotRaconteurWeb.ConnectionException("Could not connect to service");
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            ConnectService$1: function (urls, username, credentials, listener, objecttype, cancel) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    urlsl, 
                    $t, 
                    url, 
                    e, 
                    $async_e, 
                    $async_e1, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,6,7], $step);
                                switch ($step) {
                                    case 0: {
                                        if (username === void 0) { username = null; }
                                        if (credentials === void 0) { credentials = null; }
                                        if (listener === void 0) { listener = null; }
                                        if (objecttype === void 0) { objecttype = null; }
                                        if (cancel === void 0) { cancel = new System.Threading.CancellationToken(); }
                                        urlsl = ($t = System.String, System.Linq.Enumerable.from(urls, $t).toList($t));

                                        
                                        $step = 1;
                                        continue;
                                    }
                                    case 1: {
                                        if ( urlsl.Count > 0 && !cancel.getIsCancellationRequested() ) {
                                            $step = 2;
                                            continue;
                                        } 
                                        $step = 7;
                                        continue;
                                    }
                                    case 2: {
                                        url = { v : RobotRaconteurWeb.RobotRaconteurNode.SelectRemoteNodeURL(urlsl.ToArray()) };

                                        
                                        $step = 3;
                                        continue;
                                    }
                                    case 3: {
                                        $task1 = this.ConnectService(url.v, username, credentials, listener, objecttype, cancel);
                                        $step = 4;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 4: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult($taskResult1);
                                        return;
                                    }
                                    case 5: {
                                        if (Bridge.is(e, RobotRaconteurWeb.RobotRaconteurException)) {
                                            if (!(Bridge.is(e, RobotRaconteurWeb.ConnectionException) || Bridge.is(e, System.TimeoutException))) {
                                                throw e;
                                            }

                                        }

                                        $async_e = null;
                                        $step = 6;
                                        continue;
                                    }
                                    case 6: {
                                        ;

                                        urlsl.RemoveAll((function ($me, url) {
                                            return function (x) {
                                                return (Bridge.referenceEquals(x, url.v));
                                            };
                                        })(this, url));



                                        $step = 1;
                                        continue;
                                    }
                                    case 7: {
                                        throw new RobotRaconteurWeb.ConnectionException("Could not connect to service");
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            if ( $step >= 3 && $step <= 4 ) {
                                e = $async_e;
                                $step = 5;
                                $asyncBody();
                                return;
                            }
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            DisconnectService: function (obj, cancel) {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    stub, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        if (cancel === void 0) { cancel = new System.Threading.CancellationToken(); }
                                        stub = Bridge.cast(obj, RobotRaconteurWeb.ServiceStub);
                                        $task1 = stub.RRContext.Close(cancel);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            GetServiceAttributes: function (obj) {
                var stub = Bridge.cast(obj, RobotRaconteurWeb.ServiceStub);
                return stub.RRContext.Attributes;
            },
            RegisterEndpoint: function (e) {
                this.endpoints;
                {
                    var r = new System.Random.ctor();
                    var local_endpoint;
                    do {
                        var b = System.Array.init(4, 0, System.Byte);
                        r.NextBytes(b);
                        local_endpoint = System.BitConverter.toUInt32(b, 0);
                    } while (this.endpoints.containsKey(local_endpoint));

                    e.m_LocalEndpoint = local_endpoint;
                    this.endpoints.add(local_endpoint, e);
                    return local_endpoint;
                }
            },
            DeleteEndpoint: function (e) {

                try {
                    var c;
                    this.transports;
                    {
                        c = this.transports.getItem(e.transport);
                    }
                    RobotRaconteurWeb.Extensions.Extensions.IgnoreResult(c.CloseTransportConnection(e, Bridge.getDefaultValue(System.Threading.CancellationToken)));
                } catch ($e1) {
                    $e1 = System.Exception.create($e1);
                }

                try {
                    this.endpoints;
                    {
                        this.endpoints.remove(e.LocalEndpoint);
                    }
                } catch ($e2) {
                    $e2 = System.Exception.create($e2);
                }
            },
            CheckConnection: function (endpoint) {
                try {
                    var e;
                    this.endpoints;
                    {
                        try {
                            e = this.endpoints.getItem(endpoint);
                        } catch ($e1) {
                            $e1 = System.Exception.create($e1);
                            if (Bridge.is($e1, RobotRaconteurWeb.KeyNotFoundException)) {
                                throw new RobotRaconteurWeb.InvalidEndpointException("Invalid endpoint");
                            } else {
                                throw $e1;
                            }
                        }
                    }

                    var c;
                    this.transports;
                    {
                        try {
                            c = this.transports.getItem(e.transport);
                        } catch ($e2) {
                            $e2 = System.Exception.create($e2);
                            if (Bridge.is($e2, RobotRaconteurWeb.KeyNotFoundException)) {
                                throw new RobotRaconteurWeb.ConnectionException("Transport not found");
                            } else {
                                throw $e2;
                            }
                        }
                    }
                    c.CheckConnection(endpoint);
                } catch ($e3) {
                    $e3 = System.Exception.create($e3);
                    if (Bridge.is($e3, RobotRaconteurWeb.KeyNotFoundException)) {
                        throw new RobotRaconteurWeb.ConnectionException("Transport not connected");
                    } else {
                        throw $e3;
                    }
                }

            },
            Shutdown: function () {
                var $t, $t1, $t2, $t3;

                this.shutdown_token.cancel();

                var cc;
                this.transports;
                {
                    cc = ($t = RobotRaconteurWeb.Transport, System.Linq.Enumerable.from(this.transports.Values, $t).ToArray($t));
                }

                $t1 = Bridge.getEnumerator(cc);
                try {
                    while ($t1.moveNext()) {
                        var c = $t1.Current;
                        try {
                            c.Close();
                        } catch ($e1) {
                            $e1 = System.Exception.create($e1);
                        }
                        ;
                    }
                } finally {
                    if (Bridge.is($t1, System.IDisposable)) {
                        $t1.System$IDisposable$Dispose();
                    }
                }

                var sc;
                this.services;
                {
                    sc = ($t2 = RobotRaconteurWeb.ServerContext, System.Linq.Enumerable.from(this.services.Values, $t2).ToArray($t2));
                }

                $t3 = Bridge.getEnumerator(sc);
                try {
                    while ($t3.moveNext()) {
                        var c1 = $t3.Current;
                        try {
                            c1.Close();
                        } catch ($e2) {
                            $e2 = System.Exception.create($e2);
                        }
                        ;
                    }
                } finally {
                    if (Bridge.is($t3, System.IDisposable)) {
                        $t3.System$IDisposable$Dispose();
                    }
                }

                this.endpoints;
                {
                    try {
                        this.endpoints.clear();
                    } catch ($e3) {
                        $e3 = System.Exception.create($e3);
                    }
                }



            },
            NodeAnnouncePacketReceived: function (packet) {
                try {
                    var seed = "Robot Raconteur Node Discovery Packet";
                    if (Bridge.referenceEquals(packet.substr(0, seed.length), seed)) {
                        this.m_DiscoveredNodes;
                        {
                            var lines = System.String.split(packet, System.Array.init([10], System.Char).map(function (i) {{ return String.fromCharCode(i); }}));
                            var idline = System.String.split(lines[System.Array.index(1, lines)], System.Array.init([44], System.Char).map(function (i) {{ return String.fromCharCode(i); }}));

                            var nodeid = new RobotRaconteurWeb.NodeID.$ctor1(idline[System.Array.index(0, idline)]);

                            var nodename = idline[System.Array.index(1, idline)];
                            var url = lines[System.Array.index(2, lines)];


                            if (System.Linq.Enumerable.from(this.m_DiscoveredNodes.Keys, System.String).contains(nodeid.toString())) {
                                var i = this.m_DiscoveredNodes.getItem(nodeid.toString());
                                i.NodeName = nodename;
                                if (!System.Linq.Enumerable.from(i.URLs, RobotRaconteurWeb.NodeDiscoveryInfoURL).any(function (x) {
                                        return Bridge.referenceEquals(x.URL, url);
                                    })) {
                                    var u = new RobotRaconteurWeb.NodeDiscoveryInfoURL();
                                    u.URL = url;
                                    u.LastAnnounceTime = System.DateTime.getUtcNow();
                                    i.URLs.add(u);
                                } else {
                                    System.Linq.Enumerable.from(i.URLs, RobotRaconteurWeb.NodeDiscoveryInfoURL).first(function (x) {
                                            return Bridge.referenceEquals(x.URL, url);
                                        }).LastAnnounceTime = System.DateTime.getUtcNow();
                                }
                            } else {
                                var i1 = new RobotRaconteurWeb.NodeDiscoveryInfo();
                                i1.NodeID = nodeid;
                                i1.NodeName = nodename;
                                var u1 = new RobotRaconteurWeb.NodeDiscoveryInfoURL();
                                u1.URL = url;
                                u1.LastAnnounceTime = System.DateTime.getUtcNow();
                                i1.URLs.add(u1);
                                this.m_DiscoveredNodes.add(nodeid.toString(), i1);
                            }
                        }

                    }

                } catch ($e1) {
                    $e1 = System.Exception.create($e1);
                }
                ;


            },
            NodeDetected: function (n) {
                var $t, $t1;
                try {
                    this.m_DiscoveredNodes;
                    {
                        if (System.Linq.Enumerable.from(this.m_DiscoveredNodes.Keys, System.String).contains(n.NodeID.toString())) {
                            var i = this.m_DiscoveredNodes.getItem(n.NodeID.toString());
                            i.NodeName = n.NodeName;
                            $t = Bridge.getEnumerator(n.URLs);
                            try {
                                while ($t.moveNext()) {
                                    var url = { v : $t.Current };
                                    if (!System.Linq.Enumerable.from(i.URLs, RobotRaconteurWeb.NodeDiscoveryInfoURL).any((function ($me, url) {
                                            return function (x) {
                                                return Bridge.referenceEquals(x.URL, url.v.URL);
                                            };
                                        })(this, url))) {
                                        var u = new RobotRaconteurWeb.NodeDiscoveryInfoURL();
                                        u.URL = url.v.URL;
                                        u.LastAnnounceTime = System.DateTime.getUtcNow();
                                        i.URLs.add(u);
                                    } else {
                                        System.Linq.Enumerable.from(i.URLs, RobotRaconteurWeb.NodeDiscoveryInfoURL).first((function ($me, url) {
                                                return function (x) {
                                                    return Bridge.referenceEquals(x.URL, url.v.URL);
                                                };
                                            })(this, url)).LastAnnounceTime = System.DateTime.getUtcNow();
                                    }
                                }
                            } finally {
                                if (Bridge.is($t, System.IDisposable)) {
                                    $t.System$IDisposable$Dispose();
                                }
                            }
                        } else {
                            $t1 = Bridge.getEnumerator(n.URLs);
                            try {
                                while ($t1.moveNext()) {
                                    var u1 = $t1.Current;
                                    u1.LastAnnounceTime = System.DateTime.getUtcNow();
                                }
                            } finally {
                                if (Bridge.is($t1, System.IDisposable)) {
                                    $t1.System$IDisposable$Dispose();
                                }
                            }
                            this.m_DiscoveredNodes.add(n.NodeID.toString(), n);
                        }
                    }
                } catch ($e1) {
                    $e1 = System.Exception.create($e1);
                }

            },
            CleanDiscoveredNodes: function () {
                var $t, $t1, $t2;
                try {
                    this.m_DiscoveredNodes;
                    {
                        var now = System.DateTime.getUtcNow();

                        var keys = ($t = System.String, System.Linq.Enumerable.from(this.m_DiscoveredNodes.Keys, $t).ToArray($t));
                        $t1 = Bridge.getEnumerator(keys);
                        try {
                            while ($t1.moveNext()) {
                                var key = $t1.Current;
                                var newurls = new (System.Collections.Generic.List$1(RobotRaconteurWeb.NodeDiscoveryInfoURL)).ctor();
                                var urls = this.m_DiscoveredNodes.getItem(key).URLs.ToArray();
                                $t2 = Bridge.getEnumerator(urls);
                                try {
                                    while ($t2.moveNext()) {
                                        var u = $t2.Current;

                                        var time = (System.DateTime.subdd(now, u.LastAnnounceTime)).getTotalMilliseconds();
                                        if (time < 60000) {
                                            newurls.add(u);
                                        }
                                    }
                                } finally {
                                    if (Bridge.is($t2, System.IDisposable)) {
                                        $t2.System$IDisposable$Dispose();
                                    }
                                }

                                this.m_DiscoveredNodes.getItem(key).URLs = newurls;

                                if (newurls.Count === 0) {
                                    this.m_DiscoveredNodes.remove(key);
                                }

                            }
                        } finally {
                            if (Bridge.is($t1, System.IDisposable)) {
                                $t1.System$IDisposable$Dispose();
                            }
                        }


                    }
                } catch ($e1) {
                    $e1 = System.Exception.create($e1);
                }

            },
            UpdateDetectedNodes: function (cancel) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    tasks, 
                    t, 
                    $t, 
                    t2, 
                    $t1, 
                    t21, 
                    task1, 
                    $t2, 
                    t22, 
                    info, 
                    $t3, 
                    i, 
                    $async_e, 
                    $async_e1, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,4,5,6,7,8], $step);
                                switch ($step) {
                                    case 0: {
                                        tasks = new (System.Collections.Generic.List$1(System.Threading.Tasks.Task$1(System.Collections.Generic.List$1(RobotRaconteurWeb.NodeDiscoveryInfo)))).ctor();
                                        t = new (System.Collections.Generic.List$1(RobotRaconteurWeb.Transport)).ctor();
                                        this.transports;
                                        {
                                            $t = Bridge.getEnumerator(this.transports.Values);
                                            try {
                                                while ($t.moveNext()) {
                                                    t2 = $t.Current;
                                                    t.add(t2);
                                                }
                                            } finally {
                                                if (Bridge.is($t, System.IDisposable)) {
                                                    $t.System$IDisposable$Dispose();
                                                }
                                            }
                                        }

                                        $t1 = Bridge.getEnumerator(t);
                                        try {
                                            while ($t1.moveNext()) {
                                                t21 = $t1.Current;
                                                task1 = t21.GetDetectedNodes(cancel);
                                                tasks.add(task1);
                                            }
                                        } finally {
                                            if (Bridge.is($t1, System.IDisposable)) {
                                                $t1.System$IDisposable$Dispose();
                                            }
                                        }

                                        $task1 = System.Threading.Tasks.Task.whenAll(tasks);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $t2 = Bridge.getEnumerator(tasks);
                                        $step = 2;
                                        continue;
                                    }
                                    case 2: {
                                        if ($t2.moveNext()) {
                                            t22 = $t2.Current;
                                            $step = 3;
                                            continue;
                                        }
                                        $step = 8;
                                        continue;
                                    }

                                    case 4: {
                                        $task2 = t22;
                                        $step = 5;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 5: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        info = $taskResult2;
                                        $t3 = Bridge.getEnumerator(info);
                                        try {
                                            while ($t3.moveNext()) {
                                                i = $t3.Current;
                                                this.NodeDetected(i);
                                            }
                                        } finally {
                                            if (Bridge.is($t3, System.IDisposable)) {
                                                $t3.System$IDisposable$Dispose();
                                            }
                                        }
                                        $step = 7;
                                        continue;
                                    }
                                    case 6: {
                                        $async_e = null;
                                        $step = 7;
                                        continue;
                                    }
                                    case 7: {
                                        $step = 2;
                                        continue;
                                    }
                                    case 8: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            if ( $step >= 4 && $step <= 5 ) {
                                $step = 6;
                                $asyncBody();
                                return;
                            }
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            DoFindServiceByType: function (urls, cancel) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    ind, 
                    $t, 
                    NodeID, 
                    NodeName, 
                    inf, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = this.ConnectService$1(($t = System.String, System.Linq.Enumerable.from(urls, $t).ToArray($t)), void 0, void 0, void 0, void 0, cancel);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        ind = Bridge.cast($taskResult1, RobotRaconteurServiceIndex.ServiceIndex);
                                        NodeID = Bridge.cast(ind, RobotRaconteurWeb.ServiceStub).RRContext.RemoteNodeID.ToByteArray();
                                        NodeName = Bridge.cast(ind, RobotRaconteurWeb.ServiceStub).RRContext.RemoteNodeName;
                                        $task2 = ind.RobotRaconteurServiceIndex$ServiceIndex$GetLocalNodeServices(cancel);
                                        $step = 2;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        inf = $taskResult2;
                                        $tcs.setResult({ Item1: NodeID, Item2: NodeName, Item3: inf });
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            FindServiceByType: function (servicetype, transportschemes) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    cancel, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        cancel = new System.Threading.CancellationTokenSource();
                                        cancel.cancelAfter(5000);
                                        $task1 = this.FindServiceByType$1(servicetype, transportschemes, cancel.token);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult($taskResult1);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            FindServiceByType$1: function (servicetype, transportschemes, cancel) {
                var $step = 0,
                    $task1, 
                    $task2, 
                    $task3, 
                    $taskResult3, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    services, 
                    nodeids, 
                    $t, 
                    info_wait, 
                    urls, 
                    $t1, 
                    url, 
                    $t2, 
                    s, 
                    $e1, 
                    $e2, 
                    waittask, 
                    i1, 
                    inf, 
                    n, 
                    $t3, 
                    ii, 
                    $t4, 
                    impl, 
                    $e3, 
                    $async_e1, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([1,2,3,4,5,6,7,8,9,11,12,13,15,16], $step);
                                switch ($step) {

                                    case 1: {
                                        $task1 = this.UpdateDetectedNodes(cancel);
                                        $step = 2;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $task1.getAwaitedResult();
                                        $step = 4;
                                        continue;
                                    }
                                    case 3: {
                                        $async_e = null;
                                        $step = 4;
                                        continue;
                                    }
                                    case 4: {
                                        ;

                                        services = new (System.Collections.Generic.List$1(RobotRaconteurWeb.ServiceInfo2)).ctor();
                                        this.m_DiscoveredNodes;
                                        {

                                            nodeids = ($t = System.String, System.Linq.Enumerable.from(this.DiscoveredNodes.Keys, $t).toList($t));

                                        }

                                        info_wait = new (System.Collections.Generic.List$1(System.Threading.Tasks.Task$1(System.Tuple$3(System.Array.type(System.Byte),System.String,System.Collections.Generic.Dictionary$2(System.Int32,RobotRaconteurServiceIndex.ServiceInfo))))).ctor();

                                        for (var i = 0; i < nodeids.Count; i = (i + 1) | 0) {

                                            try {
                                                urls = new (System.Collections.Generic.List$1(System.String)).ctor();
                                                this.m_DiscoveredNodes;
                                                {
                                                    $t1 = Bridge.getEnumerator(this.m_DiscoveredNodes.getItem(nodeids.getItem(i)).URLs);
                                                    try {
                                                        while ($t1.moveNext()) {
                                                            url = $t1.Current;
                                                            $t2 = Bridge.getEnumerator(transportschemes);
                                                            try {
                                                                while ($t2.moveNext()) {
                                                                    s = $t2.Current;
                                                                    if (System.String.startsWith(url.URL, (s || "") + "://")) {
                                                                        urls.add(url.URL);
                                                                        break;
                                                                    }

                                                                }
                                                            } finally {
                                                                if (Bridge.is($t2, System.IDisposable)) {
                                                                    $t2.System$IDisposable$Dispose();
                                                                }
                                                            }
                                                        }
                                                    } finally {
                                                        if (Bridge.is($t1, System.IDisposable)) {
                                                            $t1.System$IDisposable$Dispose();
                                                        }
                                                    }
                                                }
                                                if (urls.Count > 0) {
                                                    info_wait.add(this.DoFindServiceByType(urls.ToArray(), cancel));
                                                }
                                            } catch ($e1) {
                                                $e1 = System.Exception.create($e1);
                                                try {
                                                    this.m_DiscoveredNodes;
                                                    {
                                                        this.m_DiscoveredNodes.remove(nodeids.getItem(i));
                                                    }
                                                } catch ($e2) {
                                                    $e2 = System.Exception.create($e2);
                                                }
                                            }

                                        }

                                        if (info_wait.Count === 0) {
                                            $tcs.setResult(System.Array.init(0, null, RobotRaconteurWeb.ServiceInfo2));
                                            return;
                                        }

                                        
                                        $step = 5;
                                        continue;
                                    }
                                    case 5: {
                                        waittask = System.Threading.Tasks.Task.whenAll(info_wait);

                                        $task2 = waittask;
                                        $step = 6;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 6: {
                                        $task2.getAwaitedResult();
                                        $step = 8;
                                        continue;
                                    }
                                    case 7: {
                                        $async_e = null;
                                        $step = 8;
                                        continue;
                                    }
                                    case 8: {
                                        i1 = 0;
                                        $step = 9;
                                        continue;
                                    }
                                    case 9: {
                                        if ( i1 < nodeids.Count ) {
                                            $step = 10;
                                            continue;
                                        }
                                        $step = 16;
                                        continue;
                                    }

                                    case 11: {
                                        if (!info_wait.getItem(i1).isCompleted()) {
                                            throw new System.TimeoutException.$ctor1("Timeout");
                                        }

                                        $task3 = info_wait.getItem(i1);
                                        $step = 12;
                                        if ($task3.isCompleted()) {
                                            continue;
                                        }
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 12: {
                                        $taskResult3 = $task3.getAwaitedResult();
                                        inf = $taskResult3;


                                        n = new RobotRaconteurServiceIndex.NodeInfo();
                                        n.NodeID = inf.Item1;
                                        n.NodeName = inf.Item2;


                                        $t3 = Bridge.getEnumerator(inf.Item3.Values);
                                        try {
                                            while ($t3.moveNext()) {
                                                ii = $t3.Current;
                                                if (Bridge.referenceEquals(ii.RootObjectType, servicetype)) {
                                                    services.add(new RobotRaconteurWeb.ServiceInfo2.$ctor1(ii, n));
                                                } else {
                                                    $t4 = Bridge.getEnumerator(ii.RootObjectImplements.Values);
                                                    try {
                                                        while ($t4.moveNext()) {
                                                            impl = $t4.Current;
                                                            if (Bridge.referenceEquals(impl, servicetype)) {
                                                                services.add(new RobotRaconteurWeb.ServiceInfo2.$ctor1(ii, n));
                                                            }
                                                        }
                                                    } finally {
                                                        if (Bridge.is($t4, System.IDisposable)) {
                                                            $t4.System$IDisposable$Dispose();
                                                        }
                                                    }

                                                }
                                            }
                                        } finally {
                                            if (Bridge.is($t3, System.IDisposable)) {
                                                $t3.System$IDisposable$Dispose();
                                            }
                                        }
                                        $step = 14;
                                        continue;
                                    }
                                    case 13: {
                                        try {
                                            this.m_DiscoveredNodes;
                                            {
                                                this.m_DiscoveredNodes.remove(nodeids.getItem(i1));
                                            }
                                        } catch ($e3) {
                                            $e3 = System.Exception.create($e3);
                                        }
                                        $async_e = null;
                                        $step = 14;
                                        continue;
                                    }

                                    case 15: {
                                        i1 = (i1 + 1) | 0;
                                        $step = 9;
                                        continue;
                                    }
                                    case 16: {
                                        $tcs.setResult(services.ToArray());
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            if ( $step >= 1 && $step <= 2 ) {
                                $step = 3;
                                $asyncBody();
                                return;
                            }
                            if ( $step >= 5 && $step <= 6 ) {
                                $step = 7;
                                $asyncBody();
                                return;
                            }
                            if ( $step >= 11 && $step <= 12 ) {
                                $step = 13;
                                $asyncBody();
                                return;
                            }
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            FindNodeByID: function (id, schemes) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    cancel, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        cancel = new System.Threading.CancellationTokenSource();
                                        cancel.cancelAfter(5000);
                                        $task1 = this.FindNodeByID$1(id, schemes, cancel.token);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult($taskResult1);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            FindNodeByID$1: function (id, schemes, cancel) {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    o, 
                    nodeid_str, 
                    ni, 
                    n, 
                    c, 
                    $t, 
                    url, 
                    u, 
                    short_url, 
                    $async_e1, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([1,2,3,4], $step);
                                switch ($step) {

                                    case 1: {
                                        $task1 = this.UpdateDetectedNodes(cancel);
                                        $step = 2;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $task1.getAwaitedResult();
                                        $step = 4;
                                        continue;
                                    }
                                    case 3: {
                                        $async_e = null;
                                        $step = 4;
                                        continue;
                                    }
                                    case 4: {
                                        ;

                                        o = new (System.Collections.Generic.List$1(RobotRaconteurWeb.NodeInfo2)).ctor();

                                        this.m_DiscoveredNodes;
                                        {
                                            nodeid_str = id.toString();
                                            if (this.m_DiscoveredNodes.containsKey(nodeid_str)) {
                                                ni = this.m_DiscoveredNodes.getItem(nodeid_str);
                                                n = new RobotRaconteurWeb.NodeInfo2();
                                                n.NodeID = new RobotRaconteurWeb.NodeID.$ctor1(nodeid_str);
                                                n.NodeName = ni.NodeName;

                                                c = new (System.Collections.Generic.List$1(System.String)).ctor();

                                                $t = Bridge.getEnumerator(ni.URLs);
                                                try {
                                                    while ($t.moveNext()) {
                                                        url = $t.Current;
                                                        u = { v : RobotRaconteurWeb.TransportUtil.ParseConnectionUrl(url.URL) };
                                                        if (System.Linq.Enumerable.from(schemes, System.String).any((function ($me, u) {
                                                            return function (x) {
                                                                return Bridge.referenceEquals(x, u.v.scheme);
                                                            };
                                                        })(this, u))) {
                                        if (u.v.port === -1) {
                                                                short_url = (u.v.scheme || "") + "//" + (u.v.host || "") + (u.v.path || "") + "?nodeid=" + (System.String.trim(nodeid_str, System.Array.init([123, 125], System.Char)) || "");
                                                            } else {
                                                                short_url = (u.v.scheme || "") + "//" + (u.v.host || "") + ":" + u.v.port + (u.v.path || "") + "?nodeid=" + (System.String.trim(nodeid_str, System.Array.init([123, 125], System.Char)) || "");
                                                            }

                                                            c.add(short_url);
                                                        }

                                                    }
                                                } finally {
                                                    if (Bridge.is($t, System.IDisposable)) {
                                                        $t.System$IDisposable$Dispose();
                                                    }
                                                }

                                                if (c.Count !== 0) {
                                                    n.ConnectionURL = c.ToArray();
                                                    o.add(n);
                                                }
                                            }
                                        }

                                        $tcs.setResult(o.ToArray());
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            if ( $step >= 1 && $step <= 2 ) {
                                $step = 3;
                                $asyncBody();
                                return;
                            }
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            FindNodeByName: function (name, schemes) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    cancel, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        cancel = new System.Threading.CancellationTokenSource();
                                        cancel.cancelAfter(5000);
                                        $task1 = this.FindNodeByName$1(name, schemes, cancel.token);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult($taskResult1);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            FindNodeByName$1: function (name, schemes, cancel) {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    o, 
                    $t, 
                    e, 
                    n, 
                    nodeid_str, 
                    c, 
                    $t1, 
                    url, 
                    u, 
                    short_url, 
                    $async_e1, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([1,2,3,4], $step);
                                switch ($step) {

                                    case 1: {
                                        $task1 = this.UpdateDetectedNodes(cancel);
                                        $step = 2;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $task1.getAwaitedResult();
                                        $step = 4;
                                        continue;
                                    }
                                    case 3: {
                                        $async_e = null;
                                        $step = 4;
                                        continue;
                                    }
                                    case 4: {
                                        ;

                                        o = new (System.Collections.Generic.List$1(RobotRaconteurWeb.NodeInfo2)).ctor();

                                        this.m_DiscoveredNodes;
                                        {
                                            $t = Bridge.getEnumerator(this.m_DiscoveredNodes);
                                            try {
                                                while ($t.moveNext()) {
                                                    e = $t.Current;
                                                    if (Bridge.referenceEquals(e.value.NodeName, name)) {
                                                        n = new RobotRaconteurWeb.NodeInfo2();
                                                        nodeid_str = e.value.NodeID.toString();
                                                        n.NodeID = new RobotRaconteurWeb.NodeID.$ctor1(nodeid_str);
                                                        n.NodeName = e.value.NodeName;

                                                        c = new (System.Collections.Generic.List$1(System.String)).ctor();

                                                        $t1 = Bridge.getEnumerator(e.value.URLs);
                                                        try {
                                                            while ($t1.moveNext()) {
                                                                url = $t1.Current;
                                                                u = { v : RobotRaconteurWeb.TransportUtil.ParseConnectionUrl(url.URL) };
                                                                if (System.Linq.Enumerable.from(schemes, System.String).any((function ($me, u) {
                                                                    return function (x) {
                                                                        return Bridge.referenceEquals(x, u.v.scheme);
                                                                    };
                                                                })(this, u))) {
                                        if (u.v.port === -1) {
                                                                        short_url = (u.v.scheme || "") + "//" + (u.v.host || "") + (u.v.path || "") + "?nodeid=" + (System.String.trim(nodeid_str, System.Array.init([123, 125], System.Char)) || "");
                                                                    } else {
                                                                        short_url = (u.v.scheme || "") + "//" + (u.v.host || "") + ":" + u.v.port + (u.v.path || "") + "?nodeid=" + (System.String.trim(nodeid_str, System.Array.init([123, 125], System.Char)) || "");
                                                                    }

                                                                    c.add(short_url);
                                                                }

                                                            }
                                                        } finally {
                                                            if (Bridge.is($t1, System.IDisposable)) {
                                                                $t1.System$IDisposable$Dispose();
                                                            }
                                                        }

                                                        if (c.Count !== 0) {
                                                            n.ConnectionURL = c.ToArray();
                                                            o.add(n);
                                                        }
                                                    }
                                                }
                                            } finally {
                                                if (Bridge.is($t, System.IDisposable)) {
                                                    $t.System$IDisposable$Dispose();
                                                }
                                            }
                                        }

                                        $tcs.setResult(o.ToArray());
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            if ( $step >= 1 && $step <= 2 ) {
                                $step = 3;
                                $asyncBody();
                                return;
                            }
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            RequestObjectLock: function (obj, flags, cancel) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    s, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        if (cancel === void 0) { cancel = new System.Threading.CancellationToken(); }
                                        if (!(Bridge.is(obj, RobotRaconteurWeb.ServiceStub))) {
                                            throw new System.InvalidOperationException.$ctor1("Can only lock object opened through Robot Raconteur");
                                        }
                                        s = Bridge.cast(obj, RobotRaconteurWeb.ServiceStub);

                                        $task1 = s.RRContext.RequestObjectLock(obj, flags, cancel);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult($taskResult1);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            ReleaseObjectLock: function (obj, cancel) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    s, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        if (cancel === void 0) { cancel = new System.Threading.CancellationToken(); }
                                        if (!(Bridge.is(obj, RobotRaconteurWeb.ServiceStub))) {
                                            throw new System.InvalidOperationException.$ctor1("Can only unlock object opened through Robot Raconteur");
                                        }
                                        s = Bridge.cast(obj, RobotRaconteurWeb.ServiceStub);

                                        $task1 = s.RRContext.ReleaseObjectLock(obj, cancel);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult($taskResult1);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            MonitorEnter: function (obj, timeout, cancel) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    s, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        if (timeout === void 0) { timeout = -1; }
                                        if (cancel === void 0) { cancel = new System.Threading.CancellationToken(); }
                                        if (!(Bridge.is(obj, RobotRaconteurWeb.ServiceStub))) {
                                            throw new System.InvalidOperationException.$ctor1("Only service stubs can be monitored by RobotRaconteurNode");
                                        }
                                        s = Bridge.cast(obj, RobotRaconteurWeb.ServiceStub);

                                        $task1 = s.RRContext.MonitorEnter(obj, timeout, cancel);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult($taskResult1);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            MonitorExit: function (lock_, cancel) {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        if (cancel === void 0) { cancel = new System.Threading.CancellationToken(); }

                                        $task1 = lock_.stub.RRContext.MonitorExit(lock_, cancel);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            FindObjRefTyped$1: function (obj, objref, objecttype, cancel) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    s, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        if (!(Bridge.is(obj, RobotRaconteurWeb.ServiceStub))) {
                                            throw new System.InvalidOperationException.$ctor1("Only service stubs can have objrefs");
                                        }
                                        s = Bridge.cast(obj, RobotRaconteurWeb.ServiceStub);

                                        $task1 = s.FindObjRefTyped$1(objref, objecttype, cancel);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult($taskResult1);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            FindObjRefTyped: function (obj, objref, index, objecttype, cancel) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    s, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        if (!(Bridge.is(obj, RobotRaconteurWeb.ServiceStub))) {
                                            throw new System.InvalidOperationException.$ctor1("Only service stubs can have objrefs");
                                        }
                                        s = Bridge.cast(obj, RobotRaconteurWeb.ServiceStub);

                                        $task1 = s.FindObjRefTyped(objref, index, objecttype, cancel);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult($taskResult1);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            CreateTimer: function (period, handler, oneshot) {
                if (oneshot === void 0) { oneshot = false; }
                var t = new RobotRaconteurWeb.WallTimer(period, handler, oneshot, this);
                return t;
            },
            CreateRate: function (period) {
                return new RobotRaconteurWeb.WallRate(period, this);
            },
            GetRandomString: function (count) {
                var o = "";
                var r = new System.Random.ctor();
                var strvals = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";

                for (var i = 0; i < count; i = (i + 1) | 0) {
                    o = (o || "") + String.fromCharCode(strvals.charCodeAt(r.Next$2(0, (((strvals.length - 1) | 0)))));
                }
                return o;
            },
            UpdateServiceStateNonce: function () {
                var $t;
                this;
                {
                    var new_nonce;
                    do {
                        var r = new System.Random.ctor();
                        new_nonce = this.GetRandomString(16);
                    } while (Bridge.referenceEquals(new_nonce, this.service_state_nonce));

                    this.service_state_nonce = new_nonce;
                }

                this.transports;
                {
                    $t = Bridge.getEnumerator(this.transports.Values);
                    try {
                        while ($t.moveNext()) {
                            var t = $t.Current;
                            t.LocalNodeServicesChanged();
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                }
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.RobotRaconteurNode.MonitorLock", {
        $kind: "nested class",
        fields: {
            lock_: null,
            stub: null
        }
    });

    Bridge.define("RobotRaconteurWeb.RobotRaconteurObjectLockFlags", {
        $kind: "enum",
        statics: {
            fields: {
                USER_LOCK: 0,
                CLIENT_LOCK: 1
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.RobotRaconteurParseException", {
        inherits: [System.Exception],
        fields: {
            lineNumber: 0
        },
        ctors: {
            ctor: function (e) {
                this.$initialize();
                System.Exception.ctor.call(this, e);

            },
            $ctor1: function (e, line) {
                this.$initialize();
                System.Exception.ctor.call(this, e);
                this.lineNumber = line;

            }
        },
        methods: {
            toString: function () {
                return "RobotRaconteur Parse Error On Line " + this.lineNumber + ": " + (this.Message || "");
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.RobotRaconteurServiceObjectInterface", {
        inherits: [System.Attribute],
        fields: {
            rrtype: null
        },
        props: {
            RRType: {
                get: function () {
                    return this.rrtype;
                }
            }
        },
        ctors: {
            ctor: function (rrtype) {
                this.$initialize();
                System.Attribute.ctor.call(this);
                this.rrtype = rrtype;
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.RobotRaconteurServicePod", {
        inherits: [System.Attribute],
        fields: {
            RRType: null
        },
        ctors: {
            ctor: function (rr_type) {
                this.$initialize();
                System.Attribute.ctor.call(this);
                this.RRType = rr_type;
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.RobotRaconteurServiceStruct", {
        inherits: [System.Attribute],
        fields: {
            rrtype: null
        },
        props: {
            RRType: {
                get: function () {
                    return this.rrtype;
                }
            }
        },
        ctors: {
            ctor: function (rrtype) {
                this.$initialize();
                System.Attribute.ctor.call(this);
                this.rrtype = rrtype;
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.RobotRaconteurVersion", {
        $kind: "struct",
        statics: {
            methods: {
                op_Equality: function (v1, v2) {
                    return (v1.major === v2.major) && (v1.minor === v2.minor) && (v1.patch === v2.patch) && (v1.tweak === v2.tweak);
                },
                op_Inequality: function (v1, v2) {
                    return !((v1.major === v2.major) && (v1.minor === v2.minor) && (v1.patch === v2.patch) && (v1.tweak === v2.tweak));
                },
                op_GreaterThan: function (v1, v2) {
                    if (v1.major > v2.major) {
                        return true;
                    }
                    if (v1.minor > v2.minor) {
                        return true;
                    }
                    if (v1.patch > v2.patch) {
                        return true;
                    }
                    if (v1.tweak > v2.tweak) {
                        return true;
                    }
                    return false;
                },
                op_GreaterThanOrEqual: function (v1, v2) {
                    if ((v1.major === v2.major) && (v1.minor === v2.minor) && (v1.patch === v2.patch) && (v1.tweak === v2.tweak)) {
                        return true;
                    }
                    return RobotRaconteurWeb.RobotRaconteurVersion.op_GreaterThan(v1.$clone(), v2.$clone());
                },
                op_LessThan: function (v1, v2) {
                    if (v1.major < v2.major) {
                        return true;
                    }
                    if (v1.minor < v2.minor) {
                        return true;
                    }
                    if (v1.patch < v2.patch) {
                        return true;
                    }
                    if (v1.tweak < v2.tweak) {
                        return true;
                    }
                    return false;
                },
                op_LessThanOrEqual: function (v1, v2) {
                    if ((v1.major === v2.major) && (v1.minor === v2.minor) && (v1.patch === v2.patch) && (v1.tweak === v2.tweak)) {
                        return true;
                    }
                    return RobotRaconteurWeb.RobotRaconteurVersion.op_LessThan(v1.$clone(), v2.$clone());
                },
                op_Explicit: function (v1) {
                    return !((v1.major === 0) && (v1.minor === 0) && (v1.patch === 0) && (v1.tweak === 0));
                },
                getDefaultValue: function () { return new RobotRaconteurWeb.RobotRaconteurVersion(); }
            }
        },
        fields: {
            major: 0,
            minor: 0,
            patch: 0,
            tweak: 0
        },
        ctors: {
            $ctor2: function (major, minor, patch, tweak) {
                if (patch === void 0) { patch = 0; }
                if (tweak === void 0) { tweak = 0; }

                this.$initialize();
                this.major = major;
                this.minor = minor;
                this.patch = patch;
                this.tweak = tweak;
            },
            $ctor1: function (v) {
                this.$initialize();
                this.major = 0;
                this.minor = 0;
                this.patch = 0;
                this.tweak = 0;
                this.FromString(v);
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            toString: function () {
                if (this.patch === 0 && this.tweak === 0) {
                    return System.String.format("{0}.{1}", Bridge.box(this.major, System.UInt32), Bridge.box(this.minor, System.UInt32));
                } else if (this.tweak === 0) {
                    return System.String.format("{0}.{1}.{2}", Bridge.box(this.major, System.UInt32), Bridge.box(this.minor, System.UInt32), Bridge.box(this.patch, System.UInt32));
                }
                return System.String.format("{0}.{1}.{2}.{3}", Bridge.box(this.major, System.UInt32), Bridge.box(this.minor, System.UInt32), Bridge.box(this.patch, System.UInt32), Bridge.box(this.tweak, System.UInt32));
            },
            FromString: function (v) {
                var m = System.Text.RegularExpressions.Regex.match(v, "^(\\d+)\\.(\\d+)(?:\\.(\\d+)(?:\\.(\\d+))?)?$");
                if (!m.getSuccess()) {
                    throw new RobotRaconteurWeb.RobotRaconteurParseException.ctor("Format error for version definition \"" + (v || "") + "\"");
                }

                this.major = System.UInt32.parse(m.getGroups().get(1).getValue());
                this.minor = System.UInt32.parse(m.getGroups().get(2).getValue());
                this.patch = m.getGroups().get(3).getSuccess() ? System.UInt32.parse(m.getGroups().get(3).getValue()) : 0;
                this.tweak = m.getGroups().get(4).getSuccess() ? System.UInt32.parse(m.getGroups().get(4).getValue()) : 0;
            },
            getHashCode: function () {
                var h = Bridge.addHash([8807519882, this.major, this.minor, this.patch, this.tweak]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, RobotRaconteurWeb.RobotRaconteurVersion)) {
                    return false;
                }
                return Bridge.equals(this.major, o.major) && Bridge.equals(this.minor, o.minor) && Bridge.equals(this.patch, o.patch) && Bridge.equals(this.tweak, o.tweak);
            },
            $clone: function (to) {
                var s = to || new RobotRaconteurWeb.RobotRaconteurVersion();
                s.major = this.major;
                s.minor = this.minor;
                s.patch = this.patch;
                s.tweak = this.tweak;
                return s;
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.ServerContext", {
        statics: {
            fields: {
                m_CurrentServerContext: null,
                m_CurrentServicePath: null
            },
            props: {
                CurrentServerContext: {
                    get: function () {
                        return RobotRaconteurWeb.ServerContext.m_CurrentServerContext;
                    }
                },
                CurrentServicePath: {
                    get: function () {
                        return RobotRaconteurWeb.ServerContext.m_CurrentServicePath;
                    }
                }
            }
        },
        fields: {
            Attributes: null,
            m_ServiceDef: null,
            m_ServiceName: null,
            skels: null,
            client_endpoints: null,
            m_RootObjectType: null,
            node: null,
            cancel_source: null,
            rec_sync: null,
            base_object_set: false,
            get_sub_obj_tasks: null,
            user_authenticator: null,
            security_policies: null,
            RequireValidUser: false,
            AllowObjectLock: false,
            ClientLockOp_lockobj: null,
            active_object_locks: null,
            rec_wait: null,
            request_number: 0,
            ProcessCallbackRequest_checkconnection_current: null
        },
        events: {
            ServerServiceListener: null
        },
        props: {
            ServiceDef: {
                get: function () {
                    return this.m_ServiceDef;
                }
            },
            ServiceName: {
                get: function () {
                    return this.m_ServiceName;
                }
            },
            RootObjectType: {
                get: function () {
                    return this.m_RootObjectType;
                }
            }
        },
        ctors: {
            init: function () {
                this.Attributes = new (System.Collections.Generic.Dictionary$2(System.String,System.Object)).ctor();
                this.skels = new (System.Collections.Generic.Dictionary$2(System.String,RobotRaconteurWeb.ServiceSkel)).ctor();
                this.client_endpoints = new (System.Collections.Generic.Dictionary$2(System.UInt32,RobotRaconteurWeb.ServerEndpoint)).ctor();
                this.m_RootObjectType = "";
                this.cancel_source = new System.Threading.CancellationTokenSource();
                this.rec_sync = { };
                this.base_object_set = false;
                this.get_sub_obj_tasks = new (System.Collections.Generic.Dictionary$2(System.String,System.Threading.Tasks.Task$1(RobotRaconteurWeb.ServiceSkel))).ctor();
                this.RequireValidUser = false;
                this.AllowObjectLock = false;
                this.ClientLockOp_lockobj = { };
                this.active_object_locks = new (System.Collections.Generic.Dictionary$2(System.String,RobotRaconteurWeb.ServerContext.ObjectLock)).ctor();
                this.rec_wait = new (System.Collections.Generic.Dictionary$2(System.UInt32,System.Tuple$2(System.Threading.Tasks.TaskCompletionSource,RobotRaconteurWeb.ServerEndpoint))).ctor();
                this.request_number = 0;
            },
            ctor: function (f, node) {
                if (node === void 0) { node = null; }

                this.$initialize();
                this.m_ServiceDef = f;
                if (node != null) {
                    this.node = node;
                } else {
                    this.node = RobotRaconteurWeb.RobotRaconteurNode.s;
                }

                var noop = RobotRaconteurWeb.PeriodicTask.Run$1(Bridge.fn.cacheBind(this, this.PeriodicCleanupTask), System.TimeSpan.fromSeconds(5), this.cancel_source.token);
            }
        },
        methods: {
            SendEvent: function (m) {
                var $t, $t1;


                var mm = new RobotRaconteurWeb.Message();

                var cc;
                this.client_endpoints;
                {
                    cc = ($t = RobotRaconteurWeb.ServerEndpoint, System.Linq.Enumerable.from(this.client_endpoints.Values, $t).ToArray($t));
                }

                $t1 = Bridge.getEnumerator(cc);
                try {
                    while ($t1.moveNext()) {
                        var c = { v : $t1.Current };

                        if (this.RequireValidUser) {
                            if (System.String.isNullOrWhiteSpace(c.v.AuthenticatedUsername)) {
                                continue;
                            }
                        }

                        try {
                            this.node.CheckConnection(c.v.LocalEndpoint);
                            this.SendMessage(m, c.v, Bridge.getDefaultValue(System.Threading.CancellationToken)).continueWith((function ($me, c) {
                                return Bridge.fn.bind($me, function (t) {
                                    var e = t.getException();
                                    if (e != null) {
                                        try {
                                            this.RemoveClient(c.v);
                                        } catch ($e1) {
                                            $e1 = System.Exception.create($e1);
                                        }
                                        ;
                                    }
                                });
                            })(this, c));
                        } catch ($e1) {
                            $e1 = System.Exception.create($e1);
                            try {
                                this.RemoveClient(c.v);
                            } catch ($e2) {
                                $e2 = System.Exception.create($e2);
                            }
                            ;
                        }
                    }
                } finally {
                    if (Bridge.is($t1, System.IDisposable)) {
                        $t1.System$IDisposable$Dispose();
                    }
                }

                return System.Threading.Tasks.Task.fromResult(0, System.Int32);

            },
            SendMessage: function (m, e, cancel) {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    mm, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        mm = new RobotRaconteurWeb.Message();
                                        mm.header = new RobotRaconteurWeb.MessageHeader();
                                        mm.entries.add(m);

                                        $task1 = e.SendMessage(mm, cancel);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            SetSecurityPolicy: function (policy) {
                this.user_authenticator = policy.Authenticator;
                this.security_policies = policy.Policies;

                if (System.Linq.Enumerable.from(this.security_policies.Keys, System.String).contains("requirevaliduser")) {
                    if (Bridge.referenceEquals(this.security_policies.getItem("requirevaliduser").toLowerCase(), "true")) {
                        this.RequireValidUser = true;
                    }
                }

                if (System.Linq.Enumerable.from(this.security_policies.Keys, System.String).contains("allowobjectlock")) {
                    if (Bridge.referenceEquals(this.security_policies.getItem("allowobjectlock").toLowerCase(), "true")) {
                        this.AllowObjectLock = true;
                    }
                }


            },
            SetBaseObject: function (name, o, policy) {
                if (policy === void 0) { policy = null; }
                if (this.base_object_set) {
                    throw new System.InvalidOperationException.$ctor1("Base object already set");
                }

                if (policy != null) {
                    this.SetSecurityPolicy(policy);
                }

                this.m_ServiceName = name;
                var s = this.ServiceDef.CreateSkel(name, o, this);

                this.m_RootObjectType = System.String.replaceAll(Bridge.getTypeName(Bridge.getType(s)), "_skel", "");
                this.base_object_set = true;
                this.skels;
                {
                    this.skels.setItem(name, s);
                }

            },
            GetObjectSkel: function (servicepath) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    p, 
                    ppath, 
                    skel, 
                    skel1, 
                    i, 
                    ppath1, 
                    t, 
                    $async_e, 
                    $async_e1, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,4,5,6,8,9,10], $step);
                                switch ($step) {
                                    case 0: {
                                        p = System.String.split(servicepath, System.Array.init([46], System.Char).map(function (i) {{ return String.fromCharCode(i); }}));

                                        ppath = p[System.Array.index(0, p)];

                                        this.skels;
                                        {
                                            skel = this.skels.getItem(ppath);
                                        }

                                        skel1 = skel;

                                        i = 1;
                                        $step = 1;
                                        continue;
                                    }
                                    case 1: {
                                        if ( i < p.length ) {
                                            $step = 2;
                                            continue;
                                        }
                                        $step = 10;
                                        continue;
                                    }
                                    case 2: {
                                        ppath1 = ppath;
                                        ppath = System.Array.init([ppath, p[System.Array.index(i, p)]], System.String).join(".");

                                        skel1 = null;
                                        this.skels;
                                        {
                                            if (System.Linq.Enumerable.from(this.skels.Keys, System.String).contains(ppath)) {
                                                skel1 = this.skels.getItem(ppath);
                                            }
                                        }

                                        if (skel1 == null) {
                                            $step = 3;
                                            continue;
                                        } 
                                        $step = 8;
                                        continue;
                                    }

                                    case 4: {
                                        this.get_sub_obj_tasks;
                                        {
                                            if (this.get_sub_obj_tasks.containsKey(ppath)) {
                                                t = this.get_sub_obj_tasks.getItem(ppath);
                                            } else {
                                                t = this.GetObjectSkel2(ppath1, p[System.Array.index(i, p)], skel);
                                                this.get_sub_obj_tasks.add(ppath, t);
                                            }

                                        }

                                        $task1 = t;
                                        $step = 5;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 5: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        skel1 = $taskResult1;
                                        $step = 6;
                                        continue;
                                    }
                                    case 6: {
                                        this.get_sub_obj_tasks;
                                        {
                                            if (this.get_sub_obj_tasks.containsKey(ppath)) {
                                                this.get_sub_obj_tasks.remove(ppath);
                                            }
                                        }

                                        if ($jumpFromFinally > -1) {
                                            $step = $jumpFromFinally;
                                            $jumpFromFinally = null;
                                        } else if ($async_e) {
                                            $tcs.setException($async_e);
                                            return;
                                        } else if (Bridge.isDefined($returnValue)) {
                                            $tcs.setResult($returnValue);
                                            return;
                                        }
                                        $step = 7;
                                        continue;
                                    }

                                    case 8: {
                                        skel = skel1;
                                        $step = 9;
                                        continue;
                                    }
                                    case 9: {
                                        i = (i + 1) | 0;
                                        $step = 1;
                                        continue;
                                    }
                                    case 10: {
                                        $tcs.setResult(skel);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            if ($step >= 4 && $step <= 5) {
                                $step = 6;
                                $asyncBody();
                                return;
                            }
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            GetObjectSkel2: function (ppath1, objname, skel) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    obj1, 
                    ppath, 
                    skel1, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        RobotRaconteurWeb.ServerContext.m_CurrentServicePath = ppath1;
                                        RobotRaconteurWeb.ServerContext.m_CurrentServerContext = this;
                                        $task1 = skel.GetSubObj(objname);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        obj1 = $taskResult1;
                                        RobotRaconteurWeb.ServerContext.m_CurrentServicePath = null;
                                        RobotRaconteurWeb.ServerContext.m_CurrentServerContext = null;

                                        ppath = System.Array.init([ppath1, objname], System.String).join(".");

                                        skel1 = this.ServiceDef.CreateSkel(ppath, obj1, this);
                                        if (skel.objectlock != null) {
                                            skel.objectlock.AddSkel(skel1);
                                        }
                                        this.skels.setItem(ppath, skel1);
                                        $tcs.setResult(skel1);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            ReplaceObject: function (path) {

                this.ReleaseServicePath(path);


            },
            GetObjectType: function (servicepath) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    s, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = this.GetObjectSkel(servicepath);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        s = $taskResult1;

                                        if (Bridge.is(s, RobotRaconteurWeb.ServiceSkelDynamic)) {
                                            $tcs.setResult(Bridge.cast(s, RobotRaconteurWeb.ServiceSkelDynamic).RobotRaconteurWeb$ServiceSkelDynamic$GetObjectType());
                                            return;
                                        }
                                        $tcs.setResult(System.Text.RegularExpressions.Regex.replace(Bridge.getTypeName(Bridge.getType(s)), "_skel", ""));
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            ProcessMessageEntry: function (m, c) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $task3, 
                    $taskResult3, 
                    $task4, 
                    $taskResult4, 
                    $task5, 
                    $taskResult5, 
                    $task6, 
                    $taskResult6, 
                    $task7, 
                    $taskResult7, 
                    $task8, 
                    $taskResult8, 
                    $task9, 
                    $taskResult9, 
                    $task10, 
                    $taskResult10, 
                    $task11, 
                    $taskResult11, 
                    $task12, 
                    $taskResult12, 
                    $task13, 
                    $taskResult13, 
                    $task14, 
                    $taskResult14, 
                    $task15, 
                    $taskResult15, 
                    $task16, 
                    $taskResult16, 
                    $task17, 
                    $taskResult17, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    noreturn, 
                    ret, 
                    skel, 
                    skel1, 
                    skel2, 
                    skel3, 
                    skel4, 
                    skel5, 
                    r, 
                    t_id, 
                    skel6, 
                    e, 
                    $async_e, 
                    $async_e1, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,42,43,44], $step);
                                switch ($step) {
                                    case 0: {
                                        noreturn = false;
                                        ret = null;


                                        if (m.EntryType === RobotRaconteurWeb.MessageEntryType.ServicePathReleasedRet) {
                                            $tcs.setResult(null);
                                            return;
                                        }

                                        
                                        $step = 1;
                                        continue;
                                    }
                                    case 1: {
                                        if (m.EntryType === RobotRaconteurWeb.MessageEntryType.ClientSessionOpReq) {
                                            $step = 2;
                                            continue;
                                        } 
                                        $step = 4;
                                        continue;
                                    }
                                    case 2: {
                                        $task1 = this.ClientSessionOp(m, c);
                                        $step = 3;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 3: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult($taskResult1);
                                        return;
                                    }
                                    case 4: {
                                        if (m.EntryType === RobotRaconteurWeb.MessageEntryType.ClientKeepAliveReq) {
                                            ret = new RobotRaconteurWeb.MessageEntry.$ctor1(RobotRaconteurWeb.MessageEntryType.ClientKeepAliveRet, m.MemberName);
                                            ret.RequestID = m.RequestID;
                                            ret.ServicePath = m.ServicePath;
                                            $tcs.setResult(ret);
                                            return;
                                        }

                                        if (m.EntryType === RobotRaconteurWeb.MessageEntryType.ServiceCheckCapabilityReq) {
                                            ret = this.CheckServiceCapability(m, c);
                                        }



                                        if (this.RequireValidUser) {
                                            if (RobotRaconteurWeb.ServerEndpoint.CurrentAuthenticatedUser == null) {
                                                throw new RobotRaconteurWeb.AuthenticationException("User must authenticate before accessing this service");
                                            }
                                        }

                                        if (m.EntryType === RobotRaconteurWeb.MessageEntryType.PipePacket || m.EntryType === RobotRaconteurWeb.MessageEntryType.PipePacketRet) {
                                            $step = 5;
                                            continue;
                                        } 
                                        $step = 7;
                                        continue;
                                    }
                                    case 5: {
                                        $task2 = this.GetObjectSkel(m.ServicePath);
                                        $step = 6;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 6: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        ($taskResult2).DispatchPipeMessage(m, c);
                                        ret = null;
                                        noreturn = true;
                                        $step = 7;
                                        continue;
                                    }
                                    case 7: {
                                        if (m.EntryType === RobotRaconteurWeb.MessageEntryType.WirePacket) {
                                            $step = 8;
                                            continue;
                                        } 
                                        $step = 10;
                                        continue;
                                    }
                                    case 8: {
                                        $task3 = this.GetObjectSkel(m.ServicePath);
                                        $step = 9;
                                        if ($task3.isCompleted()) {
                                            continue;
                                        }
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 9: {
                                        $taskResult3 = $task3.getAwaitedResult();
                                        ($taskResult3).DispatchWireMessage(m, c);
                                        ret = null;
                                        noreturn = true;
                                        $step = 10;
                                        continue;
                                    }
                                    case 10: {
                                        RobotRaconteurWeb.ServerContext.m_CurrentServicePath = m.ServicePath;
                                        RobotRaconteurWeb.ServerContext.m_CurrentServerContext = this;


                                        if (m.EntryType === RobotRaconteurWeb.MessageEntryType.PropertyGetReq) {
                                            $step = 11;
                                            continue;
                                        } 
                                        $step = 14;
                                        continue;
                                    }
                                    case 11: {
                                        $task4 = this.GetObjectSkel(m.ServicePath);
                                        $step = 12;
                                        if ($task4.isCompleted()) {
                                            continue;
                                        }
                                        $task4.continue($asyncBody);
                                        return;
                                    }
                                    case 12: {
                                        $taskResult4 = $task4.getAwaitedResult();
                                        skel = $taskResult4;
                                        this.check_lock(skel);
                                        $task5 = skel.CallGetProperty(m);
                                        $step = 13;
                                        if ($task5.isCompleted()) {
                                            continue;
                                        }
                                        $task5.continue($asyncBody);
                                        return;
                                    }
                                    case 13: {
                                        $taskResult5 = $task5.getAwaitedResult();
                                        ret = $taskResult5;
                                        $step = 14;
                                        continue;
                                    }
                                    case 14: {
                                        if (m.EntryType === RobotRaconteurWeb.MessageEntryType.PropertySetReq) {
                                            $step = 15;
                                            continue;
                                        } 
                                        $step = 18;
                                        continue;
                                    }
                                    case 15: {
                                        $task6 = this.GetObjectSkel(m.ServicePath);
                                        $step = 16;
                                        if ($task6.isCompleted()) {
                                            continue;
                                        }
                                        $task6.continue($asyncBody);
                                        return;
                                    }
                                    case 16: {
                                        $taskResult6 = $task6.getAwaitedResult();
                                        skel1 = $taskResult6;
                                        this.check_lock(skel1);
                                        $task7 = skel1.CallSetProperty(m);
                                        $step = 17;
                                        if ($task7.isCompleted()) {
                                            continue;
                                        }
                                        $task7.continue($asyncBody);
                                        return;
                                    }
                                    case 17: {
                                        $taskResult7 = $task7.getAwaitedResult();
                                        ret = $taskResult7;
                                        $step = 18;
                                        continue;
                                    }
                                    case 18: {
                                        if (m.EntryType === RobotRaconteurWeb.MessageEntryType.FunctionCallReq) {
                                            $step = 19;
                                            continue;
                                        } 
                                        $step = 22;
                                        continue;
                                    }
                                    case 19: {
                                        $task8 = this.GetObjectSkel(m.ServicePath);
                                        $step = 20;
                                        if ($task8.isCompleted()) {
                                            continue;
                                        }
                                        $task8.continue($asyncBody);
                                        return;
                                    }
                                    case 20: {
                                        $taskResult8 = $task8.getAwaitedResult();
                                        skel2 = $taskResult8;
                                        this.check_lock(skel2);
                                        $task9 = skel2.CallFunction(m);
                                        $step = 21;
                                        if ($task9.isCompleted()) {
                                            continue;
                                        }
                                        $task9.continue($asyncBody);
                                        return;
                                    }
                                    case 21: {
                                        $taskResult9 = $task9.getAwaitedResult();
                                        ret = $taskResult9;
                                        $step = 22;
                                        continue;
                                    }
                                    case 22: {
                                        if (m.EntryType === RobotRaconteurWeb.MessageEntryType.PipeConnectReq || m.EntryType === RobotRaconteurWeb.MessageEntryType.PipeDisconnectReq) {
                                            $step = 23;
                                            continue;
                                        } 
                                        $step = 26;
                                        continue;
                                    }
                                    case 23: {
                                        $task10 = this.GetObjectSkel(m.ServicePath);
                                        $step = 24;
                                        if ($task10.isCompleted()) {
                                            continue;
                                        }
                                        $task10.continue($asyncBody);
                                        return;
                                    }
                                    case 24: {
                                        $taskResult10 = $task10.getAwaitedResult();
                                        skel3 = $taskResult10;
                                        this.check_lock(skel3);
                                        $task11 = skel3.CallPipeFunction(m, c);
                                        $step = 25;
                                        if ($task11.isCompleted()) {
                                            continue;
                                        }
                                        $task11.continue($asyncBody);
                                        return;
                                    }
                                    case 25: {
                                        $taskResult11 = $task11.getAwaitedResult();
                                        ret = $taskResult11;
                                        $step = 26;
                                        continue;
                                    }
                                    case 26: {
                                        if (m.EntryType === RobotRaconteurWeb.MessageEntryType.WireConnectReq || m.EntryType === RobotRaconteurWeb.MessageEntryType.WireDisconnectReq || m.EntryType === RobotRaconteurWeb.MessageEntryType.WirePeekInValueReq || m.EntryType === RobotRaconteurWeb.MessageEntryType.WirePeekOutValueReq || m.EntryType === RobotRaconteurWeb.MessageEntryType.WirePokeOutValueReq) {
                                            $step = 27;
                                            continue;
                                        } 
                                        $step = 30;
                                        continue;
                                    }
                                    case 27: {
                                        $task12 = this.GetObjectSkel(m.ServicePath);
                                        $step = 28;
                                        if ($task12.isCompleted()) {
                                            continue;
                                        }
                                        $task12.continue($asyncBody);
                                        return;
                                    }
                                    case 28: {
                                        $taskResult12 = $task12.getAwaitedResult();
                                        skel4 = $taskResult12;
                                        this.check_lock(skel4);
                                        $task13 = skel4.CallWireFunction(m, c);
                                        $step = 29;
                                        if ($task13.isCompleted()) {
                                            continue;
                                        }
                                        $task13.continue($asyncBody);
                                        return;
                                    }
                                    case 29: {
                                        $taskResult13 = $task13.getAwaitedResult();
                                        ret = $taskResult13;
                                        $step = 30;
                                        continue;
                                    }
                                    case 30: {
                                        if (m.EntryType === RobotRaconteurWeb.MessageEntryType.MemoryWrite || m.EntryType === RobotRaconteurWeb.MessageEntryType.MemoryRead || m.EntryType === RobotRaconteurWeb.MessageEntryType.MemoryGetParam) {
                                            $step = 31;
                                            continue;
                                        } else  {
                                            $step = 34;
                                            continue;
                                        }
                                    }
                                    case 31: {
                                        $task14 = this.GetObjectSkel(m.ServicePath);
                                        $step = 32;
                                        if ($task14.isCompleted()) {
                                            continue;
                                        }
                                        $task14.continue($asyncBody);
                                        return;
                                    }
                                    case 32: {
                                        $taskResult14 = $task14.getAwaitedResult();
                                        skel5 = $taskResult14;
                                        this.check_lock(skel5);
                                        $task15 = skel5.CallMemoryFunction(m, c);
                                        $step = 33;
                                        if ($task15.isCompleted()) {
                                            continue;
                                        }
                                        $task15.continue($asyncBody);
                                        return;
                                    }
                                    case 33: {
                                        $taskResult15 = $task15.getAwaitedResult();
                                        ret = $taskResult15;
                                        $step = 42;
                                        continue;
                                    }
                                    case 34: {
                                        if (m.EntryType === RobotRaconteurWeb.MessageEntryType.CallbackCallRet) {
                                            $step = 35;
                                            continue;
                                        } else  {
                                            $step = 36;
                                            continue;
                                        }
                                    }
                                    case 35: {
                                        r = null;
                                        this.rec_wait;
                                        {
                                            t_id = m.RequestID;
                                            if (this.rec_wait.containsKey(t_id)) {
                                                r = this.rec_wait.getItem(t_id).Item1;
                                            }
                                        }

                                        if (r != null) {
                                            r.trySetResult(m);
                                        }
                                        noreturn = true;
                                        $step = 41;
                                        continue;
                                    }
                                    case 36: {
                                        if (m.EntryType === RobotRaconteurWeb.MessageEntryType.GeneratorNextReq) {
                                            $step = 37;
                                            continue;
                                        } 
                                        $step = 40;
                                        continue;
                                    }
                                    case 37: {
                                        $task16 = this.GetObjectSkel(m.ServicePath);
                                        $step = 38;
                                        if ($task16.isCompleted()) {
                                            continue;
                                        }
                                        $task16.continue($asyncBody);
                                        return;
                                    }
                                    case 38: {
                                        $taskResult16 = $task16.getAwaitedResult();
                                        skel6 = $taskResult16;
                                        this.check_lock(skel6);
                                        $task17 = skel6.CallGeneratorNext(m, c);
                                        $step = 39;
                                        if ($task17.isCompleted()) {
                                            continue;
                                        }
                                        $task17.continue($asyncBody);
                                        return;
                                    }
                                    case 39: {
                                        $taskResult17 = $task17.getAwaitedResult();
                                        ret = $taskResult17;
                                        noreturn = true;
                                        $step = 40;
                                        continue;
                                    }


                                    case 42: {
                                        $step = 44;
                                        continue;
                                    }
                                    case 43: {
                                        ret = new RobotRaconteurWeb.MessageEntry.$ctor1(((m.EntryType + 1) | 0), m.MemberName);
                                        RobotRaconteurWeb.RobotRaconteurExceptionUtil.ExceptionToMessageEntry(e, ret);

                                        $async_e = null;
                                        $step = 44;
                                        continue;
                                    }
                                    case 44: {
                                        RobotRaconteurWeb.ServerContext.m_CurrentServicePath = null;
                                        RobotRaconteurWeb.ServerContext.m_CurrentServerContext = null;

                                        if (ret == null && !noreturn && m.EntryType % 2 === 1) {
                                            ret = new RobotRaconteurWeb.MessageEntry.$ctor1(((m.EntryType + 1) | 0), m.MemberName);
                                            ret.Error = RobotRaconteurWeb.MessageErrorType.ProtocolError;
                                            ret.AddElement$1("errorname", "RobotRaconteur.ProtocolError");
                                            ret.AddElement$1("errorstring", "Unknown transaction type");

                                        }

                                        if (!noreturn) {
                                            ret.ServicePath = m.ServicePath;
                                            ret.RequestID = m.RequestID;
                                        }

                                        $tcs.setResult(ret);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            if ( $step >= 1 && $step <= 42 ) {
                                e = $async_e;
                                $step = 43;
                                $asyncBody();
                                return;
                            }
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            Close: function () {
                var $t, $t1, $t2;
                this.cancel_source.cancel();
                try {
                    var e = new RobotRaconteurWeb.MessageEntry.$ctor1(RobotRaconteurWeb.MessageEntryType.ServiceClosed, "");
                    RobotRaconteurWeb.Extensions.Extensions.IgnoreResult(this.SendEvent(e));
                } catch ($e1) {
                    $e1 = System.Exception.create($e1);
                }
                ;

                var eea = ($t = RobotRaconteurWeb.ServerEndpoint, System.Linq.Enumerable.from(this.client_endpoints.Values, $t).ToArray($t));

                $t1 = Bridge.getEnumerator(eea);
                try {
                    while ($t1.moveNext()) {
                        var ee = $t1.Current;
                        try {
                            this.node.DeleteEndpoint(ee);
                        } catch ($e2) {
                            $e2 = System.Exception.create($e2);
                        }
                        ;
                    }
                } finally {
                    if (Bridge.is($t1, System.IDisposable)) {
                        $t1.System$IDisposable$Dispose();
                    }
                }

                this.client_endpoints.clear();

                $t2 = Bridge.getEnumerator(this.skels.Values);
                try {
                    while ($t2.moveNext()) {
                        var s = $t2.Current;
                        try {
                            s.ReleaseObject();
                        } catch ($e3) {
                            $e3 = System.Exception.create($e3);
                        }
                        ;
                    }
                } finally {
                    if (Bridge.is($t2, System.IDisposable)) {
                        $t2.System$IDisposable$Dispose();
                    }
                }

                try {
                    if (!Bridge.staticEquals(this.ServerServiceListener, null)) {
                        this.ServerServiceListener(this, RobotRaconteurWeb.ServerServiceListenerEventType.ServiceClosed, null);
                    }
                } catch ($e4) {
                    $e4 = System.Exception.create($e4);
                }
            },
            MessageReceived: function (m, e) {
                RobotRaconteurWeb.Extensions.Extensions.IgnoreResult(this.MessageReceived2(m, e));

            },
            MessageReceived2: function (m, e) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    mret, 
                    $t, 
                    mm, 
                    mmret, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,6,7], $step);
                                switch ($step) {
                                    case 0: {
                                        mret = new RobotRaconteurWeb.Message();
                                        mret.header = new RobotRaconteurWeb.MessageHeader();

                                        $t = Bridge.getEnumerator(m.entries);
                                        $step = 1;
                                        continue;
                                    }
                                    case 1: {
                                        if ($t.moveNext()) {
                                            mm = $t.Current;
                                            $step = 2;
                                            continue;
                                        }
                                        $step = 4;
                                        continue;
                                    }
                                    case 2: {
                                        if (mm.Error === RobotRaconteurWeb.MessageErrorType.InvalidEndpoint) {
                                            this.RemoveClient(e);
                                            $tcs.setResult(null);
                                            return;
                                        }

                                        $task1 = this.ProcessMessageEntry(mm, e);
                                        $step = 3;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 3: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        mmret = $taskResult1;
                                        if (mmret != null) {
                                            mret.entries.add(mmret);
                                        }
                                        $step = 1;
                                        continue;
                                    }
                                    case 4: {
                                        if (mret.entries.Count > 0) {
                                            $step = 5;
                                            continue;
                                        } 
                                        $step = 7;
                                        continue;
                                    }
                                    case 5: {
                                        $task2 = e.SendMessage(mret, Bridge.getDefaultValue(System.Threading.CancellationToken));
                                        $step = 6;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 6: {
                                        $task2.getAwaitedResult();
                                        $step = 7;
                                        continue;
                                    }
                                    case 7: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            AddClient: function (cendpoint) {
                this.client_endpoints;
                {
                    this.client_endpoints.add(cendpoint.LocalEndpoint, cendpoint);
                }

                try {
                    if (!Bridge.staticEquals(this.ServerServiceListener, null)) {
                        this.ServerServiceListener(this, RobotRaconteurWeb.ServerServiceListenerEventType.ClientConnected, Bridge.box(cendpoint.LocalEndpoint, System.UInt32));
                    }
                } catch ($e1) {
                    $e1 = System.Exception.create($e1);
                }

            },
            RemoveClient: function (cendpoint) {
                var $t, $t1;


                var cusername = cendpoint.AuthenticatedUsername;
                var ce = cendpoint.LocalEndpoint;

                this.client_endpoints;
                {
                    this.client_endpoints.remove(cendpoint.LocalEndpoint);
                }
                this.node.DeleteEndpoint(cendpoint);


                this.ClientLockOp_lockobj;
                {
                    var oo = ($t = System.Collections.Generic.KeyValuePair$2(System.String,RobotRaconteurWeb.ServerContext.ObjectLock), System.Linq.Enumerable.from(this.active_object_locks, $t).ToArray($t));
                    $t1 = Bridge.getEnumerator(oo);
                    try {
                        while ($t1.moveNext()) {
                            var o = $t1.Current;
                            try {
                                if (Bridge.referenceEquals(o.value.Username, cusername)) {
                                    if (o.value.Endpoint === ce) {
                                        o.value.ReleaseLock();
                                        this.active_object_locks.remove(o.key);
                                    } else {
                                        this.client_endpoints;
                                        {
                                            if (!System.Linq.Enumerable.from(this.client_endpoints, System.Collections.Generic.KeyValuePair$2(System.UInt32,RobotRaconteurWeb.ServerEndpoint)).any(function (x) {
                                                    return Bridge.referenceEquals(x.value.AuthenticatedUsername, cusername);
                                                })) {
                                                o.value.ReleaseLock();
                                                this.active_object_locks.remove(o.key);
                                            }
                                        }
                                    }
                                }
                            } catch ($e1) {
                                $e1 = System.Exception.create($e1);
                            }

                        }
                    } finally {
                        if (Bridge.is($t1, System.IDisposable)) {
                            $t1.System$IDisposable$Dispose();
                        }
                    }
                }



                try {
                    if (!Bridge.staticEquals(this.ServerServiceListener, null)) {
                        this.ServerServiceListener(this, RobotRaconteurWeb.ServerServiceListenerEventType.ClientDisconnected, Bridge.box(cendpoint.LocalEndpoint, System.UInt32));
                    }
                } catch ($e2) {
                    $e2 = System.Exception.create($e2);
                }
            },
            PackStructure: function (s) {
                return this.ServiceDef.PackStructure(s);
            },
            UnpackStructure: function (T, l) {
                return this.ServiceDef.UnpackStructure(T, l);
            },
            PackMapType: function (K, T, o) {
                return this.ServiceDef.PackMapType(K, T, o);
            },
            PackListType: function (T, o) {
                return this.ServiceDef.PackListType(T, o);
            },
            PackMultiDimArray: function (multiDimArray) {
                return this.ServiceDef.PackMultiDimArray(multiDimArray);
            },
            PackVarType: function (p) {
                return this.ServiceDef.PackVarType(p);
            },
            UnpackMapType: function (K, T, o) {
                return this.ServiceDef.UnpackMapType(K, T, o);
            },
            UnpackListType: function (T, o) {
                return this.ServiceDef.UnpackListType(T, o);
            },
            UnpackMultiDimArray: function (o) {
                return this.ServiceDef.UnpackMultiDimArray(o);
            },
            UnpackVarType: function (o) {
                return this.ServiceDef.UnpackVarType(o);
            },
            ClientSessionOp: function (m, e) {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    ret, 
                    command, 
                    username, 
                    credentials, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,6], $step);
                                switch ($step) {
                                    case 0: {
                                        if (this.user_authenticator == null && !System.String.startsWith(m.MemberName, "Monitor")) {
                                            throw new System.InvalidOperationException.$ctor1("User authentication not activated for this service");
                                        }

                                        ret = new RobotRaconteurWeb.MessageEntry.$ctor1(RobotRaconteurWeb.MessageEntryType.ClientSessionOpRet, m.MemberName);
                                        ret.RequestID = m.RequestID;
                                        ret.ServicePath = m.ServicePath;

                                        command = m.MemberName;
                                        if (command === "AuthenticateUser") {
                                            $step = 1;
                                            continue;
                                        }
                                        else if (command === "LogoutUser") {
                                            $step = 2;
                                            continue;
                                        }
                                        else if (command === "RequestObjectLock" || command === "ReleaseObjectLock" || command === "RequestClientObjectLock" || command === "ReleaseClientObjectLock" || command === "MonitorEnter" || command === "MonitorContinueEnter" || command === "MonitorExit") {
                                            $step = 3;
                                            continue;
                                        }
                                        else  {
                                            $step = 5;
                                            continue;
                                        }
                                        $step = 6;
                                        continue;
                                    }
                                    case 1: {
                                        username = m.FindElement("username").CastData(System.String);
                                        credentials = Bridge.cast(this.UnpackMapType(System.String, System.Object, m.FindElement("credentials").Data), System.Collections.Generic.Dictionary$2(System.String,System.Object));
                                        e.AuthenticateUser(username, credentials);
                                        ret.AddElement$1("return", "OK");
                                        $tcs.setResult(ret);
                                        return;
                                    }
                                    case 2: {
                                        e.LogoutUser();
                                        ret.AddElement$1("return", "OK");
                                        $tcs.setResult(ret);
                                        return;
                                    }
                                    case 3: {
                                        $task1 = this.ClientLockOp(m, ret);
                                        $step = 4;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 4: {
                                        $task1.getAwaitedResult();
                                        $tcs.setResult(ret);
                                        return;
                                    }
                                    case 5: {
                                        throw new RobotRaconteurWeb.ProtocolException("Invalid ClientSessionOp command");
                                    }
                                    case 6: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            AuthenticateUser: function (username, credentials) {
                return this.user_authenticator.RobotRaconteurWeb$UserAuthenticator$AuthenticateUser(username, credentials);

            },
            ClientLockOp: function (m, ret) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $task3, 
                    $taskResult3, 
                    $task4, 
                    $taskResult4, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    priv, 
                    username, 
                    servicepath, 
                    skel, 
                    $t, 
                    sskels, 
                    o, 
                    $t1, 
                    s, 
                    sskels1, 
                    o1, 
                    $t2, 
                    s1, 
                    timeout, 
                    s2, 
                    $t3, 
                    retcode, 
                    s3, 
                    retcode1, 
                    retcode2, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,6,7,8,9,10,11,12], $step);
                                switch ($step) {
                                    case 0: {
                                        priv = null;
                                        username = null;
                                        if (!System.String.startsWith(m.MemberName, "Monitor")) {
                                            if (RobotRaconteurWeb.ServerEndpoint.CurrentAuthenticatedUser == null) {
                                                throw new RobotRaconteurWeb.AuthenticationException("User must be authenticated to lock object");
                                            }
                                            priv = RobotRaconteurWeb.ServerEndpoint.CurrentAuthenticatedUser.Privileges;
                                            if (!(System.Array.contains(priv, "objectlock", System.String) || System.Array.contains(priv, "objectlockoverride", System.String))) {
                                                throw new RobotRaconteurWeb.ObjectLockedException("User does not have object locking privileges");
                                            }
                                            username = RobotRaconteurWeb.ServerEndpoint.CurrentAuthenticatedUser.Username;
                                        } else {
                                            if (this.RequireValidUser) {
                                                if (RobotRaconteurWeb.ServerEndpoint.CurrentAuthenticatedUser == null) {
                                                    throw new RobotRaconteurWeb.AuthenticationException("User is not authenticated");
                                                }
                                            }
                                        }



                                        servicepath = m.ServicePath;

                                        $task1 = this.GetObjectSkel(servicepath);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        skel = $taskResult1;

                                        $t = m.MemberName;
                                        if ($t === "RequestObjectLock") {
                                            $step = 2;
                                            continue;
                                        }
                                        else if ($t === "RequestClientObjectLock") {
                                            $step = 3;
                                            continue;
                                        }
                                        else if ($t === "ReleaseObjectLock") {
                                            $step = 4;
                                            continue;
                                        }
                                        else if ($t === "MonitorEnter") {
                                            $step = 5;
                                            continue;
                                        }
                                        else if ($t === "MonitorContinueEnter") {
                                            $step = 7;
                                            continue;
                                        }
                                        else if ($t === "MonitorExit") {
                                            $step = 9;
                                            continue;
                                        }
                                        else  {
                                            $step = 11;
                                            continue;
                                        }
                                        $step = 12;
                                        continue;
                                    }
                                    case 2: {
                                        this.ClientLockOp_lockobj;
                                        {
                                            if (skel.IsLocked) {
                                                throw new RobotRaconteurWeb.ObjectLockedException("Object already locked");
                                            }
                                            sskels = (System.Linq.Enumerable.from(this.skels, System.Collections.Generic.KeyValuePair$2(System.String,RobotRaconteurWeb.ServiceSkel)).where(function (x) {
                                                return System.String.startsWith(x.key, servicepath);
                                            }).ToArray(System.Collections.Generic.KeyValuePair$2(System.String,RobotRaconteurWeb.ServiceSkel)));
                                            if (System.Linq.Enumerable.from(sskels, System.Collections.Generic.KeyValuePair$2(System.String,RobotRaconteurWeb.ServiceSkel)).any(function (x) {
                                                return x.value.IsLocked;
                                            })) {
                                                throw new RobotRaconteurWeb.ObjectLockedException("Object already locked");
                                            }

                                            o = new RobotRaconteurWeb.ServerContext.ObjectLock(RobotRaconteurWeb.ServerEndpoint.CurrentAuthenticatedUser.Username, skel);
                                            $t1 = Bridge.getEnumerator(sskels);
                                            try {
                                                while ($t1.moveNext()) {
                                                    s = $t1.Current;
                                                    o.AddSkel(s.value);
                                                }
                                            } finally {
                                                if (Bridge.is($t1, System.IDisposable)) {
                                                    $t1.System$IDisposable$Dispose();
                                                }
                                            }
                                            this.active_object_locks.add(o.RootServicePath, o);
                                            ret.AddElement$1("return", "OK");
                                        }
                                        $step = 12;
                                        continue;
                                    }
                                    case 3: {
                                        this.ClientLockOp_lockobj;
                                        {
                                            if (skel.IsLocked) {
                                                throw new RobotRaconteurWeb.ObjectLockedException("Object already locked");
                                            }
                                            sskels1 = (System.Linq.Enumerable.from(this.skels, System.Collections.Generic.KeyValuePair$2(System.String,RobotRaconteurWeb.ServiceSkel)).where(function (x) {
                                                return System.String.startsWith(x.key, servicepath);
                                            }).ToArray(System.Collections.Generic.KeyValuePair$2(System.String,RobotRaconteurWeb.ServiceSkel)));
                                            if (System.Linq.Enumerable.from(sskels1, System.Collections.Generic.KeyValuePair$2(System.String,RobotRaconteurWeb.ServiceSkel)).any(function (x) {
                                                return x.value.IsLocked;
                                            })) {
                                                throw new RobotRaconteurWeb.ObjectLockedException("Object already locked");
                                            }

                                            o1 = new RobotRaconteurWeb.ServerContext.ObjectLock(RobotRaconteurWeb.ServerEndpoint.CurrentAuthenticatedUser.Username, skel, RobotRaconteurWeb.ServerEndpoint.CurrentEndpoint.LocalEndpoint);
                                            $t2 = Bridge.getEnumerator(sskels1);
                                            try {
                                                while ($t2.moveNext()) {
                                                    s1 = $t2.Current;
                                                    s1.value.objectlock = o1;
                                                }
                                            } finally {
                                                if (Bridge.is($t2, System.IDisposable)) {
                                                    $t2.System$IDisposable$Dispose();
                                                }
                                            }
                                            this.active_object_locks.add(o1.RootServicePath, o1);
                                            ret.AddElement$1("return", "OK");
                                        }
                                        $step = 12;
                                        continue;
                                    }
                                    case 4: {
                                        this.ClientLockOp_lockobj;
                                        {
                                            if (!skel.IsLocked) {
                                                $tcs.setResult(null);
                                                return;
                                            }
                                            if (!Bridge.referenceEquals(skel.objectlock.RootServicePath, servicepath)) {
                                                throw new RobotRaconteurWeb.ObjectLockedException("Cannot release inherited lock");
                                            }
                                            if (!Bridge.referenceEquals(username, skel.objectlock.Username) && !System.Array.contains(priv, "objectlockoverride", System.String)) {
                                                throw new RobotRaconteurWeb.ObjectLockedException("Service locked by user " + (skel.objectlock.Username || ""));
                                            }
                                            if (skel.objectlock.Endpoint !== 0) {
                                                if (RobotRaconteurWeb.ServerEndpoint.CurrentEndpoint.LocalEndpoint !== skel.objectlock.Endpoint && !System.Array.contains(priv, "objectlockoverride", System.String)) {
                                                    if (!Bridge.referenceEquals(username, skel.objectlock.Username) && !System.Array.contains(priv, "objectlockoverride", System.String)) {
                                                        throw new System.Exception("Service locked by other session");
                                                    }
                                                }
                                            }

                                            this.active_object_locks.remove(skel.ServicePath);
                                            skel.objectlock.ReleaseLock();

                                            ret.AddElement$1("return", "OK");
                                        }
                                        $step = 12;
                                        continue;
                                    }
                                    case 5: {
                                        timeout = 0;
                                        this.ClientLockOp_lockobj;
                                        {
                                            if (skel.monitorlocks.containsKey(RobotRaconteurWeb.ServerEndpoint.CurrentEndpoint.LocalEndpoint)) {
                                                throw new System.InvalidOperationException.$ctor1("Already acquiring or acquired monitor lock");
                                            }
                                            s2 = new RobotRaconteurWeb.ServerContext.MonitorObjectSkel(skel);
                                            timeout = ($t3 = m.FindElement("timeout").CastData(System.Array.type(System.Int32)))[System.Array.index(0, $t3)];
                                        }
                                        $task2 = s2.MonitorEnter(RobotRaconteurWeb.ServerEndpoint.CurrentEndpoint.LocalEndpoint, timeout);
                                        $step = 6;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 6: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        retcode = $taskResult2;
                                        ret.AddElement$1("return", retcode);

                                        $step = 12;
                                        continue;
                                    }
                                    case 7: {
                                        this.ClientLockOp_lockobj;
                                        {
                                            if (!skel.monitorlocks.containsKey(RobotRaconteurWeb.ServerEndpoint.CurrentEndpoint.LocalEndpoint)) {
                                                throw new System.InvalidOperationException.$ctor1("Not acquiring monitor lock");
                                            }
                                            s3 = skel.monitorlocks.getItem(RobotRaconteurWeb.ServerEndpoint.CurrentEndpoint.LocalEndpoint);
                                        }
                                        $task3 = s3.MonitorContinueEnter(RobotRaconteurWeb.ServerEndpoint.CurrentEndpoint.LocalEndpoint);
                                        $step = 8;
                                        if ($task3.isCompleted()) {
                                            continue;
                                        }
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 8: {
                                        $taskResult3 = $task3.getAwaitedResult();
                                        retcode1 = $taskResult3;
                                        ret.AddElement$1("return", retcode1);
                                        $step = 12;
                                        continue;
                                    }
                                    case 9: {
                                        this.ClientLockOp_lockobj;
                                        {
                                            if (skel.monitorlock.LocalEndpoint !== (RobotRaconteurWeb.ServerEndpoint.CurrentEndpoint.LocalEndpoint)) {
                                                throw new System.InvalidOperationException.$ctor1("Not monitor locked");
                                            }
                                        }
                                        $task4 = skel.monitorlock.MonitorExit(RobotRaconteurWeb.ServerEndpoint.CurrentEndpoint.LocalEndpoint);
                                        $step = 10;
                                        if ($task4.isCompleted()) {
                                            continue;
                                        }
                                        $task4.continue($asyncBody);
                                        return;
                                    }
                                    case 10: {
                                        $taskResult4 = $task4.getAwaitedResult();
                                        retcode2 = $taskResult4;
                                        ret.AddElement$1("return", retcode2);
                                        $step = 12;
                                        continue;
                                    }
                                    case 11: {
                                        throw new System.Exception("Invalid command");
                                    }
                                    case 12: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            check_lock: function (skel) {
                this.check_monitor_lock(skel);
                if (skel.IsLocked) {
                    if (Bridge.referenceEquals(skel.objectlock.Username, RobotRaconteurWeb.ServerEndpoint.CurrentAuthenticatedUser.Username) && skel.objectlock.Endpoint === 0) {
                        return;
                    }
                    if (Bridge.referenceEquals(skel.objectlock.Username, RobotRaconteurWeb.ServerEndpoint.CurrentAuthenticatedUser.Username) && skel.objectlock.Endpoint === RobotRaconteurWeb.ServerEndpoint.CurrentEndpoint.LocalEndpoint) {
                        return;
                    }
                    throw new RobotRaconteurWeb.ObjectLockedException("Object locked by " + (skel.objectlock.Username || ""));

                }
            },
            check_monitor_lock: function (skel) {
                if (skel.IsMonitorLocked) {
                    if (skel.monitorlock.LocalEndpoint === RobotRaconteurWeb.ServerEndpoint.CurrentEndpoint.LocalEndpoint) {
                        skel.monitorlock.MonitorRefresh(RobotRaconteurWeb.ServerEndpoint.CurrentEndpoint.LocalEndpoint);
                    } else {
                        throw new System.Exception("Object is currently monitor locked. Use MonitorEnter to obtain monitor lock");
                    }

                }

            },
            PeriodicCleanupTask: function () {
                var $t;
                this.client_endpoints;
                {
                    $t = Bridge.getEnumerator(this.client_endpoints.Values);
                    try {
                        while ($t.moveNext()) {
                            var c = $t.Current;
                            c.PeriodicCleanupTask();
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }

                }


            },
            CheckServiceCapability: function (m, c) {
                var ret = new RobotRaconteurWeb.MessageEntry.$ctor1(RobotRaconteurWeb.MessageEntryType.ServiceCheckCapabilityRet, m.MemberName);
                ret.ServicePath = m.ServicePath;
                ret.RequestID = m.RequestID;
                ret.AddElement$1("return", Bridge.box(0, System.UInt32));
                return ret;

            },
            ReleaseServicePath: function (path) {
                var $t;

                if (Bridge.referenceEquals(path, this.ServiceName)) {
                    throw new RobotRaconteurWeb.ServiceException("Root object cannot be released");
                }

                this.skels;
                {
                    var objkeys = System.Linq.Enumerable.from(this.skels.Keys, System.String).where(function (x) {
                            return System.String.startsWith(x, path);
                        }).ToArray(System.String);
                    if (System.Linq.Enumerable.from(objkeys, System.String).count() === 0) {
                        throw new RobotRaconteurWeb.ServiceException("Unknown service path");
                    }

                    $t = Bridge.getEnumerator(objkeys);
                    try {
                        while ($t.moveNext()) {
                            var path1 = $t.Current;
                            var s = this.skels.getItem(path1);

                            if (s.IsLocked) {
                                this.ClientLockOp_lockobj;
                                {
                                    if (Bridge.referenceEquals(s.objectlock.RootServicePath, path1)) {
                                        this.active_object_locks.remove(s.objectlock.Username);
                                        s.objectlock.ReleaseLock();

                                    } else {
                                        s.objectlock.ReleaseSkel(s);
                                    }
                                }
                            }

                            s.ReleaseObject();
                            s.ReleaseCastObject();
                            this.skels.remove(path1);

                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                }

                var m = new RobotRaconteurWeb.MessageEntry.$ctor1(RobotRaconteurWeb.MessageEntryType.ServicePathReleasedReq, "");
                m.ServicePath = path;

                this.SendEvent(m);


            },
            ReleaseServicePath$1: function (path, endpoints) {
                var $t, $t1, $t2;

                if (Bridge.referenceEquals(path, this.ServiceName)) {
                    throw new RobotRaconteurWeb.ServiceException("Root object cannot be released");
                }

                this.skels;
                {
                    var objkeys = System.Linq.Enumerable.from(this.skels.Keys, System.String).where(function (x) {
                            return System.String.startsWith(x, path);
                        }).ToArray(System.String);
                    if (System.Linq.Enumerable.from(objkeys, System.String).count() === 0) {
                        throw new RobotRaconteurWeb.ServiceException("Unknown service path");
                    }

                    $t = Bridge.getEnumerator(objkeys);
                    try {
                        while ($t.moveNext()) {
                            var path1 = $t.Current;
                            var s = this.skels.getItem(path1);

                            if (s.IsLocked) {
                                this.ClientLockOp_lockobj;
                                {
                                    if (Bridge.referenceEquals(s.objectlock.RootServicePath, path1)) {
                                        this.active_object_locks.remove(s.objectlock.Username);
                                        s.objectlock.ReleaseLock();

                                    } else {
                                        s.objectlock.ReleaseSkel(s);
                                    }
                                }
                            }

                            s.ReleaseObject();
                            s.ReleaseCastObject();
                            this.skels.remove(path1);

                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                }

                var m = new RobotRaconteurWeb.MessageEntry.$ctor1(RobotRaconteurWeb.MessageEntryType.ServicePathReleasedReq, "");
                m.ServicePath = path;

                var cc = new (System.Collections.Generic.List$1(RobotRaconteurWeb.ServerEndpoint)).ctor();

                this.client_endpoints;
                {
                    $t1 = Bridge.getEnumerator(endpoints);
                    try {
                        while ($t1.moveNext()) {
                            var e = $t1.Current;
                            if (this.client_endpoints.containsKey(e)) {
                                cc.add(this.client_endpoints.getItem(e));
                            }
                        }
                    } finally {
                        if (Bridge.is($t1, System.IDisposable)) {
                            $t1.System$IDisposable$Dispose();
                        }
                    }

                }

                $t2 = Bridge.getEnumerator(cc);
                try {
                    while ($t2.moveNext()) {
                        var c = { v : $t2.Current };
                        if (this.RequireValidUser) {
                            try {
                                if (System.String.isNullOrWhiteSpace(c.v.AuthenticatedUsername)) {
                                    continue;
                                }
                            } catch ($e1) {
                                $e1 = System.Exception.create($e1);
                                continue;
                            }


                        }

                        try {
                            this.node.CheckConnection(c.v.LocalEndpoint);
                            this.SendMessage(m, c.v, Bridge.getDefaultValue(System.Threading.CancellationToken)).continueWith((function ($me, c) {
                                return Bridge.fn.bind($me, function (t) {
                                    var e1 = t.getException();
                                    if (e1 != null) {
                                        try {
                                            this.RemoveClient(c.v);
                                        } catch ($e2) {
                                            $e2 = System.Exception.create($e2);
                                        }
                                        ;
                                    }
                                });
                            })(this, c));
                        } catch ($e2) {
                            $e2 = System.Exception.create($e2);
                            try {
                                this.RemoveClient(c.v);
                            } catch ($e3) {
                                $e3 = System.Exception.create($e3);
                            }
                            ;
                        }
                    }
                } finally {
                    if (Bridge.is($t2, System.IDisposable)) {
                        $t2.System$IDisposable$Dispose();
                    }
                }

            },
            ProcessCallbackRequest: function (m, endpointid, cancel) {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    e, 
                    request_start, 
                    request_timeout, 
                    rec_source, 
                    t_id, 
                    rec_message, 
                    r, 
                    $async_e, 
                    e1, 
                    e2, 
                    e3, 
                    $async_e1, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4], $step);
                                switch ($step) {
                                    case 0: {
                                        e = this.client_endpoints.getItem(endpointid);

                                        request_start = System.DateTime.getUtcNow();
                                        request_timeout = this.node.RequestTimeout;

                                        rec_source = new System.Threading.Tasks.TaskCompletionSource();
                                        this.rec_wait;
                                        {
                                            this.request_number = (this.request_number + 1) >>> 0;
                                            m.RequestID = this.request_number;
                                            t_id = this.request_number;
                                            this.rec_wait.add(t_id, { Item1: rec_source, Item2: e });
                                            if (this.ProcessCallbackRequest_checkconnection_current == null) {
                                                this.ProcessCallbackRequest_checkconnection_current = this.ProcessCallbackRequest_checkconnection();
                                            }
                                        }

                                        rec_message = null;
                                        
                                        $step = 1;
                                        continue;
                                    }
                                    case 1: {
                                        cancel.register(function () {
                                            rec_source.trySetCanceled();
                                        });


                                        r = Bridge.fn.bind(this, function () {
                                            var $step = 0,
                                                $task1, 
                                                $task2, 
                                                $taskResult2, 
                                                $jumpFromFinally, 
                                                $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                                                $returnValue, 
                                                $async_e, 
                                                $asyncBody = Bridge.fn.bind(this, function () {
                                                    try {
                                                        for (;;) {
                                                            $step = System.Array.min([0,1,2], $step);
                                                            switch ($step) {
                                                                case 0: {
                                                                    $task1 = this.SendMessage(m, e, cancel);
                                                                    $step = 1;
                                                                    if ($task1.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task1.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 1: {
                                                                    $task1.getAwaitedResult();
                                                                    $task2 = rec_source.task;
                                                                    $step = 2;
                                                                    if ($task2.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task2.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 2: {
                                                                    $taskResult2 = $task2.getAwaitedResult();
                                                                    rec_message = $taskResult2;
                                                                    $tcs.setResult(null);
                                                                    return;
                                                                }
                                                                default: {
                                                                    $tcs.setResult(null);
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    } catch($async_e1) {
                                                        $async_e = System.Exception.create($async_e1);
                                                        $tcs.setException($async_e);
                                                    }
                                                }, arguments);

                                            $asyncBody();
                                            return $tcs.task;
                                        });

                                        $task1 = RobotRaconteurWeb.Extensions.Extensions.AwaitWithTimeout(r(), ((this.node.RequestTimeout) | 0));
                                        $step = 2;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $task1.getAwaitedResult();
                                        $step = 3;
                                        continue;
                                    }
                                    case 3: {
                                        this.rec_wait;
                                        {
                                            this.rec_wait.remove(t_id);
                                        }


                                        if ($jumpFromFinally > -1) {
                                            $step = $jumpFromFinally;
                                            $jumpFromFinally = null;
                                        } else if ($async_e) {
                                            $tcs.setException($async_e);
                                            return;
                                        } else if (Bridge.isDefined($returnValue)) {
                                            $tcs.setResult($returnValue);
                                            return;
                                        }
                                        $step = 4;
                                        continue;
                                    }
                                    case 4: {
                                        if (rec_message.RequestID !== t_id) {
                                            throw new System.Exception("This should be impossible!");
                                        }

                                        if (rec_message.Error !== RobotRaconteurWeb.MessageErrorType.None) {
                                            e1 = RobotRaconteurWeb.RobotRaconteurExceptionUtil.MessageEntryToException(rec_message);
                                            e2 = Bridge.as(e1, RobotRaconteurWeb.RobotRaconteurRemoteException);
                                            if (e2 != null) {
                                                e3 = this.ServiceDef.DownCastException(e2);
                                                if (e3 != null) {
                                                    e1 = e3;
                                                }
                                            }
                                            throw e1;
                                        }

                                        $tcs.setResult(rec_message);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            if ($step >= 1 && $step <= 2) {
                                $step = 3;
                                $asyncBody();
                                return;
                            }
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            ProcessCallbackRequest_checkconnection: function () {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $t, 
                    c, 
                    $e1, 
                    rec_wait2, 
                    $t1, 
                    r, 
                    $t2, 
                    t, 
                    $async_e, 
                    $async_e1, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4], $step);
                                switch ($step) {
                                    case 0: {
                                        this.rec_wait;
                                        {
                                            if (this.rec_wait.Count < 0) {
                                                this.ProcessCallbackRequest_checkconnection_current = null;
                                                $tcs.setResult(null);
                                                return;
                                            }
                                        }

                                        $t = Bridge.getEnumerator(System.Linq.Enumerable.from(this.rec_wait.Values, System.Tuple$2(System.Threading.Tasks.TaskCompletionSource,RobotRaconteurWeb.ServerEndpoint)).distinct());
                                        try {
                                            while ($t.moveNext()) {
                                                c = $t.Current;
                                                try {
                                                    this.node.CheckConnection(c.Item2.LocalEndpoint);
                                                } catch ($e1) {
                                                    $e1 = System.Exception.create($e1);
                                                    rec_wait2 = new (System.Collections.Generic.List$1(System.Threading.Tasks.TaskCompletionSource)).ctor();
                                                    this.rec_wait;
                                                    {
                                                        $t1 = Bridge.getEnumerator(this.rec_wait.Values);
                                                        try {
                                                            while ($t1.moveNext()) {
                                                                r = $t1.Current;
                                                                if (r.Item2.LocalEndpoint === c.Item2.LocalEndpoint) {
                                                                    rec_wait2.add(r.Item1);
                                                                }
                                                            }
                                                        } finally {
                                                            if (Bridge.is($t1, System.IDisposable)) {
                                                                $t1.System$IDisposable$Dispose();
                                                            }
                                                        }
                                                    }

                                                    $t2 = Bridge.getEnumerator(rec_wait2);
                                                    try {
                                                        while ($t2.moveNext()) {
                                                            t = $t2.Current;
                                                            t.trySetException(new RobotRaconteurWeb.ConnectionException("Connection closed"));
                                                        }
                                                    } finally {
                                                        if (Bridge.is($t2, System.IDisposable)) {
                                                            $t2.System$IDisposable$Dispose();
                                                        }
                                                    }
                                                    $tcs.setResult(null);
                                                    return;
                                                }
                                            }
                                        } finally {
                                            if (Bridge.is($t, System.IDisposable)) {
                                                $t.System$IDisposable$Dispose();
                                            }
                                        }
                                        
                                        $step = 1;
                                        continue;
                                    }
                                    case 1: {
                                        $task1 = System.Threading.Tasks.Task.delay(500);
                                        $step = 2;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $task1.getAwaitedResult();
                                        $step = 4;
                                        continue;
                                    }
                                    case 3: {
                                        $async_e = null;
                                        $step = 4;
                                        continue;
                                    }
                                    case 4: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            if ( $step >= 1 && $step <= 2 ) {
                                $step = 3;
                                $asyncBody();
                                return;
                            }
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.ServerContext.MonitorObjectSkel", {
        $kind: "nested class",
        fields: {
            wait_thread: null,
            wait_event: null,
            obj: null,
            local_endpoint: 0,
            timeout: 0,
            monitor_acquire_exception: null,
            monitor_acquired: false,
            monitor_thread_event: null,
            maintain_lock: false,
            skel: null,
            last_refreshed: null
        },
        props: {
            LocalEndpoint: {
                get: function () {
                    return this.local_endpoint;
                }
            },
            IsLocked: {
                get: function () {
                    return this.monitor_acquired;
                }
            }
        },
        ctors: {
            init: function () {
                this.last_refreshed = System.DateTime.getDefaultValue();
                this.local_endpoint = 0;
                this.timeout = 0;
                this.monitor_acquired = false;
                this.maintain_lock = false;
                this.last_refreshed = System.DateTime.getUtcNow();
            },
            ctor: function (skel) {
                this.$initialize();
                var obj = skel.UncastObject;
                if (!(Bridge.is(obj, RobotRaconteurWeb.IRobotRaconteurMonitorObject))) {
                    throw new System.InvalidOperationException.$ctor1("Object is not monitor lockable");
                }

                this.obj = Bridge.cast(obj, RobotRaconteurWeb.IRobotRaconteurMonitorObject);
                this.skel = skel;
            }
        },
        methods: {
            MonitorEnter: function (local_endpoint, timeout) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $async_e1, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4], $step);
                                switch ($step) {
                                    case 0: {
                                        this.timeout = timeout;
                                        this.local_endpoint = local_endpoint;
                                        this.wait_event = new System.Threading.Tasks.TaskCompletionSource();
                                        this.monitor_thread_event = new System.Threading.Tasks.TaskCompletionSource();
                                        this.maintain_lock = true;

                                        this;
                                        {
                                            this.last_refreshed = System.DateTime.getUtcNow();
                                        }

                                        this.skel.monitorlocks;
                                        {
                                            this.skel.monitorlocks.add(local_endpoint, this);
                                        }

                                        this.wait_thread = RobotRaconteurWeb.Extensions.Extensions.IgnoreResult(this.thread_func());

                                        
                                        $step = 1;
                                        continue;
                                    }
                                    case 1: {
                                        $task1 = RobotRaconteurWeb.Extensions.Extensions.AwaitWithTimeout$1(System.Int32, this.wait_event.task, 5000);
                                        $step = 2;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $step = 4;
                                        continue;
                                    }
                                    case 3: {
                                        $async_e = null;
                                        $step = 4;
                                        continue;
                                    }
                                    case 4: {
                                        if (this.monitor_acquire_exception != null) {
                                            this.maintain_lock = false;
                                            throw this.monitor_acquire_exception;
                                        }

                                        $tcs.setResult((this.monitor_acquired ? "OK" : "Continue"));
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            if ( $step >= 1 && $step <= 2 ) {
                                $step = 3;
                                $asyncBody();
                                return;
                            }
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            MonitorContinueEnter: function (localendpoint) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $async_e1, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4], $step);
                                switch ($step) {
                                    case 0: {
                                        this;
                                        {
                                            this.last_refreshed = System.DateTime.getUtcNow();
                                        }

                                        if (this.monitor_acquired) {
                                            $tcs.setResult("OK");
                                            return;
                                        }

                                        if (this.monitor_acquire_exception != null) {
                                            this.maintain_lock = false;
                                            throw this.monitor_acquire_exception;
                                        }

                                        
                                        $step = 1;
                                        continue;
                                    }
                                    case 1: {
                                        $task1 = RobotRaconteurWeb.Extensions.Extensions.AwaitWithTimeout$1(System.Int32, this.wait_event.task, 5000);
                                        $step = 2;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $step = 4;
                                        continue;
                                    }
                                    case 3: {
                                        $async_e = null;
                                        $step = 4;
                                        continue;
                                    }
                                    case 4: {
                                        if (this.monitor_acquire_exception != null) {
                                            this.maintain_lock = false;
                                            throw this.monitor_acquire_exception;
                                        }

                                        $tcs.setResult((this.monitor_acquired ? "OK" : "Continue"));
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            if ( $step >= 1 && $step <= 2 ) {
                                $step = 3;
                                $asyncBody();
                                return;
                            }
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            MonitorRefresh: function (localendpoint) {
                this;
                {
                    this.last_refreshed = System.DateTime.getUtcNow();
                }
                return System.Threading.Tasks.Task.fromResult(0, System.Int32);
            },
            MonitorExit: function (local_endpoint) {

                this.maintain_lock = false;
                this.monitor_thread_event.trySetResult(0);

                return System.Threading.Tasks.Task.fromResult("OK", System.String);
            },
            thread_func: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    l, 
                    e, 
                    $async_e, 
                    $async_e1, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,5,6,8,9,10,11,12,13,14,15], $step);
                                switch ($step) {
                                    case 0: {
                                        l = null;
                                        
                                        $step = 1;
                                        continue;
                                    }
                                    case 1: {
                                        $task1 = this.obj.RobotRaconteurWeb$IRobotRaconteurMonitorObject$RobotRaconteurMonitorEnter$1(this.timeout);
                                        $step = 2;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        l = $taskResult1;
                                        this.monitor_acquired = true;
                                        this.skel.monitorlock = this;
                                        $step = 4;
                                        continue;
                                    }
                                    case 3: {
                                        this.monitor_acquire_exception = e;
                                        this.wait_event.trySetResult(0);

                                        this.skel.monitorlocks;
                                        {
                                            this.skel.monitorlocks.remove(this.local_endpoint);
                                        }

                                        $tcs.setResult(null);
                                        return;
                                        $async_e = null;
                                        $step = 4;
                                        continue;
                                    }

                                    case 5: {
                                        this.wait_event.trySetResult(0);

                                        
                                        $step = 6;
                                        continue;
                                    }
                                    case 6: {
                                        if ( this.maintain_lock ) {
                                            $step = 7;
                                            continue;
                                        } 
                                        $step = 12;
                                        continue;
                                    }

                                    case 8: {
                                        $task2 = RobotRaconteurWeb.Extensions.Extensions.AwaitWithTimeout$1(System.Int32, this.monitor_thread_event.task, 30000);
                                        $step = 9;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 9: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        $step = 11;
                                        continue;
                                    }
                                    case 10: {
                                        $async_e = null;
                                        $step = 11;
                                        continue;
                                    }
                                    case 11: {
                                        this;
                                        if (System.DateTime.gt(System.DateTime.getUtcNow(), System.DateTime.addSeconds(this.last_refreshed, 30))) {
                                            this.maintain_lock = false;
                                        }

                                        $step = 6;
                                        continue;
                                    }
                                    case 12: {
                                        $step = 14;
                                        continue;
                                    }
                                    case 13: {
                                        $async_e = null;
                                        $step = 14;
                                        continue;
                                    }
                                    case 14: {
                                        this.skel.monitorlocks;
                                        {
                                            this.skel.monitorlocks.remove(this.local_endpoint);
                                        }

                                        l.System$IDisposable$Dispose();

                                        this.monitor_acquired = false;
                                        this.wait_event.trySetResult(0);


                                        if ($jumpFromFinally > -1) {
                                            $step = $jumpFromFinally;
                                            $jumpFromFinally = null;
                                        } else if ($async_e) {
                                            $tcs.setException($async_e);
                                            return;
                                        } else if (Bridge.isDefined($returnValue)) {
                                            $tcs.setResult($returnValue);
                                            return;
                                        }
                                        $step = 15;
                                        continue;
                                    }
                                    case 15: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            if ( $step >= 1 && $step <= 2 ) {
                                e = $async_e;
                                $step = 3;
                                $asyncBody();
                                return;
                            }
                            if ( $step >= 8 && $step <= 9 ) {
                                $step = 10;
                                $asyncBody();
                                return;
                            }
                            if ( $step >= 5 && $step <= 12 ) {
                                $step = 13;
                                $asyncBody();
                                return;
                            }
                            if ($step >= 5 && $step <= 13) {
                                $step = 14;
                                $asyncBody();
                                return;
                            }
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.ServerContext.ObjectLock", {
        $kind: "nested class",
        fields: {
            m_Locked: false,
            m_Username: null,
            skels: null,
            m_RootSkel: null,
            m_Endpoint: 0,
            m_RootServicePath: null
        },
        props: {
            Username: {
                get: function () {
                    return this.m_Username;
                }
            },
            IsLocked: {
                get: function () {
                    return this.m_Locked;
                }
            },
            RootServicePath: {
                get: function () {
                    return this.m_RootServicePath;
                }
            },
            Endpoint: {
                get: function () {
                    return this.m_Endpoint;
                }
            }
        },
        ctors: {
            init: function () {
                this.m_Locked = true;
                this.skels = new (System.Collections.Generic.List$1(RobotRaconteurWeb.ServiceSkel)).ctor();
                this.m_Endpoint = 0;
            },
            ctor: function (username, root_skel, endpoint) {
                if (endpoint === void 0) { endpoint = 0; }

                this.$initialize();
                this.skels;
                {
                    this.m_Locked = true;
                    this.m_RootSkel = root_skel;
                    this.m_Username = username;
                    this.m_RootServicePath = root_skel.ServicePath;
                    this.m_Endpoint = endpoint;
                }
            }
        },
        methods: {
            AddSkel: function (skel) {
                this.skels;
                {
                    skel.objectlock = this;
                    var sp = skel.ServicePath;
                    if (Bridge.referenceEquals(sp, this.m_RootServicePath)) {

                        if (!Bridge.referenceEquals(skel, this.m_RootSkel)) {
                            return;
                        }

                        try {
                            if (this.m_RootSkel != null) {
                                this.m_RootSkel.objectlock = this;
                            }
                        } catch ($e1) {
                            $e1 = System.Exception.create($e1);
                        }
                        this.m_RootSkel = skel;
                        return;
                    }


                    this.skels.add(skel);
                }





            },
            ReleaseSkel: function (skel) {
                this.skels;
                {
                    try {
                        skel.objectlock = null;
                    } catch ($e1) {
                        $e1 = System.Exception.create($e1);
                    }

                    var sp = skel.ServicePath;
                    if (Bridge.referenceEquals(sp, this.m_RootServicePath)) {
                        try {
                            if (this.m_RootSkel != null) {
                                this.m_RootSkel.objectlock = null;
                            }
                        } catch ($e2) {
                            $e2 = System.Exception.create($e2);
                        }
                        this.m_RootSkel = null;
                        return;
                    }

                    this.skels.remove(skel);


                }
            },
            ReleaseLock: function () {
                var $t;
                this.skels;
                {
                    this.m_Locked = false;

                    try {
                        this.m_RootSkel.objectlock = null;
                    } catch ($e1) {
                        $e1 = System.Exception.create($e1);
                    }

                    $t = Bridge.getEnumerator(this.skels);
                    try {
                        while ($t.moveNext()) {
                            var s = $t.Current;
                            try {
                                s.objectlock = null;
                            } catch ($e2) {
                                $e2 = System.Exception.create($e2);
                            }

                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }

                    this.skels.clear();

                }



            }
        }
    });

    Bridge.define("RobotRaconteurWeb.ServerServiceListenerEventType", {
        $kind: "enum",
        statics: {
            fields: {
                ServiceClosed: 1,
                ClientConnected: 2,
                ClientDisconnected: 3
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.ServiceDefinition", {
        fields: {
            Name: null,
            Structures: null,
            Pods: null,
            NamedArrays: null,
            Objects: null,
            Options: null,
            Imports: null,
            Using: null,
            Exceptions: null,
            Constants: null,
            Enums: null,
            StdVer: null
        },
        ctors: {
            init: function () {
                this.StdVer = new RobotRaconteurWeb.RobotRaconteurVersion();
                this.Structures = new (System.Collections.Generic.Dictionary$2(System.String,RobotRaconteurWeb.ServiceEntryDefinition)).ctor();
                this.Pods = new (System.Collections.Generic.Dictionary$2(System.String,RobotRaconteurWeb.ServiceEntryDefinition)).ctor();
                this.NamedArrays = new (System.Collections.Generic.Dictionary$2(System.String,RobotRaconteurWeb.ServiceEntryDefinition)).ctor();
                this.Objects = new (System.Collections.Generic.Dictionary$2(System.String,RobotRaconteurWeb.ServiceEntryDefinition)).ctor();
                this.Options = new (System.Collections.Generic.List$1(System.String)).ctor();
                this.Imports = new (System.Collections.Generic.List$1(System.String)).ctor();
                this.Using = new (System.Collections.Generic.List$1(RobotRaconteurWeb.UsingDefinition)).ctor();
                this.Exceptions = new (System.Collections.Generic.List$1(System.String)).ctor();
                this.Constants = new (System.Collections.Generic.Dictionary$2(System.String,RobotRaconteurWeb.ConstantDefinition)).ctor();
                this.Enums = new (System.Collections.Generic.Dictionary$2(System.String,RobotRaconteurWeb.EnumDefinition)).ctor();
            }
        },
        methods: {
            ToWriter: function (o) {
                var $t, $t1, $t2, $t3, $t4, $t5, $t6, $t7, $t8, $t9, $t10;
                o.WriteLine$12("service {0}", this.Name);
                o.WriteLine();

                if (RobotRaconteurWeb.RobotRaconteurVersion.op_Explicit(this.StdVer)) {
                    var version_found = false;
                    $t = Bridge.getEnumerator(this.Options);
                    try {
                        while ($t.moveNext()) {
                            var so = $t.Current;
                            var r_version = new System.Text.RegularExpressions.Regex.ctor("^[ \\t]*version[ \\t]+(?:(\\d+(?:\\.\\d+)*)|[ -~\\t]*)$");
                            var r_version_match = r_version.match(so);
                            if (r_version_match.getSuccess()) {
                                if (version_found) {
                                    throw new RobotRaconteurWeb.RobotRaconteurParseException.ctor("Robot Raconteur version already specified");
                                }
                                if (r_version_match.getGroups().get(1).getSuccess()) {
                                    version_found = true;
                                    break;
                                } else {
                                    throw new RobotRaconteurWeb.RobotRaconteurParseException.ctor("Invalid Robot Raconteur version specified");
                                }
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                    if (!version_found) {
                        if (RobotRaconteurWeb.RobotRaconteurVersion.op_LessThan(this.StdVer.$clone(), new RobotRaconteurWeb.RobotRaconteurVersion.$ctor2(0, 9))) {
                            o.WriteLine$12("option version {0}", this.StdVer.toString());
                            o.WriteLine();
                        } else {
                            o.WriteLine$12("stdver {0}", this.StdVer.toString());
                            o.WriteLine();
                        }
                    }
                }

                $t1 = Bridge.getEnumerator(this.Imports);
                try {
                    while ($t1.moveNext()) {
                        var $import = $t1.Current;
                        o.WriteLine$12("import {0}", $import);
                    }
                } finally {
                    if (Bridge.is($t1, System.IDisposable)) {
                        $t1.System$IDisposable$Dispose();
                    }
                }
                if (this.Imports.Count !== 0) {
                    o.WriteLine();
                }

                $t2 = Bridge.getEnumerator(this.Using);
                try {
                    while ($t2.moveNext()) {
                        var u = $t2.Current;
                        o.Write$10(u.toString());
                    }
                } finally {
                    if (Bridge.is($t2, System.IDisposable)) {
                        $t2.System$IDisposable$Dispose();
                    }
                }
                if (this.Using.Count !== 0) {
                    o.WriteLine();
                }

                $t3 = Bridge.getEnumerator(this.Options);
                try {
                    while ($t3.moveNext()) {
                        var option = $t3.Current;
                        o.WriteLine$12("option {0}", option);
                    }
                } finally {
                    if (Bridge.is($t3, System.IDisposable)) {
                        $t3.System$IDisposable$Dispose();
                    }
                }
                if (this.Options.Count !== 0) {
                    o.WriteLine();
                }

                $t4 = Bridge.getEnumerator(this.Constants.Values);
                try {
                    while ($t4.moveNext()) {
                        var constant = $t4.Current;
                        o.WriteLine$11(constant.toString());
                    }
                } finally {
                    if (Bridge.is($t4, System.IDisposable)) {
                        $t4.System$IDisposable$Dispose();
                    }
                }
                if (this.Constants.Count !== 0) {
                    o.WriteLine();
                }

                $t5 = Bridge.getEnumerator(this.Enums.Values);
                try {
                    while ($t5.moveNext()) {
                        var e = $t5.Current;
                        o.Write$10(e.toString());
                    }
                } finally {
                    if (Bridge.is($t5, System.IDisposable)) {
                        $t5.System$IDisposable$Dispose();
                    }
                }
                if (this.Enums.Count !== 0) {
                    o.WriteLine();
                }

                $t6 = Bridge.getEnumerator(this.Exceptions);
                try {
                    while ($t6.moveNext()) {
                        var e1 = $t6.Current;
                        o.WriteLine$12("exception {0}", e1);
                    }
                } finally {
                    if (Bridge.is($t6, System.IDisposable)) {
                        $t6.System$IDisposable$Dispose();
                    }
                }
                if (this.Exceptions.Count !== 0) {
                    o.WriteLine();
                }

                $t7 = Bridge.getEnumerator(this.Structures.Values);
                try {
                    while ($t7.moveNext()) {
                        var d = $t7.Current;
                        o.WriteLine$11(d.toString());
                    }
                } finally {
                    if (Bridge.is($t7, System.IDisposable)) {
                        $t7.System$IDisposable$Dispose();
                    }
                }

                $t8 = Bridge.getEnumerator(this.Pods.Values);
                try {
                    while ($t8.moveNext()) {
                        var d1 = $t8.Current;
                        o.WriteLine$11(d1.toString());
                    }
                } finally {
                    if (Bridge.is($t8, System.IDisposable)) {
                        $t8.System$IDisposable$Dispose();
                    }
                }

                $t9 = Bridge.getEnumerator(this.NamedArrays.Values);
                try {
                    while ($t9.moveNext()) {
                        var d2 = $t9.Current;
                        o.WriteLine$11(d2.toString());
                    }
                } finally {
                    if (Bridge.is($t9, System.IDisposable)) {
                        $t9.System$IDisposable$Dispose();
                    }
                }

                $t10 = Bridge.getEnumerator(this.Objects.Values);
                try {
                    while ($t10.moveNext()) {
                        var d3 = $t10.Current;
                        o.WriteLine$11(d3.toString());
                    }
                } finally {
                    if (Bridge.is($t10, System.IDisposable)) {
                        $t10.System$IDisposable$Dispose();
                    }
                }
            },
            toString: function () {
                var w = new System.IO.StringWriter.ctor();
                w.NewLine = "\n";
                this.ToWriter(w);
                return w.toString();
            },
            CheckVersion: function (ver) {
                if (ver === void 0) { ver = new RobotRaconteurWeb.RobotRaconteurVersion(); }

                if (!RobotRaconteurWeb.RobotRaconteurVersion.op_Explicit(this.StdVer)) {
                    return;
                }

                if (RobotRaconteurWeb.RobotRaconteurVersion.op_Equality(ver.$clone(), new RobotRaconteurWeb.RobotRaconteurVersion.$ctor2(0, 0))) {
                    ver = new RobotRaconteurWeb.RobotRaconteurVersion.$ctor1(RobotRaconteurWeb.RobotRaconteurNode.Version);
                }

                if (RobotRaconteurWeb.RobotRaconteurVersion.op_LessThan(ver.$clone(), this.StdVer.$clone())) {
                    throw new RobotRaconteurWeb.ServiceException("Service " + (this.Name || "") + " requires newer version of Robot Raconteur");
                }

            },
            FromString: function (s) {
                var w = { v : new (System.Collections.Generic.List$1(System.Exception)).ctor() };
                this.FromString$1(s, w);
            },
            FromString$1: function (s, warnings) {
                var is_ = new System.IO.StringReader(s);
                this.FromReader$1(is_, warnings);
            },
            FromReader: function (is_) {
                var w = { v : new (System.Collections.Generic.List$1(System.Exception)).ctor() };
                this.FromReader$1(is_, w);
            },
            FromReader$1: function (is_, warnings) {
                var $t;
                var r_comment = new System.Text.RegularExpressions.Regex.ctor("^[ \\t]*#[ -~\\t]*$");
                var r_empty = new System.Text.RegularExpressions.Regex.ctor("^[ \\t]*$");
                var r_entry = new System.Text.RegularExpressions.Regex.ctor("(?:^[ \\t]*(?:(service)|(stdver)|(option)|(import)|(using)|(exception)|(constant)|(enum)|(struct)|(object)|(pod)|(namedarray))[ \\t]+(\\w[^\\s]*(?:[ \\t]+[^\\s]+)*)[ \\t]*$)|(^[ \\t]*$)");

                var service_name_found = false;

                var pos = { v : 0 };
                var l = { v : null };

                var stdver_version = new RobotRaconteurWeb.RobotRaconteurVersion.ctor();
                var stdver_found = false;
                var entry_key_max = 0;

                try {
                    while (true) {
                        if (!RobotRaconteurWeb.detail.ServiceDefinitionUtil.ServiceDefinition_GetLine(is_, l, pos)) {
                            break;
                        }

                        var r_entry_match = r_entry.match(l.v);
                        if (!r_entry_match.getSuccess()) {
                            throw new RobotRaconteurWeb.RobotRaconteurParseException.$ctor1("Parse error near: " + (l.v || ""), (pos.v | 0));
                        }

                        var r_entry_match_blank = r_entry_match.getGroups().get(14);
                        if (r_entry_match_blank.getSuccess()) {
                            continue;
                        }

                        var entry_key = 1;
                        for (; entry_key < 12; entry_key = (entry_key + 1) | 0) {
                            if (r_entry_match.getGroups().get(entry_key).getSuccess()) {
                                break;
                            }
                        }

                        var r_entry_match_remaining = r_entry_match.getGroups().get(13);

                        if (entry_key !== 1 && !service_name_found) {
                            throw new RobotRaconteurWeb.RobotRaconteurParseException.ctor("service name must be first entry in service definition");
                        }

                        switch (entry_key) {
                            case 1: 
                                {
                                    if (entry_key_max >= 1) {
                                        throw new RobotRaconteurWeb.RobotRaconteurParseException.ctor("service name must be first entry in service definition");
                                    }
                                    if (service_name_found) {
                                        throw new RobotRaconteurWeb.RobotRaconteurParseException.ctor("service name already specified");
                                    }
                                    var tmp_name = { v : new (System.Collections.Generic.List$1(System.String)).ctor() };
                                    RobotRaconteurWeb.detail.ServiceDefinitionUtil.ServiceDefinition_FromStringTypeFormat(l.v, "service", tmp_name);
                                    this.Name = tmp_name.v.getItem(0);
                                    entry_key_max = 1;
                                    service_name_found = true;
                                    continue;
                                }
                            case 2: 
                                {
                                    if (entry_key_max >= 2) {
                                        throw new RobotRaconteurWeb.RobotRaconteurParseException.ctor("service name must be first after service name");
                                    }
                                    stdver_version.FromString(r_entry_match_remaining.getValue());
                                    stdver_found = true;
                                    if (RobotRaconteurWeb.RobotRaconteurVersion.op_LessThan(stdver_version.$clone(), new RobotRaconteurWeb.RobotRaconteurVersion.$ctor2(0, 9))) {
                                        throw new RobotRaconteurWeb.ServiceDefinitionException("Service definition standard version 0.9 or greater required for \"stdver\" keyword");
                                    }
                                    continue;
                                }
                            case 3: 
                                {
                                    this.Options.add(r_entry_match_remaining.getValue());
                                    continue;
                                }
                            case 4: 
                                {
                                    if (entry_key_max > 4) {
                                        throw new RobotRaconteurWeb.RobotRaconteurParseException.ctor("import must be before all but options");
                                    }
                                    RobotRaconteurWeb.detail.ServiceDefinitionUtil.ServiceDefinition_FromStringImportFormat(l.v, "import", Bridge.ref(this, "Imports"));
                                    entry_key_max = 4;
                                    continue;
                                }
                            case 5: 
                                {
                                    if (entry_key_max > 5) {
                                        throw new RobotRaconteurWeb.RobotRaconteurParseException.ctor("using must be after imports and before all others except options");
                                    }
                                    var using_def = new RobotRaconteurWeb.UsingDefinition(this);
                                    using_def.FromString(l.v);
                                    this.Using.add(using_def);
                                    entry_key_max = 5;
                                    continue;
                                }
                            case 6: 
                                {
                                    if (entry_key_max >= 9) {
                                        throw new RobotRaconteurWeb.RobotRaconteurParseException.ctor("exception must be before struct and object");
                                    }
                                    RobotRaconteurWeb.detail.ServiceDefinitionUtil.ServiceDefinition_FromStringTypeFormat(l.v, "exception", Bridge.ref(this, "Exceptions"));
                                    entry_key_max = 6;
                                    continue;
                                }
                            case 7: 
                                {
                                    if (entry_key_max >= 9) {
                                        throw new RobotRaconteurWeb.RobotRaconteurParseException.ctor("exception must be before struct and object");
                                    }
                                    var constant_def = new RobotRaconteurWeb.ConstantDefinition.ctor(this);
                                    constant_def.FromString(l.v);
                                    this.Constants.add(constant_def.Name, constant_def);
                                    entry_key_max = 7;
                                    continue;
                                }
                            case 8: 
                                {
                                    if (entry_key_max >= 9) {
                                        throw new RobotRaconteurWeb.RobotRaconteurParseException.ctor("enum must be before struct and object");
                                    }
                                    var init_pos = { v : 0 };
                                    var block = new System.IO.StringWriter.ctor();
                                    RobotRaconteurWeb.detail.ServiceDefinitionUtil.ServiceDefinition_FindBlock(l.v, is_, block, pos, init_pos);
                                    var enum_def = new RobotRaconteurWeb.EnumDefinition(this);
                                    enum_def.FromString(block.toString(), init_pos.v);
                                    this.Enums.add(enum_def.Name, enum_def);
                                    entry_key_max = 8;
                                    continue;
                                }
                            case 9: 
                                {
                                    var init_pos1 = { v : 0 };
                                    var block1 = new System.IO.StringWriter.ctor();
                                    RobotRaconteurWeb.detail.ServiceDefinitionUtil.ServiceDefinition_FindBlock(l.v, is_, block1, pos, init_pos1);
                                    var struct_def = new RobotRaconteurWeb.ServiceEntryDefinition(this);
                                    struct_def.FromString$2(block1.toString(), init_pos1.v, warnings);
                                    this.Structures.add(struct_def.Name, struct_def);
                                    entry_key_max = 9;
                                    continue;
                                }
                            case 10: 
                                {
                                    var init_pos2 = { v : 0 };
                                    var block2 = new System.IO.StringWriter.ctor();
                                    RobotRaconteurWeb.detail.ServiceDefinitionUtil.ServiceDefinition_FindBlock(l.v, is_, block2, pos, init_pos2);
                                    var object_def = new RobotRaconteurWeb.ServiceEntryDefinition(this);
                                    object_def.FromString$2(block2.toString(), init_pos2.v, warnings);
                                    this.Objects.add(object_def.Name, object_def);
                                    entry_key_max = 10;
                                    continue;
                                }
                            case 11: 
                                {
                                    var init_pos3 = { v : 0 };
                                    var block3 = new System.IO.StringWriter.ctor();
                                    RobotRaconteurWeb.detail.ServiceDefinitionUtil.ServiceDefinition_FindBlock(l.v, is_, block3, pos, init_pos3);
                                    var struct_def1 = new RobotRaconteurWeb.ServiceEntryDefinition(this);
                                    struct_def1.FromString$2(block3.toString(), init_pos3.v, warnings);
                                    this.Pods.add(struct_def1.Name, struct_def1);
                                    entry_key_max = 9;
                                    continue;
                                }
                            case 12: 
                                {
                                    var init_pos4 = { v : 0 };
                                    var block4 = new System.IO.StringWriter.ctor();
                                    RobotRaconteurWeb.detail.ServiceDefinitionUtil.ServiceDefinition_FindBlock(l.v, is_, block4, pos, init_pos4);
                                    var struct_def2 = new RobotRaconteurWeb.ServiceEntryDefinition(this);
                                    struct_def2.FromString$2(block4.toString(), init_pos4.v, warnings);
                                    this.NamedArrays.add(struct_def2.Name, struct_def2);
                                    entry_key_max = 9;
                                    continue;
                                }
                            default: 
                                throw new RobotRaconteurWeb.RobotRaconteurParseException.$ctor1("Parse error near: " + (l.v || ""), (pos.v | 0));
                        }

                    }

                    var version_found = false;
                    if (stdver_found) {
                        this.StdVer = stdver_version.$clone();
                        version_found = true;
                    }
                    $t = Bridge.getEnumerator(this.Options);
                    try {
                        while ($t.moveNext()) {
                            var so = $t.Current;
                            var r_version = new System.Text.RegularExpressions.Regex.ctor("^[ \\t]*version[ \\t]+(?:(\\d+(?:\\.\\d+)*)|[ -~\\t]*)$");
                            var r_version_match = r_version.match(so);
                            if (r_version_match.getSuccess()) {
                                if (version_found) {
                                    throw new RobotRaconteurWeb.RobotRaconteurParseException.ctor("Robot Raconteur version already specified");
                                }
                                if (r_version_match.getGroups().get(1).getSuccess()) {
                                    this.StdVer = new RobotRaconteurWeb.RobotRaconteurVersion.$ctor1(r_version_match.getGroups().get(1).getValue());
                                } else {
                                    throw new RobotRaconteurWeb.RobotRaconteurParseException.ctor("Invalid Robot Raconteur version specified");
                                }
                                version_found = true;
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                } catch ($e1) {
                    $e1 = System.Exception.create($e1);
                    var e;
                    if (Bridge.is($e1, RobotRaconteurWeb.RobotRaconteurParseException)) {
                        throw $e1;
                    } else {
                        e = $e1;
                        throw new RobotRaconteurWeb.RobotRaconteurParseException.$ctor1("Parse error near: " + (l.v || ""), (pos.v | 0));
                    }
                }
            },
            Reset: function () {
                this.Structures.clear();
                this.Objects.clear();
                this.Options.clear();
                this.Imports.clear();
                this.Using.clear();
                this.Exceptions.clear();
                this.Constants.clear();
                this.Enums.clear();
                this.Pods.clear();
                this.NamedArrays.clear();
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.ServiceDefinitionUtil", {
        statics: {
            methods: {
                SplitQualifiedName: function (name) {
                    var pos = name.lastIndexOf(String.fromCharCode(46));
                    if (pos < 0) {
                        return { Item1: null, Item2: name };
                    }
                    return { Item1: name.substr(0, pos), Item2: name.substr(((pos + 1) | 0), ((((name.length - pos) | 0) - 1) | 0)) };
                },
                SplitParameterString: function (str) {
                    var o = new (System.Collections.Generic.List$1(System.String)).ctor();

                    var inbracket = false;
                    var pos = 0;
                    for (var i = 0; i < str.length; i = (i + 1) | 0) {
                        if (!inbracket && str.charCodeAt(i) === 91) {
                            inbracket = true;
                        }
                        if (inbracket && str.charCodeAt(i) === 93) {
                            inbracket = false;
                        }

                        if (!inbracket) {
                            if (str.charCodeAt(i) === 44) {
                                o.add(str.substr(pos, ((i - pos) | 0)));
                                pos = (i + 1) | 0;
                                if (pos > str.length) {
                                    break;
                                }
                            }
                        }
                    }

                    if (pos < str.length) {
                        o.add(str.substr(pos));
                    }
                    return System.Linq.Enumerable.from(o, System.String).select(function (x) {
                            return x.trim();
                        }).ToArray(System.String);
                },
                VerifyVersionSupport: function (def, major, minor, msg) {
                    var def_version = def.StdVer.$clone();
                    if (System.Nullable.lifteq(RobotRaconteurWeb.RobotRaconteurVersion.op_Equality, def_version.$clone(), null)) {
                        return;
                    }

                    if (RobotRaconteurWeb.RobotRaconteurVersion.op_LessThan(def_version.$clone(), new RobotRaconteurWeb.RobotRaconteurVersion.$ctor2(major, minor))) {
                        if (msg != null) {
                            throw new RobotRaconteurWeb.ServiceDefinitionException(msg);
                        } else {
                            throw new RobotRaconteurWeb.ServiceDefinitionException("Newer service definition standard required for feature");
                        }
                    }
                },
                VerifyName: function (name, def, allowdot, ignorereserved) {
                    if (allowdot === void 0) { allowdot = false; }
                    if (ignorereserved === void 0) { ignorereserved = false; }
                    if (System.String.isNullOrEmpty(name)) {
                        throw new RobotRaconteurWeb.ServiceDefinitionException("Empty name in service definition \"" + (def.Name || "") + "\"");
                    }

                    var name2 = name.toLowerCase();

                    if (!ignorereserved) {
                        if (Bridge.referenceEquals(name, "this") || Bridge.referenceEquals(name, "self") || Bridge.referenceEquals(name, "Me")) {
                            throw new RobotRaconteurWeb.ServiceDefinitionException("The names \"this\", \"self\", and \"Me\" are reserved, error in service definition \"" + (def.Name || "") + "\"");
                        }

                        var reserved = System.Array.init(["object", "end", "option", "service", "object", "struct", "import", "implements", "field", "property", "function", "event", "objref", "pipe", "callback", "wire", "memory", "void", "int8", "uint8", "int16", "uint16", "int32", "uint32", "int64", "uint64", "single", "double", "varvalue", "varobject", "exception", "using", "constant", "enum", "pod", "namedarray", "cdouble", "csingle", "bool"], System.String);

                        if (System.Array.contains(reserved, name, System.String)) {
                            throw new RobotRaconteurWeb.ServiceDefinitionException("Name \"" + (name || "") + "\" is reserved in service definition\"" + (def.Name || "") + "\"");
                        }

                        if (System.String.startsWith(name2, "get_") || System.String.startsWith(name2, "set_") || System.String.startsWith(name2, "rr") || System.String.startsWith(name2, "robotraconteur") || System.String.startsWith(name2, "async_")) {
                            throw new RobotRaconteurWeb.ServiceDefinitionException("Name \"" + (name || "") + "\" is invalid in service definition \"" + (def.Name || "") + "\"");
                        }
                    }

                    if (allowdot) {
                        if (!System.Text.RegularExpressions.Regex.isMatch(name, "^(?:[a-zA-Z](?:\\w*[a-zA-Z0-9])?)(?:\\.[a-zA-Z](?:\\w*[a-zA-Z0-9])?)*$")) {
                            throw new RobotRaconteurWeb.ServiceDefinitionException("Name \"" + (name || "") + "\" is invalid in service definition \"" + (def.Name || "") + "\"");
                        }
                    } else {
                        if (!System.Text.RegularExpressions.Regex.isMatch(name, "^[a-zA-Z](?:\\w*[a-zA-Z0-9])?$")) {
                            throw new RobotRaconteurWeb.ServiceDefinitionException("Name \"" + (name || "") + "\" is invalid in service definition \"" + (def.Name || "") + "\"");
                        }
                    }
                },
                VerifyConstant$1: function (constant, def) {
                    var c = new RobotRaconteurWeb.ConstantDefinition.ctor(def);
                    try {
                        c.FromString(constant);
                    } catch ($e1) {
                        $e1 = System.Exception.create($e1);
                        throw new RobotRaconteurWeb.ServiceDefinitionException("Error in constant in service definition \"" + (def.Name || "") + "\"");
                    }

                    if (!c.VerifyValue()) {
                        throw new RobotRaconteurWeb.ServiceDefinitionException("Error in constant " + (c.Name || "") + " in service definition \"" + (def.Name || "") + "\"");
                    }

                    if (c.Type.Type === RobotRaconteurWeb.DataTypes.namedtype_t) {
                        throw new RobotRaconteurWeb.ServiceDefinitionException("Error in constant " + (c.Name || "") + " in service definition \"" + (def.Name || "") + "\"");
                    }

                    RobotRaconteurWeb.ServiceDefinitionUtil.VerifyName(c.Name, def);

                    return c.Name;
                },
                VerifyConstant: function (c, def, constants) {
                    if (!c.VerifyValue()) {
                        throw new RobotRaconteurWeb.ServiceDefinitionException("Error in constant " + (c.Name || "") + " in service definition \"" + (def.Name || "") + "\"");
                    }
                    RobotRaconteurWeb.ServiceDefinitionUtil.VerifyName(c.Name, def);

                    if (c.Type.Type === RobotRaconteurWeb.DataTypes.namedtype_t) {
                        RobotRaconteurWeb.ServiceDefinitionUtil.VerifyConstantStruct(c, def, constants, new (System.Collections.Generic.List$1(System.String)).ctor());

                    }

                    return c.Name;
                },
                VerifyConstantStruct: function (c, def, constants, parent_types) {
                    var $t, $t1, $t2;


                    var fields = c.ValueToStructFields();
                    parent_types.add(c.Name);
                    $t = Bridge.getEnumerator(fields);
                    try {
                        while ($t.moveNext()) {
                            var e = $t.Current;
                            RobotRaconteurWeb.ServiceDefinitionUtil.VerifyName(e.Name, def);
                            $t1 = Bridge.getEnumerator(parent_types);
                            try {
                                while ($t1.moveNext()) {
                                    var name = $t1.Current;
                                    if (Bridge.referenceEquals(e.ConstantRefName, name)) {
                                        throw new RobotRaconteurWeb.ServiceDefinitionException("Error in constant " + (c.Name || "") + " in service definition \"" + (def.Name || "") + "\": recursive struct not allowed");
                                    }
                                }
                            } finally {
                                if (Bridge.is($t1, System.IDisposable)) {
                                    $t1.System$IDisposable$Dispose();
                                }
                            }
                            var found = false;
                            $t2 = Bridge.getEnumerator(constants.Values);
                            try {
                                while ($t2.moveNext()) {
                                    var f = $t2.Current;
                                    if (Bridge.referenceEquals(f.Name, e.ConstantRefName)) {
                                        found = true;
                                        if (f.Type.Type === RobotRaconteurWeb.DataTypes.namedtype_t) {
                                            RobotRaconteurWeb.ServiceDefinitionUtil.VerifyConstantStruct(f, def, constants, parent_types);
                                        }
                                        break;
                                    }
                                }
                            } finally {
                                if (Bridge.is($t2, System.IDisposable)) {
                                    $t2.System$IDisposable$Dispose();
                                }
                            }

                            if (!found) {
                                throw new RobotRaconteurWeb.ServiceDefinitionException("Error in constant " + (c.Name || "") + " in service definition \"" + (def.Name || "") + "\": struct field " + (e.ConstantRefName || "") + " not found");
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                },
                VerifyEnum: function (e, def) {
                    var $t;
                    if (!e.VerifyValues()) {
                        throw new RobotRaconteurWeb.ServiceDefinitionException("Error in constant in enum definition \"" + (def.Name || "") + "\"");
                    }

                    RobotRaconteurWeb.ServiceDefinitionUtil.VerifyName(e.Name, def);
                    $t = Bridge.getEnumerator(e.Values);
                    try {
                        while ($t.moveNext()) {
                            var e1 = $t.Current;
                            RobotRaconteurWeb.ServiceDefinitionUtil.VerifyName(e1.Name, def);
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                },
                GetServiceNames: function (def) {
                    var $t, $t1, $t2, $t3, $t4, $t5, $t6;
                    var o = new (System.Collections.Generic.List$1(System.String)).ctor();
                    $t = Bridge.getEnumerator(def.Objects.Values);
                    try {
                        while ($t.moveNext()) {
                            var n = $t.Current;
                            o.add(n.Name);
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                    $t1 = Bridge.getEnumerator(def.Structures.Values);
                    try {
                        while ($t1.moveNext()) {
                            var n1 = $t1.Current;
                            o.add(n1.Name);
                        }
                    } finally {
                        if (Bridge.is($t1, System.IDisposable)) {
                            $t1.System$IDisposable$Dispose();
                        }
                    }
                    $t2 = Bridge.getEnumerator(def.Pods.Values);
                    try {
                        while ($t2.moveNext()) {
                            var n2 = $t2.Current;
                            o.add(n2.Name);
                        }
                    } finally {
                        if (Bridge.is($t2, System.IDisposable)) {
                            $t2.System$IDisposable$Dispose();
                        }
                    }
                    $t3 = Bridge.getEnumerator(def.NamedArrays.Values);
                    try {
                        while ($t3.moveNext()) {
                            var n3 = $t3.Current;
                            o.add(n3.Name);
                        }
                    } finally {
                        if (Bridge.is($t3, System.IDisposable)) {
                            $t3.System$IDisposable$Dispose();
                        }
                    }
                    $t4 = Bridge.getEnumerator(def.Constants.Values);
                    try {
                        while ($t4.moveNext()) {
                            var n4 = $t4.Current;
                            o.add(n4.Name);
                        }
                    } finally {
                        if (Bridge.is($t4, System.IDisposable)) {
                            $t4.System$IDisposable$Dispose();
                        }
                    }
                    $t5 = Bridge.getEnumerator(def.Enums.Values);
                    try {
                        while ($t5.moveNext()) {
                            var n5 = $t5.Current;
                            o.add(n5.Name);
                        }
                    } finally {
                        if (Bridge.is($t5, System.IDisposable)) {
                            $t5.System$IDisposable$Dispose();
                        }
                    }
                    $t6 = Bridge.getEnumerator(def.Exceptions);
                    try {
                        while ($t6.moveNext()) {
                            var n6 = $t6.Current;
                            o.add(n6);
                        }
                    } finally {
                        if (Bridge.is($t6, System.IDisposable)) {
                            $t6.System$IDisposable$Dispose();
                        }
                    }
                    return o;
                },
                VerifyUsing: function (e, def, importeddefs) {
                    var $t;
                    RobotRaconteurWeb.ServiceDefinitionUtil.VerifyName(e.UnqualifiedName, def);
                    var r = new System.Text.RegularExpressions.Regex.ctor(RobotRaconteurWeb.detail.ServiceDefinitionUtil.RR_QUALIFIED_TYPE_REGEX);
                    if (!r.isMatch(e.QualifiedName)) {
                        throw new RobotRaconteurWeb.ServiceDefinitionException("Using \"" + (e.QualifiedName || "") + "\" is invalid in service definition \"" + (def.Name || "") + "\"");
                    }

                    var s1 = RobotRaconteurWeb.ServiceDefinitionUtil.SplitQualifiedName(e.QualifiedName);

                    $t = Bridge.getEnumerator(importeddefs.Values);
                    try {
                        while ($t.moveNext()) {
                            var d1 = $t.Current;
                            if (Bridge.referenceEquals(s1.Item1, d1.Name)) {
                                var importeddefs_names = RobotRaconteurWeb.ServiceDefinitionUtil.GetServiceNames(d1);
                                if (!importeddefs_names.contains(s1.Item2)) {
                                    throw new RobotRaconteurWeb.ServiceDefinitionException("Using \"" + (e.QualifiedName || "") + "\" is invalid in service definition \"" + (def.Name || "") + "\"");
                                }
                                return;
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }

                    throw new RobotRaconteurWeb.ServiceDefinitionException("Using \"" + (e.QualifiedName || "") + "\" is invalid in service definition \"" + (def.Name || "") + "\"");
                },
                VerifyType: function (t, def, defs) {
                    switch (t.ArrayType) {
                        case RobotRaconteurWeb.DataTypes_ArrayTypes.none: 
                        case RobotRaconteurWeb.DataTypes_ArrayTypes.array: 
                        case RobotRaconteurWeb.DataTypes_ArrayTypes.multidimarray: 
                            break;
                        default: 
                            throw new RobotRaconteurWeb.ServiceDefinitionException("Invalid Robot Raconteur data type \"" + (t.toString() || "") + "\" type in service \"" + (def.Name || "") + "\"");
                    }

                    switch (t.ContainerType) {
                        case RobotRaconteurWeb.DataTypes_ContainerTypes.none: 
                        case RobotRaconteurWeb.DataTypes_ContainerTypes.list: 
                        case RobotRaconteurWeb.DataTypes_ContainerTypes.map_int32: 
                        case RobotRaconteurWeb.DataTypes_ContainerTypes.map_string: 
                            break;
                        default: 
                            throw new RobotRaconteurWeb.ServiceDefinitionException("Invalid Robot Raconteur data type \"" + (t.toString() || "") + "\" type in service \"" + (def.Name || "") + "\"");
                    }

                    if (RobotRaconteurWeb.DataTypeUtil.IsNumber(t.Type)) {
                        return;

                    }
                    if (t.Type === RobotRaconteurWeb.DataTypes.string_t) {
                        if (t.ArrayType !== RobotRaconteurWeb.DataTypes_ArrayTypes.none) {
                            throw new RobotRaconteurWeb.ServiceDefinitionException("Invalid Robot Raconteur data type \"" + (t.toString() || "") + "\" type in service \"" + (def.Name || "") + "\"");
                        }

                        return;
                    }
                    if (t.Type === RobotRaconteurWeb.DataTypes.vector_t || t.Type === RobotRaconteurWeb.DataTypes.dictionary_t || t.Type === RobotRaconteurWeb.DataTypes.object_t || t.Type === RobotRaconteurWeb.DataTypes.varvalue_t || t.Type === RobotRaconteurWeb.DataTypes.varobject_t || t.Type === RobotRaconteurWeb.DataTypes.multidimarray_t) {
                        return;
                    }
                    if (t.Type === RobotRaconteurWeb.DataTypes.namedtype_t) {
                        var nt = t.ResolveNamedType(defs);
                        var nt_type = nt.RRDataType;
                        if ((nt_type !== RobotRaconteurWeb.DataTypes.pod_t && nt_type !== RobotRaconteurWeb.DataTypes.namedarray_t) && t.ArrayType !== RobotRaconteurWeb.DataTypes_ArrayTypes.none) {
                            throw new RobotRaconteurWeb.ServiceDefinitionException("Invalid Robot Raconteur data type \"" + (t.toString() || "") + "\" type in service \"" + (def.Name || "") + "\"");
                        }
                        if (nt_type !== RobotRaconteurWeb.DataTypes.structure_t && nt_type !== RobotRaconteurWeb.DataTypes.pod_t && nt_type !== RobotRaconteurWeb.DataTypes.namedarray_t && nt_type !== RobotRaconteurWeb.DataTypes.enum_t) {
                            throw new RobotRaconteurWeb.ServiceDefinitionException("Invalid Robot Raconteur data type \"" + (t.toString() || "") + "\" type in service \"" + (def.Name || "") + "\"");
                        }
                        if (nt_type === RobotRaconteurWeb.DataTypes.pod_t) {

                        }
                        return;
                    }
                    throw new RobotRaconteurWeb.ServiceDefinitionException("Invalid Robot Raconteur data type \"" + (t.toString() || "") + "\" type in service \"" + (def.Name || "") + "\"");
                },
                VerifyReturnType: function (t, def, defs) {
                    if (t.Type === RobotRaconteurWeb.DataTypes.void_t) {
                        if (t.ArrayType !== RobotRaconteurWeb.DataTypes_ArrayTypes.none || t.ContainerType !== RobotRaconteurWeb.DataTypes_ContainerTypes.none) {
                            throw new RobotRaconteurWeb.ServiceDefinitionException("Invalid Robot Raconteur data type \"" + (t.toString() || "") + "\" type in service \"" + (def.Name || "") + "\"");
                        }
                        return;
                    } else {
                        RobotRaconteurWeb.ServiceDefinitionUtil.VerifyType(t, def, defs);
                    }
                },
                VerifyParameters: function (p, def, defs) {
                    var $t;

                    var names = new (System.Collections.Generic.List$1(System.String)).ctor();
                    $t = Bridge.getEnumerator(p);
                    try {
                        while ($t.moveNext()) {
                            var t = $t.Current;
                            RobotRaconteurWeb.ServiceDefinitionUtil.VerifyType(t, def, defs);
                            if (names.contains(t.Name)) {
                                throw new RobotRaconteurWeb.ServiceDefinitionException("Parameters must have unique names");
                            }
                            names.add(t.Name);
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                },
                VerifyModifiers: function (m, readwrite, unreliable, warnings) {
                    var $t, $t1;
                    var direction_found = false;
                    var unreliable_found = false;

                    $t = Bridge.getEnumerator(m.Modifiers);
                    try {
                        while ($t.moveNext()) {
                            var s = $t.Current;
                            if (readwrite) {
                                if (Bridge.referenceEquals(s, "readonly") || Bridge.referenceEquals(s, "writeonly")) {
                                    if (direction_found) {
                                        warnings.v.add(new RobotRaconteurWeb.RobotRaconteurParseException.ctor("Invalid member modifier combination: [readonly,writeonly]"));
                                    }
                                    direction_found = true;
                                    continue;
                                }
                            }

                            if (unreliable) {
                                if (Bridge.referenceEquals(s, "unreliable")) {
                                    var obj = m.ServiceEntry;
                                    if (obj != null) {
                                        $t1 = Bridge.getEnumerator(obj.Options);
                                        try {
                                            while ($t1.moveNext()) {
                                                var o = $t1.Current;
                                                var r = new System.Text.RegularExpressions.Regex.ctor("^[ \\t]*pipe[ \\t]+" + (m.Name || "") + "[ \\t]+unreliable[ \\t]*$");
                                                if (!r.isMatch(o)) {
                                                    warnings.v.add(new RobotRaconteurWeb.RobotRaconteurParseException.ctor("Invalid member modifier combination: [unreliable]"));
                                                }
                                            }
                                        } finally {
                                            if (Bridge.is($t1, System.IDisposable)) {
                                                $t1.System$IDisposable$Dispose();
                                            }
                                        }
                                    }

                                    if (unreliable_found) {
                                        warnings.v.add(new RobotRaconteurWeb.RobotRaconteurParseException.ctor("Invalid member modifier combination: [unreliable]"));
                                    }
                                    unreliable_found = true;
                                    continue;
                                }
                            }

                            warnings.v.add(new RobotRaconteurWeb.RobotRaconteurParseException.ctor("Unknown member modifier: [" + (s || "") + "]"));
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                },
                VerifyMember: function (m, def, defs, warnings) {
                    var $t, $t1;
                    RobotRaconteurWeb.ServiceDefinitionUtil.VerifyName(m.Name, def);

                    if (m.Modifiers.Count > 0) {
                        RobotRaconteurWeb.ServiceDefinitionUtil.VerifyVersionSupport(def, 0, 9, "Service definition standard version 0.9 or greater required for Member Modifiers");
                    }

                    var p = Bridge.as(m, RobotRaconteurWeb.PropertyDefinition);
                    if (p != null) {
                        RobotRaconteurWeb.ServiceDefinitionUtil.VerifyType(p.Type, def, defs);
                        RobotRaconteurWeb.ServiceDefinitionUtil.VerifyModifiers(m, true, false, warnings);
                        return p.Name;
                    }
                    var f = Bridge.as(m, RobotRaconteurWeb.FunctionDefinition);
                    if (f != null) {
                        if (!f.IsGenerator) {
                            RobotRaconteurWeb.ServiceDefinitionUtil.VerifyParameters(f.Parameters, def, defs);
                            RobotRaconteurWeb.ServiceDefinitionUtil.VerifyReturnType(f.ReturnType, def, defs);
                            RobotRaconteurWeb.ServiceDefinitionUtil.VerifyModifiers(m, false, false, warnings);
                            return f.Name;
                        } else {
                            var generator_found = false;
                            ;
                            if (f.ReturnType.ContainerType === RobotRaconteurWeb.DataTypes_ContainerTypes.generator) {
                                if (f.ReturnType.Type === RobotRaconteurWeb.DataTypes.void_t) {
                                    throw new RobotRaconteurWeb.ServiceDefinitionException("Generator return must not be void");
                                }

                                var ret2 = f.ReturnType.Clone();
                                ret2.RemoveContainers();
                                RobotRaconteurWeb.ServiceDefinitionUtil.VerifyType(ret2, def, defs);
                                if (f.ReturnType.Type === RobotRaconteurWeb.DataTypes.namedtype_t) {
                                    f.ReturnType.ResolveNamedType(defs);
                                }
                                generator_found = true;
                            } else {
                                if (f.ReturnType.Type !== RobotRaconteurWeb.DataTypes.void_t) {
                                    throw new RobotRaconteurWeb.ServiceDefinitionException("Generator return must use generator container");
                                }
                            }

                            if (f.Parameters.Count > 0 && System.Linq.Enumerable.from(f.Parameters, RobotRaconteurWeb.TypeDefinition).last().ContainerType === RobotRaconteurWeb.DataTypes_ContainerTypes.generator) {
                                var p3 = System.Linq.Enumerable.from(f.Parameters, RobotRaconteurWeb.TypeDefinition).last().Clone();
                                p3.RemoveContainers();
                                RobotRaconteurWeb.ServiceDefinitionUtil.VerifyType(p3, def, defs);
                                if (System.Linq.Enumerable.from(f.Parameters, RobotRaconteurWeb.TypeDefinition).last().Type === RobotRaconteurWeb.DataTypes.namedtype_t) {
                                    System.Linq.Enumerable.from(f.Parameters, RobotRaconteurWeb.TypeDefinition).last().ResolveNamedType(defs);
                                }
                                if (f.Parameters.Count > 1) {
                                    var params2 = new (System.Collections.Generic.List$1(RobotRaconteurWeb.TypeDefinition)).$ctor1(System.Linq.Enumerable.from(f.Parameters, RobotRaconteurWeb.TypeDefinition).take(((f.Parameters.Count - 1) | 0)).ToArray(RobotRaconteurWeb.TypeDefinition));
                                    RobotRaconteurWeb.ServiceDefinitionUtil.VerifyParameters(params2, def, defs);
                                }
                                generator_found = true;
                            } else {
                                RobotRaconteurWeb.ServiceDefinitionUtil.VerifyParameters(f.Parameters, def, defs);
                            }

                            if (!generator_found) {
                                throw new RobotRaconteurWeb.ServiceDefinitionException("Generator return or parameter not found");
                            }

                            return f.Name;
                        }
                    }

                    var e = Bridge.as(m, RobotRaconteurWeb.EventDefinition);
                    if (e != null) {
                        RobotRaconteurWeb.ServiceDefinitionUtil.VerifyParameters(e.Parameters, def, defs);
                        RobotRaconteurWeb.ServiceDefinitionUtil.VerifyModifiers(m, false, false, warnings);
                        return e.Name;
                    }

                    var o = Bridge.as(m, RobotRaconteurWeb.ObjRefDefinition);
                    if (o != null) {
                        RobotRaconteurWeb.ServiceDefinitionUtil.VerifyModifiers(m, false, false, warnings);

                        if (Bridge.referenceEquals(o.ObjectType, "varobject")) {
                            return o.Name;
                        }

                        if (!System.Linq.Enumerable.from(o.ObjectType, System.Char).contains(46)) {
                            $t = Bridge.getEnumerator(def.Objects.Values);
                            try {
                                while ($t.moveNext()) {
                                    var ee = $t.Current;
                                    if (Bridge.referenceEquals(ee.Name, o.ObjectType)) {
                                        return o.Name;
                                    }
                                }
                            } finally {
                                if (Bridge.is($t, System.IDisposable)) {
                                    $t.System$IDisposable$Dispose();
                                }
                            }
                        } else {
                            var s1 = RobotRaconteurWeb.ServiceDefinitionUtil.SplitQualifiedName(o.ObjectType);

                            var defname = s1.Item1;
                            var def2 = { };
                            if (defs.tryGetValue(defname, def2)) {
                                $t1 = Bridge.getEnumerator(def2.v.Objects.Values);
                                try {
                                    while ($t1.moveNext()) {
                                        var ee1 = $t1.Current;
                                        if (Bridge.referenceEquals(ee1.Name, s1.Item2)) {
                                            return o.Name;
                                        }
                                    }
                                } finally {
                                    if (Bridge.is($t1, System.IDisposable)) {
                                        $t1.System$IDisposable$Dispose();
                                    }
                                }
                            }
                        }
                        throw new RobotRaconteurWeb.ServiceDefinitionException("Unknown object type \"" + (o.ObjectType || "") + "\" in member \"" + (m.Name || "") + "\" in  service \"" + (def.Name || "") + "\"");
                    }

                    var p2 = Bridge.as(m, RobotRaconteurWeb.PipeDefinition);
                    if (p2 != null) {
                        RobotRaconteurWeb.ServiceDefinitionUtil.VerifyType(p2.Type, def, defs);
                        RobotRaconteurWeb.ServiceDefinitionUtil.VerifyModifiers(m, true, true, warnings);
                        return p2.Name;
                    }

                    var c = Bridge.as(m, RobotRaconteurWeb.CallbackDefinition);
                    if (c != null) {
                        RobotRaconteurWeb.ServiceDefinitionUtil.VerifyParameters(c.Parameters, def, defs);
                        RobotRaconteurWeb.ServiceDefinitionUtil.VerifyReturnType(c.ReturnType, def, defs);
                        RobotRaconteurWeb.ServiceDefinitionUtil.VerifyModifiers(m, false, false, warnings);
                        return c.Name;
                    }

                    var w = Bridge.as(m, RobotRaconteurWeb.WireDefinition);
                    if (w != null) {
                        RobotRaconteurWeb.ServiceDefinitionUtil.VerifyType(w.Type, def, defs);
                        RobotRaconteurWeb.ServiceDefinitionUtil.VerifyModifiers(m, true, false, warnings);
                        return w.Name;
                    }

                    var m2 = Bridge.as(m, RobotRaconteurWeb.MemoryDefinition);
                    if (m2 != null) {
                        RobotRaconteurWeb.ServiceDefinitionUtil.VerifyType(m2.Type, def, defs);
                        RobotRaconteurWeb.ServiceDefinitionUtil.VerifyModifiers(m, true, false, warnings);
                        if (!RobotRaconteurWeb.DataTypeUtil.IsNumber(m2.Type.Type)) {
                            if (m2.Type.Type !== RobotRaconteurWeb.DataTypes.namedtype_t) {
                                throw new RobotRaconteurWeb.ServiceDefinitionException("Memory member must be numeric or pod");
                            }
                            var nt = m2.Type.ResolveNamedType(defs);
                            if (nt.RRDataType !== RobotRaconteurWeb.DataTypes.pod_t && nt.RRDataType !== RobotRaconteurWeb.DataTypes.namedarray_t) {
                                throw new RobotRaconteurWeb.ServiceDefinitionException("Memory member must be numeric or pod");
                            }
                        }
                        switch (m2.Type.ArrayType) {
                            case RobotRaconteurWeb.DataTypes_ArrayTypes.array: 
                            case RobotRaconteurWeb.DataTypes_ArrayTypes.multidimarray: 
                                break;
                            default: 
                                throw new RobotRaconteurWeb.ServiceDefinitionException("Memory member must be numeric or pod");
                        }

                        if (!m2.Type.ArrayVarLength) {
                            throw new RobotRaconteurWeb.ServiceDefinitionException("Memory member must not be fixed size");
                        }

                        if (m2.Type.ArrayLength.Count !== 0) {
                            var array_count = System.Linq.Enumerable.from(m2.Type.ArrayLength, System.Int32).aggregate(1, function (x, y) {
                                    return Bridge.Int.mul(x, y);
                                });
                            if (array_count !== 0) {
                                throw new RobotRaconteurWeb.ServiceDefinitionException("Memory member must not be fixed size");
                            }
                        }

                        return m2.Name;
                    }

                    throw new RobotRaconteurWeb.ServiceDefinitionException("Invalid member \"" + (m.Name || "") + "\" type in service \"" + (def.Name || "") + "\"");
                },
                get_implements: function (obj, def, defs, rootobj) {
                    var $t, $t1, $t2, $t3;
                    if (rootobj === void 0) { rootobj = ""; }
                    var out_ = new RobotRaconteurWeb.ServiceDefinitionUtil.rrimplements();
                    out_.obj = obj;
                    out_.name = (def.Name || "") + "." + (obj.Name || "");

                    if (Bridge.referenceEquals(rootobj, "")) {
                        rootobj = out_.name;
                    }

                    $t = Bridge.getEnumerator(obj.Implements);
                    try {
                        while ($t.moveNext()) {
                            var e = $t.Current;
                            if (!System.String.contains(e,".")) {


                                var obj2 = { };
                                if (!def.Objects.tryGetValue(e, obj2)) {
                                    throw new RobotRaconteurWeb.ServiceDefinitionException("Object \"" + (def.Name || "") + "." + (e || "") + " not found");
                                }

                                if (Bridge.referenceEquals(rootobj, ((def.Name || "") + "." + (obj2.v.Name || "")))) {
                                    throw new RobotRaconteurWeb.ServiceDefinitionException("Recursive implements between \"" + (rootobj || "") + "\" and \"" + (def.Name || "") + "." + (obj2.v.Name || "") + "\"");
                                }

                                var imp2 = RobotRaconteurWeb.ServiceDefinitionUtil.get_implements(obj2.v, def, defs, rootobj);
                                out_.implements.add(imp2);
                            } else {
                                var s1 = RobotRaconteurWeb.ServiceDefinitionUtil.SplitQualifiedName(e);

                                var def2 = { };
                                if (!defs.tryGetValue(s1.Item1, def2)) {
                                    throw new RobotRaconteurWeb.ServiceDefinitionException("Service definition \"" + (e || "") + "\" not found.");
                                }

                                var obj21 = { };
                                if (!def2.v.Objects.tryGetValue(s1.Item2, obj21)) {
                                    throw new RobotRaconteurWeb.ServiceDefinitionException("Object \"" + (e || "") + " not found");
                                }

                                if (Bridge.referenceEquals(rootobj, ((def2.v.Name || "") + "." + (obj21.v.Name || "")))) {
                                    throw new RobotRaconteurWeb.ServiceDefinitionException("Recursive implements between \"" + (rootobj || "") + "\" and \"" + (def2.v.Name || "") + "." + (obj21.v.Name || "") + "\"");
                                }

                                var imp21 = RobotRaconteurWeb.ServiceDefinitionUtil.get_implements(obj21.v, def2.v, defs, rootobj);
                                out_.implements.add(imp21);
                            }




                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }

                    $t1 = Bridge.getEnumerator(out_.implements);
                    try {
                        while ($t1.moveNext()) {
                            var r = $t1.Current;
                            $t2 = Bridge.getEnumerator(r.implements);
                            try {
                                while ($t2.moveNext()) {
                                    var r2 = $t2.Current;
                                    var found = false;
                                    $t3 = Bridge.getEnumerator(out_.implements);
                                    try {
                                        while ($t3.moveNext()) {
                                            var r3 = $t3.Current;
                                            if (Bridge.referenceEquals(r2.name, r3.name)) {
                                                found = true;
                                                break;
                                            }
                                        }
                                    } finally {
                                        if (Bridge.is($t3, System.IDisposable)) {
                                            $t3.System$IDisposable$Dispose();
                                        }
                                    }
                                    if (!found) {
                                        throw new RobotRaconteurWeb.ServiceDefinitionException("Object \"" + (out_.name || "") + "\" does not implement inherited type \"" + (r2.name || "") + "\"");
                                    }
                                }
                            } finally {
                                if (Bridge.is($t2, System.IDisposable)) {
                                    $t2.System$IDisposable$Dispose();
                                }
                            }
                        }
                    } finally {
                        if (Bridge.is($t1, System.IDisposable)) {
                            $t1.System$IDisposable$Dispose();
                        }
                    }
                    return out_;

                },
                CompareTypeDefinition: function (d1, t1, d2, t2) {
                    if (!Bridge.referenceEquals(t1.Name, t2.Name)) {
                        return false;
                    }
                    if (t1.ArrayType !== t2.ArrayType) {
                        return false;
                    }
                    if (t1.ArrayType !== RobotRaconteurWeb.DataTypes_ArrayTypes.none) {
                        if (t1.ArrayVarLength !== t2.ArrayVarLength) {
                            return false;
                        }
                        if (t1.ArrayLength.Count !== t2.ArrayLength.Count) {
                            return false;
                        }
                        if (!System.Linq.Enumerable.from(t1.ArrayLength, System.Int32).sequenceEqual(t2.ArrayLength)) {
                            return false;
                        }
                    }

                    if (t1.ContainerType !== t2.ContainerType) {
                        return false;
                    }

                    if (t1.Type !== t2.Type) {
                        return false;
                    }
                    if (t1.Type !== RobotRaconteurWeb.DataTypes.namedtype_t && t1.Type !== RobotRaconteurWeb.DataTypes.object_t) {
                        return true;
                    }

                    if (Bridge.referenceEquals(t1.TypeString, "varvalue") && Bridge.referenceEquals(t2.TypeString, "varvalue")) {
                        return true;
                    }


                    var st1 = "";
                    var st2 = "";

                    if (!System.Linq.Enumerable.from(t1.TypeString, System.Char).contains(46)) {
                        st1 = (d1.Name || "") + "." + (t1.TypeString || "");
                    } else {
                        st1 = t1.TypeString;
                    }

                    if (!System.Linq.Enumerable.from(t2.TypeString, System.Char).contains(46)) {
                        st2 = (d2.Name || "") + "." + (t2.TypeString || "");
                    } else {
                        st2 = t2.TypeString;
                    }

                    return Bridge.referenceEquals(st1, st2);
                },
                CompareTypeDefinitions: function (d1, t1, d2, t2) {
                    if (t1.Count !== t2.Count) {
                        return false;
                    }
                    for (var i = 0; i < t1.Count; i = (i + 1) | 0) {
                        if (!RobotRaconteurWeb.ServiceDefinitionUtil.CompareTypeDefinition(d1, t1.getItem(i), d2, t2.getItem(i))) {
                            return false;
                        }
                    }

                    return true;
                },
                CompareMember: function (m1, m2) {
                    if (!Bridge.referenceEquals(m1.Name, m2.Name)) {
                        return false;
                    }
                    if (!System.Linq.Enumerable.from(m1.Modifiers, System.String).sequenceEqual(m2.Modifiers)) {
                        return false;
                    }

                    var e1 = m1.ServiceEntry;
                    var e2 = m2.ServiceEntry;
                    if ((e1 == null) || (e2 == null)) {
                        return false;
                    }

                    var d1 = e1.ServiceDefinition;
                    var d2 = e2.ServiceDefinition;
                    if ((d1 == null) || (d2 == null)) {
                        return false;
                    }

                    var p1 = Bridge.as(m1, RobotRaconteurWeb.PropertyDefinition);
                    var p2 = Bridge.as(m2, RobotRaconteurWeb.PropertyDefinition);
                    if (p2 != null) {
                        if (p2 == null) {
                            return false;
                        }
                        return RobotRaconteurWeb.ServiceDefinitionUtil.CompareTypeDefinition(d1, p1.Type, d2, p2.Type);
                    }

                    var f1 = Bridge.as(m1, RobotRaconteurWeb.FunctionDefinition);
                    var f2 = Bridge.as(m2, RobotRaconteurWeb.FunctionDefinition);
                    if (f1 != null) {
                        if (f2 == null) {
                            return false;
                        }
                        if (!RobotRaconteurWeb.ServiceDefinitionUtil.CompareTypeDefinition(d1, f1.ReturnType, d2, f2.ReturnType)) {
                            return false;
                        }
                        return RobotRaconteurWeb.ServiceDefinitionUtil.CompareTypeDefinitions(d1, f1.Parameters, d2, f2.Parameters);
                    }

                    var ev1 = Bridge.as(m1, RobotRaconteurWeb.EventDefinition);
                    var ev2 = Bridge.as(m2, RobotRaconteurWeb.EventDefinition);
                    if (ev2 != null) {
                        if (ev2 == null) {
                            return false;
                        }

                        return RobotRaconteurWeb.ServiceDefinitionUtil.CompareTypeDefinitions(d1, ev1.Parameters, d2, ev2.Parameters);
                    }

                    var o1 = Bridge.as(m1, RobotRaconteurWeb.ObjRefDefinition);
                    var o2 = Bridge.as(m2, RobotRaconteurWeb.ObjRefDefinition);
                    if (o1 != null) {
                        if (o2 == null) {
                            return false;
                        }

                        if (o1.ArrayType !== o2.ArrayType) {
                            return false;
                        }
                        if (o1.ContainerType !== o2.ContainerType) {
                            return false;
                        }

                        if (Bridge.referenceEquals(o1.ObjectType, "varobject") && Bridge.referenceEquals(o2.ObjectType, "varobject")) {
                            return true;
                        }


                        var st1 = "";
                        var st2 = "";

                        if (!System.Linq.Enumerable.from(o1.ObjectType, System.Char).contains(46)) {
                            st1 = (d1.Name || "") + "." + (o1.ObjectType || "");
                        } else {
                            st1 = o1.ObjectType;
                        }


                        if (!System.Linq.Enumerable.from(o2.ObjectType, System.Char).contains(46)) {
                            st2 = (d2.Name || "") + "." + (o2.ObjectType || "");
                        } else {
                            st2 = o2.ObjectType;
                        }

                        return Bridge.referenceEquals(st1, st2);

                    }

                    var pp1 = Bridge.as(m1, RobotRaconteurWeb.PipeDefinition);
                    var pp2 = Bridge.as(m2, RobotRaconteurWeb.PipeDefinition);
                    if (pp1 != null) {
                        if (pp2 == null) {
                            return false;
                        }

                        return RobotRaconteurWeb.ServiceDefinitionUtil.CompareTypeDefinition(d1, pp1.Type, d2, pp2.Type);
                    }

                    var c1 = Bridge.as(m1, RobotRaconteurWeb.CallbackDefinition);
                    var c2 = Bridge.as(m2, RobotRaconteurWeb.CallbackDefinition);
                    if (c1 != null) {
                        if (c2 == null) {
                            return false;
                        }
                        if (!RobotRaconteurWeb.ServiceDefinitionUtil.CompareTypeDefinition(d1, c1.ReturnType, d2, c2.ReturnType)) {
                            return false;
                        }
                        return RobotRaconteurWeb.ServiceDefinitionUtil.CompareTypeDefinitions(d1, c1.Parameters, d2, c2.Parameters);
                    }

                    var w1 = Bridge.as(m1, RobotRaconteurWeb.WireDefinition);
                    var w2 = Bridge.as(m2, RobotRaconteurWeb.WireDefinition);
                    if (w1 != null) {
                        if (w2 == null) {
                            return false;
                        }

                        return RobotRaconteurWeb.ServiceDefinitionUtil.CompareTypeDefinition(d1, w1.Type, d2, w2.Type);
                    }

                    var mem1 = Bridge.as(m1, RobotRaconteurWeb.MemoryDefinition);
                    var mem2 = Bridge.as(m2, RobotRaconteurWeb.MemoryDefinition);
                    if (mem1 != null) {
                        if (mem2 == null) {
                            return false;
                        }

                        return RobotRaconteurWeb.ServiceDefinitionUtil.CompareTypeDefinition(d1, mem1.Type, d2, mem2.Type);
                    }

                    return false;

                },
                VerifyObject: function (obj, def, defs, warnings) {
                    var $t, $t1, $t2, $t3, $t4;
                    if (obj.EntryType !== RobotRaconteurWeb.DataTypes.object_t) {
                        throw new RobotRaconteurWeb.ServiceDefinitionException("Invalid EntryType in " + (obj.Name || ""));
                    }

                    RobotRaconteurWeb.ServiceDefinitionUtil.VerifyName(obj.Name, def);

                    var membernames = new (System.Collections.Generic.List$1(System.String)).ctor();

                    $t = Bridge.getEnumerator(obj.Options);
                    try {
                        while ($t.moveNext()) {
                            var e = $t.Current;
                            var s1 = System.String.split(e, null.map(function (i) {{ return String.fromCharCode(i); }}));
                            if (Bridge.referenceEquals(s1[System.Array.index(0, s1)], "constant")) {
                                var membername = RobotRaconteurWeb.ServiceDefinitionUtil.VerifyConstant$1(e, def);
                                if (membernames.contains(membername)) {
                                    throw new RobotRaconteurWeb.ServiceDefinitionException("Object \"" + (obj.Name || "") + "\" in service definition \"" + (def.Name || "") + "\" contains multiple members named \"" + (membername || "") + "\"");
                                }
                                membernames.add(membername);
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }

                    if (obj.Constants.Count !== 0) {
                        RobotRaconteurWeb.ServiceDefinitionUtil.VerifyVersionSupport(def, 0, 9, "Service definition standard version 0.9 or greater required for \"constant\" keyword");
                    }

                    $t1 = Bridge.getEnumerator(obj.Constants.Values);
                    try {
                        while ($t1.moveNext()) {
                            var e1 = $t1.Current;
                            var membername1 = RobotRaconteurWeb.ServiceDefinitionUtil.VerifyConstant(e1, def, obj.Constants);
                            if (membernames.contains(membername1)) {
                                throw new RobotRaconteurWeb.ServiceDefinitionException("Object \"" + (obj.Name || "") + "\" in service definition \"" + (def.Name || "") + "\" contains multiple members named \"" + (membername1 || "") + "\"");
                            }
                            membernames.add(membername1);
                        }
                    } finally {
                        if (Bridge.is($t1, System.IDisposable)) {
                            $t1.System$IDisposable$Dispose();
                        }
                    }

                    $t2 = Bridge.getEnumerator(obj.Members.Values);
                    try {
                        while ($t2.moveNext()) {
                            var e2 = $t2.Current;

                            var membername2 = RobotRaconteurWeb.ServiceDefinitionUtil.VerifyMember(e2, def, defs, warnings);
                            if (membernames.contains(membername2)) {
                                throw new RobotRaconteurWeb.ServiceDefinitionException("Object \"" + (obj.Name || "") + "\" in service definition \"" + (def.Name || "") + "\" contains multiple members named \"" + (membername2 || "") + "\"");
                            }
                            membernames.add(membername2);
                        }
                    } finally {
                        if (Bridge.is($t2, System.IDisposable)) {
                            $t2.System$IDisposable$Dispose();
                        }
                    }

                    var r = RobotRaconteurWeb.ServiceDefinitionUtil.get_implements(obj, def, defs);

                    $t3 = Bridge.getEnumerator(r.implements);
                    try {
                        while ($t3.moveNext()) {
                            var e3 = $t3.Current;
                            $t4 = Bridge.getEnumerator(e3.obj.Members.Values);
                            try {
                                while ($t4.moveNext()) {
                                    var ee = $t4.Current;
                                    var m2 = { };
                                    if (!obj.Members.tryGetValue(ee.Name, m2)) {
                                        throw new RobotRaconteurWeb.ServiceDefinitionException("Object \"" + (obj.Name || "") + "\" in service definition \"" + (def.Name || "") + "\" does not implement required member \"" + (ee.Name || "") + "\"");
                                    }


                                    if (!RobotRaconteurWeb.ServiceDefinitionUtil.CompareMember(m2.v, ee)) {
                                        throw new RobotRaconteurWeb.ServiceDefinitionException("Member \"" + (ee.Name || "") + "\" in object \"" + (obj.Name || "") + "\" in service definition \"" + (def.Name || "") + "\" does not match implemented member " + (Bridge.toString(m2.v) || ""));
                                    }
                                }
                            } finally {
                                if (Bridge.is($t4, System.IDisposable)) {
                                    $t4.System$IDisposable$Dispose();
                                }
                            }

                        }
                    } finally {
                        if (Bridge.is($t3, System.IDisposable)) {
                            $t3.System$IDisposable$Dispose();
                        }
                    }

                },
                VerifyStructure_check_recursion: function (strut, names, entry_type) {
                    var $t;
                    if (strut.EntryType !== entry_type && strut.EntryType !== RobotRaconteurWeb.DataTypes.namedarray_t) {
                        throw new RobotRaconteurWeb.InternalErrorException("");
                    }

                    names.v.add(strut.Name);

                    $t = Bridge.getEnumerator(strut.Members.Values);
                    try {
                        while ($t.moveNext()) {
                            var e = $t.Current;
                            var p = Bridge.as(e, RobotRaconteurWeb.PropertyDefinition);
                            if (p == null) {
                                throw new RobotRaconteurWeb.InternalErrorException("");
                            }

                            if (p.Type.Type === RobotRaconteurWeb.DataTypes.namedtype_t) {
                                var nt_def = p.Type.ResolveNamedType();
                                var et_def = Bridge.as(nt_def, RobotRaconteurWeb.ServiceEntryDefinition);
                                if (et_def == null) {
                                    throw new RobotRaconteurWeb.InternalErrorException("");
                                }
                                if (et_def.EntryType !== entry_type && et_def.EntryType !== RobotRaconteurWeb.DataTypes.namedarray_t) {
                                    throw new RobotRaconteurWeb.InternalErrorException("");
                                }

                                if (names.v.contains(et_def.Name)) {
                                    throw new RobotRaconteurWeb.ServiceDefinitionException("Recursive namedarray/pod detected in " + (strut.Name || ""));
                                }

                                var names2 = { v : new (System.Collections.Generic.HashSet$1(System.String)).$ctor1(names.v) };
                                RobotRaconteurWeb.ServiceDefinitionUtil.VerifyStructure_check_recursion(et_def, names2, entry_type);
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                },
                VerifyStructure_common: function (strut, def, defs, warnings, entry_type) {
                    var $t, $t1, $t2;
                    if (strut.EntryType !== entry_type) {
                        throw new RobotRaconteurWeb.ServiceDefinitionException("Invalid EntryType in " + (strut.Name || ""));
                    }

                    RobotRaconteurWeb.ServiceDefinitionUtil.VerifyName(strut.Name, def);
                    var membernames = new (System.Collections.Generic.List$1(System.String)).ctor();

                    $t = Bridge.getEnumerator(strut.Options);
                    try {
                        while ($t.moveNext()) {
                            var e = $t.Current;
                            var s1 = System.String.split(e, null, null, 1);
                            if (Bridge.referenceEquals(s1[System.Array.index(0, s1)], "constant")) {
                                var membername = RobotRaconteurWeb.ServiceDefinitionUtil.VerifyConstant$1(e, def);
                                if (membernames.contains(membername)) {
                                    throw new RobotRaconteurWeb.ServiceDefinitionException("Structure \"" + (strut.Name || "") + "\" in service definition \"" + (def.Name || "") + "\" contains multiple members named \"" + (membername || "") + "\"");
                                }
                                membernames.add(membername);
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }

                    $t1 = Bridge.getEnumerator(strut.Constants.Values);
                    try {
                        while ($t1.moveNext()) {
                            var e1 = $t1.Current;
                            var membername1 = RobotRaconteurWeb.ServiceDefinitionUtil.VerifyConstant(e1, def, strut.Constants);
                            if (membernames.contains(membername1)) {
                                throw new RobotRaconteurWeb.ServiceDefinitionException("Struct \"" + (strut.Name || "") + "\" in service definition \"" + (def.Name || "") + "\" contains multiple members named \"" + (membername1 || "") + "\"");
                            }
                            membernames.add(membername1);
                        }
                    } finally {
                        if (Bridge.is($t1, System.IDisposable)) {
                            $t1.System$IDisposable$Dispose();
                        }
                    }

                    var namedarray_element_type = RobotRaconteurWeb.DataTypes.void_t;

                    $t2 = Bridge.getEnumerator(strut.Members.Values);
                    try {
                        while ($t2.moveNext()) {
                            var e2 = $t2.Current;
                            var p = Bridge.as(e2, RobotRaconteurWeb.PropertyDefinition);
                            if (p == null) {
                                throw new RobotRaconteurWeb.ServiceDefinitionException("Structure \"" + (strut.Name || "") + "\" can only contain fields in service definition \"" + (def.Name || "") + "\"");
                            }

                            var membername2 = RobotRaconteurWeb.ServiceDefinitionUtil.VerifyMember(p, def, defs, warnings);

                            if (entry_type === RobotRaconteurWeb.DataTypes.pod_t) {
                                var t = p.Type;
                                if (!RobotRaconteurWeb.DataTypeUtil.IsNumber(t.Type) && t.Type !== RobotRaconteurWeb.DataTypes.namedtype_t) {
                                    throw new RobotRaconteurWeb.ServiceDefinitionException("Pods must only contain numeric, pod, and namedarray types");
                                }

                                if (t.Type === RobotRaconteurWeb.DataTypes.namedtype_t) {
                                    var tt = t.ResolveNamedType();
                                    if (tt.RRDataType !== RobotRaconteurWeb.DataTypes.pod_t && tt.RRDataType !== RobotRaconteurWeb.DataTypes.namedarray_t) {
                                        throw new RobotRaconteurWeb.ServiceDefinitionException("Pods must only contain numeric, custruct, pod types");
                                    }
                                }

                                if (t.ContainerType !== RobotRaconteurWeb.DataTypes_ContainerTypes.none) {
                                    throw new RobotRaconteurWeb.ServiceDefinitionException("Pods may not use containers");
                                }

                                if (t.ArrayLength.contains(0) || (t.ArrayType === RobotRaconteurWeb.DataTypes_ArrayTypes.multidimarray && t.ArrayLength.Count === 0)) {
                                    throw new RobotRaconteurWeb.ServiceDefinitionException("Pods must have fixed or finite length arrays");
                                }

                                var n = { v : new (System.Collections.Generic.HashSet$1(System.String)).ctor() };
                                RobotRaconteurWeb.ServiceDefinitionUtil.VerifyStructure_check_recursion(strut, n, RobotRaconteurWeb.DataTypes.pod_t);
                            }

                            if (entry_type === RobotRaconteurWeb.DataTypes.namedarray_t) {
                                var t1 = p.Type;
                                if (!RobotRaconteurWeb.DataTypeUtil.IsNumber(t1.Type) && t1.Type !== RobotRaconteurWeb.DataTypes.namedtype_t) {
                                    throw new RobotRaconteurWeb.ServiceDefinitionException("NamedArrays must only contain numeric and namedarray types");
                                }

                                if (t1.Type === RobotRaconteurWeb.DataTypes.namedtype_t) {
                                    var tt1 = t1.ResolveNamedType();
                                    if (tt1.RRDataType !== RobotRaconteurWeb.DataTypes.namedarray_t) {
                                        throw new RobotRaconteurWeb.ServiceDefinitionException("NamedArrays must only contain numeric and namedarray types");
                                    }
                                }

                                if (t1.ContainerType !== RobotRaconteurWeb.DataTypes_ContainerTypes.none) {
                                    throw new RobotRaconteurWeb.ServiceDefinitionException("NamedArrays may not use containers");
                                }

                                switch (t1.ArrayType) {
                                    case RobotRaconteurWeb.DataTypes_ArrayTypes.none: 
                                        break;
                                    case RobotRaconteurWeb.DataTypes_ArrayTypes.array: 
                                        if (t1.ArrayVarLength) {
                                            throw new RobotRaconteurWeb.ServiceDefinitionException("NamedArray fields must be scalars or fixed arrays");
                                        }
                                        break;
                                    default: 
                                        throw new RobotRaconteurWeb.ServiceDefinitionException("NamedArray fields must be scalars or fixed arrays");
                                }

                                RobotRaconteurWeb.ServiceDefinitionUtil.GetNamedArrayElementTypeAndCount(strut, defs);
                            }

                            if (membernames.contains(membername2)) {
                                throw new RobotRaconteurWeb.ServiceDefinitionException("Structure \"" + (strut.Name || "") + "\" in service definition \"" + (def.Name || "") + "\" contains multiple members named \"" + (membername2 || "") + "\"");
                            }
                            membernames.add(membername2);
                        }
                    } finally {
                        if (Bridge.is($t2, System.IDisposable)) {
                            $t2.System$IDisposable$Dispose();
                        }
                    }

                },
                VerifyStructure: function (strut, def, defs, warnings) {
                    RobotRaconteurWeb.ServiceDefinitionUtil.VerifyStructure_common(strut, def, defs, warnings, RobotRaconteurWeb.DataTypes.structure_t);
                },
                VerifyPod: function (strut, def, defs, warnings) {
                    RobotRaconteurWeb.ServiceDefinitionUtil.VerifyStructure_common(strut, def, defs, warnings, RobotRaconteurWeb.DataTypes.pod_t);
                },
                VerifyNamedArray: function (strut, def, defs, warnings) {
                    RobotRaconteurWeb.ServiceDefinitionUtil.VerifyStructure_common(strut, def, defs, warnings, RobotRaconteurWeb.DataTypes.namedarray_t);
                },
                get_imports: function (def, defs, rootdef) {
                    var $t;
                    if (rootdef === void 0) { rootdef = null; }
                    var out_ = new RobotRaconteurWeb.ServiceDefinitionUtil.rrimports();
                    out_.def = def;
                    if (def.Imports.Count === 0) {
                        return out_;
                    }

                    if (rootdef == null) {
                        rootdef = def;
                    }

                    $t = Bridge.getEnumerator(def.Imports);
                    try {
                        while ($t.moveNext()) {
                            var e = $t.Current;
                            var def2 = { };
                            if (!defs.tryGetValue(e, def2)) {
                                throw new RobotRaconteurWeb.ServiceDefinitionException("Service definition \"" + (e || "") + "\" not found.");
                            }
                            if (Bridge.referenceEquals(def2.v.Name, rootdef.Name)) {
                                throw new RobotRaconteurWeb.ServiceDefinitionException("Recursive imports between \"" + (def.Name || "") + "\" and \"" + (rootdef.Name || "") + "\"");
                            }
                            var imp2 = RobotRaconteurWeb.ServiceDefinitionUtil.get_imports(def2.v, defs, rootdef);
                            out_.imported.add(imp2);
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }

                    return out_;
                },
                VerifyImports: function (def, defs) {
                    var c = RobotRaconteurWeb.ServiceDefinitionUtil.get_imports(def, defs);
                },
                VerifyServiceDefinitions$1: function (def, warnings) {
                    var $t, $t1, $t2, $t3, $t4, $t5, $t6, $t7, $t8, $t9, $t10, $t11, $t12;
                    $t = Bridge.getEnumerator(def.Values);
                    try {
                        while ($t.moveNext()) {
                            var e = $t.Current;
                            e.CheckVersion();

                            if (!System.String.startsWith(e.Name, "RobotRaconteurTestService") && !System.String.startsWith(e.Name, "RobotRaconteurServiceIndex")) {
                                RobotRaconteurWeb.ServiceDefinitionUtil.VerifyName(e.Name, e, true);
                            }

                            if (System.String.endsWith(e.Name, "_signed")) {
                                throw new RobotRaconteurWeb.ServiceDefinitionException("Service definition names ending with \"_signed\" are reserved");
                            }

                            RobotRaconteurWeb.ServiceDefinitionUtil.VerifyImports(e, def);

                            var names = new (System.Collections.Generic.HashSet$1(System.String)).ctor();
                            $t1 = Bridge.getEnumerator(e.Options);
                            try {
                                while ($t1.moveNext()) {
                                    var ee = $t1.Current;
                                    var s1 = System.String.split(ee, null, null, 1);
                                    if (Bridge.referenceEquals(s1[System.Array.index(0, s1)], "constant")) {
                                        var name = RobotRaconteurWeb.ServiceDefinitionUtil.VerifyConstant$1(ee, e);
                                        if (names.contains(name)) {
                                            throw new RobotRaconteurWeb.ServiceDefinitionException("Service definition \"" + (e.Name || "") + "\" contains multiple high level names \"" + (name || "") + "\"");
                                        }
                                        names.add(name);
                                    }
                                }
                            } finally {
                                if (Bridge.is($t1, System.IDisposable)) {
                                    $t1.System$IDisposable$Dispose();
                                }
                            }

                            if (e.Constants.Count !== 0) {
                                RobotRaconteurWeb.ServiceDefinitionUtil.VerifyVersionSupport(e, 0, 9, "Service definition standard version 0.9 or greater required for \"constant\" keyword");
                            }

                            $t2 = Bridge.getEnumerator(e.Constants.Values);
                            try {
                                while ($t2.moveNext()) {
                                    var ee1 = $t2.Current;
                                    var name1 = RobotRaconteurWeb.ServiceDefinitionUtil.VerifyConstant(ee1, e, e.Constants);
                                    if (names.contains(name1)) {
                                        throw new RobotRaconteurWeb.ServiceDefinitionException("Service definition \"" + (e.Name || "") + "\" contains multiple high level names \"" + (name1 || "") + "\"");
                                    }
                                    names.add(name1);
                                }
                            } finally {
                                if (Bridge.is($t2, System.IDisposable)) {
                                    $t2.System$IDisposable$Dispose();
                                }
                            }

                            $t3 = Bridge.getEnumerator(e.Exceptions);
                            try {
                                while ($t3.moveNext()) {
                                    var ee2 = $t3.Current;
                                    RobotRaconteurWeb.ServiceDefinitionUtil.VerifyName(ee2, e);
                                    var name2 = ee2;
                                    if (names.contains(name2)) {
                                        throw new RobotRaconteurWeb.ServiceDefinitionException("Service definition \"" + (e.Name || "") + "\" contains multiple high level names \"" + (name2 || "") + "\"");
                                    }
                                    names.add(name2);
                                }
                            } finally {
                                if (Bridge.is($t3, System.IDisposable)) {
                                    $t3.System$IDisposable$Dispose();
                                }
                            }

                            var importeddefs = new (System.Collections.Generic.Dictionary$2(System.String,RobotRaconteurWeb.ServiceDefinition)).ctor();
                            $t4 = Bridge.getEnumerator(e.Imports);
                            try {
                                while ($t4.moveNext()) {
                                    var ee3 = $t4.Current;
                                    $t5 = Bridge.getEnumerator(def.Values);
                                    try {
                                        while ($t5.moveNext()) {
                                            var ee2 = $t5.Current;
                                            if (Bridge.referenceEquals(ee3, ee2.Name)) {
                                                importeddefs.add(ee2.Name, ee2);
                                            }

                                        }
                                    } finally {
                                        if (Bridge.is($t5, System.IDisposable)) {
                                            $t5.System$IDisposable$Dispose();
                                        }
                                    }
                                }
                            } finally {
                                if (Bridge.is($t4, System.IDisposable)) {
                                    $t4.System$IDisposable$Dispose();
                                }
                            }

                            if (RobotRaconteurWeb.RobotRaconteurVersion.op_Explicit(e.StdVer)) {
                                $t6 = Bridge.getEnumerator(importeddefs.Values);
                                try {
                                    while ($t6.moveNext()) {
                                        var ee4 = $t6.Current;
                                        if (!RobotRaconteurWeb.RobotRaconteurVersion.op_Explicit(ee4.StdVer) || RobotRaconteurWeb.RobotRaconteurVersion.op_GreaterThan(ee4.StdVer.$clone(), e.StdVer.$clone())) {
                                            throw new RobotRaconteurWeb.ServiceDefinitionException("Imported service definition " + (ee4.Name || "") + " has a higher Service Definition standard version than " + (e.Name || ""));
                                        }
                                    }
                                } finally {
                                    if (Bridge.is($t6, System.IDisposable)) {
                                        $t6.System$IDisposable$Dispose();
                                    }
                                }
                            }

                            if (e.Using.Count > 0) {
                                RobotRaconteurWeb.ServiceDefinitionUtil.VerifyVersionSupport(e, 0, 9, "Service definition standard version 0.9 or greater required for \"using\" keyword");
                            }

                            $t7 = Bridge.getEnumerator(e.Using);
                            try {
                                while ($t7.moveNext()) {
                                    var ee5 = $t7.Current;
                                    var name3 = ee5.UnqualifiedName;
                                    if (names.contains(name3)) {
                                        throw new RobotRaconteurWeb.ServiceDefinitionException("Service definition \"" + (e.Name || "") + "\" contains multiple high level names \"" + (name3 || "") + "\"");
                                    }
                                    RobotRaconteurWeb.ServiceDefinitionUtil.VerifyUsing(ee5, e, importeddefs);
                                    names.add(name3);

                                }
                            } finally {
                                if (Bridge.is($t7, System.IDisposable)) {
                                    $t7.System$IDisposable$Dispose();
                                }
                            }

                            if (e.Enums.Count > 0) {
                                RobotRaconteurWeb.ServiceDefinitionUtil.VerifyVersionSupport(e, 0, 9, "Service definition standard version 0.9 or greater required for \"enum\" keyword");
                            }

                            $t8 = Bridge.getEnumerator(e.Enums.Values);
                            try {
                                while ($t8.moveNext()) {
                                    var ee6 = $t8.Current;
                                    RobotRaconteurWeb.ServiceDefinitionUtil.VerifyEnum(ee6, e);
                                    var name4 = ee6.Name;
                                    if (names.contains(name4)) {
                                        throw new RobotRaconteurWeb.ServiceDefinitionException("Service definition \"" + (e.Name || "") + "\" contains multiple high level names \"" + (name4 || "") + "\"");
                                    }
                                    names.add(name4);
                                }
                            } finally {
                                if (Bridge.is($t8, System.IDisposable)) {
                                    $t8.System$IDisposable$Dispose();
                                }
                            }

                            $t9 = Bridge.getEnumerator(e.Structures.Values);
                            try {
                                while ($t9.moveNext()) {
                                    var ee7 = $t9.Current;
                                    RobotRaconteurWeb.ServiceDefinitionUtil.VerifyStructure(ee7, e, importeddefs, warnings);

                                    var name5 = ee7.Name;
                                    if (names.contains(name5)) {
                                        throw new RobotRaconteurWeb.ServiceDefinitionException("Service definition \"" + (e.Name || "") + "\" contains multiple high level names \"" + (name5 || "") + "\"");
                                    }
                                    names.add(name5);
                                }
                            } finally {
                                if (Bridge.is($t9, System.IDisposable)) {
                                    $t9.System$IDisposable$Dispose();
                                }
                            }

                            $t10 = Bridge.getEnumerator(e.Pods.Values);
                            try {
                                while ($t10.moveNext()) {
                                    var ee8 = $t10.Current;
                                    RobotRaconteurWeb.ServiceDefinitionUtil.VerifyPod(ee8, e, importeddefs, warnings);

                                    var name6 = ee8.Name;
                                    if (names.contains(name6)) {
                                        throw new RobotRaconteurWeb.ServiceDefinitionException("Service definition \"" + (e.Name || "") + "\" contains multiple high level names \"" + (name6 || "") + "\"");
                                    }
                                    names.add(name6);
                                }
                            } finally {
                                if (Bridge.is($t10, System.IDisposable)) {
                                    $t10.System$IDisposable$Dispose();
                                }
                            }

                            $t11 = Bridge.getEnumerator(e.NamedArrays.Values);
                            try {
                                while ($t11.moveNext()) {
                                    var ee9 = $t11.Current;
                                    RobotRaconteurWeb.ServiceDefinitionUtil.VerifyNamedArray(ee9, e, importeddefs, warnings);

                                    var name7 = ee9.Name;
                                    if (names.contains(name7)) {
                                        throw new RobotRaconteurWeb.ServiceDefinitionException("Service definition \"" + (e.Name || "") + "\" contains multiple high level names \"" + (name7 || "") + "\"");
                                    }
                                    names.add(name7);
                                }
                            } finally {
                                if (Bridge.is($t11, System.IDisposable)) {
                                    $t11.System$IDisposable$Dispose();
                                }
                            }

                            $t12 = Bridge.getEnumerator(e.Objects.Values);
                            try {
                                while ($t12.moveNext()) {
                                    var ee10 = $t12.Current;
                                    RobotRaconteurWeb.ServiceDefinitionUtil.VerifyObject(ee10, e, importeddefs, warnings);

                                    var name8 = ee10.Name;
                                    if (names.contains(name8)) {
                                        throw new RobotRaconteurWeb.ServiceDefinitionException("Service definition \"" + (e.Name || "") + "\" contains multiple high level names \"" + (name8 || "") + "\"");
                                    }
                                    names.add(name8);

                                }
                            } finally {
                                if (Bridge.is($t12, System.IDisposable)) {
                                    $t12.System$IDisposable$Dispose();
                                }
                            }

                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }

                },
                VerifyServiceDefinitions: function (def) {
                    var warnings = { v : new (System.Collections.Generic.List$1(System.Exception)).ctor() };
                    RobotRaconteurWeb.ServiceDefinitionUtil.VerifyServiceDefinitions$1(def, warnings);
                },
                CompareConstantDefinition: function (service1, d1, service2, d2) {
                    if (!Bridge.referenceEquals(d1.Name, d2.Name)) {
                        return false;
                    }
                    if (!RobotRaconteurWeb.ServiceDefinitionUtil.CompareTypeDefinition(service1, d1.Type, service2, d2.Type)) {
                        return false;
                    }
                    if (!Bridge.referenceEquals(d1.Value.trim(), d2.Value.trim())) {
                        return false;
                    }
                    return true;
                },
                CompareServiceEntryDefinition: function (service1, d1, service2, d2) {
                    var $t, $t1;
                    if (!Bridge.referenceEquals(d1.Name, d2.Name)) {
                        return false;
                    }
                    if (d1.EntryType !== d2.EntryType) {
                        return false;
                    }
                    if (!System.Linq.Enumerable.from(d1.Implements, System.String).sequenceEqual(d2.Implements)) {
                        return false;
                    }
                    if (!System.Linq.Enumerable.from(d1.Options, System.String).sequenceEqual(d2.Options)) {
                        return false;
                    }
                    if (d1.Constants.Count !== d2.Constants.Count) {
                        return false;
                    }
                    var constant_keys = ($t = System.String, System.Linq.Enumerable.from(d1.Constants.Keys, $t).ToArray($t));
                    for (var i = 0; i < d1.Constants.Count; i = (i + 1) | 0) {
                        if (!RobotRaconteurWeb.ServiceDefinitionUtil.CompareConstantDefinition(service1, d1.Constants.getItem(constant_keys[System.Array.index(i, constant_keys)]), service2, d2.Constants.getItem(constant_keys[System.Array.index(i, constant_keys)]))) {
                            return false;
                        }
                    }

                    if (d1.Members.Count !== d2.Members.Count) {
                        return false;
                    }
                    var member_keys = ($t1 = System.String, System.Linq.Enumerable.from(d1.Members.Keys, $t1).ToArray($t1));
                    for (var i1 = 0; i1 < d1.Members.Count; i1 = (i1 + 1) | 0) {
                        if (!RobotRaconteurWeb.ServiceDefinitionUtil.CompareMember(d1.Members.getItem(member_keys[System.Array.index(i1, member_keys)]), d2.Members.getItem(member_keys[System.Array.index(i1, member_keys)]))) {
                            return false;
                        }
                    }
                    return true;
                },
                CompareUsingDefinition: function (u1, u2) {
                    if (!Bridge.referenceEquals(u1.QualifiedName, u2.QualifiedName)) {
                        return false;
                    }
                    if (!Bridge.referenceEquals(u1.UnqualifiedName, u2.UnqualifiedName)) {
                        return false;
                    }
                    return true;
                },
                CompareEnumDefinition: function (enum1, enum2) {
                    if (!Bridge.referenceEquals(enum1.Name, enum2.Name)) {
                        return false;
                    }
                    if (enum1.Values.Count !== enum2.Values.Count) {
                        return false;
                    }
                    for (var i = 0; i < enum1.Values.Count; i = (i + 1) | 0) {
                        if (!Bridge.referenceEquals(enum1.Values.getItem(i).Name, enum2.Values.getItem(i).Name)) {
                            return false;
                        }
                        if (enum1.Values.getItem(i).Value !== enum2.Values.getItem(i).Value) {
                            return false;
                        }
                        if (enum1.Values.getItem(i).ImplicitValue !== enum2.Values.getItem(i).ImplicitValue) {
                            return false;
                        }
                        if (enum1.Values.getItem(i).HexValue !== enum2.Values.getItem(i).HexValue) {
                            return false;
                        }
                    }
                    return true;
                },
                CompareServiceDefinitions: function (service1, service2) {
                    var $t, $t1, $t2, $t3, $t4;
                    if (!Bridge.referenceEquals(service1.Name, service2.Name)) {
                        return false;
                    }
                    if (!System.Linq.Enumerable.from(service1.Imports, System.String).sequenceEqual(service2.Imports)) {
                        return false;
                    }
                    if (!System.Linq.Enumerable.from(service1.Options, System.String).sequenceEqual(service2.Options)) {
                        return false;
                    }

                    if (service1.Using.Count !== service2.Using.Count) {
                        return false;
                    }
                    for (var i = 0; i < service1.Using.Count; i = (i + 1) | 0) {
                        if (!RobotRaconteurWeb.ServiceDefinitionUtil.CompareUsingDefinition(service1.Using.getItem(i), service2.Using.getItem(i))) {
                            return false;
                        }
                    }

                    if (service1.Constants.Count !== service2.Constants.Count) {
                        return false;
                    }
                    $t = Bridge.getEnumerator(service1.Constants.Keys);
                    try {
                        while ($t.moveNext()) {
                            var i1 = $t.Current;
                            if (!RobotRaconteurWeb.ServiceDefinitionUtil.CompareConstantDefinition(service1, service1.Constants.getItem(i1), service2, service2.Constants.getItem(i1))) {
                                return false;
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }

                    if (service1.Enums.Count !== service2.Enums.Count) {
                        return false;
                    }
                    $t1 = Bridge.getEnumerator(service1.Enums.Keys);
                    try {
                        while ($t1.moveNext()) {
                            var i2 = $t1.Current;
                            if (!RobotRaconteurWeb.ServiceDefinitionUtil.CompareEnumDefinition(service1.Enums.getItem(i2), service2.Enums.getItem(i2))) {
                                return false;
                            }
                        }
                    } finally {
                        if (Bridge.is($t1, System.IDisposable)) {
                            $t1.System$IDisposable$Dispose();
                        }
                    }

                    if (RobotRaconteurWeb.RobotRaconteurVersion.op_Inequality(service1.StdVer.$clone(), service2.StdVer.$clone())) {
                        return false;
                    }

                    if (service1.Objects.Count !== service2.Objects.Count) {
                        return false;
                    }
                    $t2 = Bridge.getEnumerator(service1.Objects.Keys);
                    try {
                        while ($t2.moveNext()) {
                            var i3 = $t2.Current;
                            if (!RobotRaconteurWeb.ServiceDefinitionUtil.CompareServiceEntryDefinition(service1, service1.Objects.getItem(i3), service2, service2.Objects.getItem(i3))) {
                                return false;
                            }
                        }
                    } finally {
                        if (Bridge.is($t2, System.IDisposable)) {
                            $t2.System$IDisposable$Dispose();
                        }
                    }

                    if (service1.Structures.Count !== service2.Structures.Count) {
                        return false;
                    }
                    $t3 = Bridge.getEnumerator(service1.Structures.Keys);
                    try {
                        while ($t3.moveNext()) {
                            var i4 = $t3.Current;
                            if (!RobotRaconteurWeb.ServiceDefinitionUtil.CompareServiceEntryDefinition(service1, service1.Structures.getItem(i4), service2, service2.Structures.getItem(i4))) {
                                return false;
                            }
                        }
                    } finally {
                        if (Bridge.is($t3, System.IDisposable)) {
                            $t3.System$IDisposable$Dispose();
                        }
                    }

                    if (service1.Pods.Count !== service2.Pods.Count) {
                        return false;
                    }
                    $t4 = Bridge.getEnumerator(service1.Pods.Keys);
                    try {
                        while ($t4.moveNext()) {
                            var i5 = $t4.Current;
                            if (!RobotRaconteurWeb.ServiceDefinitionUtil.CompareServiceEntryDefinition(service1, service1.Pods.getItem(i5), service2, service2.Pods.getItem(i5))) {
                                return false;
                            }
                        }
                    } finally {
                        if (Bridge.is($t4, System.IDisposable)) {
                            $t4.System$IDisposable$Dispose();
                        }
                    }

                    return true;
                },
                EstimatePodPackedElementSize: function (def, other_defs, node, client) {
                    var $t;
                    if (other_defs === void 0) { other_defs = null; }
                    if (node === void 0) { node = null; }
                    if (client === void 0) { client = null; }
                    var s = 16;
                    s = (s + (RobotRaconteurWeb.ArrayBinaryWriter.GetStringByteCount8(def.Name))) | 0;
                    $t = Bridge.getEnumerator(def.Members.Values);
                    try {
                        while ($t.moveNext()) {
                            var m = $t.Current;
                            var p = Bridge.as(m, RobotRaconteurWeb.PropertyDefinition);
                            if (RobotRaconteurWeb.DataTypeUtil.IsNumber(p.Type.Type)) {
                                s = (s + 16) | 0;
                                s = (s + (RobotRaconteurWeb.ArrayBinaryWriter.GetStringByteCount8(p.Name))) | 0;
                                var array_count;
                                if (p.Type.ArrayType === RobotRaconteurWeb.DataTypes_ArrayTypes.none) {
                                    array_count = 1;
                                } else {
                                    array_count = System.Linq.Enumerable.from(p.Type.ArrayLength, System.Int32).aggregate(1, function (x, y) {
                                            return Bridge.Int.mul(x, y);
                                        });
                                    ;
                                }
                                s = (s + (Bridge.Int.mul(((RobotRaconteurWeb.DataTypeUtil.size(p.Type.Type)) | 0), array_count))) | 0;
                            } else {
                                var nt = Bridge.cast((p.Type.ResolveNamedType(other_defs, node, client)), RobotRaconteurWeb.ServiceEntryDefinition);
                                s = (s + 16) | 0;
                                s = (s + (RobotRaconteurWeb.ArrayBinaryWriter.GetStringByteCount8(p.Name))) | 0;
                                s = (s + (RobotRaconteurWeb.ArrayBinaryWriter.GetStringByteCount8(nt.ResolveQualifiedName()))) | 0;
                                var array_count1;
                                if (p.Type.ArrayType === RobotRaconteurWeb.DataTypes_ArrayTypes.none) {
                                    array_count1 = 1;
                                } else {
                                    array_count1 = System.Linq.Enumerable.from(p.Type.ArrayLength, System.Int32).aggregate(1, function (x, y) {
                                            return Bridge.Int.mul(x, y);
                                        });
                                }
                                s = (s + (Bridge.Int.mul(RobotRaconteurWeb.ServiceDefinitionUtil.EstimatePodPackedElementSize(nt, other_defs, node, client), array_count1))) | 0;
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                    return s;
                },
                GetNamedArrayElementTypeAndCount: function (def, other_defs, node, client, n) {
                    var $t;
                    if (other_defs === void 0) { other_defs = null; }
                    if (node === void 0) { node = null; }
                    if (client === void 0) { client = null; }
                    if (n === void 0) { n = null; }
                    if (n == null) {
                        n = new (System.Collections.Generic.HashSet$1(System.String)).ctor();
                    }

                    if (def.EntryType !== RobotRaconteurWeb.DataTypes.namedarray_t) {
                        throw new System.InvalidOperationException.$ctor1("Argument must be an namedarray");
                    }

                    n.add(def.Name);

                    var element_type = RobotRaconteurWeb.DataTypes.void_t;
                    var element_count = 0;

                    if (def.Members.Count === 0) {
                        throw new RobotRaconteurWeb.ServiceDefinitionException("namedarray must not be empty");
                    }

                    $t = Bridge.getEnumerator(def.Members.Values);
                    try {
                        while ($t.moveNext()) {
                            var e = $t.Current;
                            var field_element_count = 1;

                            var p = Bridge.as(e, RobotRaconteurWeb.PropertyDefinition);
                            if (p == null) {
                                throw new RobotRaconteurWeb.ServiceDefinitionException("Invalid member type in namedarray: " + (def.Name || ""));
                            }

                            if (p.Type.ContainerType !== RobotRaconteurWeb.DataTypes_ContainerTypes.none) {
                                throw new RobotRaconteurWeb.ServiceDefinitionException("namedarray must not contain containers: " + (def.Name || ""));
                            }

                            if (p.Type.ArrayType !== RobotRaconteurWeb.DataTypes_ArrayTypes.none && p.Type.ArrayVarLength) {
                                throw new RobotRaconteurWeb.ServiceDefinitionException("namedarray must not contain variable length arrays: " + (def.Name || ""));
                            }

                            if (p.Type.ArrayType !== RobotRaconteurWeb.DataTypes_ArrayTypes.none) {
                                field_element_count = System.Linq.Enumerable.from(p.Type.ArrayLength, System.Int32).aggregate(1, function (x, y) {
                                        return Bridge.Int.mul(x, y);
                                    });
                            }

                            if (RobotRaconteurWeb.DataTypeUtil.IsNumber(p.Type.Type)) {
                                if (element_type === RobotRaconteurWeb.DataTypes.void_t) {
                                    element_type = p.Type.Type;
                                } else {
                                    if (element_type !== p.Type.Type) {
                                        throw new RobotRaconteurWeb.ServiceDefinitionException("namedarray must contain same numeric type: " + (def.Name || ""));
                                    }
                                }

                                element_count = (element_count + field_element_count) | 0;
                            } else if (p.Type.Type === RobotRaconteurWeb.DataTypes.namedtype_t) {
                                var nt_def = p.Type.ResolveNamedType();
                                var et_def = Bridge.as(nt_def, RobotRaconteurWeb.ServiceEntryDefinition);
                                if (et_def == null) {
                                    throw new RobotRaconteurWeb.InternalErrorException("");
                                }
                                if (et_def.EntryType !== RobotRaconteurWeb.DataTypes.namedarray_t) {
                                    throw new RobotRaconteurWeb.InternalErrorException("");
                                }

                                if (n.contains(et_def.Name)) {
                                    throw new RobotRaconteurWeb.ServiceDefinitionException("Recursive namedarray detected in " + (def.Name || ""));
                                }

                                var n2 = new (System.Collections.Generic.HashSet$1(System.String)).$ctor1(n);
                                var v = RobotRaconteurWeb.ServiceDefinitionUtil.GetNamedArrayElementTypeAndCount(et_def, other_defs, node, client, n2);
                                if (element_type === RobotRaconteurWeb.DataTypes.void_t) {
                                    element_type = v.Item1;
                                } else {
                                    if (element_type !== v.Item1) {
                                        throw new RobotRaconteurWeb.ServiceDefinitionException("namedarray must contain same numeric type: " + (def.Name || ""));
                                    }
                                }

                                element_count = (element_count + (Bridge.Int.mul(field_element_count, v.Item2))) | 0;

                            } else {
                                throw new RobotRaconteurWeb.ServiceDefinitionException("Invalid namedarray field in " + (def.Name || ""));
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }

                    return { Item1: element_type, Item2: element_count };

                },
                FindParentInterface: function (objtype) {
                    var interfaces = new (System.Collections.Generic.List$1(System.Type)).$ctor1(Bridge.Reflection.getInterfaces(objtype));
                    interfaces.RemoveAll(function (x) {
                        return (Bridge.Reflection.getAttributes(x, RobotRaconteurWeb.RobotRaconteurServiceObjectInterface, true).length === 0);
                    });

                    if (interfaces.Count === 0) {
                        throw new RobotRaconteurWeb.DataTypeException("Object not a Robot Raconteur type");
                    }
                    if (interfaces.Count === 1) {
                        return interfaces.getItem(0);
                    }

                    var parentinterfaces = new (System.Collections.Generic.List$1(System.Type)).ctor();

                    for (var i = 0; i < interfaces.Count; i = (i + 1) | 0) {
                        var parent = true;
                        for (var j = 0; j < interfaces.Count; j = (j + 1) | 0) {
                            if (i !== j) {
                                if (System.Linq.Enumerable.from(Bridge.Reflection.getInterfaces(interfaces.getItem(j)), System.Type).count(function (x) {
                                        return Bridge.referenceEquals(x, interfaces.getItem(i));
                                    }) !== 0) {
                                    parent = false;
                                }
                            }
                        }

                        if (parent) {
                            parentinterfaces.add(interfaces.getItem(i));
                        }

                    }

                    if (parentinterfaces.Count !== 1) {
                        throw new RobotRaconteurWeb.DataTypeException("Robot Raconteur types can only directly inheret one Robot Raconteur interface type");
                    }

                    return parentinterfaces.getItem(0);

                },
                FindObjectRRType: function (obj) {
                    var $t;
                    var i = RobotRaconteurWeb.ServiceDefinitionUtil.FindParentInterface(Bridge.getType(obj));
                    return Bridge.cast(($t = Bridge.Reflection.getAttributes(i, RobotRaconteurWeb.RobotRaconteurServiceObjectInterface, false))[System.Array.index(0, $t)], RobotRaconteurWeb.RobotRaconteurServiceObjectInterface).RRType;
                },
                FindStructRRType: function (s) {
                    if (Bridge.isArray(null, s)) {
                        s = (s.$elementType || null);
                    }

                    var t1 = Bridge.Reflection.getAttributes(s, RobotRaconteurWeb.RobotRaconteurServiceStruct, true);
                    if (t1.length > 0) {
                        return Bridge.cast(t1[System.Array.index(0, t1)], RobotRaconteurWeb.RobotRaconteurServiceStruct).RRType;
                    }

                    var t2 = Bridge.Reflection.getAttributes(s, RobotRaconteurWeb.RobotRaconteurNamedArrayElementTypeAndCount, true);
                    if (t2.length > 0) {
                        return Bridge.cast(t2[System.Array.index(0, t2)], RobotRaconteurWeb.RobotRaconteurNamedArrayElementTypeAndCount).RRType;
                    }

                    var t3 = Bridge.Reflection.getAttributes(s, RobotRaconteurWeb.RobotRaconteurServicePod, true);
                    if (t3.length > 0) {
                        return Bridge.cast(t3[System.Array.index(0, t3)], RobotRaconteurWeb.RobotRaconteurServicePod).RRType;
                    }

                    throw new System.ArgumentException.$ctor1("Invalid Robot Raconteur structure");
                }
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.ServiceDefinitionUtil.rrimplements", {
        $kind: "nested class",
        fields: {
            name: null,
            obj: null,
            implements: null
        },
        ctors: {
            init: function () {
                this.implements = new (System.Collections.Generic.List$1(RobotRaconteurWeb.ServiceDefinitionUtil.rrimplements)).ctor();
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.ServiceDefinitionUtil.rrimports", {
        $kind: "nested class",
        fields: {
            def: null,
            imported: null
        },
        ctors: {
            init: function () {
                this.imported = new (System.Collections.Generic.List$1(RobotRaconteurWeb.ServiceDefinitionUtil.rrimports)).ctor();
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.ServiceInfo2", {
        fields: {
            Name: null,
            RootObjectType: null,
            RootObjectImplements: null,
            ConnectionURL: null,
            Attributes: null,
            NodeID: null,
            NodeName: null
        },
        ctors: {
            ctor: function () {
                this.$initialize();
            },
            $ctor1: function (info, ninfo) {
                var $t, $t1;
                this.$initialize();
                this.Name = info.Name;
                this.RootObjectType = info.RootObjectType;
                this.RootObjectImplements = ($t = System.String, System.Linq.Enumerable.from(info.RootObjectImplements.Values, $t).ToArray($t));
                this.ConnectionURL = ($t1 = System.String, System.Linq.Enumerable.from(info.ConnectionURL.Values, $t1).ToArray($t1));
                this.Attributes = info.Attributes;
                this.NodeID = new RobotRaconteurWeb.NodeID.ctor(ninfo.NodeID);
                this.NodeName = ninfo.NodeName;

            }
        }
    });

    Bridge.define("RobotRaconteurWeb.ServiceSecurityPolicy", {
        fields: {
            Authenticator: null,
            Policies: null
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                this.Authenticator = null;
                this.Policies = null;
            },
            $ctor1: function (Authenticator, Policies) {
                this.$initialize();
                this.Authenticator = Authenticator;
                this.Policies = Policies;
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.ServiceSkelDynamic", {
        $kind: "interface"
    });

    Bridge.define("RobotRaconteurWeb.TimerEvent", {
        $kind: "struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new RobotRaconteurWeb.TimerEvent(); }
            }
        },
        fields: {
            stopped: false,
            last_expected: null,
            last_real: null,
            current_expected: null,
            current_real: null
        },
        ctors: {
            init: function () {
                this.last_expected = System.DateTime.getDefaultValue();
                this.last_real = System.DateTime.getDefaultValue();
                this.current_expected = System.DateTime.getDefaultValue();
                this.current_real = System.DateTime.getDefaultValue();
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = Bridge.addHash([3403948852, this.stopped, this.last_expected, this.last_real, this.current_expected, this.current_real]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, RobotRaconteurWeb.TimerEvent)) {
                    return false;
                }
                return Bridge.equals(this.stopped, o.stopped) && Bridge.equals(this.last_expected, o.last_expected) && Bridge.equals(this.last_real, o.last_real) && Bridge.equals(this.current_expected, o.current_expected) && Bridge.equals(this.current_real, o.current_real);
            },
            $clone: function (to) {
                var s = to || new RobotRaconteurWeb.TimerEvent();
                s.stopped = this.stopped;
                s.last_expected = this.last_expected;
                s.last_real = this.last_real;
                s.current_expected = this.current_expected;
                s.current_real = this.current_real;
                return s;
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.TimeSpec", {
        statics: {
            fields: {
                start_ticks: System.Int64(0),
                ticks_per_second: System.Int64(0),
                start_seconds: System.Int64(0),
                start_nanoseconds: 0,
                start_time: null,
                started: false,
                iswindows: false,
                start_lock: null
            },
            props: {
                Now: {
                    get: function () {
                        var t = new RobotRaconteurWeb.TimeSpec.ctor();
                        t.timespec_now();
                        return t;
                    }
                }
            },
            ctors: {
                init: function () {
                    this.start_time = System.DateTime.getDefaultValue();
                    this.started = false;
                    this.iswindows = false;
                    this.start_lock = { };
                }
            },
            methods: {
                QueryPerformanceCounter: function (lpPerformanceCount) {
                    lpPerformanceCount.v = System.Diagnostics.Stopwatch.getTimestamp();
                    return true;
                },
                QueryPerformanceFrequency: function (lpFrequency) {
                    lpFrequency.v = System.Diagnostics.Stopwatch.frequency;
                    return true;
                },
                op_Equality: function (t1, t2) {
                    if (t1 == null && t2 == null) {
                        return true;
                    }
                    if (t1 == null || t2 == null) {
                        return false;
                    }

                    return (t1.seconds.equals(t2.seconds) && t1.nanoseconds === t2.nanoseconds);
                },
                op_Inequality: function (t1, t2) {
                    return !(RobotRaconteurWeb.TimeSpec.op_Equality(t1, t2));
                },
                op_Subtraction: function (t1, t2) {
                    return new RobotRaconteurWeb.TimeSpec.$ctor1(t1.seconds.sub(t2.seconds), ((t1.nanoseconds - t2.nanoseconds) | 0));
                },
                op_Addition: function (t1, t2) {
                    return new RobotRaconteurWeb.TimeSpec.$ctor1(t1.seconds.add(t2.seconds), ((t1.nanoseconds + t2.nanoseconds) | 0));
                },
                op_GreaterThan: function (t1, t2) {
                    var diff = RobotRaconteurWeb.TimeSpec.op_Subtraction(t1, t2);
                    if (diff.seconds.equals(System.Int64(0))) {
                        return diff.nanoseconds > 0;
                    }
                    return diff.seconds.gt(System.Int64(0));
                },
                op_GreaterThanOrEqual: function (t1, t2) {
                    if (RobotRaconteurWeb.TimeSpec.op_Equality(t1, t2)) {
                        return true;
                    }
                    return RobotRaconteurWeb.TimeSpec.op_GreaterThan(t1, t2);
                },
                op_LessThan: function (t1, t2) {
                    return RobotRaconteurWeb.TimeSpec.op_GreaterThanOrEqual(t2, t1);
                },
                op_LessThanOrEqual: function (t1, t2) {
                    return RobotRaconteurWeb.TimeSpec.op_GreaterThan(t2, t1);
                }
            }
        },
        fields: {
            seconds: System.Int64(0),
            nanoseconds: 0
        },
        ctors: {
            $ctor1: function (seconds, nanoseconds) {
                this.$initialize();
                this.seconds = seconds;
                this.nanoseconds = nanoseconds;

                RobotRaconteurWeb.TimeSpec.start_lock;
                {
                    if (!RobotRaconteurWeb.TimeSpec.started) {
                        this.start();
                    }
                }

                this.cleanup_nanosecs();
            },
            ctor: function () {
                this.$initialize();
                if (!RobotRaconteurWeb.TimeSpec.started) {
                    this.start();
                }
                this.seconds = System.Int64(0);
                this.nanoseconds = 0;
            }
        },
        methods: {
            timespec_now: function () {
                this.seconds = System.Int64(0);
                this.nanoseconds = 0;

                RobotRaconteurWeb.TimeSpec.start_lock;
                {
                    if (!RobotRaconteurWeb.TimeSpec.started) {
                        this.start();
                        this.seconds = RobotRaconteurWeb.TimeSpec.start_seconds;
                        this.nanoseconds = RobotRaconteurWeb.TimeSpec.start_nanoseconds;
                    } else {
                        if (RobotRaconteurWeb.TimeSpec.iswindows) {
                            var ticks = { };
                            RobotRaconteurWeb.TimeSpec.QueryPerformanceCounter(ticks);

                            var diff_ticks = ticks.v.sub(RobotRaconteurWeb.TimeSpec.start_ticks);
                            var diff_secs = diff_ticks.div(RobotRaconteurWeb.TimeSpec.ticks_per_second);

                            var diff_nanosecs = ((diff_ticks.mul(System.Int64(1000000000))).div(RobotRaconteurWeb.TimeSpec.ticks_per_second)).mod(System.Int64(1000000000));



                            this.seconds = diff_secs.add(RobotRaconteurWeb.TimeSpec.start_seconds);
                            this.nanoseconds = (System.Int64.clip32(diff_nanosecs) + RobotRaconteurWeb.TimeSpec.start_nanoseconds) | 0;
                        } else {
                            var t = System.DateTime.subdd(System.DateTime.toUniversalTime(System.DateTime.getUtcNow()), (System.DateTime.create(1970, 1, 1, 0, 0, 0, 0, 1)));
                            this.seconds = Bridge.Int.clip64(Bridge.Math.round(t.getTotalSeconds(), 0, 6));
                            this.nanoseconds = Bridge.Int.clip32(Bridge.Math.IEEERemainder(t.getTotalMilliseconds() * 1000000.0, 1000000000.0));


                        }

                    }
                }

                this.cleanup_nanosecs();


            },
            start: function () {
                if (!RobotRaconteurWeb.TimeSpec.started) {


                    RobotRaconteurWeb.TimeSpec.start_time = System.DateTime.toUniversalTime(System.DateTime.getUtcNow());
                    var t = System.DateTime.subdd(RobotRaconteurWeb.TimeSpec.start_time, (System.DateTime.create(1970, 1, 1, 0, 0, 0, 0, 1)));
                    RobotRaconteurWeb.TimeSpec.start_seconds = Bridge.Int.clip64(Bridge.Math.round(t.getTotalSeconds(), 0, 6));
                    RobotRaconteurWeb.TimeSpec.start_nanoseconds = Bridge.Int.clip32(Bridge.Math.IEEERemainder(t.getTotalMilliseconds() * 1000000.0, 1000000000.0));

                    RobotRaconteurWeb.TimeSpec.started = true;
                }

            },
            cleanup_nanosecs: function () {
                var nanoseconds1 = this.nanoseconds;

                var nano_div = (Bridge.Int.div(this.nanoseconds, 1000000000)) | 0;
                this.nanoseconds = this.nanoseconds % 1000000000;
                this.seconds = this.seconds.add(System.Int64(nano_div));



                if (this.seconds.gt(System.Int64(0)) && this.nanoseconds < 0) {
                    this.seconds = this.seconds.sub(System.Int64(1));
                    this.nanoseconds = (1000000000 + this.nanoseconds) | 0;
                }

                if (this.seconds.lt(System.Int64(0)) && this.nanoseconds > 0) {
                    this.seconds = this.seconds.add(System.Int64(1));
                    this.nanoseconds = (this.nanoseconds - 1000000000) | 0;
                }



            },
            equals: function (obj) {
                if (obj == null) {
                    return false;
                }
                if (!(Bridge.is(obj, RobotRaconteurWeb.TimeSpec))) {
                    return false;
                }
                return RobotRaconteurWeb.TimeSpec.op_Equality(this, Bridge.cast(obj, RobotRaconteurWeb.TimeSpec));
            },
            getHashCode: function () {
                return ((this.nanoseconds + System.Int64.clip32(this.seconds)) | 0);
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.TransportListenerEventType", {
        $kind: "enum",
        statics: {
            fields: {
                TransportClosed: 1,
                TransportConnectionClosed: 2
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.TransportUtil", {
        statics: {
            methods: {
                ParseConnectionUrl: function (url) {
                    var $t;
                    var rr1 = new System.Text.RegularExpressions.Regex.ctor("^([^:\\s]+)://((?:\\[[A-Fa-f0-9\\:]+(?:\\%\\w*)?\\])|(?:[^\\[\\]\\:/\\?\\s]+))(?::([^:/\\?\\s]+))?(?:/([^\\?\\s]*))?\\??([^\\s]*)$");
                    var u1 = rr1.match(url);

                    if (!u1.getSuccess()) {
                        throw new RobotRaconteurWeb.ConnectionException("Invalid connection URL");
                    }

                    if (!u1.getGroups().get(1).getSuccess()) {
                        throw new RobotRaconteurWeb.ConnectionException("Invalid connection URL");
                    }

                    var o = new RobotRaconteurWeb.ParseConnectionUrlResult();

                    o.scheme = u1.getGroups().get(1).getValue();
                    o.host = u1.getGroups().get(2).getValue();
                    if (u1.getGroups().get(3).getSuccess() && !Bridge.referenceEquals(u1.getGroups().get(3).getValue(), "")) {
                        o.port = System.Int32.parse(u1.getGroups().get(3).getValue());
                    } else {
                        o.port = -1;
                    }

                    if (Bridge.referenceEquals(o.scheme, "tcp")) {
                        if (u1.getGroups().get(5).getSuccess() && !Bridge.referenceEquals(u1.getGroups().get(5).getValue(), "")) {
                            throw new RobotRaconteurWeb.ConnectionException("Invalid connection URL");
                        }

                        if (!(u1.getGroups().get(4).getSuccess() && !Bridge.referenceEquals(u1.getGroups().get(4).getValue(), ""))) {
                            throw new RobotRaconteurWeb.ConnectionException("Invalid connection URL");
                        }

                        var ap = System.String.split(u1.getGroups().get(4).getValue(), System.Array.init([47], System.Char).map(function (i) {{ return String.fromCharCode(i); }}), null, 1);
                        if (ap.length !== 2) {
                            throw new RobotRaconteurWeb.ConnectionException("Invalid connection URL");
                        }
                        var noden = ap[System.Array.index(0, ap)];
                        if (System.String.contains(noden,"{") || System.String.contains(noden,"[")) {
                            o.nodeid = new RobotRaconteurWeb.NodeID.$ctor1(noden);
                            o.nodename = "";
                        } else {
                            o.nodename = noden;
                            o.nodeid = RobotRaconteurWeb.NodeID.Any;
                        }

                        o.service = ap[System.Array.index(1, ap)];
                        o.path = "/";

                        return o;
                    }

                    if (o.port === -1) {
                        if (Bridge.referenceEquals(o.scheme, "rr+tcp") || Bridge.referenceEquals(o.scheme, "rrs+tcp")) {
                            o.port = 48653;
                        }
                        if (Bridge.referenceEquals(o.scheme, "rr+ws") || Bridge.referenceEquals(o.scheme, "rrs+ws")) {
                            o.port = 80;
                        }
                        if (Bridge.referenceEquals(o.scheme, "rr+wss") || Bridge.referenceEquals(o.scheme, "rrs+wss")) {
                            o.port = 443;
                        }
                    }

                    o.path = u1.getGroups().get(4).getValue();

                    if (o.path == null || Bridge.referenceEquals(o.path, "")) {
                        o.path = "/";
                    }

                    var query_params = new (System.Collections.Generic.Dictionary$2(System.String,System.String)).ctor();

                    if (!(u1.getGroups().get(5).getSuccess() && !Bridge.referenceEquals(u1.getGroups().get(5).getValue(), ""))) {
                        throw new RobotRaconteurWeb.ConnectionException("Invalid connection URL");
                    }

                    var q2 = new (System.Collections.Generic.List$1(System.String)).ctor();
                    $t = Bridge.getEnumerator(System.String.split(System.String.trimStart(u1.getGroups().get(5).getValue(), System.Array.init([63], System.Char)), System.Array.init([38], System.Char).map(function (i) {{ return String.fromCharCode(i); }}), null, 1));
                    try {
                        while ($t.moveNext()) {
                            var e = $t.Current;
                            var q3 = System.String.split(e, System.Array.init([61], System.Char).map(function (i) {{ return String.fromCharCode(i); }}));
                            if (q3.length !== 2) {
                                throw new RobotRaconteurWeb.ConnectionException("Invalid Connection URL");
                            }
                            if (q3[System.Array.index(0, q3)].length === 0 || q3[System.Array.index(1, q3)].length === 0) {
                                throw new RobotRaconteurWeb.ConnectionException("Invalid Connection URL");
                            }
                            query_params.add(q3[System.Array.index(0, q3)], RobotRaconteurWeb.Extensions.RRUriExtensions.UnescapeDataString(q3[System.Array.index(1, q3)]));
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }

                    if (!query_params.containsKey("service")) {
                        throw new RobotRaconteurWeb.ConnectionException("Invalid Connection URL");
                    }

                    o.service = query_params.getItem("service");
                    if (System.String.isNullOrWhiteSpace(o.service)) {
                        throw new RobotRaconteurWeb.ConnectionException("Invalid Connection URL");
                    }

                    if (query_params.containsKey("nodeid")) {
                        o.nodeid = new RobotRaconteurWeb.NodeID.$ctor1(query_params.getItem("nodeid"));
                    } else {
                        o.nodeid = RobotRaconteurWeb.NodeID.Any;
                    }

                    if (query_params.containsKey("nodename")) {
                        o.nodename = query_params.getItem("nodename");
                        var rr = new System.Text.RegularExpressions.Regex.ctor("^[a-zA-Z][a-zA-Z0-9_\\.\\-]*$");

                        if (!rr.match(o.nodename).getSuccess()) {
                            throw new RobotRaconteurWeb.ConnectionException("\"" + (o.nodename || "") + "\" is an invalid NodeName");
                        }
                    } else {
                        o.nodename = "";
                    }

                    return o;
                }
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.TypeDefinition", {
        statics: {
            methods: {
                DataTypeFromString: function (d) {
                    if (Bridge.referenceEquals(d, "void")) {
                        return RobotRaconteurWeb.DataTypes.void_t;
                    } else if (Bridge.referenceEquals(d, "double")) {
                        return RobotRaconteurWeb.DataTypes.double_t;
                    } else if (Bridge.referenceEquals(d, "single")) {
                        return RobotRaconteurWeb.DataTypes.single_t;
                    } else if (Bridge.referenceEquals(d, "int8")) {
                        return RobotRaconteurWeb.DataTypes.int8_t;
                    } else if (Bridge.referenceEquals(d, "uint8")) {
                        return RobotRaconteurWeb.DataTypes.uint8_t;
                    } else if (Bridge.referenceEquals(d, "int16")) {
                        return RobotRaconteurWeb.DataTypes.int16_t;
                    } else if (Bridge.referenceEquals(d, "uint16")) {
                        return RobotRaconteurWeb.DataTypes.uint16_t;
                    } else if (Bridge.referenceEquals(d, "int32")) {
                        return RobotRaconteurWeb.DataTypes.int32_t;
                    } else if (Bridge.referenceEquals(d, "uint32")) {
                        return RobotRaconteurWeb.DataTypes.uint32_t;
                    } else if (Bridge.referenceEquals(d, "int64")) {
                        return RobotRaconteurWeb.DataTypes.int64_t;
                    } else if (Bridge.referenceEquals(d, "uint64")) {
                        return RobotRaconteurWeb.DataTypes.uint64_t;
                    } else if (Bridge.referenceEquals(d, "string")) {
                        return RobotRaconteurWeb.DataTypes.string_t;
                    } else if (Bridge.referenceEquals(d, "cdouble")) {
                        return RobotRaconteurWeb.DataTypes.cdouble_t;
                    } else if (Bridge.referenceEquals(d, "csingle")) {
                        return RobotRaconteurWeb.DataTypes.csingle_t;
                    } else if (Bridge.referenceEquals(d, "bool")) {
                        return RobotRaconteurWeb.DataTypes.bool_t;
                    } else if (Bridge.referenceEquals(d, "structure")) {
                        return RobotRaconteurWeb.DataTypes.structure_t;
                    } else if (Bridge.referenceEquals(d, "object")) {
                        return RobotRaconteurWeb.DataTypes.object_t;
                    } else if (Bridge.referenceEquals(d, "varvalue")) {
                        return RobotRaconteurWeb.DataTypes.varvalue_t;
                    } else if (Bridge.referenceEquals(d, "varobject")) {
                        return RobotRaconteurWeb.DataTypes.varobject_t;

                    }

                    return RobotRaconteurWeb.DataTypes.namedtype_t;
                },
                StringFromDataType: function (d) {
                    switch (d) {
                        case RobotRaconteurWeb.DataTypes.void_t: 
                            return "void";
                        case RobotRaconteurWeb.DataTypes.double_t: 
                            return "double";
                        case RobotRaconteurWeb.DataTypes.single_t: 
                            return "single";
                        case RobotRaconteurWeb.DataTypes.int8_t: 
                            return "int8";
                        case RobotRaconteurWeb.DataTypes.uint8_t: 
                            return "uint8";
                        case RobotRaconteurWeb.DataTypes.int16_t: 
                            return "int16";
                        case RobotRaconteurWeb.DataTypes.uint16_t: 
                            return "uint16";
                        case RobotRaconteurWeb.DataTypes.int32_t: 
                            return "int32";
                        case RobotRaconteurWeb.DataTypes.uint32_t: 
                            return "uint32";
                        case RobotRaconteurWeb.DataTypes.int64_t: 
                            return "int64";
                        case RobotRaconteurWeb.DataTypes.uint64_t: 
                            return "uint64";
                        case RobotRaconteurWeb.DataTypes.string_t: 
                            return "string";
                        case RobotRaconteurWeb.DataTypes.cdouble_t: 
                            return "cdouble";
                        case RobotRaconteurWeb.DataTypes.csingle_t: 
                            return "csingle";
                        case RobotRaconteurWeb.DataTypes.bool_t: 
                            return "bool";
                        case RobotRaconteurWeb.DataTypes.structure_t: 
                            return "structure";
                        case RobotRaconteurWeb.DataTypes.object_t: 
                            return "object";
                        case RobotRaconteurWeb.DataTypes.varvalue_t: 
                            return "varvalue";
                        case RobotRaconteurWeb.DataTypes.varobject_t: 
                            return "varobject";
                        default: 
                            throw new RobotRaconteurWeb.DataTypeException("Invalid data type");
                    }

                },
                TypeDefinition_GetServiceUsingDefinition: function (def) {
                    var member1 = def.member;
                    if (member1 == null) {
                        throw new System.InvalidOperationException.$ctor1("Member not set for TypeDefinition");
                    }
                    var entry1 = member1.ServiceEntry;
                    if (entry1 == null) {
                        throw new System.InvalidOperationException.$ctor1("Object or struct not set for MemberDefinition " + (member1.Name || ""));
                    }
                    var service1 = entry1.ServiceDefinition;
                    if (service1 == null) {
                        throw new System.InvalidOperationException.$ctor1("ServiceDefinition or struct not set for Object or Structure " + (entry1.Name || ""));
                    }
                    return service1.Using;
                },
                op_Equality: function (a, b) {
                    if (Bridge.referenceEquals(a, b)) {
                        return true;
                    }

                    if ((a == null) || (b == null)) {
                        return false;
                    }

                    if (!Bridge.referenceEquals(a.Name, b.Name)) {
                        return false;
                    }
                    if (!Bridge.referenceEquals(a.TypeString, b.TypeString)) {
                        return false;
                    }
                    if (a.ArrayType !== b.ArrayType) {
                        return false;
                    }
                    if (a.ArrayVarLength !== b.ArrayVarLength) {
                        return false;
                    }
                    if (!Bridge.referenceEquals(a.ArrayLength, b.ArrayLength)) {
                        return false;
                    }
                    if (a.ContainerType !== b.ContainerType) {
                        return false;
                    }
                    return true;
                },
                op_Inequality: function (a, b) {
                    return !(RobotRaconteurWeb.TypeDefinition.op_Equality(a, b));
                }
            }
        },
        fields: {
            Name: null,
            Type: 0,
            TypeString: null,
            ArrayType: 0,
            ArrayVarLength: false,
            ArrayLength: null,
            ContainerType: 0,
            member: null,
            ResolveNamedType_cache: null
        },
        ctors: {
            init: function () {
                this.ArrayLength = new (System.Collections.Generic.List$1(System.Int32)).ctor();
            },
            ctor: function () {
                this.$initialize();

            },
            $ctor1: function (member) {
                this.$initialize();
                this.member = member;
            }
        },
        methods: {
            toString: function () {
                var $t;

                var o = new System.IO.StringWriter.ctor();
                o.Write$10((this.Type >= RobotRaconteurWeb.DataTypes.namedtype_t && (!(this.Type === RobotRaconteurWeb.DataTypes.varvalue_t) && !(this.Type === RobotRaconteurWeb.DataTypes.varobject_t))) ? this.TypeString : RobotRaconteurWeb.TypeDefinition.StringFromDataType(this.Type));

                switch (this.ArrayType) {
                    case RobotRaconteurWeb.DataTypes_ArrayTypes.none: 
                        break;
                    case RobotRaconteurWeb.DataTypes_ArrayTypes.array: 
                        {
                            o.Write$10("[" + ((this.ArrayLength.getItem(0) !== 0 ? Bridge.toString(((this.ArrayLength.getItem(0)) + ((this.ArrayVarLength ? "-" : "") || ""))) : "") || "") + "]");
                            break;
                        }
                    case RobotRaconteurWeb.DataTypes_ArrayTypes.multidimarray: 
                        {
                            if (this.ArrayVarLength) {
                                o.Write$10("[*]");
                            } else {
                                if (this.ArrayLength.Count === 1) {
                                    o.Write$11("[{0}]", Bridge.box(this.ArrayLength.getItem(0), System.Int32));
                                } else {
                                    var s3 = new (System.Collections.Generic.List$1(System.String)).ctor();
                                    $t = Bridge.getEnumerator(this.ArrayLength);
                                    try {
                                        while ($t.moveNext()) {
                                            var e = $t.Current;
                                            s3.add(Bridge.toString(e));
                                        }
                                    } finally {
                                        if (Bridge.is($t, System.IDisposable)) {
                                            $t.System$IDisposable$Dispose();
                                        }
                                    }
                                    o.Write$10("[" + (Bridge.toArray(s3).join(",") || "") + "]");
                                }

                            }
                            break;
                        }
                    default: 
                        throw new RobotRaconteurWeb.ServiceDefinitionException("Invalid type definition \"" + (this.Name || "") + "\"");
                }

                switch (this.ContainerType) {
                    case RobotRaconteurWeb.DataTypes_ContainerTypes.none: 
                        break;
                    case RobotRaconteurWeb.DataTypes_ContainerTypes.list: 
                        o.Write$10("{list}");
                        break;
                    case RobotRaconteurWeb.DataTypes_ContainerTypes.map_int32: 
                        o.Write$10("{int32}");
                        break;
                    case RobotRaconteurWeb.DataTypes_ContainerTypes.map_string: 
                        o.Write$10("{string}");
                        break;
                    case RobotRaconteurWeb.DataTypes_ContainerTypes.generator: 
                        o.Write$10("{generator}");
                        break;
                    default: 
                        throw new RobotRaconteurWeb.ServiceDefinitionException("Invalid type definition \"" + (this.Name || "") + "\"");
                }

                o.Write$10(" " + (this.Name || ""));
                return o.toString().trim();
            },
            FromString: function (s) {
                var $t;
                this.Reset();

                var r = new System.Text.RegularExpressions.Regex.ctor("^[ \\t]*([a-zA-Z][\\w\\.]*)(?:(\\[\\])|\\[(([0-9]+)|([0-9]+)\\-|(\\*)|([0-9]+)\\,|([0-9\\,]+))\\])?(?:\\{(\\w{1,16})\\})?(?:[ \\t]+(\\w+))?[ \\t]*$");
                var r_result = r.match(s);
                if (!r_result.getSuccess()) {
                    throw new RobotRaconteurWeb.RobotRaconteurParseException.ctor("Could not parse type \"" + (s.trim() || "") + "\"");
                }

                var type_result = r_result.getGroups().get(1);
                var array_result = r_result.getGroups().get(2);
                var array_result2 = r_result.getGroups().get(3);
                var array_var_result = r_result.getGroups().get(4);
                var array_max_var_result = r_result.getGroups().get(5);
                var array_multi_result = r_result.getGroups().get(6);
                var array_multi_single_fixed_result = r_result.getGroups().get(7);
                var array_multi_fixed_result = r_result.getGroups().get(8);
                var container_result = r_result.getGroups().get(9);
                var name_result = r_result.getGroups().get(10);

                this.Name = name_result.getSuccess() ? name_result.getValue() : "";

                if (container_result.getSuccess()) {
                    if (Bridge.referenceEquals(container_result.getValue(), "list")) {
                        this.ContainerType = RobotRaconteurWeb.DataTypes_ContainerTypes.list;
                    } else if (Bridge.referenceEquals(container_result.getValue(), "int32")) {
                        this.ContainerType = RobotRaconteurWeb.DataTypes_ContainerTypes.map_int32;
                    } else if (Bridge.referenceEquals(container_result.getValue(), "string")) {
                        this.ContainerType = RobotRaconteurWeb.DataTypes_ContainerTypes.map_string;
                    } else if (Bridge.referenceEquals(container_result.getValue(), "generator")) {
                        this.ContainerType = RobotRaconteurWeb.DataTypes_ContainerTypes.generator;
                    } else {
                        throw new RobotRaconteurWeb.RobotRaconteurParseException.ctor("Could not parse type \"" + (s.trim() || "") + "\": invalid container type");
                    }
                }

                if (array_result.getSuccess()) {
                    this.ArrayType = RobotRaconteurWeb.DataTypes_ArrayTypes.array;
                    this.ArrayVarLength = true;
                    this.ArrayLength = function (_o1) {
                            _o1.add(0);
                            return _o1;
                        }(new (System.Collections.Generic.List$1(System.Int32)).ctor());
                }
                if (array_result2.getSuccess()) {
                    if (array_var_result.getSuccess()) {
                        this.ArrayType = RobotRaconteurWeb.DataTypes_ArrayTypes.array;
                        this.ArrayLength.clear();
                        this.ArrayLength.add(((System.UInt32.parse(array_var_result.getValue())) | 0));
                        this.ArrayVarLength = false;
                    } else if (array_max_var_result.getSuccess()) {
                        this.ArrayType = RobotRaconteurWeb.DataTypes_ArrayTypes.array;
                        this.ArrayLength.clear();
                        this.ArrayLength.add(((System.UInt32.parse(array_max_var_result.getValue())) | 0));
                        this.ArrayVarLength = true;
                    } else if (array_multi_result.getSuccess()) {
                        this.ArrayType = RobotRaconteurWeb.DataTypes_ArrayTypes.multidimarray;
                        this.ArrayVarLength = true;
                    } else if (array_multi_single_fixed_result.getSuccess()) {
                        this.ArrayType = RobotRaconteurWeb.DataTypes_ArrayTypes.multidimarray;
                        this.ArrayVarLength = false;
                        this.ArrayLength.clear();
                        this.ArrayLength.add(((System.UInt32.parse(array_multi_single_fixed_result.getValue())) | 0));
                    } else if (array_multi_fixed_result.getSuccess()) {
                        this.ArrayType = RobotRaconteurWeb.DataTypes_ArrayTypes.multidimarray;
                        this.ArrayVarLength = false;
                        var dims = System.String.split(array_multi_fixed_result.getValue(), System.Array.init([44], System.Char).map(function (i) {{ return String.fromCharCode(i); }}));
                        this.ArrayLength.clear();
                        $t = Bridge.getEnumerator(dims);
                        try {
                            while ($t.moveNext()) {
                                var d = $t.Current;
                                this.ArrayLength.add(((System.UInt32.parse(d)) | 0));
                            }
                        } finally {
                            if (Bridge.is($t, System.IDisposable)) {
                                $t.System$IDisposable$Dispose();
                            }
                        }
                    } else {
                        throw new RobotRaconteurWeb.RobotRaconteurParseException.ctor("Could not parse type \"" + (s.trim() || "") + "\": array error");
                    }
                }

                var t = RobotRaconteurWeb.TypeDefinition.DataTypeFromString(type_result.getValue());
                if (t === RobotRaconteurWeb.DataTypes.namedtype_t) {
                    this.Type = RobotRaconteurWeb.DataTypes.namedtype_t;
                    this.TypeString = type_result.getValue();
                } else {
                    this.Type = t;
                    this.TypeString = "";
                }
            },
            equals: function (o) {
                if (o == null) {
                    return false;
                }
                return RobotRaconteurWeb.TypeDefinition.op_Equality(this, Bridge.cast(o, RobotRaconteurWeb.TypeDefinition));
            },
            Reset: function () {
                this.ArrayType = RobotRaconteurWeb.DataTypes_ArrayTypes.none;
                this.ContainerType = RobotRaconteurWeb.DataTypes_ContainerTypes.none;

                this.ArrayVarLength = false;
                this.Type = RobotRaconteurWeb.DataTypes.void_t;
                this.ArrayLength.clear();
                this.TypeString = null;
            },
            CopyTo: function (def) {
                var $t;
                def.v.Name = this.Name;
                def.v.Type = this.Type;
                def.v.TypeString = this.TypeString;
                def.v.ArrayType = this.ArrayType;
                def.v.ContainerType = this.ContainerType;
                def.v.ArrayLength = ($t = System.Int32, System.Linq.Enumerable.from(this.ArrayLength, $t).toList($t));
                def.v.ArrayVarLength = this.ArrayVarLength;
                def.v.member = this.member;
                def.v.ResolveNamedType_cache = this.ResolveNamedType_cache;
            },
            Clone: function () {
                var def2 = { v : new RobotRaconteurWeb.TypeDefinition.ctor() };
                this.CopyTo(def2);
                return def2.v;
            },
            Rename: function (name) {
                this.Name = name;
            },
            RemoveContainers: function () {
                this.ContainerType = RobotRaconteurWeb.DataTypes_ContainerTypes.none;
            },
            RemoveArray: function () {
                if (this.ContainerType !== RobotRaconteurWeb.DataTypes_ContainerTypes.none) {
                    throw new System.InvalidOperationException.$ctor1("Remove containers first");
                }

                this.ArrayType = RobotRaconteurWeb.DataTypes_ArrayTypes.none;
                this.ArrayLength.clear();
                this.ArrayVarLength = false;
            },
            QualifyTypeStringWithUsing: function () {
                var $t;
                if (this.Type !== RobotRaconteurWeb.DataTypes.namedtype_t) {
                    return;
                }

                if (System.String.contains(this.TypeString,".")) {
                    return;
                }

                var using_ = RobotRaconteurWeb.TypeDefinition.TypeDefinition_GetServiceUsingDefinition(this);
                $t = Bridge.getEnumerator(using_);
                try {
                    while ($t.moveNext()) {
                        var u = $t.Current;
                        if (Bridge.referenceEquals(u.UnqualifiedName, this.TypeString)) {
                            this.TypeString = u.QualifiedName;
                            return;
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
            },
            UnqualifyTypeStringWithUsing: function () {
                var $t;
                if (this.Type !== RobotRaconteurWeb.DataTypes.namedtype_t) {
                    return;
                }

                if (!System.String.contains(this.TypeString,".")) {
                    return;
                }

                var using_ = RobotRaconteurWeb.TypeDefinition.TypeDefinition_GetServiceUsingDefinition(this);
                $t = Bridge.getEnumerator(using_);
                try {
                    while ($t.moveNext()) {
                        var u = $t.Current;
                        if (Bridge.referenceEquals(u.QualifiedName, this.TypeString)) {
                            this.TypeString = u.UnqualifiedName;
                            return;
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
            },
            ResolveNamedType: function (imported_defs, node, client) {
                if (imported_defs === void 0) { imported_defs = null; }
                if (node === void 0) { node = null; }
                if (client === void 0) { client = null; }
                var o = this.ResolveNamedType_cache;
                if (o != null) {
                    return o;
                }

                var def = { v : null };

                var entry_name;

                if (!System.String.contains(this.TypeString,".")) {
                    entry_name = this.TypeString;
                    var m = this.member;
                    if (m != null) {
                        var entry = m.ServiceEntry;
                        if (entry != null) {
                            def.v = entry.ServiceDefinition;
                        }
                    }
                } else {
                    var s = RobotRaconteurWeb.ServiceDefinitionUtil.SplitQualifiedName(this.TypeString);
                    var def_name = s.Item1;
                    entry_name = s.Item2;

                    if (imported_defs != null) {
                        imported_defs.tryGetValue(def_name, def);
                    }
                    if (def.v == null) {
                        if (node == null) {
                            throw new System.ArgumentException.$ctor1("Node not specified for ResolveType");
                        }
                        try {
                            if (client != null) {
                                var client2 = Bridge.cast(client, RobotRaconteurWeb.ServiceStub).RRContext;
                                def.v = client2.GetPulledServiceType(def_name).ServiceDef();
                            }

                        } catch ($e1) {
                            $e1 = System.Exception.create($e1);
                        }
                    }
                }

                if (def.v == null) {
                    throw new RobotRaconteurWeb.ServiceDefinitionException("Could not resolve named type " + (this.TypeString || ""));
                }

                var found_struct = { };
                if (def.v.Structures.tryGetValue(entry_name, found_struct)) {
                    this.ResolveNamedType_cache = found_struct.v;
                    return found_struct.v;
                }
                var found_pod = { };
                if (def.v.Pods.tryGetValue(entry_name, found_pod)) {
                    this.ResolveNamedType_cache = found_pod.v;
                    return found_pod.v;
                }
                var found_namedarray = { };
                if (def.v.NamedArrays.tryGetValue(entry_name, found_namedarray)) {
                    this.ResolveNamedType_cache = found_namedarray.v;
                    return found_namedarray.v;
                }
                var found_object = { };
                if (def.v.Objects.tryGetValue(entry_name, found_object)) {
                    this.ResolveNamedType_cache = found_object.v;
                    return found_object.v;
                }
                var found_enum = { };
                if (def.v.Enums.tryGetValue(entry_name, found_enum)) {
                    this.ResolveNamedType_cache = found_enum.v;
                    return found_enum.v;
                }

                throw new RobotRaconteurWeb.ServiceDefinitionException("Could not resolve named type " + (def.v.Name || "") + "." + (entry_name || ""));
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.UserAuthenticator", {
        $kind: "interface"
    });

    Bridge.define("RobotRaconteurWeb.UsingDefinition", {
        fields: {
            QualifiedName: null,
            UnqualifiedName: null,
            service: null
        },
        ctors: {
            ctor: function (service) {
                this.$initialize();
                this.service = service;
            }
        },
        methods: {
            toString: function () {
                var s = RobotRaconteurWeb.ServiceDefinitionUtil.SplitQualifiedName(this.QualifiedName);
                var qualified_name_type = s.Item2;
                if (Bridge.referenceEquals(qualified_name_type, this.UnqualifiedName)) {
                    return "using " + (this.QualifiedName || "") + "\n";
                } else {
                    return "using " + (this.QualifiedName || "") + " as " + (this.UnqualifiedName || "") + "\n";
                }
            },
            FromString: function (s) {
                var r = new System.Text.RegularExpressions.Regex.ctor("^[ \\t]*using[ \\t]+((?:[a-zA-Z](?:\\w*[a-zA-Z0-9])?)(?:\\.[a-zA-Z](?:\\w*[a-zA-Z0-9])?)+)(?:[ \\t]+as[ \\t]([a-zA-Z](?:\\w*[a-zA-Z0-9])?))?[ \\t]*$");

                var r_match = r.match(s);
                if (!r_match.getSuccess()) {
                    throw new RobotRaconteurWeb.RobotRaconteurParseException.ctor("Format error for using  definition \"" + (s || "") + "\"");
                }

                if (!r_match.getGroups().get(2).getSuccess()) {
                    this.QualifiedName = r_match.getGroups().get(1).getValue();
                    var s2 = RobotRaconteurWeb.ServiceDefinitionUtil.SplitQualifiedName(r_match.getGroups().get(1).getValue());
                    this.UnqualifiedName = s2.Item2;
                } else {
                    this.QualifiedName = r_match.getGroups().get(1).getValue();
                    this.UnqualifiedName = r_match.getGroups().get(2).getValue();
                }
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.WebSocketStreamWrapper", {
        inherits: [System.IO.Stream],
        fields: {
            websock: null
        },
        props: {
            CanRead: {
                get: function () {
                    return true;
                }
            },
            CanSeek: {
                get: function () {
                    return false;
                }
            },
            CanWrite: {
                get: function () {
                    return true;
                }
            },
            Length: {
                get: function () {
                    throw new System.NotSupportedException.ctor();
                }
            },
            Position: {
                get: function () {
                    throw new System.NotSupportedException.ctor();
                },
                set: function (value) {
                    throw new System.NotSupportedException.ctor();
                }
            }
        },
        ctors: {
            ctor: function (websocket) {
                this.$initialize();
                System.IO.Stream.ctor.call(this);
                this.websock = websocket;
            }
        },
        methods: {
            Flush: function () {

            },
            DoBeginRead: function (buffer, offset, count) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    buffer2, 
                    r, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        buffer2 = System.Array.init(count, 0, System.Byte);
                                        $task1 = this.websock.receiveAsync(new System.ArraySegment(buffer2, 0, count), Bridge.getDefaultValue(System.Threading.CancellationToken));
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        r = $taskResult1;
                                        if (r.getMessageType() !== "binary") {
                                            throw new RobotRaconteurWeb.IOException("Invalid websocket message type");
                                        }
                                        System.Array.copy(buffer2, 0, buffer, offset, r.getCount());
                                        $tcs.setResult(r.getCount());
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            BeginRead: function (buffer, offset, count, callback, state) {
                return RobotRaconteurWeb.Extensions.Extensions.AsApm$1(System.Int32, this.DoBeginRead(buffer, offset, count), callback, state);
            },
            EndRead: function (asyncResult) {
                var asyncResult1 = asyncResult;
                return Bridge.cast(asyncResult1.getResult(), System.Int32);
            },
            DoBeginWrite: function (buffer, offset, count) {
                var $step = 0,
                    $task1, 
                    $task2, 
                    $task3, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    pos, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,6,7,8,9,10,12], $step);
                                switch ($step) {
                                    case 0: {
                                        if (count <= 65536) {
                                            $step = 1;
                                            continue;
                                        } else  {
                                            $step = 3;
                                            continue;
                                        }
                                    }
                                    case 1: {
                                        $task1 = this.websock.sendAsync(new System.ArraySegment(buffer, offset, count), "binary", true);
                                        $step = 2;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $task1.getAwaitedResult();
                                        $step = 12;
                                        continue;
                                    }
                                    case 3: {
                                        pos = 0;
                                        
                                        $step = 4;
                                        continue;
                                    }
                                    case 4: {
                                        if ( pos < count ) {
                                            $step = 5;
                                            continue;
                                        } 
                                        $step = 11;
                                        continue;
                                    }
                                    case 5: {
                                        if ((((count - pos) | 0)) <= 65536) {
                                            $step = 6;
                                            continue;
                                        } else  {
                                            $step = 8;
                                            continue;
                                        }
                                    }
                                    case 6: {
                                        $task2 = this.websock.sendAsync(new System.ArraySegment(buffer, ((offset + pos) | 0), ((count - pos) | 0)), "binary", true);
                                        $step = 7;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 7: {
                                        $task2.getAwaitedResult();
                                        pos = count;
                                        $step = 10;
                                        continue;
                                    }
                                    case 8: {
                                        $task3 = this.websock.sendAsync(new System.ArraySegment(buffer, ((offset + pos) | 0), 65536), "binary", true);
                                        $step = 9;
                                        if ($task3.isCompleted()) {
                                            continue;
                                        }
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 9: {
                                        $task3.getAwaitedResult();
                                        pos = (pos + 65536) | 0;
                                        $step = 10;
                                        continue;
                                    }
                                    case 10: {
                                        
                                        $step = 4;
                                        continue;
                                    }

                                    case 12: {
                                        $tcs.setResult(count);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            BeginWrite: function (buffer, offset, count, callback, state) {
                return RobotRaconteurWeb.Extensions.Extensions.AsApm$1(System.Int32, this.DoBeginWrite(buffer, offset, count), callback, state);
            },
            EndWrite: function (asyncResult) {
                var noop = Bridge.cast(asyncResult, System.Threading.Tasks.Task$1(System.Int32)).getResult();
            },
            Read: function (buffer, offset, count) {
                throw new System.InvalidOperationException.$ctor1("Invalid for browser");
            },
            Seek: function (offset, origin) {
                throw new System.NotSupportedException.ctor();
            },
            SetLength: function (value) {
                throw new System.NotSupportedException.ctor();
            },
            Write: function (buffer, offset, count) {
                throw new System.InvalidOperationException.$ctor1("Invalid for browser");
            },
            Close: function () {
                RobotRaconteurWeb.Extensions.Extensions.IgnoreResult(this.websock.closeAsync(1000, "", Bridge.getDefaultValue(System.Threading.CancellationToken)));
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.Wire$1", function (T) { return {
        fields: {
            rawelements: false,
            direction: 0
        },
        ctors: {
            init: function () {
                this.rawelements = false;
                this.direction = RobotRaconteurWeb.MemberDefinition_Direction.both;
            },
            ctor: function () {
                this.$initialize();
                if (Bridge.referenceEquals(T, RobotRaconteurWeb.MessageElement)) {
                    this.rawelements = true;
                }
            }
        },
        methods: {
            UnpackPacket: function (me, timespec) {
                var $t, $t1, $t2;
                var s = (RobotRaconteurWeb.MessageElement.FindElement$1(me, "packettime").CastData(RobotRaconteurWeb.MessageElementStructure));
                var seconds = ($t = RobotRaconteurWeb.MessageElement.FindElement$1(s.Elements, "seconds").CastData(System.Array.type(System.Int64)))[System.Array.index(0, $t)];
                var nanoseconds = ($t1 = RobotRaconteurWeb.MessageElement.FindElement$1(s.Elements, "nanoseconds").CastData(System.Array.type(System.Int32)))[System.Array.index(0, $t1)];
                timespec.v = new RobotRaconteurWeb.TimeSpec.$ctor1(seconds, nanoseconds);
                var data;
                if (!this.rawelements) {
                    data = this.UnpackVarType(RobotRaconteurWeb.MessageElement.FindElement$1(me, "packet"));
                } else {
                    data = RobotRaconteurWeb.MessageElement.FindElement$1(me, "packet");
                }

                if (Bridge.is(data, Array)) {
                    if (Bridge.isArray(null, T)) {
                        return Bridge.cast(Bridge.unbox(data, T), T);
                    } else {
                        return ($t2 = Bridge.cast(data, System.Array.type(T)))[System.Array.index(0, $t2)];
                    }
                } else {
                    return Bridge.cast(Bridge.unbox(data, T), T);
                }
            },
            DispatchPacket: function (me, e) {
                var timespec = { };
                var data = this.UnpackPacket(me, timespec);

                e.WirePacketReceived(timespec.v, data);
            },
            PackPacket: function (data, time) {

                var timespec1 = new (System.Collections.Generic.List$1(RobotRaconteurWeb.MessageElement)).ctor();
                timespec1.add(new RobotRaconteurWeb.MessageElement.$ctor1("seconds", time.seconds));
                timespec1.add(new RobotRaconteurWeb.MessageElement.$ctor1("nanoseconds", Bridge.box(time.nanoseconds, System.Int32)));
                var s = new RobotRaconteurWeb.MessageElementStructure("RobotRaconteur.TimeSpec", timespec1);


                var elems = new (System.Collections.Generic.List$1(RobotRaconteurWeb.MessageElement)).ctor();
                elems.add(new RobotRaconteurWeb.MessageElement.$ctor1("packettime", s));
                if (!this.rawelements) {
                    var pdata = this.PackVarType(data);
                    elems.add(new RobotRaconteurWeb.MessageElement.$ctor1("packet", pdata));
                } else {
                    var pme = Bridge.cast(data, RobotRaconteurWeb.MessageElement);
                    pme.ElementName = "packet";
                    elems.add(pme);
                }


                return elems;
            }
        }
    }; });

    Bridge.define("RobotRaconteurWeb.Wire$1.WireConnection", function (T) { return {
        $kind: "nested class",
        fields: {
            endpoint: null,
            inval: Bridge.getDefaultValue(T),
            inval_valid: false,
            last_sendtime: null,
            parent: null,
            sendlock: null,
            outval: Bridge.getDefaultValue(T),
            outval_valid: false,
            lasttime_send: null,
            recv_lock: null,
            lasttime_recv: null,
            close_callback: null
        },
        events: {
            WireValueChanged: null
        },
        props: {
            Endpoint: {
                get: function () {
                    return this.endpoint.LocalEndpoint;
                }
            },
            InValue: {
                get: function () {
                    if (!this.inval_valid) {
                        throw new System.Exception("Value not set");
                    }
                    return this.inval;
                }
            },
            OutValue: {
                get: function () {
                    if (!this.outval_valid) {
                        throw new System.Exception("Value not set");
                    }
                    return this.outval;
                },
                set: function (value) {
                    this.sendlock;
                    {
                        var time = RobotRaconteurWeb.TimeSpec.Now;
                        if (RobotRaconteurWeb.TimeSpec.op_Equality(time, this.last_sendtime)) {
                            time.nanoseconds = (time.nanoseconds + 1) | 0;
                        }


                        this.parent.SendWirePacket(value, time, this.endpoint);
                        this.last_sendtime = time;
                        this.outval = value;
                        this.outval_valid = true;
                        this.lasttime_send = RobotRaconteurWeb.TimeSpec.Now;
                    }
                }
            },
            LastValueReceivedTime: {
                get: function () {
                    if (!this.inval_valid) {
                        throw new System.Exception("No value received");
                    }
                    return this.lasttime_recv;
                }
            },
            LastValueSentTime: {
                get: function () {
                    if (!this.outval_valid) {
                        throw new System.Exception("No value sent");
                    }
                    return this.lasttime_send;
                }
            },
            WireCloseCallback: {
                get: function () {
                    return this.close_callback;
                },
                set: function (value) {
                    this.close_callback = value;
                }
            }
        },
        ctors: {
            init: function () {
                this.inval_valid = false;
                this.last_sendtime = new RobotRaconteurWeb.TimeSpec.$ctor1(System.Int64(0), 0);
                this.sendlock = { };
                this.outval_valid = false;
                this.recv_lock = { };
            },
            ctor: function (parent, endpoint) {
                if (endpoint === void 0) { endpoint = null; }

                this.$initialize();
                this.parent = parent;
                this.endpoint = endpoint;
            }
        },
        methods: {
            Close: function () {
                return this.parent.Close(this);
            },
            WirePacketReceived: function (timespec, packet) {
                this.recv_lock;
                {


                    if (RobotRaconteurWeb.TimeSpec.op_Equality(this.lasttime_recv, null) || RobotRaconteurWeb.TimeSpec.op_GreaterThan(timespec, this.lasttime_recv)) {
                        this.lasttime_recv = timespec;
                        this.inval = packet;
                        this.inval_valid = true;

                        try {
                            if (!Bridge.staticEquals(this.WireValueChanged, null)) {
                                this.WireValueChanged(this, packet, timespec);
                            }
                        } catch ($e1) {
                            $e1 = System.Exception.create($e1);
                        }

                    }
                }
            },
            RemoteClose: function () {
                if (!Bridge.staticEquals(this.close_callback, null)) {
                    try {
                        this.close_callback(this);
                    } catch ($e1) {
                        $e1 = System.Exception.create($e1);
                    }
                    ;
                }

                this.Close();
            }
        }
    }; });

    Bridge.define("RobotRaconteurWeb.WireBroadcaster$1", function (T) { return {
        fields: {
            connected_wires: null,
            connected_wires_lock: null,
            wire: null,
            current_out_value: null
        },
        props: {
            Wire: {
                get: function () {
                    return this.wire;
                }
            },
            OutValue: {
                set: function (value) {
                    var $t, $t1;
                    this.connected_wires_lock;
                    {
                        this.current_out_value = value;
                        var ceps = new (System.Collections.Generic.List$1(RobotRaconteurWeb.WireBroadcaster$1.connected_connection(T))).ctor();
                        $t = Bridge.getEnumerator(this.connected_wires);
                        try {
                            while ($t.moveNext()) {
                                var c = $t.Current;
                                ceps.add(c);
                            }
                        } finally {
                            if (Bridge.is($t, System.IDisposable)) {
                                $t.System$IDisposable$Dispose();
                            }
                        }

                        $t1 = Bridge.getEnumerator(ceps);
                        try {
                            while ($t1.moveNext()) {
                                var ee = $t1.Current;
                                try {
                                    var c1 = ee.connection;
                                    if (c1 == null) {
                                        this.connected_wires.remove(ee);
                                        continue;
                                    }
                                    c1.OutValue = value;

                                } catch (exp) {
                                    exp = System.Exception.create(exp);
                                }
                            }
                        } finally {
                            if (Bridge.is($t1, System.IDisposable)) {
                                $t1.System$IDisposable$Dispose();
                            }
                        }
                    }
                }
            }
        },
        ctors: {
            init: function () {
                this.connected_wires = new (System.Collections.Generic.List$1(RobotRaconteurWeb.WireBroadcaster$1.connected_connection(T))).ctor();
                this.connected_wires_lock = { };
                this.current_out_value = Bridge.getDefaultValue(T);
            },
            ctor: function (wire) {
                this.$initialize();
                this.wire = wire;
                wire.WireConnectCallback = Bridge.fn.cacheBind(this, this.ConnectionConnected);
                wire.PeekInValueCallback = Bridge.fn.cacheBind(this, this.ClientPeekInValue);
                wire.PeekOutValueCallback = Bridge.fn.cacheBind(this, this.ClientPeekOutValue);
                wire.PokeOutValueCallback = Bridge.fn.cacheBind(this, this.ClientPokeOutValue);
            }
        },
        methods: {
            ConnectionClosed: function (ep) {
                this.connected_wires_lock;
                {
                    try {
                        this.connected_wires.remove(ep);
                    } catch (e) {
                        e = System.Exception.create(e);
                    }
                }
            },
            ConnectionConnected: function (w, ep) {
                this.connected_wires_lock;
                {
                    var c = new (RobotRaconteurWeb.WireBroadcaster$1.connected_connection(T))(ep);
                    ep.WireCloseCallback = Bridge.fn.bind(this, function (w2) {
                        this.ConnectionClosed(c);
                    });
                    this.connected_wires.add(c);
                }

            },
            ClientPeekInValue: function (c) {
                this.connected_wires_lock;
                {
                    return this.current_out_value;
                }
            },
            ClientPeekOutValue: function (c) {
                throw new RobotRaconteurWeb.ReadOnlyMemberException("Read only wire");
            },
            ClientPokeOutValue: function (v, ts, c) {
                throw new RobotRaconteurWeb.ReadOnlyMemberException("Read only wire");
            }
        }
    }; });

    Bridge.define("RobotRaconteurWeb.WireBroadcaster$1.connected_connection", function (T) { return {
        $kind: "nested class",
        fields: {
            connection: null
        },
        ctors: {
            ctor: function (connection) {
                this.$initialize();
                this.connection = connection;
            }
        }
    }; });

    Bridge.define("RobotRaconteurWeb.WireUnicastReceiver$1", function (T) { return {
        fields: {
            active_connection: null,
            wire: null,
            in_value: Bridge.getDefaultValue(T),
            in_value_ts: null,
            in_value_valid: false,
            in_value_ep: 0
        },
        events: {
            InValueChanged: null
        },
        props: {
            Wire: {
                get: function () {
                    return this.wire;
                }
            }
        },
        ctors: {
            ctor: function (wire) {
                this.$initialize();
                this.wire = wire;
                wire.WireConnectCallback = Bridge.fn.cacheBind(this, this.ConnectionConnected);
                wire.PeekInValueCallback = Bridge.fn.cacheBind(this, this.ClientPeekInValue);
                wire.PeekOutValueCallback = Bridge.fn.cacheBind(this, this.ClientPeekOutValue);
                wire.PokeOutValueCallback = Bridge.fn.cacheBind(this, this.ClientPokeOutValue);
            }
        },
        methods: {
            ConnectionClosed: function (ep) {
                this;
                {
                    if (Bridge.referenceEquals(this.active_connection, ep)) {
                        this.active_connection = null;
                    }
                }
            },
            ConnectionConnected: function (w, ep) {
                this;
                {
                    if (this.active_connection != null) {
                        try {
                            this.active_connection.connection.Close().continueWith(function (x) { });
                        } catch ($e1) {
                            $e1 = System.Exception.create($e1);
                        }
                    }

                    var c = new (RobotRaconteurWeb.WireUnicastReceiver$1.connected_connection(T))(ep);
                    ep.WireCloseCallback = Bridge.fn.bind(this, function (w2) {
                        this.ConnectionClosed(c);
                    });
                    ep.addWireValueChanged(Bridge.fn.bind(this, function (c1, value, time) {
                        this.ClientPokeOutValue(value, time, c1.Endpoint);
                    }));
                    this.active_connection = c;
                }

            },
            GetInValue: function (ts, ep) {
                this;
                {
                    if (!this.in_value_valid) {
                        throw new System.InvalidOperationException.$ctor1("Value not set");
                    }
                    ts.v = this.in_value_ts;
                    ep.v = this.in_value_ep;
                    return this.in_value;
                }
            },
            ClientPeekInValue: function (c) {
                throw new RobotRaconteurWeb.WriteOnlyMemberException("Write only wire");
            },
            ClientPeekOutValue: function (c) {
                this;
                {
                    if (!this.in_value_valid) {
                        throw new System.InvalidOperationException.$ctor1("Value not set");
                    }
                    return this.in_value;
                }
            },
            ClientPokeOutValue: function (v, ts, c) {
                this;
                {
                    this.in_value = v;
                    this.in_value_ts = ts;
                    this.in_value_valid = true;
                    this.in_value_ep = c;
                }

                if (!Bridge.staticEquals(this.InValueChanged, null)) {
                    this.InValueChanged(v, ts, c);
                }
            }
        }
    }; });

    Bridge.define("RobotRaconteurWeb.WireUnicastReceiver$1.connected_connection", function (T) { return {
        $kind: "nested class",
        fields: {
            connection: null
        },
        ctors: {
            ctor: function (connection) {
                this.$initialize();
                this.connection = connection;
            }
        }
    }; });

    Bridge.define("RobotRaconteurServiceIndex.NodeInfo_stub", {
        inherits: [RobotRaconteurWeb.IStructureStub],
        fields: {
            def: null
        },
        alias: [
            "PackStructure", "RobotRaconteurWeb$IStructureStub$PackStructure",
            "UnpackStructure", "RobotRaconteurWeb$IStructureStub$UnpackStructure"
        ],
        ctors: {
            ctor: function (d) {
                this.$initialize();
                this.def = d;
            }
        },
        methods: {
            PackStructure: function (s1) {
                var m = new (System.Collections.Generic.List$1(RobotRaconteurWeb.MessageElement)).ctor();
                if (s1 == null) {
                    return null;
                }
                var s = Bridge.cast(s1, RobotRaconteurServiceIndex.NodeInfo);
                m.add(new RobotRaconteurWeb.MessageElement.$ctor1("NodeName", s.NodeName));
                m.add(new RobotRaconteurWeb.MessageElement.$ctor1("NodeID", s.NodeID));
                m.add(new RobotRaconteurWeb.MessageElement.$ctor1("ServiceIndexConnectionURL", this.def.PackMapType(System.Int32, System.String, s.ServiceIndexConnectionURL)));
                return new RobotRaconteurWeb.MessageElementStructure("RobotRaconteurServiceIndex.NodeInfo", m);
            },
            UnpackStructure: function (T, m) {
                if (m == null) {
                    return Bridge.getDefaultValue(T);
                }
                var s = new RobotRaconteurServiceIndex.NodeInfo();
                s.NodeName = RobotRaconteurWeb.MessageElement.FindElement$1(m.Elements, "NodeName").CastData(System.String);
                s.NodeID = RobotRaconteurWeb.MessageElement.FindElement$1(m.Elements, "NodeID").CastData(System.Array.type(System.Byte));
                s.ServiceIndexConnectionURL = Bridge.cast(this.def.UnpackMapType(System.Int32, System.String, RobotRaconteurWeb.MessageElement.FindElement$1(m.Elements, "ServiceIndexConnectionURL").Data), System.Collections.Generic.Dictionary$2(System.Int32,System.String));
                var st;
                try {
                    st = Bridge.cast(Bridge.unbox(s, T), T);
                } catch ($e1) {
                    $e1 = System.Exception.create($e1);
                    var e;
                    if (Bridge.is($e1, System.InvalidCastException)) {
                        e = $e1;
                        throw new RobotRaconteurWeb.DataTypeMismatchException("Wrong structuretype");
                    } else {
                        throw $e1;
                    }
                }
                return st;
            }
        }
    });

    Bridge.define("RobotRaconteurServiceIndex.RobotRaconteurServiceIndexFactory", {
        inherits: [RobotRaconteurWeb.ServiceFactory],
        fields: {
            NodeInfo_stubentry: null,
            ServiceInfo_stubentry: null
        },
        ctors: {
            ctor: function (node) {
                if (node === void 0) { node = null; }

                this.$initialize();
                RobotRaconteurWeb.ServiceFactory.ctor.call(this, node);
                this.NodeInfo_stubentry = new RobotRaconteurServiceIndex.NodeInfo_stub(this);
                this.ServiceInfo_stubentry = new RobotRaconteurServiceIndex.ServiceInfo_stub(this);
            }
        },
        methods: {
            DefString: function () {
                var d = "service RobotRaconteurServiceIndex\r\nstruct NodeInfo\r\nfield string NodeName\r\nfield uint8[16] NodeID\r\nfield string{int32} ServiceIndexConnectionURL\r\nend struct\r\nstruct ServiceInfo\r\nfield string Name\r\nfield string RootObjectType\r\nfield string{int32} RootObjectImplements\r\nfield string{int32} ConnectionURL\r\nfield varvalue{string} Attributes\r\nend struct\r\nobject ServiceIndex\r\nfunction ServiceInfo{int32} GetLocalNodeServices()\r\nfunction NodeInfo{int32} GetRoutedNodes()\r\nfunction NodeInfo{int32} GetDetectedNodes()\r\nevent LocalNodeServicesChanged()\r\nend object";
                return d;
            },
            GetServiceName: function () {
                return "RobotRaconteurServiceIndex";
            },
            FindStructureStub: function (objecttype) {
                var objshort = this.RemovePath(objecttype);
                switch (objshort) {
                    case "NodeInfo": 
                        return this.NodeInfo_stubentry;
                    case "ServiceInfo": 
                        return this.ServiceInfo_stubentry;
                }
                throw new RobotRaconteurWeb.DataTypeException("Cannot find appropriate structure stub");
            },
            PackStructure: function (s) {
                if (s == null) {
                    return null;
                }
                var objtype = RobotRaconteurWeb.ServiceDefinitionUtil.FindStructRRType(Bridge.getType(s));
                if (Bridge.referenceEquals(RobotRaconteurWeb.ServiceDefinitionUtil.SplitQualifiedName(objtype).Item1, "RobotRaconteurServiceIndex")) {
                    var objshort = this.RemovePath(objtype);
                    switch (objshort) {
                        case "NodeInfo": 
                            return this.NodeInfo_stubentry.PackStructure(s);
                        case "ServiceInfo": 
                            return this.ServiceInfo_stubentry.PackStructure(s);
                    }
                } else {
                    return RobotRaconteurWeb.ServiceFactory.prototype.PackStructure.call(this, s);
                }
                throw new System.Exception();
            },
            UnpackStructure: function (T, l) {
                if (l == null) {
                    return Bridge.getDefaultValue(T);
                }
                if (Bridge.referenceEquals(RobotRaconteurWeb.ServiceDefinitionUtil.SplitQualifiedName(l.Type).Item1, "RobotRaconteurServiceIndex")) {
                    var objshort = this.RemovePath(l.Type);
                    switch (objshort) {
                        case "NodeInfo": 
                            return this.NodeInfo_stubentry.UnpackStructure(T, l);
                        case "ServiceInfo": 
                            return this.ServiceInfo_stubentry.UnpackStructure(T, l);
                    }
                } else {
                    return RobotRaconteurWeb.ServiceFactory.prototype.UnpackStructure.call(this, T, l);
                }
                throw new RobotRaconteurWeb.DataTypeException("Could not unpack structure");
            },
            CreateStub: function (objecttype, path, context) {
                if (Bridge.referenceEquals(RobotRaconteurWeb.ServiceDefinitionUtil.SplitQualifiedName(objecttype).Item1, "RobotRaconteurServiceIndex")) {
                    var objshort = this.RemovePath(objecttype);
                    switch (objshort) {
                        case "ServiceIndex": 
                            return new RobotRaconteurServiceIndex.ServiceIndex_stub(path, context);
                    }
                } else {
                    return RobotRaconteurWeb.ServiceFactory.prototype.CreateStub.call(this, objecttype, path, context);
                }
                throw new RobotRaconteurWeb.ServiceException("Could not create stub");
            },
            CreateSkel: function (path, obj, context) {
                var objtype = RobotRaconteurWeb.ServiceDefinitionUtil.FindObjectRRType(obj);
                if (Bridge.referenceEquals(RobotRaconteurWeb.ServiceDefinitionUtil.SplitQualifiedName(objtype).Item1, "RobotRaconteurServiceIndex")) {
                    var sobjtype = this.RemovePath(objtype);
                    switch (sobjtype) {
                        case "ServiceIndex": 
                            return new RobotRaconteurServiceIndex.ServiceIndex_skel(path, Bridge.cast(obj, RobotRaconteurServiceIndex.ServiceIndex), context);
                    }
                } else {
                    return RobotRaconteurWeb.ServiceFactory.prototype.CreateSkel.call(this, path, obj, context);
                }
                throw new RobotRaconteurWeb.ServiceException("Could not create skel");
            },
            FindPodStub: function (objecttype) {
                throw new System.NotImplementedException.ctor();
            },
            FindNamedArrayStub: function (objecttype) {
                throw new System.NotImplementedException.ctor();
            }
        }
    });

    Bridge.define("RobotRaconteurServiceIndex.ServiceIndex_skel", {
        inherits: [RobotRaconteurWeb.ServiceSkel],
        fields: {
            rr_InitPipeServersRun: false
        },
        props: {
            obj: {
                get: function () {
                    return Bridge.cast(this.uncastobj, RobotRaconteurServiceIndex.ServiceIndex);
                }
            }
        },
        ctors: {
            init: function () {
                this.rr_InitPipeServersRun = false;
            },
            ctor: function (p, o, c) {
                this.$initialize();
                RobotRaconteurWeb.ServiceSkel.ctor.call(this, p, o, c);
                this.uncastobj = o;
            }
        },
        methods: {
            CallGetProperty: function (m) {
                var $step = 0,
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    ename, 
                    mr, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0], $step);
                                switch ($step) {
                                    case 0: {
                                        ename = m.MemberName;
                                        mr = new RobotRaconteurWeb.MessageEntry.$ctor1(RobotRaconteurWeb.MessageEntryType.PropertyGetRes, ename);
                                        switch (ename) {
                                            default: 
                                                throw new RobotRaconteurWeb.MemberNotFoundException("Member not found");
                                        }
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            CallSetProperty: function (m) {
                var $step = 0,
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    ename, 
                    me, 
                    mr, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0], $step);
                                switch ($step) {
                                    case 0: {
                                        ename = m.MemberName;
                                        me = m.FindElement("value");
                                        mr = new RobotRaconteurWeb.MessageEntry.$ctor1(RobotRaconteurWeb.MessageEntryType.PropertySetRes, ename);
                                        switch (ename) {
                                            default: 
                                                throw new RobotRaconteurWeb.MemberNotFoundException("Member not found");
                                        }
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            CallFunction: function (rr_m) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $task3, 
                    $taskResult3, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    rr_ename, 
                    rr_mr, 
                    rr_ret, 
                    rr_ret1, 
                    rr_ret2, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,6,7,8], $step);
                                switch ($step) {
                                    case 0: {
                                        rr_ename = rr_m.MemberName;
                                        rr_mr = new RobotRaconteurWeb.MessageEntry.$ctor1(RobotRaconteurWeb.MessageEntryType.FunctionCallRes, rr_ename);
                                        if (rr_ename === "GetLocalNodeServices") {
                                            $step = 1;
                                            continue;
                                        }
                                        else if (rr_ename === "GetRoutedNodes") {
                                            $step = 3;
                                            continue;
                                        }
                                        else if (rr_ename === "GetDetectedNodes") {
                                            $step = 5;
                                            continue;
                                        }
                                        else  {
                                            $step = 7;
                                            continue;
                                        }
                                        $step = 8;
                                        continue;
                                    }
                                    case 1: {
                                        $task1 = this.obj.RobotRaconteurServiceIndex$ServiceIndex$GetLocalNodeServices(Bridge.getDefaultValue(System.Threading.CancellationToken));
                                        $step = 2;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        rr_ret = $taskResult1;
                                        rr_mr.AddElement(new RobotRaconteurWeb.MessageElement.$ctor1("return", this.RRContext.PackMapType(System.Int32, RobotRaconteurServiceIndex.ServiceInfo, rr_ret)));
                                        $step = 8;
                                        continue;
                                    }
                                    case 3: {
                                        $task2 = this.obj.RobotRaconteurServiceIndex$ServiceIndex$GetRoutedNodes(Bridge.getDefaultValue(System.Threading.CancellationToken));
                                        $step = 4;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 4: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        rr_ret1 = $taskResult2;
                                        rr_mr.AddElement(new RobotRaconteurWeb.MessageElement.$ctor1("return", this.RRContext.PackMapType(System.Int32, RobotRaconteurServiceIndex.NodeInfo, rr_ret1)));
                                        $step = 8;
                                        continue;
                                    }
                                    case 5: {
                                        $task3 = this.obj.RobotRaconteurServiceIndex$ServiceIndex$GetDetectedNodes(Bridge.getDefaultValue(System.Threading.CancellationToken));
                                        $step = 6;
                                        if ($task3.isCompleted()) {
                                            continue;
                                        }
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 6: {
                                        $taskResult3 = $task3.getAwaitedResult();
                                        rr_ret2 = $taskResult3;
                                        rr_mr.AddElement(new RobotRaconteurWeb.MessageElement.$ctor1("return", this.RRContext.PackMapType(System.Int32, RobotRaconteurServiceIndex.NodeInfo, rr_ret2)));
                                        $step = 8;
                                        continue;
                                    }
                                    case 7: {
                                        throw new RobotRaconteurWeb.MemberNotFoundException("Member not found");
                                    }
                                    case 8: {
                                        $tcs.setResult(rr_mr);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            ReleaseCastObject: function () { },
            LocalNodeServicesChanged_Handler: function () {
                var rr_mm = new RobotRaconteurWeb.MessageEntry.$ctor1(RobotRaconteurWeb.MessageEntryType.EventReq, "LocalNodeServicesChanged");
                this.SendEvent(rr_mm);
            },
            RegisterEvents: function (obj1) {
                var obj = Bridge.as(obj1, RobotRaconteurServiceIndex.ServiceIndex);
                obj.RobotRaconteurServiceIndex$ServiceIndex$addLocalNodeServicesChanged(Bridge.fn.cacheBind(this, this.LocalNodeServicesChanged_Handler));
                RobotRaconteurWeb.ServiceSkel.prototype.RegisterEvents.call(this, obj1);

            },
            UnregisterEvents: function (obj1) {
                var obj = Bridge.as(obj1, RobotRaconteurServiceIndex.ServiceIndex);
                obj.RobotRaconteurServiceIndex$ServiceIndex$removeLocalNodeServicesChanged(Bridge.fn.cacheBind(this, this.LocalNodeServicesChanged_Handler));
                RobotRaconteurWeb.ServiceSkel.prototype.UnregisterEvents.call(this, obj1);

            },
            GetSubObj$1: function (name, ind) {
                var $step = 0,
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0], $step);
                                switch ($step) {
                                    case 0: {
                                        switch (name) {
                                            default: 
                                                throw new RobotRaconteurWeb.MemberNotFoundException("Member not found");
                                        }
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            InitPipeServers: function (o) {
                if (this.rr_InitPipeServersRun) {
                    return;
                }
                this.rr_InitPipeServersRun = true;
                var castobj = Bridge.cast(o, RobotRaconteurServiceIndex.ServiceIndex);
            },
            DispatchPipeMessage: function (m, e) {
                switch (m.MemberName) {
                    default: 
                        throw new RobotRaconteurWeb.MemberNotFoundException("Member not found");
                }
            },
            DispatchWireMessage: function (m, e) {
                switch (m.MemberName) {
                    default: 
                        throw new RobotRaconteurWeb.MemberNotFoundException("Member not found");
                }
            },
            InitCallbackServers: function (o) {
                var castobj = Bridge.cast(o, RobotRaconteurServiceIndex.ServiceIndex);
            },
            GetCallbackFunction: function (endpoint, membername) {
                switch (membername) {
                    default: 
                        throw new RobotRaconteurWeb.MemberNotFoundException("Member not found");
                }
            },
            CallPipeFunction: function (m, e) {
                var $step = 0,
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    ename, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0], $step);
                                switch ($step) {
                                    case 0: {
                                        ename = m.MemberName;
                                        switch (ename) {
                                            default: 
                                                throw new RobotRaconteurWeb.MemberNotFoundException("Member not found");
                                        }
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            CallWireFunction: function (m, e) {
                var $step = 0,
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    ename, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0], $step);
                                switch ($step) {
                                    case 0: {
                                        ename = m.MemberName;
                                        switch (ename) {
                                            default: 
                                                throw new RobotRaconteurWeb.MemberNotFoundException("Member not found");
                                        }
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            CallMemoryFunction: function (m, e) {
                var $step = 0,
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    ename, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0], $step);
                                switch ($step) {
                                    case 0: {
                                        ename = m.MemberName;
                                        switch (ename) {
                                            default: 
                                                throw new RobotRaconteurWeb.MemberNotFoundException("Member not found");
                                        }
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            }
        }
    });

    Bridge.define("RobotRaconteurServiceIndex.ServiceIndex_stub", {
        inherits: [RobotRaconteurWeb.ServiceStub,RobotRaconteurServiceIndex.ServiceIndex],
        events: {
            LocalNodeServicesChanged: null
        },
        alias: [
            "GetLocalNodeServices", "RobotRaconteurServiceIndex$ServiceIndex$GetLocalNodeServices",
            "GetRoutedNodes", "RobotRaconteurServiceIndex$ServiceIndex$GetRoutedNodes",
            "GetDetectedNodes", "RobotRaconteurServiceIndex$ServiceIndex$GetDetectedNodes",
            "addLocalNodeServicesChanged", "RobotRaconteurServiceIndex$ServiceIndex$addLocalNodeServicesChanged",
            "removeLocalNodeServicesChanged", "RobotRaconteurServiceIndex$ServiceIndex$removeLocalNodeServicesChanged"
        ],
        ctors: {
            ctor: function (path, c) {
                this.$initialize();
                RobotRaconteurWeb.ServiceStub.ctor.call(this, path, c);
            }
        },
        methods: {
            GetLocalNodeServices: function (rr_cancel) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    rr_mm, 
                    rr_mr, 
                    rr_me, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        if (rr_cancel === void 0) { rr_cancel = new System.Threading.CancellationToken(); }
                                        rr_mm = new RobotRaconteurWeb.MessageEntry.$ctor1(RobotRaconteurWeb.MessageEntryType.FunctionCallReq, "GetLocalNodeServices");
                                        $task1 = this.ProcessRequest(rr_mm, rr_cancel);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        rr_mr = $taskResult1;
                                        rr_me = rr_mr.FindElement("return");
                                        $tcs.setResult(Bridge.cast(this.RRContext.UnpackMapType(System.Int32, RobotRaconteurServiceIndex.ServiceInfo, rr_me.Data), System.Collections.Generic.Dictionary$2(System.Int32,RobotRaconteurServiceIndex.ServiceInfo)));
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            GetRoutedNodes: function (rr_cancel) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    rr_mm, 
                    rr_mr, 
                    rr_me, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        if (rr_cancel === void 0) { rr_cancel = new System.Threading.CancellationToken(); }
                                        rr_mm = new RobotRaconteurWeb.MessageEntry.$ctor1(RobotRaconteurWeb.MessageEntryType.FunctionCallReq, "GetRoutedNodes");
                                        $task1 = this.ProcessRequest(rr_mm, rr_cancel);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        rr_mr = $taskResult1;
                                        rr_me = rr_mr.FindElement("return");
                                        $tcs.setResult(Bridge.cast(this.RRContext.UnpackMapType(System.Int32, RobotRaconteurServiceIndex.NodeInfo, rr_me.Data), System.Collections.Generic.Dictionary$2(System.Int32,RobotRaconteurServiceIndex.NodeInfo)));
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            GetDetectedNodes: function (rr_cancel) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    rr_mm, 
                    rr_mr, 
                    rr_me, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        if (rr_cancel === void 0) { rr_cancel = new System.Threading.CancellationToken(); }
                                        rr_mm = new RobotRaconteurWeb.MessageEntry.$ctor1(RobotRaconteurWeb.MessageEntryType.FunctionCallReq, "GetDetectedNodes");
                                        $task1 = this.ProcessRequest(rr_mm, rr_cancel);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        rr_mr = $taskResult1;
                                        rr_me = rr_mr.FindElement("return");
                                        $tcs.setResult(Bridge.cast(this.RRContext.UnpackMapType(System.Int32, RobotRaconteurServiceIndex.NodeInfo, rr_me.Data), System.Collections.Generic.Dictionary$2(System.Int32,RobotRaconteurServiceIndex.NodeInfo)));
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            DispatchEvent: function (rr_m) {
                var rr_ename = rr_m.MemberName;
                switch (rr_ename) {
                    case "LocalNodeServicesChanged": 
                        {
                            if (!Bridge.staticEquals(this.LocalNodeServicesChanged, null)) {
                                this.LocalNodeServicesChanged();
                            }
                            break;
                        }
                }
            },
            DispatchPipeMessage: function (m) {
                switch (m.MemberName) {
                    default: 
                        throw new System.Exception();
                }
            },
            CallbackCall: function (rr_m) {
                var $step = 0,
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    rr_ename, 
                    rr_mr, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0], $step);
                                switch ($step) {
                                    case 0: {
                                        rr_ename = rr_m.MemberName;
                                        rr_mr = new RobotRaconteurWeb.MessageEntry.$ctor1(RobotRaconteurWeb.MessageEntryType.CallbackCallRet, rr_ename);
                                        rr_mr.ServicePath = rr_m.ServicePath;
                                        rr_mr.RequestID = rr_m.RequestID;
                                        switch (rr_ename) {
                                            default: 
                                                throw new RobotRaconteurWeb.MemberNotFoundException("Member not found");
                                        }
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            DispatchWireMessage: function (m) {
                switch (m.MemberName) {
                    default: 
                        throw new System.Exception();
                }
            }
        }
    });

    Bridge.define("RobotRaconteurServiceIndex.ServiceInfo_stub", {
        inherits: [RobotRaconteurWeb.IStructureStub],
        fields: {
            def: null
        },
        alias: [
            "PackStructure", "RobotRaconteurWeb$IStructureStub$PackStructure",
            "UnpackStructure", "RobotRaconteurWeb$IStructureStub$UnpackStructure"
        ],
        ctors: {
            ctor: function (d) {
                this.$initialize();
                this.def = d;
            }
        },
        methods: {
            PackStructure: function (s1) {
                var m = new (System.Collections.Generic.List$1(RobotRaconteurWeb.MessageElement)).ctor();
                if (s1 == null) {
                    return null;
                }
                var s = Bridge.cast(s1, RobotRaconteurServiceIndex.ServiceInfo);
                m.add(new RobotRaconteurWeb.MessageElement.$ctor1("Name", s.Name));
                m.add(new RobotRaconteurWeb.MessageElement.$ctor1("RootObjectType", s.RootObjectType));
                m.add(new RobotRaconteurWeb.MessageElement.$ctor1("RootObjectImplements", this.def.PackMapType(System.Int32, System.String, s.RootObjectImplements)));
                m.add(new RobotRaconteurWeb.MessageElement.$ctor1("ConnectionURL", this.def.PackMapType(System.Int32, System.String, s.ConnectionURL)));
                m.add(new RobotRaconteurWeb.MessageElement.$ctor1("Attributes", this.def.PackMapType(System.String, System.Object, s.Attributes)));
                return new RobotRaconteurWeb.MessageElementStructure("RobotRaconteurServiceIndex.ServiceInfo", m);
            },
            UnpackStructure: function (T, m) {
                if (m == null) {
                    return Bridge.getDefaultValue(T);
                }
                var s = new RobotRaconteurServiceIndex.ServiceInfo();
                s.Name = RobotRaconteurWeb.MessageElement.FindElement$1(m.Elements, "Name").CastData(System.String);
                s.RootObjectType = RobotRaconteurWeb.MessageElement.FindElement$1(m.Elements, "RootObjectType").CastData(System.String);
                s.RootObjectImplements = Bridge.cast(this.def.UnpackMapType(System.Int32, System.String, RobotRaconteurWeb.MessageElement.FindElement$1(m.Elements, "RootObjectImplements").Data), System.Collections.Generic.Dictionary$2(System.Int32,System.String));
                s.ConnectionURL = Bridge.cast(this.def.UnpackMapType(System.Int32, System.String, RobotRaconteurWeb.MessageElement.FindElement$1(m.Elements, "ConnectionURL").Data), System.Collections.Generic.Dictionary$2(System.Int32,System.String));
                s.Attributes = Bridge.cast(this.def.UnpackMapType(System.String, System.Object, RobotRaconteurWeb.MessageElement.FindElement$1(m.Elements, "Attributes").Data), System.Collections.Generic.Dictionary$2(System.String,System.Object));
                var st;
                try {
                    st = Bridge.cast(Bridge.unbox(s, T), T);
                } catch ($e1) {
                    $e1 = System.Exception.create($e1);
                    var e;
                    if (Bridge.is($e1, System.InvalidCastException)) {
                        e = $e1;
                        throw new RobotRaconteurWeb.DataTypeMismatchException("Wrong structuretype");
                    } else {
                        throw $e1;
                    }
                }
                return st;
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.AbortOperationException", {
        inherits: [RobotRaconteurWeb.RobotRaconteurException],
        ctors: {
            ctor: function (message) {
                this.$initialize();
                RobotRaconteurWeb.RobotRaconteurException.$ctor1.call(this, RobotRaconteurWeb.MessageErrorType.AbortOperation, "RobotRaconteur.AbortOperation", message);
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.ArrayMemory$1", function (T) { return {
        inherits: [RobotRaconteurWeb.ArrayMemoryBase],
        fields: {
            memory: null
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                RobotRaconteurWeb.ArrayMemoryBase.ctor.call(this);

            },
            $ctor1: function (memory) {
                this.$initialize();
                RobotRaconteurWeb.ArrayMemoryBase.ctor.call(this);
                this.memory = memory;
            }
        },
        methods: {
            Attach: function (memory) {
                this.memory = memory;
            },
            GetLength: function (cancel) {
                if (cancel === void 0) { cancel = new System.Threading.CancellationToken(); }
                return System.Threading.Tasks.Task.fromResult(System.Int64.clipu64(System.Array.getLongLength(this.memory)), System.UInt64);
            },
            Read: function (memorypos, buffer, bufferpos, count, cancel) {
                if (cancel === void 0) { cancel = new System.Threading.CancellationToken(); }
                System.Array.copy(this.memory, System.Int64.clip64(memorypos).toNumber(), buffer, System.Int64.clip64(bufferpos).toNumber(), System.Int64.clip64(count).toNumber());
                return System.Threading.Tasks.Task.fromResult(0, System.Int32);
            },
            Write: function (memorypos, buffer, bufferpos, count, cancel) {
                if (cancel === void 0) { cancel = new System.Threading.CancellationToken(); }
                System.Array.copy(buffer, System.Int64.clip64(bufferpos).toNumber(), this.memory, System.Int64.clip64(memorypos).toNumber(), System.Int64.clip64(count).toNumber());
                return System.Threading.Tasks.Task.fromResult(0, System.Int32);
            }
        }
    }; });

    Bridge.define("RobotRaconteurWeb.ArrayMemoryClientImpl$1", function (T) { return {
        inherits: [RobotRaconteurWeb.ArrayMemoryClientImplBase],
        ctors: {
            ctor: function (membername, stub, direction) {
                this.$initialize();
                RobotRaconteurWeb.ArrayMemoryClientImplBase.ctor.call(this, membername, stub, RobotRaconteurWeb.DataTypeUtil.TypeIDFromType(T), RobotRaconteurWeb.DataTypeUtil.size(RobotRaconteurWeb.DataTypeUtil.TypeIDFromType(T)), direction);
            }
        },
        methods: {
            GetBufferLength: function (buffer) {
                return System.Int64.clipu64(System.Array.getLongLength(Bridge.cast(buffer, System.Array.type(T))));
            },
            PackWriteRequest: function (buffer, bufferpos, count) {
                var buffer1 = Bridge.cast(buffer, System.Array.type(T));
                if (bufferpos.equals(System.UInt64(0)) && System.Array.getLongLength(buffer1).equals(System.Int64.clip64(count))) {
                    return buffer1;
                } else if ((System.Array.getLongLength(buffer1).sub(System.Int64.clip64((bufferpos)))).gte(System.Int64.clip64((count)))) {
                    var data = System.Array.init(count, function (){
                        return Bridge.getDefaultValue(T);
                    }, T);
                    System.Array.copy(buffer1, System.Int64.clip64(bufferpos).toNumber(), data, System.Int64(0).toNumber(), System.Int64.clip64(count).toNumber());
                    return data;
                } else {
                    throw new RobotRaconteurWeb.OutOfRangeException("");
                }
            },
            UnpackReadResult: function (res, buffer, bufferpos, count) {
                var data = Bridge.cast(res, System.Array.type(T));
                var buffer1 = Bridge.cast(buffer, System.Array.type(T));
                System.Array.copy(data, System.Int64(0).toNumber(), buffer1, System.Int64.clip64(bufferpos).toNumber(), System.Int64.clip64(count).toNumber());
            }
        }
    }; });

    Bridge.define("RobotRaconteurWeb.ArrayMemoryServiceSkel$1", function (T) { return {
        inherits: [RobotRaconteurWeb.ArrayMemoryServiceSkelBase],
        ctors: {
            ctor: function (membername, skel, direction) {
                if (direction === void 0) { direction = 2; }

                this.$initialize();
                RobotRaconteurWeb.ArrayMemoryServiceSkelBase.ctor.call(this, membername, skel, RobotRaconteurWeb.DataTypeUtil.TypeIDFromType(T), RobotRaconteurWeb.DataTypeUtil.size(RobotRaconteurWeb.DataTypeUtil.TypeIDFromType(T)), direction);

            }
        },
        methods: {
            DoRead: function (memorypos, bufferpos, count, mem) {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    mem1, 
                    buf1, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        mem1 = Bridge.cast(mem, RobotRaconteurWeb.ArrayMemory$1(T));
                                        buf1 = Bridge.cast(RobotRaconteurWeb.DataTypeUtil.ArrayFromDataType(this.element_type, System.Int64.clipu32(count)), System.Array.type(T));
                                        $task1 = mem1.Read(memorypos, buf1, System.UInt64(0), count);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        $tcs.setResult(buf1);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            DoWrite: function (memorypos, buffer, bufferpos, count, mem) {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    mem1, 
                    buf1, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        mem1 = Bridge.cast(mem, RobotRaconteurWeb.ArrayMemory$1(T));
                                        buf1 = Bridge.cast(buffer, System.Array.type(T));
                                        $task1 = mem1.Write(memorypos, buf1, System.UInt64(0), count);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            }
        }
    }; });

    Bridge.define("RobotRaconteurWeb.AsyncStreamTransport", {
        inherits: [RobotRaconteurWeb.ITransportConnection],
        fields: {
            m_LocalEndpoint: 0,
            m_RemoteEndpoint: 0,
            m_RemoteNodeID: null,
            target_nodeid: null,
            target_nodename: null,
            is_server: false,
            node: null,
            parent: null,
            m_Connected: false,
            cancellationToken: null,
            mwrite: null,
            mread: null,
            recbuf: null,
            sendbuf: null,
            swriter: null,
            sreader: null,
            basestream: null,
            m_RequireTls: false,
            m_IsTls: false,
            request_receive_pause: false,
            request_receive_pause_task: null,
            pause_receive_task: null,
            sending: false,
            send_queue: null,
            request_send_pause: false,
            request_send_pause_task: null,
            pause_send_task: null,
            tlastsend: null,
            tlastrec: null,
            tlastrec_mes: null,
            ReceiveTimeout: 0,
            m_HeartbeatPeriod: 0,
            streamop_queue: null,
            streamop_ret: null,
            CheckStreamCapability_ret: null,
            CheckStreamCapability_queue: null
        },
        props: {
            LocalEndpoint: {
                get: function () {
                    return this.m_LocalEndpoint;
                }
            },
            RemoteEndpoint: {
                get: function () {
                    return this.m_RemoteEndpoint;
                }
            },
            RemoteNodeID: {
                get: function () {
                    this;
                    {
                        return this.m_RemoteNodeID;
                    }
                }
            },
            Connected: {
                get: function () {
                    this;
                    {
                        return this.m_Connected;
                    }
                }
            },
            RequireTls: {
                get: function () {
                    return this.m_RequireTls;
                }
            },
            IsTls: {
                get: function () {
                    return this.m_IsTls;
                }
            }
        },
        alias: [
            "LocalEndpoint", "RobotRaconteurWeb$ITransportConnection$LocalEndpoint",
            "RemoteEndpoint", "RobotRaconteurWeb$ITransportConnection$RemoteEndpoint",
            "RemoteNodeID", "RobotRaconteurWeb$ITransportConnection$RemoteNodeID",
            "SendMessage", "RobotRaconteurWeb$ITransportConnection$SendMessage",
            "Close", "RobotRaconteurWeb$ITransportConnection$Close",
            "CheckConnection", "RobotRaconteurWeb$ITransportConnection$CheckConnection"
        ],
        ctors: {
            init: function () {
                this.tlastsend = System.DateTime.getDefaultValue();
                this.tlastrec = System.DateTime.getDefaultValue();
                this.tlastrec_mes = System.DateTime.getDefaultValue();
                this.m_LocalEndpoint = 0;
                this.m_RemoteEndpoint = 0;
                this.m_RemoteNodeID = RobotRaconteurWeb.NodeID.Any;
                this.is_server = false;
                this.m_Connected = false;
                this.cancellationToken = new System.Threading.CancellationTokenSource();
                this.m_RequireTls = false;
                this.m_IsTls = false;
                this.request_receive_pause = false;
                this.sending = false;
                this.send_queue = new (System.Collections.Generic.List$1(System.Tuple$2(System.Threading.Tasks.TaskCompletionSource,RobotRaconteurWeb.Message))).ctor();
                this.request_send_pause = false;
                this.ReceiveTimeout = 2500;
                this.m_HeartbeatPeriod = 5000;
                this.streamop_queue = new (System.Collections.Generic.Queue$1(System.Threading.Tasks.TaskCompletionSource)).ctor();
                this.CheckStreamCapability_queue = new (System.Collections.Generic.Queue$1(System.Threading.Tasks.TaskCompletionSource)).ctor();
            },
            ctor: function (node, parent) {
                this.$initialize();
                this.node = node;
                this.parent = parent;
            }
        },
        methods: {
            ConnectStream: function (s, is_server, target_nodeid, target_nodename, starttls, requiretls, heartbeat_period, cancel) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    recvtask, 
                    rid, 
                    noop, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3], $step);
                                switch ($step) {
                                    case 0: {
                                        this.m_HeartbeatPeriod = heartbeat_period;
                                        this.m_RequireTls = requiretls;
                                        this.sendbuf = System.Array.init(100000, 0, System.Byte);
                                        this.mwrite = new System.IO.MemoryStream.$ctor1(this.sendbuf);

                                        this.recbuf = System.Array.init(100000, 0, System.Byte);
                                        this.mread = new System.IO.MemoryStream.$ctor1(this.recbuf);

                                        this.swriter = new RobotRaconteurWeb.ArrayBinaryWriter.ctor(this.mwrite, this.sendbuf, this.sendbuf.length);
                                        this.sreader = new RobotRaconteurWeb.ArrayBinaryReader.ctor(this.mread, this.recbuf, this.recbuf.length);

                                        this.is_server = is_server;
                                        this.target_nodename = target_nodename;
                                        this.target_nodeid = target_nodeid;

                                        if (this.target_nodename == null) {
                                            this.target_nodename = "";
                                        }
                                        if (RobotRaconteurWeb.NodeID.op_Equality(this.target_nodeid, null)) {
                                            this.target_nodeid = RobotRaconteurWeb.NodeID.Any;
                                        }

                                        this.basestream = s;

                                        this.tlastsend = System.DateTime.getUtcNow();
                                        this.tlastrec = System.DateTime.getUtcNow();
                                        this.tlastrec_mes = System.DateTime.getUtcNow();

                                        recvtask = this.DoReceive();

                                        if (!is_server) {
                                            $step = 1;
                                            continue;
                                        } 
                                        $step = 3;
                                        continue;
                                    }
                                    case 1: {
                                        if (starttls) {
                                            throw new System.NotImplementedException.$ctor1("TLS support not implemented");
                                        }

                                        $task1 = this.StreamOp("CreateConnection", { Item1: this.target_nodeid, Item2: this.target_nodename }, cancel);
                                        $step = 2;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        rid = Bridge.cast($taskResult1, RobotRaconteurWeb.NodeID);
                                        this;
                                        {
                                            this.m_RemoteNodeID = rid;
                                        }
                                        $step = 3;
                                        continue;
                                    }
                                    case 3: {
                                        noop = this.DoHeartbeat();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            RequestReceivePause: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    request_pause_task1, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        request_pause_task1 = new System.Threading.Tasks.TaskCompletionSource();
                                        this;
                                        {
                                            if (this.request_receive_pause) {
                                                if (this.request_receive_pause_task != null) {
                                                    request_pause_task1 = this.request_receive_pause_task;
                                                } else {
                                                    $tcs.setResult(null);
                                                    return;
                                                }
                                            } else {
                                                this.request_receive_pause = true;
                                                this.request_receive_pause_task = request_pause_task1;
                                            }
                                        }

                                        $task1 = request_pause_task1.task;
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            ResumeReceivePause: function () {
                var pause_task1 = null;
                this;
                {
                    this.request_receive_pause = false;
                    pause_task1 = this.pause_receive_task;
                }
                if (pause_task1 != null) {
                    pause_task1.trySetResult(0);
                }

                return System.Threading.Tasks.Task.fromResult(0, System.Int32);

            },
            DoReceive: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $task3, 
                    $taskResult3, 
                    $task4, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    request_pause_task1, 
                    mempos, 
                    n, 
                    seed, 
                    meslength, 
                    newbuf, 
                    n1, 
                    mes, 
                    noop, 
                    $async_e, 
                    $async_e1, 
                    $async_e2, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([2,3,4,5,6,7,8,9,10,11,12,13,14,16,17,18,19,20,22,23,24,25], $step);
                                switch ($step) {


                                    case 2: {
                                        if ( this.Connected ) {
                                            $step = 3;
                                            continue;
                                        } 
                                        $step = 23;
                                        continue;
                                    }
                                    case 3: {
                                        request_pause_task1 = null;
                                        this;
                                        {
                                            if (this.request_receive_pause) {
                                                this.pause_receive_task = new System.Threading.Tasks.TaskCompletionSource();
                                                request_pause_task1 = this.request_receive_pause_task;
                                                this.request_receive_pause_task = null;
                                            }
                                        }

                                        if (this.pause_receive_task != null && request_pause_task1 != null) {
                                            $step = 4;
                                            continue;
                                        } 
                                        $step = 6;
                                        continue;
                                    }
                                    case 4: {
                                        request_pause_task1.trySetResult(0);
                                        $task1 = this.pause_receive_task.task;
                                        $step = 5;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 5: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $step = 6;
                                        continue;
                                    }
                                    case 6: {
                                        this;
                                        {
                                            this.pause_receive_task = null;
                                        }

                                        mempos = 0;
                                        
                                        $step = 7;
                                        continue;
                                    }
                                    case 7: {
                                        if ( mempos < 8 ) {
                                            $step = 8;
                                            continue;
                                        } 
                                        $step = 10;
                                        continue;
                                    }
                                    case 8: {
                                        $task2 = RobotRaconteurWeb.Extensions.Extensions.ConfigureAwait(System.Int32, RobotRaconteurWeb.Extensions.Extensions.ReadAsync(this.basestream, this.recbuf, mempos, ((8 - mempos) | 0)), false);
                                        $step = 9;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 9: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        n = $taskResult2;
                                        if (n === 0) {
                                            this.Close();
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        mempos = (mempos + n) | 0;

                                        $step = 7;
                                        continue;
                                    }
                                    case 10: {
                                        seed = System.Text.Encoding.ASCII.GetString$1(this.recbuf, 0, 4);
                                        if (!Bridge.referenceEquals(seed, "RRAC")) {
                                            throw new RobotRaconteurWeb.IOException("Invalid seed");
                                        }

                                        meslength = (System.BitConverter.toUInt32(this.recbuf, 4)) | 0;

                                        if (this.recbuf.length < meslength) {
                                            newbuf = System.Array.init(Bridge.Int.clip32(meslength * 1.2), 0, System.Byte);
                                            RobotRaconteurWeb.Extensions.Buffer.BlockCopy$2(this.recbuf, 0, newbuf, 0, 8);
                                            this.recbuf = newbuf;
                                            this.mread = new System.IO.MemoryStream.$ctor4(this.recbuf, 0, this.recbuf.length, true);
                                            this.sreader = new RobotRaconteurWeb.ArrayBinaryReader.ctor(this.mread, this.recbuf, this.recbuf.length);
                                        }

                                        
                                        $step = 11;
                                        continue;
                                    }
                                    case 11: {
                                        if ( mempos < meslength ) {
                                            $step = 12;
                                            continue;
                                        } 
                                        $step = 14;
                                        continue;
                                    }
                                    case 12: {
                                        $task3 = RobotRaconteurWeb.Extensions.Extensions.ConfigureAwait(System.Int32, RobotRaconteurWeb.Extensions.Extensions.ReadAsync(this.basestream, this.recbuf, mempos, ((meslength - mempos) | 0)), false);
                                        $step = 13;
                                        if ($task3.isCompleted()) {
                                            continue;
                                        }
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 13: {
                                        $taskResult3 = $task3.getAwaitedResult();
                                        n1 = $taskResult3;
                                        if (n1 === 0) {
                                            this.Close();
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        mempos = (mempos + n1) | 0;

                                        $step = 11;
                                        continue;
                                    }
                                    case 14: {
                                        if (mempos === meslength) {
                                            $step = 15;
                                            continue;
                                        } 
                                        $step = 22;
                                        continue;
                                    }

                                    case 16: {
                                        this.mread.Position = System.Int64(0);
                                        this.sreader.Reset(meslength);
                                        mes = new RobotRaconteurWeb.Message();
                                        mes.Read(this.sreader);

                                        if ((mes.entries.Count === 1) && (mes.entries.getItem(0).EntryType === RobotRaconteurWeb.MessageEntryType.StreamOp || mes.entries.getItem(0).EntryType === RobotRaconteurWeb.MessageEntryType.StreamOpRet)) {
                                            $step = 17;
                                            continue;
                                        } 
                                        $step = 19;
                                        continue;
                                    }
                                    case 17: {
                                        $task4 = this.StreamOpMessageReceived(mes);
                                        $step = 18;
                                        if ($task4.isCompleted()) {
                                            continue;
                                        }
                                        $task4.continue($asyncBody);
                                        return;
                                    }
                                    case 18: {
                                        $task4.getAwaitedResult();
                                        $step = 2;
                                        continue;
                                    }
                                    case 19: {
                                        noop = RobotRaconteurWeb.Extensions.Extensions.IgnoreResult(this.ProcessMessage(mes));
                                        $step = 21;
                                        continue;
                                    }
                                    case 20: {
                                        this.Close();
                                        $async_e = null;
                                        $step = 21;
                                        continue;
                                    }

                                    case 22: {
                                        
                                        $step = 2;
                                        continue;
                                    }
                                    case 23: {
                                        $step = 25;
                                        continue;
                                    }
                                    case 24: {
                                        this.Close();
                                        $async_e = null;
                                        $step = 25;
                                        continue;
                                    }
                                    case 25: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            if ( $step >= 16 && $step <= 19 ) {
                                $step = 20;
                                $asyncBody();
                                return;
                            }
                            if ( $step >= 1 && $step <= 23 ) {
                                $step = 24;
                                $asyncBody();
                                return;
                            }
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            ProcessMessage: function (mes) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $task3, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    RemoteNodeID1, 
                    local_ep, 
                    remote_ep, 
                    bad_message, 
                    ret1, 
                    noop, 
                    ret11, 
                    noop1, 
                    ret, 
                    noop2, 
                    $e1, 
                    command, 
                    $async_e, 
                    $async_e1, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([1,2,3,4,5,6,7,8,9,10], $step);
                                switch ($step) {

                                    case 1: {
                                        this;
                                        {
                                            RemoteNodeID1 = this.m_RemoteNodeID;
                                            local_ep = this.m_LocalEndpoint;
                                            remote_ep = this.m_RemoteEndpoint;
                                        }

                                        if (this.RequireTls && !this.IsTls) {
                                            bad_message = true;
                                            if (mes.entries.Count === 1) {
                                                if (mes.entries.getItem(0).EntryType === RobotRaconteurWeb.MessageEntryType.StreamOp && Bridge.referenceEquals(mes.entries.getItem(0).MemberName, "STARTTLS")) {
                                                    bad_message = false;
                                                }
                                            }
                                            if (bad_message) {
                                                this.Close();
                                                $tcs.setResult(null);
                                                return;
                                            }
                                        }

                                        if (this.IsTls) {
                                            if (!RemoteNodeID1.IsAnyNode) {

                                                if (RobotRaconteurWeb.NodeID.op_Inequality(RemoteNodeID1, mes.header.SenderNodeID)) {
                                                    ret1 = this.node.GenerateErrorReturnMessage(mes, RobotRaconteurWeb.MessageErrorType.NodeNotFound, "RobotRaconteurNode.NodeNotFound", "Invalid sender node");
                                                    if (ret1.entries.Count > 0) {
                                                        noop = RobotRaconteurWeb.Extensions.Extensions.IgnoreResult(this.SendMessage(ret1, Bridge.getDefaultValue(System.Threading.CancellationToken)));
                                                        $tcs.setResult(null);
                                                        return;
                                                    }
                                                }
                                            }

                                            if (local_ep !== 0 && remote_ep !== 0) {
                                                if (local_ep !== mes.header.ReceiverEndpoint || remote_ep !== mes.header.SenderEndpoint) {
                                                    ret11 = this.node.GenerateErrorReturnMessage(mes, RobotRaconteurWeb.MessageErrorType.InvalidEndpoint, "RobotRaconteurNode.InvalidEndpoint", "Invalid sender endpoint");
                                                    if (ret11.entries.Count > 0) {
                                                        noop1 = RobotRaconteurWeb.Extensions.Extensions.IgnoreResult(this.SendMessage(ret11, Bridge.getDefaultValue(System.Threading.CancellationToken)));
                                                        $tcs.setResult(null);
                                                        return;
                                                    }
                                                }
                                            }
                                        }




                                        $task1 = this.parent.RobotRaconteurWeb$AsyncStreamTransportParent$SpecialRequest(mes);
                                        $step = 2;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        ret = $taskResult1;
                                        if (ret != null) {
                                            try {
                                                if ((mes.entries.getItem(0).EntryType === RobotRaconteurWeb.MessageEntryType.ConnectionTest || mes.entries.getItem(0).EntryType === RobotRaconteurWeb.MessageEntryType.ConnectionTestRet)) {
                                                    if (mes.entries.getItem(0).Error !== RobotRaconteurWeb.MessageErrorType.None) {
                                                        this.Close();
                                                        $tcs.setResult(null);
                                                        return;
                                                    }
                                                }

                                                if ((ret.entries.getItem(0).EntryType === RobotRaconteurWeb.MessageEntryType.ConnectClientRet || ret.entries.getItem(0).EntryType === RobotRaconteurWeb.MessageEntryType.ReconnectClient) && ret.entries.getItem(0).Error === RobotRaconteurWeb.MessageErrorType.None) {
                                                    if (RobotRaconteurWeb.NodeID.op_Equality(ret.header.SenderNodeID, this.node.NodeID)) {

                                                        this.m_RemoteEndpoint = ret.header.ReceiverEndpoint;
                                                        this.m_LocalEndpoint = ret.header.SenderEndpoint;
                                                        this.parent.RobotRaconteurWeb$AsyncStreamTransportParent$AddTransportConnection(ret.header.SenderEndpoint, this);
                                                    } else {
                                                        this.Close();
                                                    }
                                                }

                                                if (mes.entries.getItem(0).EntryType !== RobotRaconteurWeb.MessageEntryType.ConnectionTest && mes.entries.getItem(0).EntryType !== RobotRaconteurWeb.MessageEntryType.ConnectionTestRet) {
                                                    this.tlastrec = System.DateTime.getUtcNow();
                                                }


                                                noop2 = RobotRaconteurWeb.Extensions.Extensions.IgnoreResult(this.SendMessage(ret, Bridge.getDefaultValue(System.Threading.CancellationToken)));
                                            } catch ($e1) {
                                                $e1 = System.Exception.create($e1);
                                                this.Close();
                                            }

                                            $tcs.setResult(null);
                                            return;
                                        }


                                        this.tlastrec = System.DateTime.getUtcNow();

                                        if ((mes.entries.Count === 1) && (mes.entries.getItem(0).EntryType === RobotRaconteurWeb.MessageEntryType.StreamOp || mes.entries.getItem(0).EntryType === RobotRaconteurWeb.MessageEntryType.StreamOpRet)) {
                                            $step = 3;
                                            continue;
                                        } 
                                        $step = 5;
                                        continue;
                                    }
                                    case 3: {
                                        $task2 = this.StreamOpMessageReceived(mes);
                                        $step = 4;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 4: {
                                        $task2.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    case 5: {
                                        if (mes.entries.Count === 1 && (mes.entries.getItem(0).EntryType === RobotRaconteurWeb.MessageEntryType.StreamCheckCapability || mes.entries.getItem(0).EntryType === RobotRaconteurWeb.MessageEntryType.StreamCheckCapabilityRet)) {
                                            this.CheckStreamCapability_MessageReceived(mes);
                                            $tcs.setResult(null);
                                            return;
                                        }

                                        if (mes.entries.Count === 1) {
                                            if (mes.entries.getItem(0).EntryType === RobotRaconteurWeb.MessageEntryType.ConnectClientRet && remote_ep === 0) {
                                                this;
                                                {
                                                    if (this.m_RemoteEndpoint === 0) {
                                                        this.m_RemoteEndpoint = mes.header.SenderEndpoint;
                                                    }
                                                    remote_ep = this.m_RemoteEndpoint;
                                                }
                                            }

                                        }

                                        if (this.IsTls) {
                                            if (local_ep === 0 || remote_ep === 0) {
                                                if (mes.entries.Count !== 1) {
                                                    this.Close();
                                                    $tcs.setResult(null);
                                                    return;
                                                }
                                            }

                                            command = mes.entries.getItem(0).EntryType;
                                            if ((command & 65535) > 500) {
                                                this.Close();
                                                $tcs.setResult(null);
                                                return;
                                            }
                                        }

                                        if (!((mes.entries.Count === 1) && ((mes.entries.getItem(0).EntryType === RobotRaconteurWeb.MessageEntryType.ConnectionTest) || (mes.entries.getItem(0).EntryType === RobotRaconteurWeb.MessageEntryType.ConnectionTestRet)))) {
                                            $step = 6;
                                            continue;
                                        } 
                                        $step = 8;
                                        continue;
                                    }
                                    case 6: {
                                        this.tlastrec_mes = System.DateTime.getUtcNow();
                                        $task3 = this.ProcessMessage2(mes);
                                        $step = 7;
                                        if ($task3.isCompleted()) {
                                            continue;
                                        }
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 7: {
                                        $task3.getAwaitedResult();
                                        $step = 8;
                                        continue;
                                    }
                                    case 8: {
                                        $step = 10;
                                        continue;
                                    }
                                    case 9: {
                                        this.Close();
                                        $async_e = null;
                                        $step = 10;
                                        continue;
                                    }
                                    case 10: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            if ( $step >= 1 && $step <= 8 ) {
                                $step = 9;
                                $asyncBody();
                                return;
                            }
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            ProcessMessage2: function (m) {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $async_e1, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([1,2,3,4,5], $step);
                                switch ($step) {

                                    case 1: {
                                        RobotRaconteurWeb.Transport.m_CurrentThreadTransportConnectionURL = this.GetConnectionURL();
                                        RobotRaconteurWeb.Transport.m_CurrentThreadTransport = this;
                                        $task1 = this.MessageReceived(m);
                                        $step = 2;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $task1.getAwaitedResult();
                                        $step = 4;
                                        continue;
                                    }
                                    case 3: {
                                        this.Close();
                                        $async_e = null;
                                        $step = 4;
                                        continue;
                                    }
                                    case 4: {
                                        RobotRaconteurWeb.Transport.m_CurrentThreadTransportConnectionURL = null;
                                        RobotRaconteurWeb.Transport.m_CurrentThreadTransport = null;

                                        if ($jumpFromFinally > -1) {
                                            $step = $jumpFromFinally;
                                            $jumpFromFinally = null;
                                        } else if ($async_e) {
                                            $tcs.setException($async_e);
                                            return;
                                        } else if (Bridge.isDefined($returnValue)) {
                                            $tcs.setResult($returnValue);
                                            return;
                                        }
                                        $step = 5;
                                        continue;
                                    }
                                    case 5: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            if ( $step >= 1 && $step <= 2 ) {
                                $step = 3;
                                $asyncBody();
                                return;
                            }
                            if ($step >= 1 && $step <= 3) {
                                $step = 4;
                                $asyncBody();
                                return;
                            }
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            MessageReceived: function (m) {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = this.parent.RobotRaconteurWeb$AsyncStreamTransportParent$MessageReceived(m);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            RequestSendPause: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    request_pause_task1, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3], $step);
                                switch ($step) {
                                    case 0: {
                                        request_pause_task1 = null;

                                        this;
                                        {
                                            if (!this.sending) {
                                                this.sending = true;

                                            } else {
                                                request_pause_task1 = new System.Threading.Tasks.TaskCompletionSource();
                                                if (this.request_send_pause) {
                                                    if (this.request_send_pause_task != null) {
                                                        request_pause_task1 = this.request_send_pause_task;
                                                    } else {
                                                        $tcs.setResult(null);
                                                        return;
                                                    }
                                                } else {
                                                    this.request_send_pause = true;
                                                    this.request_send_pause_task = request_pause_task1;

                                                    if (!this.sending) {
                                                        this.pause_send_task = new System.Threading.Tasks.TaskCompletionSource();

                                                    }

                                                }
                                            }
                                        }

                                        if (request_pause_task1 != null) {
                                            $step = 1;
                                            continue;
                                        } 
                                        $step = 3;
                                        continue;
                                    }
                                    case 1: {
                                        $task1 = request_pause_task1.task;
                                        $step = 2;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $step = 3;
                                        continue;
                                    }
                                    case 3: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            ResumeSendPause: function () {
                var pause_task1 = null;
                this;
                {
                    this.request_send_pause = false;
                    pause_task1 = this.pause_send_task;

                    if (pause_task1 == null) {
                        if (this.send_queue.Count > 0) {
                            var t = this.send_queue.getItem(0);
                            this.send_queue.removeAt(0);
                            t.Item1.trySetResult(0);
                        } else {
                            this.sending = false;
                        }
                    }

                }

                if (pause_task1 != null) {
                    pause_task1.trySetResult(0);
                }



                return System.Threading.Tasks.Task.fromResult(0, System.Int32);
            },
            SendMessage: function (m, cancel) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $task3, 
                    $taskResult3, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    waiter, 
                    replaced, 
                    remove, 
                    h1, 
                    h2, 
                    mm1, 
                    mm2, 
                    c, 
                    request_pause_task1, 
                    meslength, 
                    e, 
                    $async_e, 
                    next_send, 
                    t, 
                    $async_e1, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,6,7,8,9,10,11,12,13], $step);
                                switch ($step) {
                                    case 0: {
                                        waiter = null;

                                        this;
                                        {
                                            if (!this.m_Connected) {
                                                throw new RobotRaconteurWeb.ConnectionException("Transport connection closed");
                                            }
                                            if (this.sending) {
                                                waiter = new System.Threading.Tasks.TaskCompletionSource();
                                                RobotRaconteurWeb.Extensions.Extensions.AttachCancellationToken(System.Int32, waiter, cancel, new System.TimeoutException.$ctor1("Timed out"));

                                                replaced = false;

                                                for (var i = 0; i < this.send_queue.Count; ) {
                                                    remove = false;

                                                    h1 = m.header;
                                                    h2 = this.send_queue.getItem(i).Item2.header;
                                                    if (Bridge.referenceEquals(h1.ReceiverNodeName, h2.ReceiverNodeName) && Bridge.referenceEquals(h1.SenderNodeName, h2.SenderNodeName) && RobotRaconteurWeb.NodeID.op_Equality(h1.ReceiverNodeID, h2.ReceiverNodeID) && RobotRaconteurWeb.NodeID.op_Equality(h1.SenderNodeID, h2.SenderNodeID) && h1.ReceiverEndpoint === h2.ReceiverEndpoint && h1.SenderEndpoint === h2.SenderEndpoint) {
                                                        if (this.send_queue.getItem(i).Item2.entries.Count === m.entries.Count && m.entries.Count === 1) {
                                                            mm1 = this.send_queue.getItem(i).Item2.entries.getItem(0);
                                                            mm2 = m.entries.getItem(0);
                                                            if (mm1.EntryType === RobotRaconteurWeb.MessageEntryType.ConnectionTest && mm2.EntryType === RobotRaconteurWeb.MessageEntryType.ConnectionTest) {
                                                                $tcs.setResult(null);
                                                                return;
                                                            }

                                                            if (mm1.EntryType === RobotRaconteurWeb.MessageEntryType.WirePacket && mm2.EntryType === RobotRaconteurWeb.MessageEntryType.WirePacket) {
                                                                if (Bridge.referenceEquals(mm1.ServicePath, mm2.ServicePath) && Bridge.referenceEquals(mm1.MemberName, mm2.MemberName)) {
                                                                    remove = true;
                                                                }
                                                            }
                                                        }
                                                    }

                                                    if (remove) {

                                                        c = this.send_queue.getItem(i).Item1;

                                                        if (replaced) {
                                                            this.send_queue.removeAt(i);
                                                        } else {
                                                            this.send_queue.setItem(i, { Item1: waiter, Item2: m });
                                                            i = (i + 1) | 0;
                                                        }
                                                        c.trySetResult(1);
                                                    } else {
                                                        i = (i + 1) | 0;
                                                    }
                                                }


                                                if (!replaced) {
                                                    this.send_queue.add({ Item1: waiter, Item2: m });
                                                }
                                            } else {
                                                this.sending = true;
                                            }

                                        }

                                        if (waiter != null) {
                                            $step = 1;
                                            continue;
                                        } 
                                        $step = 5;
                                        continue;
                                    }
                                    case 1: {
                                        $task1 = waiter.task;
                                        $step = 2;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        if ($taskResult1 !== 0) {
                                            $step = 3;
                                            continue;
                                        } 
                                        $step = 4;
                                        continue;
                                    }
                                    case 3: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    case 4: {
                                        ;
                                        if (!this.Connected) {
                                            throw new RobotRaconteurWeb.ConnectionException("Transport connection closed");
                                        }
                                        $step = 5;
                                        continue;
                                    }
                                    case 5: {
                                        request_pause_task1 = null;
                                        this;
                                        {
                                            if (this.request_send_pause) {

                                                this.pause_send_task = new System.Threading.Tasks.TaskCompletionSource();
                                                request_pause_task1 = this.request_send_pause_task;
                                                this.request_send_pause_task = null;
                                            }
                                        }

                                        if (this.pause_send_task != null && request_pause_task1 != null) {
                                            $step = 6;
                                            continue;
                                        } 
                                        $step = 8;
                                        continue;
                                    }
                                    case 6: {
                                        request_pause_task1.trySetResult(0);
                                        $task2 = this.pause_send_task.task;
                                        $step = 7;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 7: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        $step = 8;
                                        continue;
                                    }
                                    case 8: {
                                        this;
                                        {
                                            this.pause_send_task = null;
                                        }

                                        
                                        $step = 9;
                                        continue;
                                    }
                                    case 9: {
                                        meslength = m.ComputeSize();

                                        if (System.Int64(meslength).gt(System.Int64(this.sendbuf.length))) {
                                            this.sendbuf = System.Array.init(Bridge.Int.clip32(meslength * 1.2), 0, System.Byte);
                                            this.mwrite = new System.IO.MemoryStream.$ctor4(this.sendbuf, 0, this.sendbuf.length, true);
                                            this.swriter = new RobotRaconteurWeb.ArrayBinaryWriter.ctor(this.mwrite, this.sendbuf, this.sendbuf.length);
                                        }

                                        this.mwrite.Position = System.Int64(0);
                                        this.swriter.Reset((meslength | 0));
                                        m.Write(this.swriter);

                                        this.tlastsend = System.DateTime.getUtcNow();
                                        $task3 = RobotRaconteurWeb.Extensions.Extensions.ConfigureAwait(System.Int32, RobotRaconteurWeb.Extensions.Extensions.WriteAsync(this.basestream, this.sendbuf, 0, System.Int64.clip32(this.mwrite.Position), cancel), false);
                                        $step = 10;
                                        if ($task3.isCompleted()) {
                                            continue;
                                        }
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 10: {
                                        $taskResult3 = $task3.getAwaitedResult();
                                        $step = 12;
                                        continue;
                                    }
                                    case 11: {
                                        this.Close();
                                        throw e;
                                        $async_e = null;
                                        $step = 12;
                                        continue;
                                    }
                                    case 12: {
                                        next_send = null;
                                        this;
                                        {
                                            if (this.send_queue.Count > 0) {
                                                t = this.send_queue.getItem(0);
                                                this.send_queue.removeAt(0);
                                                next_send = t.Item1;
                                            } else {
                                                this.sending = false;
                                            }
                                        }

                                        if (next_send != null) {
                                            next_send.trySetResult(0);
                                        }



                                        if ($jumpFromFinally > -1) {
                                            $step = $jumpFromFinally;
                                            $jumpFromFinally = null;
                                        } else if ($async_e) {
                                            $tcs.setException($async_e);
                                            return;
                                        } else if (Bridge.isDefined($returnValue)) {
                                            $tcs.setResult($returnValue);
                                            return;
                                        }
                                        $step = 13;
                                        continue;
                                    }
                                    case 13: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            if ( $step >= 9 && $step <= 10 ) {
                                e = $async_e;
                                $step = 11;
                                $asyncBody();
                                return;
                            }
                            if ($step >= 9 && $step <= 11) {
                                $step = 12;
                                $asyncBody();
                                return;
                            }
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            DoHeartbeat: function () {
                var $step = 0,
                    $task1, 
                    $task2, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    m, 
                    mm, 
                    $async_e, 
                    $async_e1, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([2,3,4,5,6,7,8,9,10], $step);
                                switch ($step) {


                                    case 2: {
                                        if ( this.m_Connected ) {
                                            $step = 3;
                                            continue;
                                        } 
                                        $step = 8;
                                        continue;
                                    }
                                    case 3: {
                                        $task1 = System.Threading.Tasks.Task.delay(500, this.cancellationToken.token);
                                        $step = 4;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 4: {
                                        $task1.getAwaitedResult();
                                        if ((System.DateTime.subdd(System.DateTime.getUtcNow(), this.tlastsend)).getTotalMilliseconds() > this.m_HeartbeatPeriod) {
                                            $step = 5;
                                            continue;
                                        } 
                                        $step = 7;
                                        continue;
                                    }
                                    case 5: {
                                        m = new RobotRaconteurWeb.Message();
                                        m.header = new RobotRaconteurWeb.MessageHeader();
                                        m.header.SenderNodeID = this.node.NodeID;
                                        mm = new RobotRaconteurWeb.MessageEntry.$ctor1(RobotRaconteurWeb.MessageEntryType.ConnectionTest, "");
                                        m.entries.add(mm);

                                        $task2 = this.SendMessage(m, Bridge.getDefaultValue(System.Threading.CancellationToken));
                                        $step = 6;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 6: {
                                        $task2.getAwaitedResult();
                                        $step = 7;
                                        continue;
                                    }
                                    case 7: {
                                        if ((System.DateTime.subdd(this.tlastsend, this.tlastrec)).getTotalMilliseconds() > this.ReceiveTimeout) {
                                            this.Close();
                                        } else if ((System.DateTime.subdd(System.DateTime.getUtcNow(), this.tlastrec_mes)).getTotalMilliseconds() > this.node.TransportInactivityTimeout) {
                                            this.Close();
                                        }

                                        $step = 2;
                                        continue;
                                    }
                                    case 8: {
                                        $step = 10;
                                        continue;
                                    }
                                    case 9: {
                                        this.Close();
                                        $async_e = null;
                                        $step = 10;
                                        continue;
                                    }
                                    case 10: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            if ( $step >= 1 && $step <= 8 ) {
                                $step = 9;
                                $asyncBody();
                                return;
                            }
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            Close: function () {
                var $t, $t1, $t2, $t3, $t4;
                var r1 = null;
                var r2 = null;

                var q1 = new (System.Collections.Generic.List$1(System.Threading.Tasks.TaskCompletionSource)).ctor();
                var q2 = new (System.Collections.Generic.List$1(System.Threading.Tasks.TaskCompletionSource)).ctor();

                var h1 = null;
                var h2 = null;


                this;
                {
                    if (!this.m_Connected) {
                        return;
                    }
                    this.m_Connected = false;

                    try {
                        this.parent.RobotRaconteurWeb$AsyncStreamTransportParent$RemoveTransportConnection(this);
                    } catch ($e1) {
                        $e1 = System.Exception.create($e1);
                    }


                    $t = Bridge.getEnumerator(this.send_queue);
                    try {
                        while ($t.moveNext()) {
                            var t = $t.Current;
                            t.Item1.trySetException(new RobotRaconteurWeb.ConnectionException("Transport connection closed"));
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }

                    this.send_queue.clear();

                    $t1 = Bridge.getEnumerator(this.streamop_queue);
                    try {
                        while ($t1.moveNext()) {
                            var t1 = $t1.Current;
                            q1.add(t1);
                        }
                    } finally {
                        if (Bridge.is($t1, System.IDisposable)) {
                            $t1.System$IDisposable$Dispose();
                        }
                    }

                    this.streamop_queue.Clear();

                    r1 = this.streamop_ret;
                    this.streamop_ret = null;

                    if (this.streamop_ret != null) {
                        this.streamop_ret.trySetException(new RobotRaconteurWeb.ConnectionException("Transport connection closed"));
                        this.streamop_ret = null;
                    }

                    $t2 = Bridge.getEnumerator(this.CheckStreamCapability_queue);
                    try {
                        while ($t2.moveNext()) {
                            var t2 = $t2.Current;
                            q2.add(t2);
                        }
                    } finally {
                        if (Bridge.is($t2, System.IDisposable)) {
                            $t2.System$IDisposable$Dispose();
                        }
                    }

                    this.CheckStreamCapability_queue.Clear();

                    r2 = this.CheckStreamCapability_ret;
                    this.CheckStreamCapability_ret = null;
                }

                if (r1 != null) {
                    r1.trySetException(new RobotRaconteurWeb.ConnectionException("Transport connection closed"));
                }
                if (r2 != null) {
                    r2.trySetException(new RobotRaconteurWeb.ConnectionException("Transport connection closed"));
                }

                $t3 = Bridge.getEnumerator(q1);
                try {
                    while ($t3.moveNext()) {
                        var q = $t3.Current;
                        q.trySetException(new RobotRaconteurWeb.ConnectionException("Transport connection closed"));
                    }
                } finally {
                    if (Bridge.is($t3, System.IDisposable)) {
                        $t3.System$IDisposable$Dispose();
                    }
                }
                $t4 = Bridge.getEnumerator(q2);
                try {
                    while ($t4.moveNext()) {
                        var q3 = $t4.Current;
                        q3.trySetException(new RobotRaconteurWeb.ConnectionException("Transport connection closed"));
                    }
                } finally {
                    if (Bridge.is($t4, System.IDisposable)) {
                        $t4.System$IDisposable$Dispose();
                    }
                }

                if (h1 != null) {
                    h1.trySetCanceled();
                }
                if (h2 != null) {
                    h2.trySetCanceled();
                }

                this.cancellationToken.cancel();

                try {
                    this.basestream.Close();
                } catch ($e2) {
                    $e2 = System.Exception.create($e2);
                }

            },
            CheckConnection: function (endpoint) {
                if (endpoint !== this.LocalEndpoint) {
                    throw new RobotRaconteurWeb.InvalidEndpointException("Incorrect Transportendpoint");
                }

                if (!this.m_Connected) {
                    throw new RobotRaconteurWeb.ConnectionException("Transport not connected");
                }
            },
            PackStreamOpRequest: function (command, args) {
                var mm = new RobotRaconteurWeb.MessageEntry.$ctor1(RobotRaconteurWeb.MessageEntryType.StreamOp, command);

                if (Bridge.referenceEquals(command, "GetRemoteNodeID")) {

                } else {
                    throw new System.InvalidOperationException.$ctor1("Unknown StreamOp command");
                }

                return System.Threading.Tasks.Task.fromResult(mm, RobotRaconteurWeb.MessageEntry);

            },
            UnpackStreamOpResponse: function (response, header) {
                var command = response.MemberName;
                switch (command) {
                    case "GetRemoteNodeID": 
                        {
                            var n = header.SenderNodeID;
                            return System.Threading.Tasks.Task.fromResult(n, System.Object);
                        }
                    case "CreateConnection": 
                        {
                            this;
                            {

                                if (response.Error !== RobotRaconteurWeb.MessageErrorType.None && response.Error !== RobotRaconteurWeb.MessageErrorType.ProtocolError) {
                                    throw RobotRaconteurWeb.RobotRaconteurExceptionUtil.MessageEntryToException(response);
                                }

                                if (!this.m_RemoteNodeID.IsAnyNode) {
                                    if (RobotRaconteurWeb.NodeID.op_Inequality(header.SenderNodeID, this.m_RemoteNodeID)) {
                                        throw new RobotRaconteurWeb.ConnectionException("Invalid node connection");
                                    }
                                } else {
                                    if (!Bridge.referenceEquals(this.target_nodename, "")) {
                                        if (!Bridge.referenceEquals(this.target_nodename, header.SenderNodeName)) {
                                            throw new RobotRaconteurWeb.ConnectionException("Invalid node connection");
                                        }
                                    }

                                    if (!this.target_nodeid.IsAnyNode) {
                                        if (RobotRaconteurWeb.NodeID.op_Inequality(this.target_nodeid, header.SenderNodeID)) {
                                            throw new RobotRaconteurWeb.ConnectionException("Invalid node connection");
                                        }
                                    }
                                }
                            }

                            var n1 = header.SenderNodeID;
                            return System.Threading.Tasks.Task.fromResult(n1, System.Object);
                        }
                    default: 
                        throw new RobotRaconteurWeb.MemberNotFoundException("Unknown command");
                }

            },
            ProcessStreamOpRequest: function (request, header) {
                var command = request.MemberName;
                var mmret = new RobotRaconteurWeb.MessageEntry.$ctor1(RobotRaconteurWeb.MessageEntryType.StreamOpRet, command);

                try {
                    switch (command) {
                        case "GetRemoteNodeID": 
                            break;
                        case "CreateConnection": 
                            {
                                this;
                                {
                                    if (header.ReceiverNodeID.IsAnyNode && Bridge.referenceEquals(header.ReceiverNodeName, "") || Bridge.referenceEquals(header.ReceiverNodeName, this.node.NodeName)) {
                                        this.m_RemoteNodeID = header.SenderNodeID;
                                        return System.Threading.Tasks.Task.fromResult(mmret, RobotRaconteurWeb.MessageEntry);
                                    }

                                    if (RobotRaconteurWeb.NodeID.op_Equality(header.ReceiverNodeID, this.node.NodeID)) {
                                        if (Bridge.referenceEquals(header.ReceiverNodeName, "") || Bridge.referenceEquals(header.ReceiverNodeName, this.node.NodeName)) {
                                            this.m_RemoteNodeID = header.SenderNodeID;
                                            return System.Threading.Tasks.Task.fromResult(mmret, RobotRaconteurWeb.MessageEntry);
                                        }
                                    }

                                }

                                mmret.Error = RobotRaconteurWeb.MessageErrorType.NodeNotFound;
                                mmret.AddElement$1("errorname", "RobotRaconteur.NodeNotFound");
                                mmret.AddElement$1("errorstring", "Node not found");

                                break;
                            }
                        default: 
                            throw new RobotRaconteurWeb.ProtocolException("Unknown StreamOp Command");
                    }

                } catch ($e1) {
                    $e1 = System.Exception.create($e1);
                    mmret.Error = RobotRaconteurWeb.MessageErrorType.ProtocolError;
                    mmret.AddElement$1("errorname", "RobotRaconteur.ProtocolError");
                    mmret.AddElement$1("errorstring", "Invalid Stream Operation");
                }

                return System.Threading.Tasks.Task.fromResult(mmret, RobotRaconteurWeb.MessageEntry);

            },
            StreamOp: function (command, args, cancel) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $task3, 
                    $task4, 
                    $taskResult4, 
                    $task5, 
                    $taskResult5, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    t, 
                    m, 
                    a, 
                    mm, 
                    mm1, 
                    streamop_ret1, 
                    $async_e, 
                    t2, 
                    $async_e1, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,4,5,6,7,8,9,10,11,12,13], $step);
                                switch ($step) {
                                    case 0: {
                                        if (args === void 0) { args = null; }
                                        if (cancel === void 0) { cancel = new System.Threading.CancellationToken(); }
                                        t = null;
                                        this;
                                        {
                                            if (!this.m_Connected) {
                                                throw new RobotRaconteurWeb.ConnectionException("Transport connection closed");
                                            }

                                            if (this.streamop_ret == null) {
                                                this.streamop_ret = new System.Threading.Tasks.TaskCompletionSource();
                                                RobotRaconteurWeb.Extensions.Extensions.AttachCancellationToken(RobotRaconteurWeb.Message, this.streamop_ret, cancel, new System.TimeoutException.$ctor1("Timed out"));
                                            } else {
                                                t = new System.Threading.Tasks.TaskCompletionSource();
                                                RobotRaconteurWeb.Extensions.Extensions.AttachCancellationToken(System.Int32, t, cancel, new System.TimeoutException.$ctor1("Timed out"));
                                                this.streamop_queue.Enqueue(t);
                                            }
                                        }

                                        if (t != null) {
                                            $step = 1;
                                            continue;
                                        } 
                                        $step = 3;
                                        continue;
                                    }
                                    case 1: {
                                        $task1 = t.task;
                                        $step = 2;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $step = 3;
                                        continue;
                                    }

                                    case 4: {
                                        m = new RobotRaconteurWeb.Message();
                                        m.header = new RobotRaconteurWeb.MessageHeader();
                                        m.header.ReceiverNodeName = "";
                                        m.header.SenderNodeName = this.node.NodeName;
                                        m.header.SenderNodeID = this.node.NodeID;
                                        m.header.ReceiverNodeID = this.RemoteNodeID;


                                        if (Bridge.referenceEquals(command, "CreateConnection")) {
                                            $step = 5;
                                            continue;
                                        } else  {
                                            $step = 6;
                                            continue;
                                        }
                                    }
                                    case 5: {
                                        a = args;
                                        m.header.ReceiverNodeID = a.Item1;
                                        m.header.ReceiverNodeName = a.Item2;
                                        mm = new RobotRaconteurWeb.MessageEntry.$ctor1(RobotRaconteurWeb.MessageEntryType.StreamOp, command);
                                        m.entries.add(mm);
                                        $step = 8;
                                        continue;
                                    }
                                    case 6: {
                                        $task2 = this.PackStreamOpRequest(command, args);
                                        $step = 7;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 7: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        mm1 = $taskResult2;
                                        m.entries.add(mm1);
                                        $step = 8;
                                        continue;
                                    }
                                    case 8: {
                                        $task3 = this.SendMessage(m, cancel);
                                        $step = 9;
                                        if ($task3.isCompleted()) {
                                            continue;
                                        }
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 9: {
                                        $task3.getAwaitedResult();
                                        $task4 = RobotRaconteurWeb.Extensions.Extensions.AwaitWithTimeout$1(RobotRaconteurWeb.Message, this.streamop_ret.task, 10000);
                                        $step = 10;
                                        if ($task4.isCompleted()) {
                                            continue;
                                        }
                                        $task4.continue($asyncBody);
                                        return;
                                    }
                                    case 10: {
                                        $taskResult4 = $task4.getAwaitedResult();
                                        streamop_ret1 = $taskResult4;

                                        $task5 = this.UnpackStreamOpResponse(streamop_ret1.entries.getItem(0), streamop_ret1.header);
                                        $step = 11;
                                        if ($task5.isCompleted()) {
                                            continue;
                                        }
                                        $task5.continue($asyncBody);
                                        return;
                                    }
                                    case 11: {
                                        $taskResult5 = $task5.getAwaitedResult();
                                        $returnValue = $taskResult5;
                                        $step = 12;
                                        continue;
                                    }
                                    case 12: {
                                        this;
                                        {
                                            if (this.streamop_queue.Count === 0) {
                                                this.streamop_ret = null;
                                            } else {
                                                this.streamop_ret = new System.Threading.Tasks.TaskCompletionSource();
                                                t2 = this.streamop_queue.Dequeue();
                                                t2.trySetResult(0);
                                            }
                                        }

                                        if ($jumpFromFinally > -1) {
                                            $step = $jumpFromFinally;
                                            $jumpFromFinally = null;
                                        } else if ($async_e) {
                                            $tcs.setException($async_e);
                                            return;
                                        } else if (Bridge.isDefined($returnValue)) {
                                            $tcs.setResult($returnValue);
                                            return;
                                        }
                                        $step = 13;
                                        continue;
                                    }
                                    case 13: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            if ($step >= 4 && $step <= 11) {
                                $step = 12;
                                $asyncBody();
                                return;
                            }
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            StreamOpMessageReceived: function (m) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    mm, 
                    $e1, 
                    command, 
                    mret, 
                    mmret, 
                    r, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,6,7], $step);
                                switch ($step) {
                                    case 0: {
                                        try {
                                            mm = m.entries.getItem(0);
                                        } catch ($e1) {
                                            $e1 = System.Exception.create($e1);
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        if (mm.EntryType === RobotRaconteurWeb.MessageEntryType.StreamOp) {
                                            $step = 1;
                                            continue;
                                        } else  {
                                            $step = 6;
                                            continue;
                                        }
                                    }
                                    case 1: {
                                        command = mm.MemberName;
                                        mret = new RobotRaconteurWeb.Message();
                                        mret.header = new RobotRaconteurWeb.MessageHeader();
                                        mret.header.SenderNodeName = this.node.NodeName;
                                        mret.header.ReceiverNodeName = m.header.SenderNodeName;
                                        mret.header.SenderNodeID = this.node.NodeID;
                                        mret.header.ReceiverNodeID = m.header.SenderNodeID;
                                        $task1 = this.ProcessStreamOpRequest(mm, m.header);
                                        $step = 2;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        mmret = $taskResult1;

                                        if (mmret != null) {
                                            $step = 3;
                                            continue;
                                        } 
                                        $step = 5;
                                        continue;
                                    }
                                    case 3: {
                                        mret.entries.add(mmret);
                                        $task2 = RobotRaconteurWeb.Extensions.Extensions.IgnoreResult(this.SendMessage(mret, Bridge.getDefaultValue(System.Threading.CancellationToken)));
                                        $step = 4;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 4: {
                                        $task2.getAwaitedResult();
                                        $step = 5;
                                        continue;
                                    }
                                    case 5: {
                                        $step = 7;
                                        continue;
                                    }
                                    case 6: {
                                        r = null;
                                        this;
                                        {
                                            if (this.streamop_ret == null) {
                                                $tcs.setResult(null);
                                                return;
                                            }
                                            r = this.streamop_ret;
                                        }
                                        r.trySetResult(m);
                                        $step = 7;
                                        continue;
                                    }
                                    case 7: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            CheckStreamCapability: function (name, cancel) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $task3, 
                    $taskResult3, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    t, 
                    m, 
                    mm, 
                    mret, 
                    $async_e, 
                    t2, 
                    $async_e1, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,4,5,6,7,8], $step);
                                switch ($step) {
                                    case 0: {
                                        if (cancel === void 0) { cancel = new System.Threading.CancellationToken(); }
                                        t = null;
                                        this;
                                        {
                                            if (!this.m_Connected) {
                                                throw new RobotRaconteurWeb.ConnectionException("Transport connection closed");
                                            }

                                            if (this.CheckStreamCapability_ret == null) {
                                                this.CheckStreamCapability_ret = new System.Threading.Tasks.TaskCompletionSource();
                                                RobotRaconteurWeb.Extensions.Extensions.AttachCancellationToken(RobotRaconteurWeb.Message, this.CheckStreamCapability_ret, cancel, new System.TimeoutException.$ctor1("Timed out"));
                                            } else {
                                                t = new System.Threading.Tasks.TaskCompletionSource();
                                                RobotRaconteurWeb.Extensions.Extensions.AttachCancellationToken(System.Int32, t, cancel, new System.TimeoutException.$ctor1("Timed out"));
                                                this.CheckStreamCapability_queue.Enqueue(t);
                                            }
                                        }

                                        if (t != null) {
                                            $step = 1;
                                            continue;
                                        } 
                                        $step = 3;
                                        continue;
                                    }
                                    case 1: {
                                        $task1 = t.task;
                                        $step = 2;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $step = 3;
                                        continue;
                                    }

                                    case 4: {
                                        m = new RobotRaconteurWeb.Message();

                                        m.header.SenderNodeID = this.node.NodeID;

                                        m.header.ReceiverNodeID = this.RemoteNodeID;
                                        mm = new RobotRaconteurWeb.MessageEntry.$ctor1(RobotRaconteurWeb.MessageEntryType.StreamCheckCapability, name);
                                        m.entries.add(mm);

                                        $task2 = this.SendMessage(m, cancel);
                                        $step = 5;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 5: {
                                        $task2.getAwaitedResult();
                                        $task3 = RobotRaconteurWeb.Extensions.Extensions.AwaitWithTimeout$1(RobotRaconteurWeb.Message, this.CheckStreamCapability_ret.task, ((this.node.RequestTimeout) | 0));
                                        $step = 6;
                                        if ($task3.isCompleted()) {
                                            continue;
                                        }
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 6: {
                                        $taskResult3 = $task3.getAwaitedResult();
                                        mret = $taskResult3;
                                        $returnValue = mret.entries.getItem(0).FindElement("return").CastData(System.UInt32);
                                        $step = 7;
                                        continue;
                                    }
                                    case 7: {
                                        this;
                                        {
                                            if (this.CheckStreamCapability_queue.Count === 0) {
                                                this.CheckStreamCapability_ret = null;
                                            } else {
                                                this.CheckStreamCapability_ret = new System.Threading.Tasks.TaskCompletionSource();
                                                t2 = this.CheckStreamCapability_queue.Dequeue();
                                                t2.trySetResult(0);
                                            }
                                        }

                                        if ($jumpFromFinally > -1) {
                                            $step = $jumpFromFinally;
                                            $jumpFromFinally = null;
                                        } else if ($async_e) {
                                            $tcs.setException($async_e);
                                            return;
                                        } else if (Bridge.isDefined($returnValue)) {
                                            $tcs.setResult($returnValue);
                                            return;
                                        }
                                        $step = 8;
                                        continue;
                                    }
                                    case 8: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            if ($step >= 4 && $step <= 6) {
                                $step = 7;
                                $asyncBody();
                                return;
                            }
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            CheckStreamCapability_MessageReceived: function (m) {
                try {
                    if (m.entries.getItem(0).EntryType === RobotRaconteurWeb.MessageEntryType.StreamCheckCapability) {
                        var ret = new RobotRaconteurWeb.Message();
                        ret.header = new RobotRaconteurWeb.MessageHeader();
                        ret.header.SenderNodeID = this.node.NodeID;
                        ret.header.ReceiverNodeID = m.header.SenderNodeID;
                        var mret = new RobotRaconteurWeb.MessageEntry.$ctor1(RobotRaconteurWeb.MessageEntryType.StreamCheckCapabilityRet, m.entries.getItem(0).MemberName);
                        mret.ServicePath = m.entries.getItem(0).ServicePath;
                        mret.AddElement$1("return", Bridge.box(this.StreamCapabilities(m.entries.getItem(0).MemberName), System.UInt32));
                        ret.entries.add(mret);
                        RobotRaconteurWeb.Extensions.Extensions.IgnoreResult(this.SendMessage(ret, Bridge.getDefaultValue(System.Threading.CancellationToken)));
                    } else if (m.entries.getItem(0).EntryType === RobotRaconteurWeb.MessageEntryType.StreamCheckCapabilityRet) {
                        var r = null;
                        this;
                        {
                            if (this.CheckStreamCapability_ret == null) {
                                return;
                            }
                            r = this.CheckStreamCapability_ret;

                        }
                        r.trySetResult(m);
                    }
                } catch ($e1) {
                    $e1 = System.Exception.create($e1);
                }
                ;
            },
            StreamCapabilities: function (name) {
                return 0;
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.AuthenticationException", {
        inherits: [RobotRaconteurWeb.RobotRaconteurException],
        ctors: {
            ctor: function (message) {
                this.$initialize();
                RobotRaconteurWeb.RobotRaconteurException.$ctor1.call(this, RobotRaconteurWeb.MessageErrorType.AuthenticationError, "RobotRaconteur.AuthenticationError", message);
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.BrowserWebSocketTransport", {
        inherits: [RobotRaconteurWeb.Transport],
        fields: {
            m_Port: 0,
            transportopen: false,
            transportcancel: null,
            TransportConnections: null,
            DefaultReceiveTimeout: 0,
            DefaultConnectTimeout: 0,
            AcceptWebSockets: false,
            m_HeartbeatPeriod: 0,
            parent_adapter: null
        },
        props: {
            IsServer: {
                get: function () {
                    return true;
                }
            },
            IsClient: {
                get: function () {
                    return true;
                }
            },
            UrlSchemeString: {
                get: function () {
                    return System.Array.init(["tcp", "rr+tcp", "rr+ws", "rr+wss"], System.String);
                }
            },
            HeartbeatPeriod: {
                get: function () {
                    return this.m_HeartbeatPeriod;
                },
                set: function (value) {
                    if (value < 500) {
                        throw new System.InvalidOperationException.ctor();
                    }
                    this.m_HeartbeatPeriod = value;
                }
            }
        },
        ctors: {
            init: function () {
                this.transportopen = false;
                this.transportcancel = new System.Threading.CancellationTokenSource();
                this.TransportConnections = new (System.Collections.Generic.Dictionary$2(System.UInt32,RobotRaconteurWeb.AsyncStreamTransport)).ctor();
                this.m_HeartbeatPeriod = 5000;
            },
            ctor: function (node) {
                if (node === void 0) { node = null; }

                this.$initialize();
                RobotRaconteurWeb.Transport.ctor.call(this, node);
                this.DefaultReceiveTimeout = 15000;
                this.DefaultConnectTimeout = 2500;
                this.parent_adapter = new RobotRaconteurWeb.BrowserWebSocketTransport.AsyncStreamTransportParentImpl(this);

            }
        },
        methods: {
            CreateTransportConnection: function (url, e, cancel) {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    p, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        p = new RobotRaconteurWeb.BrowserWebSocketClientTransport(this);
                                        p.ReceiveTimeout = this.DefaultReceiveTimeout;
                                        $task1 = p.ConnectTransport(url, e, cancel);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        $tcs.setResult(p);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            CloseTransportConnection: function (e, cancel) {
                if (this.TransportConnections.containsKey(e.LocalEndpoint)) {
                    this.TransportConnections.getItem(e.LocalEndpoint).Close();
                }
                return System.Threading.Tasks.Task.fromResult(0, System.Int32);
            },
            CanConnectService: function (url) {
                var u = RobotRaconteurWeb.TransportUtil.ParseConnectionUrl(url);
                if (System.Array.contains(this.UrlSchemeString, u.scheme, System.String)) {
                    return true;
                }

                return false;
            },
            SendMessage: function (m, cancel) {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $async_e1, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4], $step);
                                switch ($step) {
                                    case 0: {
                                        if (RobotRaconteurWeb.NodeID.op_Inequality(m.header.SenderNodeID, this.node.NodeID)) {
                                            throw new RobotRaconteurWeb.NodeNotFoundException("Invalid sender node");
                                        }
                                        
                                        $step = 1;
                                        continue;
                                    }
                                    case 1: {
                                        $task1 = this.TransportConnections.getItem(m.header.SenderEndpoint).SendMessage(m, cancel);
                                        $step = 2;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $task1.getAwaitedResult();
                                        $step = 4;
                                        continue;
                                    }
                                    case 3: {
                                        throw new RobotRaconteurWeb.ConnectionException("Connection to remote node has been closed");
                                        $async_e = null;
                                        $step = 4;
                                        continue;
                                    }
                                    case 4: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            if ( $step >= 1 && $step <= 2 ) {
                                if (Bridge.is($async_e, RobotRaconteurWeb.KeyNotFoundException)) {
                                    $step = 3;
                                    $asyncBody();
                                    return;
                                }
                            }
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            MessageReceived: function (m) {


                this.node.MessageReceived(m);

            },
            Close: function () {
                var $t, $t1;
                this.transportopen = false;
                this.transportcancel.cancel();

                var cc = ($t = RobotRaconteurWeb.AsyncStreamTransport, System.Linq.Enumerable.from(this.TransportConnections.Values, $t).ToArray($t));

                $t1 = Bridge.getEnumerator(cc);
                try {
                    while ($t1.moveNext()) {
                        var c = $t1.Current;
                        try {
                            c.Close();
                        } catch ($e1) {
                            $e1 = System.Exception.create($e1);
                        }
                    }
                } finally {
                    if (Bridge.is($t1, System.IDisposable)) {
                        $t1.System$IDisposable$Dispose();
                    }
                }


                try {

                    this.TransportConnections.clear();
                } catch ($e2) {
                    $e2 = System.Exception.create($e2);
                }

                RobotRaconteurWeb.Transport.prototype.Close.call(this);

                return System.Threading.Tasks.Task.fromResult(0, System.Int32);
            },
            CheckConnection: function (endpoint) {
                try {
                    this.TransportConnections.getItem(endpoint).CheckConnection(endpoint);
                } catch ($e1) {
                    $e1 = System.Exception.create($e1);
                    if (Bridge.is($e1, RobotRaconteurWeb.KeyNotFoundException)) {
                        throw new RobotRaconteurWeb.ConnectionException("Transport not connected");
                    } else {
                        throw $e1;
                    }
                }
            },
            RemoveTransportConnection: function (e) {
                this.TransportConnections.remove(e);

                this.FireTransportEventListener(RobotRaconteurWeb.TransportListenerEventType.TransportConnectionClosed, Bridge.box(e, System.UInt32));
            },
            TransportCapability: function (name) {
                return RobotRaconteurWeb.Transport.prototype.TransportCapability.call(this, name);
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.BrowserWebSocketTransport.AsyncStreamTransportParentImpl", {
        inherits: [RobotRaconteurWeb.AsyncStreamTransportParent],
        $kind: "nested class",
        fields: {
            parent: null
        },
        alias: [
            "SpecialRequest", "RobotRaconteurWeb$AsyncStreamTransportParent$SpecialRequest",
            "MessageReceived", "RobotRaconteurWeb$AsyncStreamTransportParent$MessageReceived",
            "AddTransportConnection", "RobotRaconteurWeb$AsyncStreamTransportParent$AddTransportConnection",
            "RemoveTransportConnection", "RobotRaconteurWeb$AsyncStreamTransportParent$RemoveTransportConnection"
        ],
        ctors: {
            ctor: function (parent) {
                this.$initialize();
                this.parent = parent;
            }
        },
        methods: {
            SpecialRequest: function (m) {
                return this.parent.SpecialRequest(m);
            },
            MessageReceived: function (m) {
                this.parent.MessageReceived(m);
                return System.Threading.Tasks.Task.fromResult(0, System.Int32);
            },
            AddTransportConnection: function (endpoint, transport) {
                this.parent;
                {
                    this.parent.TransportConnections.add(endpoint, transport);
                }
            },
            RemoveTransportConnection: function (transport) {
                this.parent;
                {
                    this.parent.TransportConnections.remove(transport.LocalEndpoint);
                }
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.BufferLimitViolationException", {
        inherits: [RobotRaconteurWeb.RobotRaconteurException],
        ctors: {
            ctor: function (message) {
                this.$initialize();
                RobotRaconteurWeb.RobotRaconteurException.$ctor1.call(this, RobotRaconteurWeb.MessageErrorType.BufferLimitViolation, "RobotRaconteur.BufferLimitViolation", message);
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.CallbackClient$1", function (T) { return {
        inherits: [RobotRaconteurWeb.Callback$1(T)],
        fields: {
            function: null
        },
        props: {
            Function: {
                get: function () {
                    return this.function;
                },
                set: function (value) {
                    this.function = value;
                }
            }
        },
        ctors: {
            init: function () {
                this.function = Bridge.getDefaultValue(T);
            },
            ctor: function (name) {
                this.$initialize();
                RobotRaconteurWeb.Callback$1(T).ctor.call(this, name);
            }
        },
        methods: {
            GetClientFunction: function (e) {
                throw new System.InvalidOperationException.$ctor1("Invalid for client side of callback");
            },
            GetClientFunction$1: function (e) {
                throw new System.InvalidOperationException.$ctor1("Invalid for client side of callback");
            }
        }
    }; });

    Bridge.define("RobotRaconteurWeb.CallbackDefinition", {
        inherits: [RobotRaconteurWeb.MemberDefinition],
        fields: {
            ReturnType: null,
            Parameters: null
        },
        ctors: {
            init: function () {
                this.Parameters = new (System.Collections.Generic.List$1(RobotRaconteurWeb.TypeDefinition)).ctor();
            },
            ctor: function (ServiceEntry) {
                this.$initialize();
                RobotRaconteurWeb.MemberDefinition.ctor.call(this, ServiceEntry);
            }
        },
        methods: {
            toString: function () {
                return RobotRaconteurWeb.MemberDefinition.MemberDefinition_ToStringFormat2("callback", this, this.ReturnType, this.Parameters);
            },
            FromString: function (s) {
                RobotRaconteurWeb.MemberDefinition.MemberDefinition_FromStringFormat2(s, "callback", this, Bridge.ref(this, "ReturnType"), Bridge.ref(this, "Parameters"));
            },
            Reset: function () {
                RobotRaconteurWeb.MemberDefinition.prototype.Reset.call(this);
                this.Parameters.clear();
                RobotRaconteurWeb.TypeDefinition.op_Inequality(this.ReturnType, null) ? this.ReturnType.Reset() : null;
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.CallbackServer$1", function (T) { return {
        inherits: [RobotRaconteurWeb.Callback$1(T)],
        fields: {
            skel: null
        },
        props: {
            Function: {
                get: function () {
                    throw new System.InvalidOperationException.$ctor1("Invalid for server side of callback");
                },
                set: function (value) {
                    throw new System.InvalidOperationException.$ctor1("Invalid for server side of callback");
                }
            }
        },
        ctors: {
            ctor: function (name, skel) {
                this.$initialize();
                RobotRaconteurWeb.Callback$1(T).ctor.call(this, name);
                this.skel = skel;
            }
        },
        methods: {
            GetClientFunction: function (e) {
                return this.GetClientFunction$1(e.LocalEndpoint);
            },
            GetClientFunction$1: function (e) {
                return Bridge.cast(Bridge.unbox(this.skel.GetCallbackFunction(e, this.m_MemberName), T), T);
            }
        }
    }; });

    Bridge.define("RobotRaconteurWeb.ClientContext", {
        inherits: [RobotRaconteurWeb.Endpoint],
        fields: {
            stubs: null,
            m_ServiceDef: null,
            UsePulledServiceTypes: false,
            DynamicServiceFactory_: null,
            rec_wait: null,
            ProcessRequest_checkconnection_current: null,
            rec_loc: null,
            request_number: 0,
            m_ServiceName: null,
            m_Connected: false,
            connecttransport: null,
            connecturl: null,
            Attributes: null,
            cancel_source: null,
            m_UserAuthenticated: false,
            m_AuthenticatedUsername: null,
            LastMessageSentTime: null,
            pulled_service_types: null,
            pulled_service_defs: null
        },
        events: {
            ClientServiceListener: null
        },
        props: {
            ServiceDef: {
                get: function () {
                    return this.m_ServiceDef;
                }
            },
            ServiceName: {
                get: function () {
                    return this.m_ServiceName;
                }
            },
            Connected: {
                get: function () {
                    return this.m_Connected;
                }
            },
            UserAuthenticated: {
                get: function () {
                    return this.m_UserAuthenticated;
                }
            },
            AuthenticatedUsername: {
                get: function () {
                    return this.m_AuthenticatedUsername;
                }
            }
        },
        ctors: {
            init: function () {
                this.LastMessageSentTime = System.DateTime.getDefaultValue();
                this.rec_wait = new (System.Collections.Generic.Dictionary$2(System.UInt32,System.Threading.Tasks.TaskCompletionSource)).ctor();
                this.rec_loc = { };
                this.request_number = 0;
                this.m_Connected = false;
                this.Attributes = new (System.Collections.Generic.Dictionary$2(System.String,System.Object)).ctor();
                this.cancel_source = new System.Threading.CancellationTokenSource();
                this.m_UserAuthenticated = false;
                this.LastMessageSentTime = System.DateTime.getUtcNow();
                this.pulled_service_types = new (System.Collections.Generic.Dictionary$2(System.String,RobotRaconteurWeb.ServiceFactory)).ctor();
                this.pulled_service_defs = new (System.Collections.Generic.Dictionary$2(System.String,RobotRaconteurWeb.ServiceDefinition)).ctor();
            },
            ctor: function (node) {
                this.$initialize();
                RobotRaconteurWeb.Endpoint.ctor.call(this, node);


                this.stubs = new (System.Collections.Generic.Dictionary$2(System.String,RobotRaconteurWeb.ServiceStub)).ctor();
                this.DynamicServiceFactory_ = node.DynamicServiceFactory;
                this.UsePulledServiceTypes = this.DynamicServiceFactory_ != null;
            },
            $ctor1: function (service_def, node) {
                this.$initialize();
                RobotRaconteurWeb.Endpoint.ctor.call(this, node);
                this.m_ServiceDef = service_def;

                this.stubs = new (System.Collections.Generic.Dictionary$2(System.String,RobotRaconteurWeb.ServiceStub)).ctor();
                this.DynamicServiceFactory_ = node.DynamicServiceFactory;
                this.UsePulledServiceTypes = this.DynamicServiceFactory_ != null;
            }
        },
        methods: {
            FindObjRef: function (path, objecttype, cancel) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    e, 
                    ret, 
                    objecttype2, 
                    objectdef, 
                    pull, 
                    d, 
                    $t, 
                    d2, 
                    f, 
                    $t1, 
                    f2, 
                    stub, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,6], $step);
                                switch ($step) {
                                    case 0: {
                                        this.stubs;
                                        {
                                            if (System.Linq.Enumerable.from(this.stubs.Keys, System.String).contains(path)) {
                                                $tcs.setResult(this.stubs.getItem(path));
                                                return;

                                            }
                                        }

                                        e = new RobotRaconteurWeb.MessageEntry.$ctor1(RobotRaconteurWeb.MessageEntryType.ObjectTypeName, "");
                                        e.ServicePath = path;
                                        $task1 = this.ProcessRequest(e, cancel);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        ret = $taskResult1;
                                        objecttype2 = ret.FindElement("objecttype").CastData(System.String);

                                        if (Bridge.referenceEquals(objecttype2, "")) {
                                            throw new RobotRaconteurWeb.ObjectNotFoundException("Object type was not returned.");
                                        }

                                        objectdef = RobotRaconteurWeb.ServiceDefinitionUtil.SplitQualifiedName(objecttype2).Item1;

                                        if (this.UsePulledServiceTypes) {
                                            $step = 2;
                                            continue;
                                        } 
                                        $step = 6;
                                        continue;
                                    }
                                    case 2: {
                                        pull = false;
                                        this.pulled_service_types;
                                        {
                                            if (!this.pulled_service_types.containsKey(objectdef)) {
                                                pull = true;
                                            }

                                        }
                                        if (pull) {
                                            $step = 3;
                                            continue;
                                        } 
                                        $step = 5;
                                        continue;
                                    }
                                    case 3: {
                                        $task2 = this.PullServiceDefinitionAndImports(null, cancel);
                                        $step = 4;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 4: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        d = $taskResult2;

                                        this.pulled_service_defs;
                                        {
                                            $t = Bridge.getEnumerator(d);
                                            try {
                                                while ($t.moveNext()) {
                                                    d2 = $t.Current;
                                                    if (!this.pulled_service_defs.containsKey(d2.Name)) {
                                                        this.pulled_service_defs.add(d2.Name, d2);
                                                    }
                                                }
                                            } finally {
                                                if (Bridge.is($t, System.IDisposable)) {
                                                    $t.System$IDisposable$Dispose();
                                                }
                                            }
                                        }

                                        f = this.DynamicServiceFactory_.RobotRaconteurWeb$DynamicServiceFactory$CreateServiceFactories(System.Linq.Enumerable.from(d, RobotRaconteurWeb.ServiceDefinition).select(function (x) {
                                            return x.toString();
                                        }).ToArray(System.String), this);
                                        this.pulled_service_defs;
                                        {
                                            $t1 = Bridge.getEnumerator(f);
                                            try {
                                                while ($t1.moveNext()) {
                                                    f2 = $t1.Current;
                                                    if (!this.pulled_service_types.containsKey(f2.GetServiceName())) {
                                                        this.pulled_service_types.add(f2.GetServiceName(), f2);
                                                    }
                                                }
                                            } finally {
                                                if (Bridge.is($t1, System.IDisposable)) {
                                                    $t1.System$IDisposable$Dispose();
                                                }
                                            }
                                        }
                                        $step = 5;
                                        continue;
                                    }

                                    case 6: {
                                        if (objecttype != null) {
                                            this.VerifyObjectImplements(objecttype2, objecttype);
                                            objecttype2 = objecttype;
                                        }

                                        stub = this.ServiceDef.CreateStub(objecttype2, path, this);

                                        this.stubs;
                                        {
                                            if (!System.Linq.Enumerable.from(this.stubs.Keys, System.String).contains(path)) {
                                                this.stubs.setItem(path, stub);
                                                $tcs.setResult(stub);
                                                return;
                                            } else {
                                                $tcs.setResult(this.stubs.getItem(path));
                                                return;
                                            }
                                        }
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            ProcessRequest: function (m, cancel) {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    request_start, 
                    request_timeout, 
                    rec_source, 
                    t_id, 
                    rec_message, 
                    r, 
                    $async_e, 
                    e, 
                    e2, 
                    e3, 
                    $async_e1, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4], $step);
                                switch ($step) {
                                    case 0: {
                                        request_start = System.DateTime.getUtcNow();
                                        request_timeout = this.node.RequestTimeout;

                                        rec_source = new System.Threading.Tasks.TaskCompletionSource();
                                        this.rec_wait;
                                        {
                                            this.request_number = (this.request_number + 1) >>> 0;
                                            m.RequestID = this.request_number;
                                            t_id = this.request_number;
                                            this.rec_wait.add(t_id, rec_source);
                                            if (this.ProcessRequest_checkconnection_current == null) {
                                                this.ProcessRequest_checkconnection_current = this.ProcessRequest_checkconnection();
                                            }
                                        }

                                        rec_message = null;
                                        
                                        $step = 1;
                                        continue;
                                    }
                                    case 1: {
                                        cancel.register(function () {
                                            rec_source.trySetCanceled();
                                        });


                                        r = Bridge.fn.bind(this, function () {
                                            var $step = 0,
                                                $task1, 
                                                $task2, 
                                                $taskResult2, 
                                                $jumpFromFinally, 
                                                $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                                                $returnValue, 
                                                $async_e, 
                                                $asyncBody = Bridge.fn.bind(this, function () {
                                                    try {
                                                        for (;;) {
                                                            $step = System.Array.min([0,1,2], $step);
                                                            switch ($step) {
                                                                case 0: {
                                                                    $task1 = this.SendMessage$1(m, cancel);
                                                                    $step = 1;
                                                                    if ($task1.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task1.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 1: {
                                                                    $task1.getAwaitedResult();
                                                                    $task2 = rec_source.task;
                                                                    $step = 2;
                                                                    if ($task2.isCompleted()) {
                                                                        continue;
                                                                    }
                                                                    $task2.continue($asyncBody);
                                                                    return;
                                                                }
                                                                case 2: {
                                                                    $taskResult2 = $task2.getAwaitedResult();
                                                                    rec_message = $taskResult2;
                                                                    $tcs.setResult(null);
                                                                    return;
                                                                }
                                                                default: {
                                                                    $tcs.setResult(null);
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    } catch($async_e1) {
                                                        $async_e = System.Exception.create($async_e1);
                                                        $tcs.setException($async_e);
                                                    }
                                                }, arguments);

                                            $asyncBody();
                                            return $tcs.task;
                                        });

                                        $task1 = RobotRaconteurWeb.Extensions.Extensions.AwaitWithTimeout(r(), ((this.node.RequestTimeout) | 0));
                                        $step = 2;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $task1.getAwaitedResult();
                                        $step = 3;
                                        continue;
                                    }
                                    case 3: {
                                        this.rec_wait;
                                        {
                                            this.rec_wait.remove(t_id);
                                        }


                                        if ($jumpFromFinally > -1) {
                                            $step = $jumpFromFinally;
                                            $jumpFromFinally = null;
                                        } else if ($async_e) {
                                            $tcs.setException($async_e);
                                            return;
                                        } else if (Bridge.isDefined($returnValue)) {
                                            $tcs.setResult($returnValue);
                                            return;
                                        }
                                        $step = 4;
                                        continue;
                                    }
                                    case 4: {
                                        if (rec_message.RequestID !== t_id) {
                                            throw new System.Exception("This should be impossible!");
                                        }

                                        if (rec_message.Error !== RobotRaconteurWeb.MessageErrorType.None) {
                                            e = RobotRaconteurWeb.RobotRaconteurExceptionUtil.MessageEntryToException(rec_message);
                                            e2 = Bridge.as(e, RobotRaconteurWeb.RobotRaconteurRemoteException);
                                            if (e2 != null) {
                                                e3 = this.ServiceDef.DownCastException(e2);
                                                if (e3 != null) {
                                                    e = e3;
                                                }
                                            }
                                            throw e;
                                        }

                                        $tcs.setResult(rec_message);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            if ($step >= 1 && $step <= 2) {
                                $step = 3;
                                $asyncBody();
                                return;
                            }
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            ProcessRequest_checkconnection: function () {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $e1, 
                    rec_wait2, 
                    $t, 
                    r, 
                    $t1, 
                    t, 
                    $async_e, 
                    $async_e1, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([1,2,3,4,5,6,7], $step);
                                switch ($step) {

                                    case 1: {
                                        if ( true ) {
                                            $step = 2;
                                            continue;
                                        } 
                                        $step = 7;
                                        continue;
                                    }
                                    case 2: {
                                        this.rec_wait;
                                        {
                                            if (this.rec_wait.Count < 0) {
                                                this.ProcessRequest_checkconnection_current = null;
                                                $tcs.setResult(null);
                                                return;
                                            }
                                        }

                                        try {
                                            this.node.CheckConnection(this.LocalEndpoint);
                                        } catch ($e1) {
                                            $e1 = System.Exception.create($e1);
                                            rec_wait2 = new (System.Collections.Generic.List$1(System.Threading.Tasks.TaskCompletionSource)).ctor();
                                            this.rec_wait;
                                            {
                                                $t = Bridge.getEnumerator(this.rec_wait.Values);
                                                try {
                                                    while ($t.moveNext()) {
                                                        r = $t.Current;
                                                        rec_wait2.add(r);
                                                    }
                                                } finally {
                                                    if (Bridge.is($t, System.IDisposable)) {
                                                        $t.System$IDisposable$Dispose();
                                                    }
                                                }
                                            }

                                            $t1 = Bridge.getEnumerator(rec_wait2);
                                            try {
                                                while ($t1.moveNext()) {
                                                    t = $t1.Current;
                                                    t.trySetException(new RobotRaconteurWeb.ConnectionException("Connection closed"));
                                                }
                                            } finally {
                                                if (Bridge.is($t1, System.IDisposable)) {
                                                    $t1.System$IDisposable$Dispose();
                                                }
                                            }
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        
                                        $step = 3;
                                        continue;
                                    }
                                    case 3: {
                                        $task1 = System.Threading.Tasks.Task.delay(500);
                                        $step = 4;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 4: {
                                        $task1.getAwaitedResult();
                                        $step = 6;
                                        continue;
                                    }
                                    case 5: {
                                        $async_e = null;
                                        $step = 6;
                                        continue;
                                    }
                                    case 6: {
                                        
                                        $step = 1;
                                        continue;
                                    }
                                    case 7: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            if ( $step >= 3 && $step <= 4 ) {
                                $step = 5;
                                $asyncBody();
                                return;
                            }
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            SendMessage$1: function (m, cancel) {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    mm, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        if (!this.Connected) {
                                            throw new RobotRaconteurWeb.ConnectionException("Client has been disconnected");
                                        }

                                        mm = new RobotRaconteurWeb.Message();
                                        mm.header = new RobotRaconteurWeb.MessageHeader();

                                        mm.entries.add(m);

                                        this.LastMessageSentTime = System.DateTime.getUtcNow();

                                        $task1 = this.SendMessage(mm, cancel);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            MessageReceived: function (m) {
                var $t;
                this.LastMessageReceivedTime = System.DateTime.getUtcNow();
                if (m.entries.Count >= 1) {
                    if (m.entries.getItem(0).EntryType === RobotRaconteurWeb.MessageEntryType.ConnectClientRet) {
                        this.m_RemoteEndpoint = m.header.SenderEndpoint;
                        this.m_RemoteNodeID = m.header.SenderNodeID;
                        this.m_RemoteNodeName = m.header.SenderNodeName;
                    }

                    if (m.entries.getItem(0).EntryType === RobotRaconteurWeb.MessageEntryType.EndpointCheckCapability) {
                        this.CheckEndpointCapabilityMessage(m);
                        return;
                    }
                }

                $t = Bridge.getEnumerator(m.entries);
                try {
                    while ($t.moveNext()) {
                        var mm = $t.Current;
                        if (mm.Error === RobotRaconteurWeb.MessageErrorType.InvalidEndpoint) {
                            RobotRaconteurWeb.Extensions.Extensions.IgnoreResult(this.Close());
                            return;
                        }
                        this.MessageEntryReceived(mm);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
            },
            MessageEntryReceived: function (m) {
                var $t;
                {
                    if (m.EntryType === RobotRaconteurWeb.MessageEntryType.EventReq) {
                        var a = null;

                        this.stubs;
                        if (System.Linq.Enumerable.from(this.stubs.Keys, System.String).contains(m.ServicePath)) {
                            var stub;
                            stub = this.stubs.getItem(m.ServicePath);
                            a = (function () {
                                stub.DispatchEvent(m);
                            });

                        }
                        if (!Bridge.staticEquals(a, null)) {
                            RobotRaconteurWeb.Extensions.Extensions.IgnoreResult(System.Threading.Tasks.Task.run(a));
                        }
                    } else if (m.EntryType === RobotRaconteurWeb.MessageEntryType.PropertyGetRes || m.EntryType === RobotRaconteurWeb.MessageEntryType.PropertySetRes || m.EntryType === RobotRaconteurWeb.MessageEntryType.FunctionCallRes || m.EntryType === RobotRaconteurWeb.MessageEntryType.ObjectTypeNameRet || m.EntryType === RobotRaconteurWeb.MessageEntryType.ConnectClientRet || m.EntryType === RobotRaconteurWeb.MessageEntryType.DisconnectClientRet || m.EntryType === RobotRaconteurWeb.MessageEntryType.GetServiceDescRet || (m.EntryType >= RobotRaconteurWeb.MessageEntryType.PipeConnectReq && m.EntryType <= RobotRaconteurWeb.MessageEntryType.PipeDisconnectRet) || m.EntryType === RobotRaconteurWeb.MessageEntryType.ClientSessionOpRet || m.EntryType === RobotRaconteurWeb.MessageEntryType.WireConnectRet || m.EntryType === RobotRaconteurWeb.MessageEntryType.WireDisconnectRet || m.EntryType === RobotRaconteurWeb.MessageEntryType.MemoryReadRet || m.EntryType === RobotRaconteurWeb.MessageEntryType.MemoryWriteRet || m.EntryType === RobotRaconteurWeb.MessageEntryType.MemoryGetParamRet || m.EntryType === RobotRaconteurWeb.MessageEntryType.WirePeekInValueRet || m.EntryType === RobotRaconteurWeb.MessageEntryType.WirePeekOutValueRet || m.EntryType === RobotRaconteurWeb.MessageEntryType.WirePokeOutValueRet || m.EntryType === RobotRaconteurWeb.MessageEntryType.GeneratorNextRes) {
                        var r = null;
                        this.rec_wait;
                        {
                            var t_id = m.RequestID;
                            if (this.rec_wait.containsKey(t_id)) {
                                r = this.rec_wait.getItem(t_id);
                            }
                        }

                        if (r != null) {
                            r.trySetResult(m);
                        }


                    } else if (m.EntryType === RobotRaconteurWeb.MessageEntryType.ServiceClosed) {
                        RobotRaconteurWeb.Extensions.Extensions.IgnoreResult(this.Close());
                    } else if (m.EntryType === RobotRaconteurWeb.MessageEntryType.ClientKeepAliveRet) {
                    } else if (m.EntryType === RobotRaconteurWeb.MessageEntryType.PipePacket || m.EntryType === RobotRaconteurWeb.MessageEntryType.PipeClosed || m.EntryType === RobotRaconteurWeb.MessageEntryType.PipePacketRet) {
                        var a1 = null;
                        this.stubs;
                        if (System.Linq.Enumerable.from(this.stubs.Keys, System.String).contains(m.ServicePath)) {
                            var stub1;
                            stub1 = this.stubs.getItem(m.ServicePath);
                            a1 = (function () {
                                stub1.DispatchPipeMessage(m);
                            });

                        }
                        if (!Bridge.staticEquals(a1, null)) {
                            RobotRaconteurWeb.Extensions.Extensions.IgnoreResult(System.Threading.Tasks.Task.run(a1));
                        }
                    } else if (m.EntryType === RobotRaconteurWeb.MessageEntryType.WirePacket || m.EntryType === RobotRaconteurWeb.MessageEntryType.WireClosed) {
                        var a2 = null;
                        this.stubs;
                        if (System.Linq.Enumerable.from(this.stubs.Keys, System.String).contains(m.ServicePath)) {
                            var stub2;
                            stub2 = this.stubs.getItem(m.ServicePath);
                            a2 = function () {
                                stub2.DispatchWireMessage(m);
                            };

                        }

                        if (!Bridge.staticEquals(a2, null)) {
                            RobotRaconteurWeb.Extensions.Extensions.IgnoreResult(System.Threading.Tasks.Task.run(a2));
                        }
                    } else if (m.EntryType === RobotRaconteurWeb.MessageEntryType.ServicePathReleasedReq) {
                        var path = m.ServicePath;
                        var objkeys = System.Linq.Enumerable.from(this.stubs.Keys, System.String).where(function (x) {
                                return (x.length >= path.length) && (Bridge.referenceEquals(x.substr(0, path.length), path));
                            }).ToArray(System.String);

                        $t = Bridge.getEnumerator(objkeys);
                        try {
                            while ($t.moveNext()) {
                                var path1 = $t.Current;
                                try {
                                    this.stubs.getItem(path1).RRReleaseContext();

                                    this.stubs.remove(path1);
                                } catch ($e1) {
                                    $e1 = System.Exception.create($e1);
                                }

                            }
                        } finally {
                            if (Bridge.is($t, System.IDisposable)) {
                                $t.System$IDisposable$Dispose();
                            }
                        }

                    } else if (m.EntryType === RobotRaconteurWeb.MessageEntryType.CallbackCallReq) {
                        RobotRaconteurWeb.Extensions.Extensions.IgnoreResult(this.ProcessCallbackCall(m));
                    } else {
                        throw new RobotRaconteurWeb.ServiceException("Unknown service command");
                    }

                }
            },
            PackStructure: function (s) {
                return this.ServiceDef.PackStructure(s);
            },
            UnpackStructure: function (T, l) {
                return this.ServiceDef.UnpackStructure(T, l);
            },
            PackMapType: function (K, T, o) {
                return this.ServiceDef.PackMapType(K, T, o);
            },
            PackListType: function (T, o) {
                return this.ServiceDef.PackListType(T, o);
            },
            PackMultiDimArray: function (multiDimArray) {
                return this.ServiceDef.PackMultiDimArray(multiDimArray);
            },
            PackVarType: function (p) {
                return this.ServiceDef.PackVarType(p);
            },
            UnpackMapType: function (K, T, o) {
                return this.ServiceDef.UnpackMapType(K, T, o);
            },
            UnpackListType: function (T, o) {
                return this.ServiceDef.UnpackListType(T, o);
            },
            UnpackMultiDimArray: function (o) {
                return this.ServiceDef.UnpackMultiDimArray(o);
            },
            UnpackVarType: function (o) {
                return this.ServiceDef.UnpackVarType(o);
            },
            ConnectService: function (c, url, username, credentials, objecttype, cancel) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $task3, 
                    $taskResult3, 
                    $task4, 
                    $taskResult4, 
                    $task5, 
                    $taskResult5, 
                    $task6, 
                    $taskResult6, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    u, 
                    d, 
                    $t, 
                    d2, 
                    f, 
                    $t1, 
                    f2, 
                    e, 
                    ret, 
                    type, 
                    e2, 
                    stub, 
                    noop, 
                    e1, 
                    $e1, 
                    $async_e, 
                    $async_e1, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,6,7,8,9,10,11,12,13], $step);
                                switch ($step) {
                                    case 0: {
                                        if (username === void 0) { username = null; }
                                        if (credentials === void 0) { credentials = null; }
                                        if (objecttype === void 0) { objecttype = null; }
                                        if (cancel === void 0) { cancel = new System.Threading.CancellationToken(); }

                                        this.connecturl = url;
                                        this.connecttransport = c;
                                        u = RobotRaconteurWeb.TransportUtil.ParseConnectionUrl(url);

                                        this.m_RemoteNodeID = u.nodeid;

                                        this.m_RemoteNodeName = u.nodename;
                                        this.m_ServiceName = u.service;

                                        /* try
                                        {*/
                                        if (!c.CanConnectService(url)) {
                                            throw new RobotRaconteurWeb.ServiceException("Invalid transport");
                                        }

                                        $task1 = c.CreateTransportConnection(url, this, cancel);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        this.TransportConnection = $taskResult1;
                                        this.m_Connected = true;
                                        
                                        $step = 2;
                                        continue;
                                    }
                                    case 2: {
                                        this.transport = c.TransportID;
                                        this.m_RemoteEndpoint = 0;

                                        $task2 = this.PullServiceDefinitionAndImports(null, cancel);
                                        $step = 3;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 3: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        d = $taskResult2;

                                        this.pulled_service_defs;
                                        {
                                            $t = Bridge.getEnumerator(d);
                                            try {
                                                while ($t.moveNext()) {
                                                    d2 = $t.Current;
                                                    if (!this.pulled_service_defs.containsKey(d2.Name)) {
                                                        this.pulled_service_defs.add(d2.Name, d2);
                                                    }
                                                }
                                            } finally {
                                                if (Bridge.is($t, System.IDisposable)) {
                                                    $t.System$IDisposable$Dispose();
                                                }
                                            }
                                        }

                                        if (!this.UsePulledServiceTypes) {
                                            this.m_ServiceDef = this.node.GetServiceType(d[System.Array.index(0, d)].Name);
                                        } else {
                                            f = this.DynamicServiceFactory_.RobotRaconteurWeb$DynamicServiceFactory$CreateServiceFactories(System.Linq.Enumerable.from(d, RobotRaconteurWeb.ServiceDefinition).select(function (x) {
                                                return x.toString();
                                            }).ToArray(System.String), this);
                                            this.pulled_service_defs;
                                            {
                                                $t1 = Bridge.getEnumerator(f);
                                                try {
                                                    while ($t1.moveNext()) {
                                                        f2 = $t1.Current;
                                                        if (!this.pulled_service_types.containsKey(f2.GetServiceName())) {
                                                            this.pulled_service_types.add(f2.GetServiceName(), f2);
                                                        }
                                                    }
                                                } finally {
                                                    if (Bridge.is($t1, System.IDisposable)) {
                                                        $t1.System$IDisposable$Dispose();
                                                    }
                                                }
                                            }
                                            this.m_ServiceDef = this.GetPulledServiceType(d[System.Array.index(0, d)].Name);
                                        }

                                        e = new RobotRaconteurWeb.MessageEntry.$ctor1(RobotRaconteurWeb.MessageEntryType.ObjectTypeName, "");
                                        e.ServicePath = this.ServiceName;

                                        $task3 = this.ProcessRequest(e, cancel);
                                        $step = 4;
                                        if ($task3.isCompleted()) {
                                            continue;
                                        }
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 4: {
                                        $taskResult3 = $task3.getAwaitedResult();
                                        ret = $taskResult3;
                                        if (ret.Error !== RobotRaconteurWeb.MessageErrorType.None) {
                                            $tcs.setResult(null);
                                            return;
                                        }
                                        type = ret.FindElement("objecttype").CastData(System.String);
                                        if (Bridge.referenceEquals(type, "")) {
                                            $tcs.setResult(new RobotRaconteurWeb.ObjectNotFoundException("Could not find object type"));
                                            return;
                                        }
                                        ;


                                        if (objecttype != null) {
                                            $step = 5;
                                            continue;
                                        } 
                                        $step = 7;
                                        continue;
                                    }
                                    case 5: {
                                        this.VerifyObjectImplements(type, objecttype);
                                        type = objecttype;
                                        $task4 = this.PullServiceDefinitionAndImports(RobotRaconteurWeb.ServiceDefinitionUtil.SplitQualifiedName(type).Item2, cancel);
                                        $step = 6;
                                        if ($task4.isCompleted()) {
                                            continue;
                                        }
                                        $task4.continue($asyncBody);
                                        return;
                                    }
                                    case 6: {
                                        $taskResult4 = $task4.getAwaitedResult();
                                        $step = 7;
                                        continue;
                                    }
                                    case 7: {
                                        e2 = new RobotRaconteurWeb.MessageEntry.ctor();
                                        e2.ServicePath = this.ServiceName;
                                        e2.MemberName = "registerclient";
                                        e2.EntryType = RobotRaconteurWeb.MessageEntryType.ConnectClient;
                                        $task5 = this.ProcessRequest(e2, cancel);
                                        $step = 8;
                                        if ($task5.isCompleted()) {
                                            continue;
                                        }
                                        $task5.continue($asyncBody);
                                        return;
                                    }
                                    case 8: {
                                        $taskResult5 = $task5.getAwaitedResult();
                                        if (username != null) {
                                            $step = 9;
                                            continue;
                                        } 
                                        $step = 11;
                                        continue;
                                    }
                                    case 9: {
                                        $task6 = this.AuthenticateUser(username, credentials, cancel);
                                        $step = 10;
                                        if ($task6.isCompleted()) {
                                            continue;
                                        }
                                        $task6.continue($asyncBody);
                                        return;
                                    }
                                    case 10: {
                                        $taskResult6 = $task6.getAwaitedResult();
                                        $step = 11;
                                        continue;
                                    }
                                    case 11: {
                                        stub = this.ServiceDef.CreateStub(type, this.ServiceName, this);
                                        this.stubs.add(this.ServiceName, stub);
                                        noop = RobotRaconteurWeb.Extensions.Extensions.IgnoreResult(RobotRaconteurWeb.PeriodicTask.Run$1(Bridge.fn.cacheBind(this, this.PeriodicCleanupTask), System.TimeSpan.fromSeconds(5), this.cancel_source.token));

                                        $tcs.setResult(stub);
                                        return;
                                    }
                                    case 12: {
                                        try {
                                            this.TransportConnection.RobotRaconteurWeb$ITransportConnection$Close();
                                        } catch ($e1) {
                                            $e1 = System.Exception.create($e1);
                                        }

                                        this.m_Connected = false;
                                        throw e1;
                                        $async_e = null;
                                        $step = 13;
                                        continue;
                                    }
                                    case 13: {
                                        /* }
                                        catch { 
                                           return null; 
                                        }*/
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            if ( $step >= 2 && $step <= 11 ) {
                                e1 = $async_e;
                                $step = 12;
                                $asyncBody();
                                return;
                            }
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            Close: function (cancel) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    e, 
                    $async_e, 
                    $e1, 
                    $async_e1, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4], $step);
                                switch ($step) {
                                    case 0: {
                                        if (cancel === void 0) { cancel = new System.Threading.CancellationToken(); }
                                        this.cancel_source.cancel();

                                        
                                        $step = 1;
                                        continue;
                                    }
                                    case 1: {
                                        e = new RobotRaconteurWeb.MessageEntry.$ctor1(RobotRaconteurWeb.MessageEntryType.DisconnectClient, "");
                                        e.AddElement$1("servicename", this.ServiceName);
                                        $task1 = this.ProcessRequest(e, cancel);
                                        $step = 2;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $step = 4;
                                        continue;
                                    }
                                    case 3: {
                                        $async_e = null;
                                        $step = 4;
                                        continue;
                                    }
                                    case 4: {
                                        this.stubs.clear();
                                        this.m_Connected = false;
                                        this.node.DeleteEndpoint(this);

                                        try {
                                            if (!Bridge.staticEquals(this.ClientServiceListener, null)) {
                                                this.ClientServiceListener(this, RobotRaconteurWeb.ClientServiceListenerEventType.ClientClosed, null);
                                            }
                                        } catch ($e1) {
                                            $e1 = System.Exception.create($e1);
                                        }
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            if ( $step >= 1 && $step <= 2 ) {
                                $step = 3;
                                $asyncBody();
                                return;
                            }
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            VerifyObjectImplements: function (objecttype, implementstype) {
                if (!this.VerifyObjectImplements2(objecttype, implementstype)) {
                    throw new RobotRaconteurWeb.ServiceException("Invalid object type");
                }
                return true;
            },
            VerifyObjectImplements2: function (objecttype, implementstype) {
                var $t;
                this;
                {
                    if (Bridge.referenceEquals(objecttype, implementstype)) {
                        return true;
                    }
                    var s1 = RobotRaconteurWeb.ServiceDefinitionUtil.SplitQualifiedName(objecttype);
                    if (!this.pulled_service_defs.containsKey(s1.Item1)) {
                        return false;
                    }

                    if (!this.pulled_service_defs.containsKey(s1.Item1)) {
                        return false;
                    }

                    var d = this.pulled_service_defs.getItem(s1.Item1);

                    var o = System.Linq.Enumerable.from(d.Objects, System.Collections.Generic.KeyValuePair$2(System.String,RobotRaconteurWeb.ServiceEntryDefinition)).firstOrDefault(function (x) {
                            return Bridge.referenceEquals(x.value.Name, s1.Item2);
                        }, new (System.Collections.Generic.KeyValuePair$2(System.String,RobotRaconteurWeb.ServiceEntryDefinition))()).value;
                    if (o == null) {
                        return false;
                    }
                    $t = Bridge.getEnumerator(o.Implements);
                    try {
                        while ($t.moveNext()) {
                            var e = $t.Current;
                            var deftype = d.Name;
                            var objtype = "";
                            if (System.Linq.Enumerable.from(e, System.Char).contains(46)) {
                                objtype = e;
                            } else {
                                var s2 = RobotRaconteurWeb.ServiceDefinitionUtil.SplitQualifiedName(e);
                                deftype = s2.Item1;
                                objtype = s2.Item2;
                            }

                            if (Bridge.referenceEquals(((deftype || "") + "." + (objtype || "")), implementstype)) {
                                return true;
                            }
                            if (this.VerifyObjectImplements2((deftype || "") + "." + (objtype || ""), implementstype)) {
                                return true;
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }

                    return false;
                }

            },
            SendPipeMessage: function (m, cancel) {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = this.SendMessage$1(m, cancel);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            SendWireMessage: function (m, cancel) {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = this.SendMessage$1(m, cancel);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            AuthenticateUser: function (username, credentials, cancel) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    m, 
                    mcredentials, 
                    ret, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        if (cancel === void 0) { cancel = new System.Threading.CancellationToken(); }
                                        m = new RobotRaconteurWeb.MessageEntry.$ctor1(RobotRaconteurWeb.MessageEntryType.ClientSessionOpReq, "AuthenticateUser");
                                        m.ServicePath = this.ServiceName;
                                        m.AddElement$1("username", username);
                                        if (Bridge.is(credentials, System.Collections.Generic.Dictionary$2(System.String,System.Object))) {
                                            m.AddElement$1("credentials", this.PackMapType(System.String, System.Object, credentials));
                                        } else if (Bridge.is(credentials, RobotRaconteurWeb.MessageElement)) {
                                            mcredentials = Bridge.cast(credentials, RobotRaconteurWeb.MessageElement);
                                            mcredentials.ElementName = "credentials";
                                            m.AddElement(mcredentials);
                                        }
                                        $task1 = this.ProcessRequest(m, cancel);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        ret = $taskResult1;
                                        this.m_AuthenticatedUsername = username;
                                        this.m_UserAuthenticated = true;
                                        $tcs.setResult(ret.FindElement("return").CastData(System.String));
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            LogoutUser: function (cancel) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    m, 
                    ret, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        if (cancel === void 0) { cancel = new System.Threading.CancellationToken(); }
                                        if (!this.UserAuthenticated) {
                                            throw new RobotRaconteurWeb.AuthenticationException("User is not authenticated");
                                        }

                                        this.m_UserAuthenticated = false;
                                        this.m_AuthenticatedUsername = null;

                                        m = new RobotRaconteurWeb.MessageEntry.$ctor1(RobotRaconteurWeb.MessageEntryType.ClientSessionOpReq, "LogoutUser");
                                        m.ServicePath = this.ServiceName;
                                        m.AddElement$1("username", this.AuthenticatedUsername);
                                        $task1 = this.ProcessRequest(m, cancel);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        ret = $taskResult1;
                                        $tcs.setResult(ret.FindElement("return").CastData(System.String));
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            RequestObjectLock: function (obj, flags, cancel) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    s, 
                    command, 
                    m, 
                    ret, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        if (cancel === void 0) { cancel = new System.Threading.CancellationToken(); }
                                        if (!(Bridge.is(obj, RobotRaconteurWeb.ServiceStub))) {
                                            throw new System.InvalidOperationException.$ctor1("Can only lock object opened through Robot Raconteur");
                                        }
                                        s = Bridge.cast(obj, RobotRaconteurWeb.ServiceStub);

                                        command = "";
                                        if (flags === RobotRaconteurWeb.RobotRaconteurObjectLockFlags.USER_LOCK) {
                                            command = "RequestObjectLock";
                                        } else if (flags === RobotRaconteurWeb.RobotRaconteurObjectLockFlags.CLIENT_LOCK) {
                                            command = "RequestClientObjectLock";
                                        } else {
                                            throw new System.InvalidOperationException.$ctor1("Unknown flags");
                                        }

                                        m = new RobotRaconteurWeb.MessageEntry.$ctor1(RobotRaconteurWeb.MessageEntryType.ClientSessionOpReq, command);
                                        m.ServicePath = s.RRServicePath;

                                        $task1 = this.ProcessRequest(m, cancel);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        ret = $taskResult1;
                                        $tcs.setResult(ret.FindElement("return").CastData(System.String));
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            ReleaseObjectLock: function (obj, cancel) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    s, 
                    m, 
                    ret, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        if (cancel === void 0) { cancel = new System.Threading.CancellationToken(); }
                                        if (!(Bridge.is(obj, RobotRaconteurWeb.ServiceStub))) {
                                            throw new System.InvalidOperationException.$ctor1("Can only unlock object opened through Robot Raconteur");
                                        }
                                        s = Bridge.cast(obj, RobotRaconteurWeb.ServiceStub);

                                        m = new RobotRaconteurWeb.MessageEntry.$ctor1(RobotRaconteurWeb.MessageEntryType.ClientSessionOpReq, "ReleaseObjectLock");
                                        m.ServicePath = s.RRServicePath;

                                        $task1 = this.ProcessRequest(m, cancel);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        ret = $taskResult1;
                                        $tcs.setResult(ret.FindElement("return").CastData(System.String));
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            MonitorEnter: function (obj, timeout, cancel) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $task3, 
                    $taskResult3, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    iserror, 
                    lock_, 
                    s, 
                    keep_trying, 
                    m, 
                    ret, 
                    retcode, 
                    $t, 
                    m1, 
                    ret1, 
                    retcode1, 
                    $async_e, 
                    $e1, 
                    $async_e1, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,5,6,7,8,9,11,12], $step);
                                switch ($step) {
                                    case 0: {
                                        if (cancel === void 0) { cancel = new System.Threading.CancellationToken(); }
                                        iserror = true;
                                        lock_ = null;
                                        
                                        $step = 1;
                                        continue;
                                    }
                                    case 1: {
                                        if (!(Bridge.is(obj, RobotRaconteurWeb.ServiceStub))) {
                                            throw new System.InvalidOperationException.$ctor1("Can only unlock object opened through Robot Raconteur");
                                        }
                                        s = Bridge.cast(obj, RobotRaconteurWeb.ServiceStub);
                                        $task1 = s.rr_async_mutex.Lock();
                                        $step = 2;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        lock_ = $taskResult1;

                                        keep_trying = true;
                                        m = new RobotRaconteurWeb.MessageEntry.$ctor1(RobotRaconteurWeb.MessageEntryType.ClientSessionOpReq, "MonitorEnter");
                                        m.ServicePath = s.RRServicePath;
                                        m.AddElement$1("timeout", Bridge.box(timeout, System.Int32));

                                        $task2 = this.ProcessRequest(m, cancel);
                                        $step = 3;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 3: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        ret = $taskResult2;
                                        retcode = ret.FindElement("return").CastData(System.String);

                                        if (Bridge.referenceEquals(retcode, "OK")) {
                                            iserror = false;
                                            $returnValue = ($t = new RobotRaconteurWeb.RobotRaconteurNode.MonitorLock(), $t.lock_ = lock_, $t.stub = s, $t);
                                            $step = 11;
                                            continue;


                                        }
                                        if (Bridge.referenceEquals(retcode, "Continue")) {
                                            $step = 4;
                                            continue;
                                        } else  {
                                            $step = 9;
                                            continue;
                                        }
                                    }

                                    case 5: {
                                        if ( keep_trying ) {
                                            $step = 6;
                                            continue;
                                        } 
                                        $step = 8;
                                        continue;
                                    }
                                    case 6: {
                                        m1 = new RobotRaconteurWeb.MessageEntry.$ctor1(RobotRaconteurWeb.MessageEntryType.ClientSessionOpReq, "MonitorContinueEnter");
                                        m1.ServicePath = s.RRServicePath;

                                        $task3 = this.ProcessRequest(m1, cancel);
                                        $step = 7;
                                        if ($task3.isCompleted()) {
                                            continue;
                                        }
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 7: {
                                        $taskResult3 = $task3.getAwaitedResult();
                                        ret1 = $taskResult3;
                                        retcode1 = ret1.FindElement("return").CastData(System.String);
                                        if (Bridge.referenceEquals(retcode1, "OK")) {
                                            iserror = false;
                                            $returnValue = ($t = new RobotRaconteurWeb.RobotRaconteurNode.MonitorLock(), $t.lock_ = lock_, $t.stub = s, $t);
                                            $step = 11;
                                            continue;
                                        }
                                        if (!Bridge.referenceEquals(retcode1, "Continue")) {
                                            throw new RobotRaconteurWeb.ProtocolException("Unknown return code");
                                        }

                                        $step = 5;
                                        continue;
                                    }
                                    case 8: {
                                        $step = 10;
                                        continue;
                                    }
                                    case 9: {
                                        throw new RobotRaconteurWeb.ProtocolException("Unknown return code");
                                        $step = 10;
                                        continue;
                                    }

                                    case 11: {
                                        if (iserror) {
                                            if (lock_ != null) {
                                                try {
                                                    lock_.System$IDisposable$Dispose();
                                                } catch ($e1) {
                                                    $e1 = System.Exception.create($e1);
                                                }
                                            }
                                        }

                                        if ($jumpFromFinally > -1) {
                                            $step = $jumpFromFinally;
                                            $jumpFromFinally = null;
                                        } else if ($async_e) {
                                            $tcs.setException($async_e);
                                            return;
                                        } else if (Bridge.isDefined($returnValue)) {
                                            $tcs.setResult($returnValue);
                                            return;
                                        }
                                        $step = 12;
                                        continue;
                                    }
                                    case 12: {
                                        throw new RobotRaconteurWeb.ProtocolException("Unknown return code");
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            if ($step >= 1 && $step <= 10) {
                                $step = 11;
                                $asyncBody();
                                return;
                            }
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            MonitorExit: function (lock_, cancel) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    m, 
                    ret, 
                    retcode, 
                    $async_e, 
                    $e1, 
                    $async_e1, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4], $step);
                                switch ($step) {
                                    case 0: {
                                        if (cancel === void 0) { cancel = new System.Threading.CancellationToken(); }
                                        
                                        $step = 1;
                                        continue;
                                    }
                                    case 1: {
                                        m = new RobotRaconteurWeb.MessageEntry.$ctor1(RobotRaconteurWeb.MessageEntryType.ClientSessionOpReq, "MonitorExit");
                                        m.ServicePath = lock_.stub.RRServicePath;

                                        $task1 = this.ProcessRequest(m, cancel);
                                        $step = 2;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        ret = $taskResult1;
                                        retcode = ret.FindElement("return").CastData(System.String);
                                        if (!Bridge.referenceEquals(retcode, "OK")) {
                                            throw new RobotRaconteurWeb.ProtocolException("Unknown return code");
                                        }
                                        $step = 3;
                                        continue;
                                    }
                                    case 3: {
                                        try {
                                            lock_.lock_.System$IDisposable$Dispose();
                                        } catch ($e1) {
                                            $e1 = System.Exception.create($e1);
                                        }

                                        if ($jumpFromFinally > -1) {
                                            $step = $jumpFromFinally;
                                            $jumpFromFinally = null;
                                        } else if ($async_e) {
                                            $tcs.setException($async_e);
                                            return;
                                        } else if (Bridge.isDefined($returnValue)) {
                                            $tcs.setResult($returnValue);
                                            return;
                                        }
                                        $step = 4;
                                        continue;
                                    }
                                    case 4: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            if ($step >= 1 && $step <= 2) {
                                $step = 3;
                                $asyncBody();
                                return;
                            }
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            PeriodicCleanupTask: function () {
                if ((System.DateTime.subdd(System.DateTime.getUtcNow(), this.LastMessageReceivedTime)).getTotalMilliseconds() > this.node.EndpointInactivityTimeout) {
                    RobotRaconteurWeb.Extensions.Extensions.IgnoreResult(this.Close());
                }

                if (this.m_RemoteEndpoint !== 0) {
                    if ((System.DateTime.subdd(System.DateTime.getUtcNow(), this.LastMessageSentTime)).getTotalMilliseconds() > 60000) {
                        var m = new RobotRaconteurWeb.MessageEntry.$ctor1(RobotRaconteurWeb.MessageEntryType.ClientKeepAliveReq, "");
                        m.ServicePath = this.m_ServiceName;
                        m.RequestID = 0;
                        RobotRaconteurWeb.Extensions.Extensions.IgnoreResult(this.SendMessage$1(m, Bridge.getDefaultValue(System.Threading.CancellationToken)));
                    }
                }
            },
            CheckServiceCapability: function (name, cancel) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    m, 
                    ret, 
                    res, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        if (cancel === void 0) { cancel = new System.Threading.CancellationToken(); }
                                        m = new RobotRaconteurWeb.MessageEntry.$ctor1(RobotRaconteurWeb.MessageEntryType.ServiceCheckCapabilityReq, name);
                                        m.ServicePath = this.m_ServiceName;
                                        $task1 = this.ProcessRequest(m, cancel);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        ret = $taskResult1;
                                        res = ret.FindElement("return").CastData(System.UInt32);
                                        $tcs.setResult(res);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            ProcessCallbackCall: function (m) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    ret, 
                    s, 
                    e, 
                    $async_e, 
                    $async_e1, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5], $step);
                                switch ($step) {
                                    case 0: {
                                        ret = null;
                                        
                                        $step = 1;
                                        continue;
                                    }
                                    case 1: {
                                        this.stubs;
                                        {
                                            if (!this.stubs.containsKey(m.ServicePath)) {
                                                throw new RobotRaconteurWeb.ServiceException("Stub not found");
                                            }
                                            s = this.stubs.getItem(m.ServicePath);
                                        }
                                        $task1 = s.CallbackCall(m);
                                        $step = 2;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        ret = $taskResult1;
                                        $step = 4;
                                        continue;
                                    }
                                    case 3: {
                                        ret = new RobotRaconteurWeb.MessageEntry.$ctor1(((m.EntryType + 1) | 0), m.MemberName);
                                        ret.ServicePath = m.ServicePath;
                                        ret.RequestID = m.RequestID;
                                        RobotRaconteurWeb.RobotRaconteurExceptionUtil.ExceptionToMessageEntry(e, ret);

                                        $async_e = null;
                                        $step = 4;
                                        continue;
                                    }
                                    case 4: {
                                        $task2 = this.SendMessage$1(ret, Bridge.getDefaultValue(System.Threading.CancellationToken));
                                        $step = 5;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 5: {
                                        $task2.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            if ( $step >= 1 && $step <= 2 ) {
                                e = $async_e;
                                $step = 3;
                                $asyncBody();
                                return;
                            }
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            PullServiceDefinition: function (servicetype, cancel) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    e3, 
                    res, 
                    def, 
                    d, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        e3 = new RobotRaconteurWeb.MessageEntry.$ctor1(RobotRaconteurWeb.MessageEntryType.GetServiceDesc, "");
                                        e3.ServicePath = this.m_ServiceName;
                                        if (servicetype != null) {
                                            e3.AddElement$1("ServiceType", servicetype);
                                        }

                                        $task1 = this.ProcessRequest(e3, cancel);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        res = $taskResult1;

                                        def = res.FindElement("servicedef").CastData(System.String);
                                        if (Bridge.referenceEquals(def, "")) {
                                            throw new RobotRaconteurWeb.ServiceNotFoundException("Could not find service definition");
                                        }
                                        d = new RobotRaconteurWeb.ServiceDefinition();
                                        d.FromString(def);

                                        if (servicetype == null) {

                                            if (System.Linq.Enumerable.from(res.elements, RobotRaconteurWeb.MessageElement).count(function (x) {
                                                return Bridge.referenceEquals(x.ElementName, "attributes");
                                            }) !== 0) {
                                                this;
                                                {
                                                    this.Attributes = Bridge.cast(this.node.UnpackMapType(System.String, System.Object, res.FindElement("attributes").CastData(RobotRaconteurWeb.MessageElementMap$1(System.String)), null), System.Collections.Generic.Dictionary$2(System.String,System.Object));
                                                }
                                            }
                                        }

                                        $tcs.setResult(d);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            PullServiceDefinitionAndImports: function (servicetype, cancel) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    defs, 
                    root, 
                    $t, 
                    i, 
                    defs2, 
                    $t1, 
                    d, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,6,7], $step);
                                switch ($step) {
                                    case 0: {
                                        defs = new (System.Collections.Generic.List$1(RobotRaconteurWeb.ServiceDefinition)).ctor();
                                        $task1 = this.PullServiceDefinition(servicetype, cancel);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        root = $taskResult1;
                                        defs.add(root);
                                        if (root.Imports.Count === 0) {
                                            $tcs.setResult(defs.ToArray());
                                            return;
                                        }

                                        $t = Bridge.getEnumerator(root.Imports);
                                        $step = 2;
                                        continue;
                                    }
                                    case 2: {
                                        if ($t.moveNext()) {
                                            i = { v : $t.Current };
                                            $step = 3;
                                            continue;
                                        }
                                        $step = 7;
                                        continue;
                                    }
                                    case 3: {
                                        if (System.Linq.Enumerable.from(defs, RobotRaconteurWeb.ServiceDefinition).count((function ($me, i) {
                                            return function (x) {
                                                return Bridge.referenceEquals(x.Name, i.v);
                                            };
                                        })(this, i)) === 0) {
                                            $step = 4;
                                            continue;
                                        } 
                                        $step = 6;
                                        continue;
                                    }
                                    case 4: {
                                        $task2 = this.PullServiceDefinitionAndImports(i.v, cancel);
                                        $step = 5;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 5: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        defs2 = $taskResult2;
                                        $t1 = Bridge.getEnumerator(defs2);
                                        try {
                                            while ($t1.moveNext()) {
                                                d = { v : $t1.Current };
                                                if (System.Linq.Enumerable.from(defs, RobotRaconteurWeb.ServiceDefinition).count((function ($me, d) {
                                                    return function (x) {
                                                        return Bridge.referenceEquals(x.Name, d.v.Name);
                                                    };
                                                })(this, d)) === 0) {
                                                    defs.add(d.v);
                                                }
                                            }
                                        } finally {
                                            if (Bridge.is($t1, System.IDisposable)) {
                                                $t1.System$IDisposable$Dispose();
                                            }
                                        }
                                        $step = 6;
                                        continue;
                                    }
                                    case 6: {
                                        $step = 2;
                                        continue;
                                    }
                                    case 7: {
                                        $tcs.setResult(defs.ToArray());
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            GetPulledServiceType: function (type) {
                var f = { };
                if (!this.TryGetPulledServiceType(type, f)) {
                    throw new RobotRaconteurWeb.ServiceException("Unknown service type");
                }
                return f.v;
            },
            TryGetPulledServiceType: function (type, f) {
                this.pulled_service_types;
                {
                    return this.pulled_service_types.tryGetValue(type, f);
                }
            },
            GetPulledServiceTypes: function () {
                var $t;
                this.pulled_service_types;
                {
                    return ($t = System.String, System.Linq.Enumerable.from(this.pulled_service_types.Keys, $t).ToArray($t));
                }
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.ConnectionException", {
        inherits: [RobotRaconteurWeb.RobotRaconteurException],
        ctors: {
            ctor: function (message) {
                this.$initialize();
                RobotRaconteurWeb.RobotRaconteurException.$ctor1.call(this, RobotRaconteurWeb.MessageErrorType.ConnectionError, "RobotRaconteur.ConnectionError", message);
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.DataSerializationException", {
        inherits: [RobotRaconteurWeb.RobotRaconteurException],
        ctors: {
            ctor: function (message) {
                this.$initialize();
                RobotRaconteurWeb.RobotRaconteurException.$ctor1.call(this, RobotRaconteurWeb.MessageErrorType.DataSerializationError, "RobotRaconteur.DataSerializationError", message);
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.DataTypeException", {
        inherits: [RobotRaconteurWeb.RobotRaconteurException],
        ctors: {
            ctor: function (message) {
                this.$initialize();
                RobotRaconteurWeb.RobotRaconteurException.$ctor1.call(this, RobotRaconteurWeb.MessageErrorType.DataTypeError, "RobotRaconteur.DataTypeError", message);
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.DataTypeMismatchException", {
        inherits: [RobotRaconteurWeb.RobotRaconteurException],
        ctors: {
            ctor: function (message) {
                this.$initialize();
                RobotRaconteurWeb.RobotRaconteurException.$ctor1.call(this, RobotRaconteurWeb.MessageErrorType.DataTypeMismatch, "RobotRaconteur.DataTypeMismatch", message);
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.EndpointCommunicationFatalException", {
        inherits: [RobotRaconteurWeb.RobotRaconteurException],
        ctors: {
            ctor: function (message) {
                this.$initialize();
                RobotRaconteurWeb.RobotRaconteurException.$ctor1.call(this, RobotRaconteurWeb.MessageErrorType.EndpointCommunicationFatalError, "RobotRaconteur.EndpointCommunicationFatalError", message);
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.EnumDefinition", {
        inherits: [RobotRaconteurWeb.NamedTypeDefinition],
        fields: {
            Values: null,
            service: null
        },
        props: {
            RRDataType: {
                get: function () {
                    return RobotRaconteurWeb.DataTypes.enum_t;
                }
            }
        },
        ctors: {
            init: function () {
                this.Values = new (System.Collections.Generic.List$1(RobotRaconteurWeb.EnumDefinitionValue)).ctor();
            },
            ctor: function (service) {
                this.$initialize();
                RobotRaconteurWeb.NamedTypeDefinition.ctor.call(this);
                this.service = service;
            }
        },
        methods: {
            toString: function () {
                var $t;
                if (!this.VerifyValues()) {
                    throw new RobotRaconteurWeb.DataTypeException("Invalid enum: " + (this.Name || ""));
                }

                var s = "enum " + (this.Name || "") + "\n";

                var values = new (System.Collections.Generic.List$1(System.String)).ctor();

                $t = Bridge.getEnumerator(this.Values);
                try {
                    while ($t.moveNext()) {
                        var e = $t.Current;
                        if (e.ImplicitValue) {
                            values.add("    " + (e.Name || ""));
                        } else {
                            if (!e.HexValue) {
                                values.add("    " + (e.Name || "") + " = " + (Bridge.toString(e.Value) || ""));
                            } else {
                                values.add("    " + (e.Name || "") + " = 0x" + (System.Int32.format(e.Value, "x") || ""));
                            }
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
                s = (s || "") + ((Bridge.toArray(values).join(",\n")) || "");
                s = (s || "") + "\nend enum\n";
                return s;
            },
            FromString: function (s, startline) {
                var $t;
                this.Reset();

                var s2 = s.trim();
                var lines = System.String.split(s2, System.Array.init([10, 13], System.Char).map(function (i) {{ return String.fromCharCode(i); }}), null, 1);

                if (lines.length < 2) {
                    throw new RobotRaconteurWeb.RobotRaconteurParseException.$ctor1("Invalid enum", (startline | 0));
                }

                var r_start = new System.Text.RegularExpressions.Regex.ctor("^[ \\t]*enum[ \\t]+([a-zA-Z]\\w*)[ \\t]*$");
                var r_end = new System.Text.RegularExpressions.Regex.ctor("^[ \\t]*end(?:[ \\t]+enum)?[ \\t]*$");


                var r_start_match = r_start.match(System.Linq.Enumerable.from(lines, System.String).first());
                if (!r_start_match.getSuccess()) {
                    throw new RobotRaconteurWeb.RobotRaconteurParseException.$ctor1("Parse error near: " + (System.Linq.Enumerable.from(lines, System.String).first() || ""), (startline | 0));
                }
                this.Name = r_start_match.getGroups().get(1).getValue();

                if (!r_end.isMatch(System.Linq.Enumerable.from(lines, System.String).last())) {
                    throw new RobotRaconteurWeb.RobotRaconteurParseException.$ctor1("Parse error near: " + (System.Linq.Enumerable.from(lines, System.String).last() || ""), System.Int64.clip32(System.Int64(startline).add(System.Int64(lines.length)).sub(System.Int64(1))));
                }

                var values1 = Bridge.toArray(System.Linq.Enumerable.from(lines, System.String).skip(1).take(((lines.length - 2) | 0))).join(" ");
                var values2 = System.String.split(values1, System.Array.init([44], System.Char).map(function (i) {{ return String.fromCharCode(i); }}));

                var r_value = new System.Text.RegularExpressions.Regex.ctor("^[ \\t]*([A-Za-z]\\w*)(?:[ \\t]*=[ \\t]*(?:(0x\\d+)|(-?\\d+)))?[ \\t]*$");
                var values3 = new (System.Collections.Generic.List$1(RobotRaconteurWeb.EnumDefinitionValue)).ctor();
                $t = Bridge.getEnumerator(values2);
                try {
                    while ($t.moveNext()) {
                        var l = $t.Current;
                        var r_value_match = r_value.match(l);
                        if (!r_value_match.getSuccess()) {
                            throw new RobotRaconteurWeb.RobotRaconteurParseException.$ctor1("Enum value parse error near: " + (System.Linq.Enumerable.from(lines, System.String).first() || ""), System.Int64.clip32(System.Int64(startline).add(System.Int64(lines.length)).sub(System.Int64(1))));
                        }

                        var enum_i = new RobotRaconteurWeb.EnumDefinitionValue();
                        enum_i.Name = r_value_match.getGroups().get(1).getValue();

                        if (r_value_match.getGroups().get(2).getSuccess()) {
                            enum_i.ImplicitValue = false;
                            enum_i.Value = System.Convert.toNumberInBase(System.Text.RegularExpressions.Regex.match(r_value_match.getGroups().get(2).getValue(), "0x([0-9a-fA-F]+)").getGroups().get(1).getValue(), 16, 9);
                            enum_i.HexValue = true;
                        } else if (r_value_match.getGroups().get(3).getSuccess()) {
                            enum_i.ImplicitValue = false;
                            enum_i.Value = System.Int32.parse(r_value_match.getGroups().get(3).getValue());
                            enum_i.HexValue = false;
                        } else {
                            if (this.Values.Count === 1) {
                                throw new RobotRaconteurWeb.RobotRaconteurParseException.$ctor1("Enum first value must be specified: " + (System.Linq.Enumerable.from(lines, System.String).first() || ""), System.Int64.clip32(System.Int64(startline).add(System.Int64(lines.length)).sub(System.Int64(1))));
                            }

                            enum_i.ImplicitValue = true;
                            enum_i.Value = ((System.Linq.Enumerable.from(values3, RobotRaconteurWeb.EnumDefinitionValue).last()).Value + 1) | 0;
                            enum_i.HexValue = (System.Linq.Enumerable.from(values3, RobotRaconteurWeb.EnumDefinitionValue).last()).HexValue;
                        }

                        values3.add(enum_i);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }

                this.Values = values3;

                if (!this.VerifyValues()) {
                    throw new RobotRaconteurWeb.RobotRaconteurParseException.$ctor1("Enum names or values not unique: " + (System.Linq.Enumerable.from(lines, System.String).first() || ""), (startline | 0));
                }
            },
            VerifyValues: function () {
                if (this.Values.Count === 1) {
                    return true;
                }


                for (var i = 0; i < ((this.Values.Count - 1) | 0); i = (i + 1) | 0) {
                    var e = this.Values.getItem(i);
                    for (var j = (i + 1) | 0; j < this.Values.Count; j = (j + 1) | 0) {
                        var e2 = this.Values.getItem(j);
                        if (e.Value === e2.Value) {
                            return false;
                        }
                        if (Bridge.referenceEquals(e.Name, e2.Name)) {
                            return false;
                        }
                    }
                }
                return true;
            },
            Reset: function () {
                this.Values.clear();
            },
            ResolveQualifiedName: function () {
                return (this.service.Name || "") + "." + (this.Name || "");
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.EnumeratorGenerator$1", function (T) { return {
        inherits: [RobotRaconteurWeb.Generator2$1(T)],
        fields: {
            aborted: false,
            closed: false,
            enumerator: null
        },
        alias: [
            "Abort", "RobotRaconteurWeb$Generator2$1$" + Bridge.getTypeAlias(T) + "$Abort",
            "Close", "RobotRaconteurWeb$Generator2$1$" + Bridge.getTypeAlias(T) + "$Close",
            "Next", "RobotRaconteurWeb$Generator2$1$" + Bridge.getTypeAlias(T) + "$Next",
            "NextAll", "RobotRaconteurWeb$Generator2$1$" + Bridge.getTypeAlias(T) + "$NextAll"
        ],
        ctors: {
            init: function () {
                this.aborted = false;
                this.closed = false;
            },
            ctor: function (enumerable) {
                RobotRaconteurWeb.EnumeratorGenerator$1(T).$ctor1.call(this, Bridge.getEnumerator(enumerable, T));
            },
            $ctor1: function (enumerator) {
                this.$initialize();
                this.enumerator = enumerator;
            }
        },
        methods: {
            Abort: function (cancel) {
                if (cancel === void 0) { cancel = new System.Threading.CancellationToken(); }
                this;
                {
                    this.aborted = true;
                }
                return System.Threading.Tasks.Task.fromResult(0, System.Int32);
            },
            Close: function (cancel) {
                if (cancel === void 0) { cancel = new System.Threading.CancellationToken(); }
                this;
                {
                    this.closed = true;
                }
                return System.Threading.Tasks.Task.fromResult(0, System.Int32);
            },
            Next: function (cancel) {
                if (cancel === void 0) { cancel = new System.Threading.CancellationToken(); }
                this;
                {
                    if (this.aborted) {
                        throw new RobotRaconteurWeb.OperationAbortedException("Generator aborted");
                    }
                    if (this.closed) {
                        throw new RobotRaconteurWeb.StopIterationException("");
                    }
                    if (!this.enumerator.System$Collections$IEnumerator$moveNext()) {
                        throw new RobotRaconteurWeb.StopIterationException("");
                    }
                    return System.Threading.Tasks.Task.fromResult(this.enumerator[Bridge.geti(this.enumerator, "System$Collections$Generic$IEnumerator$1$" + Bridge.getTypeAlias(T) + "$Current$1", "System$Collections$Generic$IEnumerator$1$Current$1")], T);
                }
            },
            NextAll: function (cancel) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    o, 
                    $async_e, 
                    $async_e1, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,2,3,4,5,6,7], $step);
                                switch ($step) {
                                    case 0: {
                                        if (cancel === void 0) { cancel = new System.Threading.CancellationToken(); }
                                        o = new (System.Collections.Generic.List$1(T)).ctor();
                                        
                                        $step = 1;
                                        continue;
                                    }

                                    case 2: {
                                        if ( true ) {
                                            $step = 3;
                                            continue;
                                        } 
                                        $step = 5;
                                        continue;
                                    }
                                    case 3: {
                                        $task1 = this.Next();
                                        $step = 4;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 4: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        o.add($taskResult1);

                                        $step = 2;
                                        continue;
                                    }
                                    case 5: {
                                        $step = 7;
                                        continue;
                                    }
                                    case 6: {
                                        $async_e = null;
                                        $step = 7;
                                        continue;
                                    }
                                    case 7: {
                                        $tcs.setResult(o.ToArray());
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            if ( $step >= 1 && $step <= 5 ) {
                                if (Bridge.is($async_e, RobotRaconteurWeb.StopIterationException)) {
                                    $step = 6;
                                    $asyncBody();
                                    return;
                                }
                            }
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            }
        }
    }; });

    Bridge.define("RobotRaconteurWeb.EventDefinition", {
        inherits: [RobotRaconteurWeb.MemberDefinition],
        fields: {
            Parameters: null
        },
        ctors: {
            init: function () {
                this.Parameters = new (System.Collections.Generic.List$1(RobotRaconteurWeb.TypeDefinition)).ctor();
            },
            ctor: function (ServiceEntry) {
                this.$initialize();
                RobotRaconteurWeb.MemberDefinition.ctor.call(this, ServiceEntry);
            }
        },
        methods: {
            toString: function () {
                return RobotRaconteurWeb.MemberDefinition.MemberDefinition_ToStringFormat3("event", this, this.Parameters);
            },
            FromString: function (s) {
                RobotRaconteurWeb.MemberDefinition.MemberDefinition_FromStringFormat3(s, "event", this, Bridge.ref(this, "Parameters"));
            },
            Reset: function () {
                RobotRaconteurWeb.MemberDefinition.prototype.Reset.call(this);
                this.Parameters.clear();
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.FunctionDefinition", {
        inherits: [RobotRaconteurWeb.MemberDefinition],
        fields: {
            ReturnType: null,
            Parameters: null
        },
        props: {
            IsGenerator: {
                get: function () {
                    if (this.ReturnType.ContainerType === RobotRaconteurWeb.DataTypes_ContainerTypes.generator) {
                        return true;
                    }

                    if (this.Parameters.Count !== 0 && System.Linq.Enumerable.from(this.Parameters, RobotRaconteurWeb.TypeDefinition).last().ContainerType === RobotRaconteurWeb.DataTypes_ContainerTypes.generator) {
                        return true;
                    }

                    return false;
                }
            }
        },
        ctors: {
            init: function () {
                this.Parameters = new (System.Collections.Generic.List$1(RobotRaconteurWeb.TypeDefinition)).ctor();
            },
            ctor: function (ServiceEntry) {
                this.$initialize();
                RobotRaconteurWeb.MemberDefinition.ctor.call(this, ServiceEntry);
            }
        },
        methods: {
            toString: function () {
                return RobotRaconteurWeb.MemberDefinition.MemberDefinition_ToStringFormat2("function", this, this.ReturnType, this.Parameters);
            },
            FromString: function (s) {
                RobotRaconteurWeb.MemberDefinition.MemberDefinition_FromStringFormat2(s, "function", this, Bridge.ref(this, "ReturnType"), Bridge.ref(this, "Parameters"));
            },
            Reset: function () {
                RobotRaconteurWeb.MemberDefinition.prototype.Reset.call(this);
                this.Parameters.clear();
                RobotRaconteurWeb.TypeDefinition.op_Inequality(this.ReturnType, null) ? this.ReturnType.Reset() : null;
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.Generator1Client$2", function (ReturnType, ParamType) { return {
        inherits: [RobotRaconteurWeb.GeneratorClientBase,RobotRaconteurWeb.Generator1$2(ReturnType,ParamType)],
        alias: [
            "Next", "RobotRaconteurWeb$Generator1$2$" + Bridge.getTypeAlias(ReturnType) + "$" + Bridge.getTypeAlias(ParamType) + "$Next",
            "Abort", "RobotRaconteurWeb$Generator1$2$" + Bridge.getTypeAlias(ReturnType) + "$" + Bridge.getTypeAlias(ParamType) + "$Abort",
            "Close", "RobotRaconteurWeb$Generator1$2$" + Bridge.getTypeAlias(ReturnType) + "$" + Bridge.getTypeAlias(ParamType) + "$Close"
        ],
        ctors: {
            ctor: function (membername, stub, id) {
                this.$initialize();
                RobotRaconteurWeb.GeneratorClientBase.ctor.call(this, membername, stub, id);
            }
        },
        methods: {
            Next: function (param, cancel) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    m, 
                    m_ret, 
                    data, 
                    $t, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        if (cancel === void 0) { cancel = new System.Threading.CancellationToken(); }
                                        m = new RobotRaconteurWeb.MessageElement.$ctor1("param", this.stub.RRContext.PackVarType(param));
                                        $task1 = this.NextBase(m, cancel);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        m_ret = $taskResult1;
                                        data = this.stub.RRContext.UnpackVarType(m_ret);
                                        if (Bridge.is(data, Array)) {
                                            if (Bridge.isArray(null, ReturnType)) {
                                                $tcs.setResult(Bridge.cast(Bridge.unbox(data, ReturnType), ReturnType));
                                                return;
                                            } else {
                                                $tcs.setResult(($t = Bridge.cast(data, System.Array.type(ReturnType)))[System.Array.index(0, $t)]);
                                                return;
                                            }
                                        } else {
                                            $tcs.setResult(Bridge.cast(Bridge.unbox(data, ReturnType), ReturnType));
                                            return;
                                        }
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            }
        }
    }; });

    Bridge.define("RobotRaconteurWeb.Generator1Server$2", function (ReturnType, ParamType) { return {
        inherits: [RobotRaconteurWeb.GeneratorServerBase],
        fields: {
            generator: null
        },
        ctors: {
            ctor: function (generator, name, id, skel, ep) {
                this.$initialize();
                RobotRaconteurWeb.GeneratorServerBase.ctor.call(this, name, id, skel, ep);
                this.generator = generator;
            }
        },
        methods: {
            CallNext: function (m) {
                var $step = 0,
                    $task1, 
                    $task2, 
                    $task3, 
                    $taskResult3, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    m_ret, 
                    p, 
                    r, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,6,7,8,9], $step);
                                switch ($step) {
                                    case 0: {
                                        m_ret = new RobotRaconteurWeb.MessageEntry.$ctor1(RobotRaconteurWeb.MessageEntryType.GeneratorNextRes, m.MemberName);
                                        m_ret.RequestID = m.RequestID;
                                        m_ret.ServicePath = m.ServicePath;
                                        if (m.Error !== RobotRaconteurWeb.MessageErrorType.None) {
                                            $step = 1;
                                            continue;
                                        } else  {
                                            $step = 7;
                                            continue;
                                        }
                                    }
                                    case 1: {
                                        if (m.Error === RobotRaconteurWeb.MessageErrorType.StopIteration) {
                                            $step = 2;
                                            continue;
                                        } else  {
                                            $step = 4;
                                            continue;
                                        }
                                    }
                                    case 2: {
                                        $task1 = this.generator["RobotRaconteurWeb$Generator1$2$" + Bridge.getTypeAlias(ReturnType) + "$" + Bridge.getTypeAlias(ParamType) + "$Close"](void 0);
                                        $step = 3;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 3: {
                                        $task1.getAwaitedResult();
                                        $step = 6;
                                        continue;
                                    }
                                    case 4: {
                                        $task2 = this.generator["RobotRaconteurWeb$Generator1$2$" + Bridge.getTypeAlias(ReturnType) + "$" + Bridge.getTypeAlias(ParamType) + "$Abort"](void 0);
                                        $step = 5;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 5: {
                                        $task2.getAwaitedResult();
                                        $step = 6;
                                        continue;
                                    }
                                    case 6: {
                                        m_ret.AddElement$1("return", Bridge.box(0, System.Int32));
                                        $step = 9;
                                        continue;
                                    }
                                    case 7: {
                                        p = Bridge.cast(Bridge.unbox(this.skel.RRContext.UnpackVarType(m.FindElement("parameter")), ParamType), ParamType);
                                        $task3 = this.generator["RobotRaconteurWeb$Generator1$2$" + Bridge.getTypeAlias(ReturnType) + "$" + Bridge.getTypeAlias(ParamType) + "$Next"](p, void 0);
                                        $step = 8;
                                        if ($task3.isCompleted()) {
                                            continue;
                                        }
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 8: {
                                        $taskResult3 = $task3.getAwaitedResult();
                                        r = $taskResult3;
                                        m_ret.AddElement$1("return", this.skel.RRContext.PackVarType(r));
                                        $step = 9;
                                        continue;
                                    }
                                    case 9: {
                                        $tcs.setResult(m_ret);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            }
        }
    }; });

    Bridge.define("RobotRaconteurWeb.Generator2Client$1", function (ReturnType) { return {
        inherits: [RobotRaconteurWeb.GeneratorClientBase,RobotRaconteurWeb.Generator2$1(ReturnType)],
        alias: [
            "Next", "RobotRaconteurWeb$Generator2$1$" + Bridge.getTypeAlias(ReturnType) + "$Next",
            "NextAll", "RobotRaconteurWeb$Generator2$1$" + Bridge.getTypeAlias(ReturnType) + "$NextAll",
            "Abort", "RobotRaconteurWeb$Generator2$1$" + Bridge.getTypeAlias(ReturnType) + "$Abort",
            "Close", "RobotRaconteurWeb$Generator2$1$" + Bridge.getTypeAlias(ReturnType) + "$Close"
        ],
        ctors: {
            ctor: function (membername, stub, id) {
                this.$initialize();
                RobotRaconteurWeb.GeneratorClientBase.ctor.call(this, membername, stub, id);
            }
        },
        methods: {
            Next: function (cancel) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    m_ret, 
                    data, 
                    $t, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        if (cancel === void 0) { cancel = new System.Threading.CancellationToken(); }
                                        $task1 = this.NextBase(null, cancel);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        m_ret = $taskResult1;
                                        data = this.stub.RRContext.UnpackVarType(m_ret);
                                        if (Bridge.is(data, Array)) {
                                            if (Bridge.isArray(null, ReturnType)) {
                                                $tcs.setResult(Bridge.cast(Bridge.unbox(data, ReturnType), ReturnType));
                                                return;
                                            } else {
                                                $tcs.setResult(($t = Bridge.cast(data, System.Array.type(ReturnType)))[System.Array.index(0, $t)]);
                                                return;
                                            }
                                        } else {
                                            $tcs.setResult(Bridge.cast(Bridge.unbox(data, ReturnType), ReturnType));
                                            return;
                                        }
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            NextAll: function (cancel) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    ret, 
                    $async_e, 
                    $async_e1, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4], $step);
                                switch ($step) {
                                    case 0: {
                                        if (cancel === void 0) { cancel = new System.Threading.CancellationToken(); }
                                        ret = new (System.Collections.Generic.List$1(ReturnType)).ctor();
                                        
                                        $step = 1;
                                        continue;
                                    }
                                    case 1: {
                                        $task1 = this.Next(cancel);
                                        $step = 2;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        ret.add($taskResult1);
                                        $step = 4;
                                        continue;
                                    }
                                    case 3: {
                                        $async_e = null;
                                        $step = 4;
                                        continue;
                                    }
                                    case 4: {
                                        $tcs.setResult(ret.ToArray());
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            if ( $step >= 1 && $step <= 2 ) {
                                if (Bridge.is($async_e, RobotRaconteurWeb.StopIterationException)) {
                                    $step = 3;
                                    $asyncBody();
                                    return;
                                }
                            }
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            }
        }
    }; });

    Bridge.define("RobotRaconteurWeb.Generator2Server$1", function (ReturnType) { return {
        inherits: [RobotRaconteurWeb.GeneratorServerBase],
        fields: {
            generator: null
        },
        ctors: {
            ctor: function (generator, name, id, skel, ep) {
                this.$initialize();
                RobotRaconteurWeb.GeneratorServerBase.ctor.call(this, name, id, skel, ep);
                this.generator = generator;
            }
        },
        methods: {
            CallNext: function (m) {
                var $step = 0,
                    $task1, 
                    $task2, 
                    $task3, 
                    $taskResult3, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    m_ret, 
                    r, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,6,7,8,9], $step);
                                switch ($step) {
                                    case 0: {
                                        m_ret = new RobotRaconteurWeb.MessageEntry.$ctor1(RobotRaconteurWeb.MessageEntryType.GeneratorNextRes, m.MemberName);
                                        m_ret.RequestID = m.RequestID;
                                        m_ret.ServicePath = m.ServicePath;
                                        if (m.Error !== RobotRaconteurWeb.MessageErrorType.None) {
                                            $step = 1;
                                            continue;
                                        } else  {
                                            $step = 7;
                                            continue;
                                        }
                                    }
                                    case 1: {
                                        if (m.Error === RobotRaconteurWeb.MessageErrorType.StopIteration) {
                                            $step = 2;
                                            continue;
                                        } else  {
                                            $step = 4;
                                            continue;
                                        }
                                    }
                                    case 2: {
                                        $task1 = this.generator["RobotRaconteurWeb$Generator2$1$" + Bridge.getTypeAlias(ReturnType) + "$Close"](void 0);
                                        $step = 3;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 3: {
                                        $task1.getAwaitedResult();
                                        $step = 6;
                                        continue;
                                    }
                                    case 4: {
                                        $task2 = this.generator["RobotRaconteurWeb$Generator2$1$" + Bridge.getTypeAlias(ReturnType) + "$Abort"](void 0);
                                        $step = 5;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 5: {
                                        $task2.getAwaitedResult();
                                        $step = 6;
                                        continue;
                                    }
                                    case 6: {
                                        m_ret.AddElement$1("return", Bridge.box(0, System.Int32));
                                        $step = 9;
                                        continue;
                                    }
                                    case 7: {
                                        $task3 = this.generator["RobotRaconteurWeb$Generator2$1$" + Bridge.getTypeAlias(ReturnType) + "$Next"](void 0);
                                        $step = 8;
                                        if ($task3.isCompleted()) {
                                            continue;
                                        }
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 8: {
                                        $taskResult3 = $task3.getAwaitedResult();
                                        r = $taskResult3;
                                        m_ret.AddElement$1("return", this.skel.RRContext.PackVarType(r));
                                        $step = 9;
                                        continue;
                                    }
                                    case 9: {
                                        $tcs.setResult(m_ret);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            }
        }
    }; });

    Bridge.define("RobotRaconteurWeb.Generator3Client$1", function (ParamType) { return {
        inherits: [RobotRaconteurWeb.GeneratorClientBase,RobotRaconteurWeb.Generator3$1(ParamType)],
        alias: [
            "Next", "RobotRaconteurWeb$Generator3$1$" + Bridge.getTypeAlias(ParamType) + "$Next",
            "Abort", "RobotRaconteurWeb$Generator3$1$" + Bridge.getTypeAlias(ParamType) + "$Abort",
            "Close", "RobotRaconteurWeb$Generator3$1$" + Bridge.getTypeAlias(ParamType) + "$Close"
        ],
        ctors: {
            ctor: function (membername, stub, id) {
                this.$initialize();
                RobotRaconteurWeb.GeneratorClientBase.ctor.call(this, membername, stub, id);
            }
        },
        methods: {
            Next: function (param, cancel) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    m, 
                    m_ret, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        if (cancel === void 0) { cancel = new System.Threading.CancellationToken(); }
                                        m = new RobotRaconteurWeb.MessageElement.$ctor1("param", this.stub.RRContext.PackVarType(param));
                                        $task1 = this.NextBase(m, cancel);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        m_ret = $taskResult1;
                                        this.stub.RRContext.UnpackVarType(m_ret);
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            }
        }
    }; });

    Bridge.define("RobotRaconteurWeb.Generator3Server$1", function (ParamType) { return {
        inherits: [RobotRaconteurWeb.GeneratorServerBase],
        fields: {
            generator: null
        },
        ctors: {
            ctor: function (generator, name, id, skel, ep) {
                this.$initialize();
                RobotRaconteurWeb.GeneratorServerBase.ctor.call(this, name, id, skel, ep);
                this.generator = generator;
            }
        },
        methods: {
            CallNext: function (m) {
                var $step = 0,
                    $task1, 
                    $task2, 
                    $task3, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    m_ret, 
                    p, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,6,7,8,9], $step);
                                switch ($step) {
                                    case 0: {
                                        m_ret = new RobotRaconteurWeb.MessageEntry.$ctor1(RobotRaconteurWeb.MessageEntryType.GeneratorNextRes, m.MemberName);
                                        m_ret.RequestID = m.RequestID;
                                        m_ret.ServicePath = m.ServicePath;
                                        if (m.Error !== RobotRaconteurWeb.MessageErrorType.None) {
                                            $step = 1;
                                            continue;
                                        } else  {
                                            $step = 7;
                                            continue;
                                        }
                                    }
                                    case 1: {
                                        if (m.Error === RobotRaconteurWeb.MessageErrorType.StopIteration) {
                                            $step = 2;
                                            continue;
                                        } else  {
                                            $step = 4;
                                            continue;
                                        }
                                    }
                                    case 2: {
                                        $task1 = this.generator["RobotRaconteurWeb$Generator3$1$" + Bridge.getTypeAlias(ParamType) + "$Close"](void 0);
                                        $step = 3;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 3: {
                                        $task1.getAwaitedResult();
                                        $step = 6;
                                        continue;
                                    }
                                    case 4: {
                                        $task2 = this.generator["RobotRaconteurWeb$Generator3$1$" + Bridge.getTypeAlias(ParamType) + "$Abort"](void 0);
                                        $step = 5;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 5: {
                                        $task2.getAwaitedResult();
                                        $step = 6;
                                        continue;
                                    }
                                    case 6: {
                                        m_ret.AddElement$1("return", Bridge.box(0, System.Int32));
                                        $step = 9;
                                        continue;
                                    }
                                    case 7: {
                                        p = Bridge.cast(Bridge.unbox(this.skel.RRContext.UnpackVarType(m.FindElement("parameter")), ParamType), ParamType);
                                        $task3 = this.generator["RobotRaconteurWeb$Generator3$1$" + Bridge.getTypeAlias(ParamType) + "$Next"](p, void 0);
                                        $step = 8;
                                        if ($task3.isCompleted()) {
                                            continue;
                                        }
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 8: {
                                        $task3.getAwaitedResult();
                                        m_ret.AddElement$1("return", Bridge.box(0, System.Int32));
                                        $step = 9;
                                        continue;
                                    }
                                    case 9: {
                                        $tcs.setResult(m_ret);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            }
        }
    }; });

    Bridge.definei("RobotRaconteurWeb.INamedArrayStub$1", function (T) { return {
        inherits: [RobotRaconteurWeb.INamedArrayStub],
        $kind: "interface"
    }; });

    Bridge.define("RobotRaconteurWeb.InternalErrorException", {
        inherits: [RobotRaconteurWeb.RobotRaconteurException],
        ctors: {
            ctor: function (message) {
                this.$initialize();
                RobotRaconteurWeb.RobotRaconteurException.$ctor1.call(this, RobotRaconteurWeb.MessageErrorType.InternalError, "RobotRaconteur.InternalError", message);
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.InvalidEndpointException", {
        inherits: [RobotRaconteurWeb.RobotRaconteurException],
        ctors: {
            ctor: function (message) {
                this.$initialize();
                RobotRaconteurWeb.RobotRaconteurException.$ctor1.call(this, RobotRaconteurWeb.MessageErrorType.InvalidEndpoint, "RobotRaconteur.InvalidEndpoint", message);
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.IOException", {
        inherits: [RobotRaconteurWeb.RobotRaconteurException],
        ctors: {
            ctor: function (message) {
                this.$initialize();
                RobotRaconteurWeb.RobotRaconteurException.$ctor1.call(this, RobotRaconteurWeb.MessageErrorType.IOError, "RobotRaconteur.IOError", message);
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.KeyNotFoundException", {
        inherits: [RobotRaconteurWeb.RobotRaconteurException],
        ctors: {
            ctor: function (message) {
                this.$initialize();
                RobotRaconteurWeb.RobotRaconteurException.$ctor1.call(this, RobotRaconteurWeb.MessageErrorType.KeyNotFound, "RobotRaconteur.KeyNotFound", message);
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.MemberBusyException", {
        inherits: [RobotRaconteurWeb.RobotRaconteurException],
        ctors: {
            ctor: function (message) {
                this.$initialize();
                RobotRaconteurWeb.RobotRaconteurException.$ctor1.call(this, RobotRaconteurWeb.MessageErrorType.MemberBusy, "RobotRaconteur.MemberBusy", message);
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.MemberFormatMismatchException", {
        inherits: [RobotRaconteurWeb.RobotRaconteurException],
        ctors: {
            ctor: function (message) {
                this.$initialize();
                RobotRaconteurWeb.RobotRaconteurException.$ctor1.call(this, RobotRaconteurWeb.MessageErrorType.MemberFormatMismatch, "RobotRaconteur.MemberFormatMismatch", message);
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.MemberNotFoundException", {
        inherits: [RobotRaconteurWeb.RobotRaconteurException],
        ctors: {
            ctor: function (message) {
                this.$initialize();
                RobotRaconteurWeb.RobotRaconteurException.$ctor1.call(this, RobotRaconteurWeb.MessageErrorType.MemberNotFound, "RobotRaconteur.MemberNotFound", message);
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.MemoryDefinition", {
        inherits: [RobotRaconteurWeb.MemberDefinition],
        fields: {
            Type: null
        },
        props: {
            Direction: {
                get: function () {
                    return RobotRaconteurWeb.MemberDefinition.MemberDefinition_GetDirection(this.Modifiers);
                }
            }
        },
        ctors: {
            ctor: function (ServiceEntry) {
                this.$initialize();
                RobotRaconteurWeb.MemberDefinition.ctor.call(this, ServiceEntry);
            }
        },
        methods: {
            toString: function () {
                return RobotRaconteurWeb.MemberDefinition.MemberDefinition_ToStringFormat1("memory", this, this.Type);
            },
            FromString: function (s) {
                RobotRaconteurWeb.MemberDefinition.MemberDefinition_FromStringFormat1$1(s, "memory", this, Bridge.ref(this, "Type"));
            },
            Reset: function () {
                RobotRaconteurWeb.MemberDefinition.prototype.Reset.call(this);
                RobotRaconteurWeb.TypeDefinition.op_Inequality(this.Type, null) ? this.Type.Reset() : null;
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.MessageElementNotFoundException", {
        inherits: [RobotRaconteurWeb.RobotRaconteurException],
        ctors: {
            ctor: function (message) {
                this.$initialize();
                RobotRaconteurWeb.RobotRaconteurException.$ctor1.call(this, RobotRaconteurWeb.MessageErrorType.MessageElementNotFound, "RobotRaconteur.MessageElementNotFound", message);
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.MessageEntryNotFoundException", {
        inherits: [RobotRaconteurWeb.RobotRaconteurException],
        ctors: {
            ctor: function (message) {
                this.$initialize();
                RobotRaconteurWeb.RobotRaconteurException.$ctor1.call(this, RobotRaconteurWeb.MessageErrorType.MessageEntryNotFound, "RobotRaconteur.MessageEntryNotFound", message);
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.MultiDimArrayMemory$1", function (T) { return {
        inherits: [RobotRaconteurWeb.MultiDimArrayMemoryBase],
        fields: {
            multimemory: null
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                RobotRaconteurWeb.MultiDimArrayMemoryBase.ctor.call(this);

            },
            $ctor1: function (memory) {
                this.$initialize();
                RobotRaconteurWeb.MultiDimArrayMemoryBase.ctor.call(this);
                this.multimemory = memory;
            }
        },
        methods: {
            Attach: function (memory) {
                this.multimemory = memory;
            },
            GetDimensions: function (cancel) {
                if (cancel === void 0) { cancel = new System.Threading.CancellationToken(); }
                return System.Threading.Tasks.Task.fromResult(System.Linq.Enumerable.from(this.multimemory.Dims, System.UInt32).select(function (x) {
                            return System.UInt64(x);
                        }).ToArray(System.UInt64), System.Array.type(System.UInt64));
            },
            GetDimCount: function (cancel) {
                if (cancel === void 0) { cancel = new System.Threading.CancellationToken(); }
                return System.Threading.Tasks.Task.fromResult(Bridge.Int.clipu64(this.multimemory.Dims.length), System.UInt64);
            },
            Read: function (memorypos, buffer, bufferpos, count, cancel) {
                if (cancel === void 0) { cancel = new System.Threading.CancellationToken(); }
                this.multimemory.RetrieveSubArray(System.Linq.Enumerable.from(memorypos, System.UInt64).select(function (x) {
                        return System.Int64.clipu32(x);
                    }).ToArray(System.UInt32), buffer, System.Linq.Enumerable.from(bufferpos, System.UInt64).select(function (x) {
                        return System.Int64.clipu32(x);
                    }).ToArray(System.UInt32), System.Linq.Enumerable.from(count, System.UInt64).select(function (x) {
                        return System.Int64.clipu32(x);
                    }).ToArray(System.UInt32));
                return System.Threading.Tasks.Task.fromResult(0, System.Int32);
            },
            Write: function (memorypos, buffer, bufferpos, count, cancel) {
                if (cancel === void 0) { cancel = new System.Threading.CancellationToken(); }
                this.multimemory.AssignSubArray(System.Linq.Enumerable.from(memorypos, System.UInt64).select(function (x) {
                        return System.Int64.clipu32(x);
                    }).ToArray(System.UInt32), buffer, System.Linq.Enumerable.from(bufferpos, System.UInt64).select(function (x) {
                        return System.Int64.clipu32(x);
                    }).ToArray(System.UInt32), System.Linq.Enumerable.from(count, System.UInt64).select(function (x) {
                        return System.Int64.clipu32(x);
                    }).ToArray(System.UInt32));
                return System.Threading.Tasks.Task.fromResult(0, System.Int32);
            }
        }
    }; });

    Bridge.define("RobotRaconteurWeb.MultiDimArrayMemoryClientImpl$1", function (T) { return {
        inherits: [RobotRaconteurWeb.MultiDimArrayMemoryClientImplBase],
        ctors: {
            ctor: function (membername, stub, direction) {
                this.$initialize();
                RobotRaconteurWeb.MultiDimArrayMemoryClientImplBase.ctor.call(this, membername, stub, RobotRaconteurWeb.DataTypeUtil.TypeIDFromType(T), RobotRaconteurWeb.DataTypeUtil.size(RobotRaconteurWeb.DataTypeUtil.TypeIDFromType(T)), direction);
            }
        },
        methods: {
            PackWriteRequest: function (buffer, bufferpos, count, elem_count) {
                var buffer1 = Bridge.cast((buffer), RobotRaconteurWeb.MultiDimArray);

                var equ = true;
                for (var i = System.Int64(0); i.lt(System.Array.getLongLength(count)); i = i.inc()) {
                    if (bufferpos[System.Array.index(System.Int64.toNumber(i), bufferpos)].ne(System.UInt64(0)) || System.UInt64(buffer1.Dims[System.Array.index(System.Int64.toNumber(i), buffer1.Dims)]).ne(count[System.Array.index(System.Int64.toNumber(i), count)])) {
                        equ = false;
                        break;
                    }
                }

                if (equ) {
                    return this.stub.rr_node.PackMultiDimArray(buffer1);
                } else {
                    var data = new RobotRaconteurWeb.MultiDimArray.$ctor1(System.Linq.Enumerable.from(count, System.UInt64).select(function (x) {
                            return System.Int64.clipu32(x);
                        }).ToArray(System.UInt32), System.Array.init(elem_count, function (){
                        return Bridge.getDefaultValue(T);
                    }, T));

                    buffer1.RetrieveSubArray(System.Linq.Enumerable.from(bufferpos, System.UInt64).select(function (x) {
                            return System.Int64.clipu32(x);
                        }).ToArray(System.UInt32), data, System.Array.init(count.length, 0, System.UInt32), System.Linq.Enumerable.from(count, System.UInt64).select(function (x) {
                            return System.Int64.clipu32(x);
                        }).ToArray(System.UInt32));
                    return this.stub.rr_node.PackMultiDimArray(data);
                }
            },
            UnpackReadResult: function (res, buffer, bufferpos, count, elem_count) {
                var buffer1 = Bridge.cast(buffer, RobotRaconteurWeb.MultiDimArray);
                var data = this.stub.rr_node.UnpackMultiDimArray(Bridge.cast(res, RobotRaconteurWeb.MessageElementMultiDimArray));

                var data2 = new (RobotRaconteurWeb.MultiDimArrayMemory$1(T)).$ctor1(data);
                data2.Read(System.Array.init(count.length, System.UInt64(0), System.UInt64), buffer1, bufferpos, count);
            }
        }
    }; });

    Bridge.define("RobotRaconteurWeb.MultiDimArrayMemoryServiceSkel$1", function (T) { return {
        inherits: [RobotRaconteurWeb.MultiDimArrayMemoryServiceSkelBase],
        ctors: {
            ctor: function (membername, skel, direction) {
                if (direction === void 0) { direction = 2; }

                this.$initialize();
                RobotRaconteurWeb.MultiDimArrayMemoryServiceSkelBase.ctor.call(this, membername, skel, RobotRaconteurWeb.DataTypeUtil.TypeIDFromType(T), RobotRaconteurWeb.DataTypeUtil.size(RobotRaconteurWeb.DataTypeUtil.TypeIDFromType(T)), direction);

            }
        },
        methods: {
            DoRead: function (memorypos, bufferpos, count, elem_count, mem) {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    mem1, 
                    buf1, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        mem1 = Bridge.cast(mem, RobotRaconteurWeb.MultiDimArrayMemory$1(T));
                                        buf1 = new RobotRaconteurWeb.MultiDimArray.$ctor1(System.Linq.Enumerable.from(count, System.UInt64).select(function (x) {
                                            return System.Int64.clipu32(x);
                                        }).ToArray(System.UInt32), Bridge.cast(RobotRaconteurWeb.DataTypeUtil.ArrayFromDataType(this.element_type, System.Int64.clipu32(elem_count)), System.Array.type(T)));
                                        $task1 = mem1.Read(memorypos, buf1, System.Array.init(count.length, System.UInt64(0), System.UInt64), count);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        $tcs.setResult(this.skel.RRContext.PackMultiDimArray(buf1));
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            DoWrite: function (memorypos, buffer, bufferpos, count, elem_count, mem) {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    mem1, 
                    buf1, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        mem1 = Bridge.cast(mem, RobotRaconteurWeb.MultiDimArrayMemory$1(T));
                                        buf1 = this.skel.RRContext.UnpackMultiDimArray(Bridge.cast(buffer, RobotRaconteurWeb.MessageElementMultiDimArray));
                                        $task1 = mem1.Write(memorypos, buf1, System.Array.init(count.length, System.UInt64(0), System.UInt64), count);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            }
        }
    }; });

    Bridge.define("RobotRaconteurWeb.NamedArrayMemoryClientImpl$1", function (T) { return {
        inherits: [RobotRaconteurWeb.ArrayMemoryClientImplBase],
        ctors: {
            ctor: function (membername, stub, element_size, direction) {
                this.$initialize();
                RobotRaconteurWeb.ArrayMemoryClientImplBase.ctor.call(this, membername, stub, RobotRaconteurWeb.DataTypes.namedarray_t, element_size, direction);
            }
        },
        methods: {
            GetBufferLength: function (buffer) {
                return System.Int64.clipu64(System.Array.getLongLength(Bridge.cast(buffer, System.Array.type(T))));
            },
            PackWriteRequest: function (buffer, bufferpos, count) {
                var buffer1 = Bridge.cast(buffer, System.Array.type(T));
                var o = System.Array.init(count, function (){
                    return Bridge.getDefaultValue(T);
                }, T);
                System.Array.copy(buffer1, System.Int64.clip64(bufferpos).toNumber(), o, System.Int64(0).toNumber(), System.Int64.clip64(count).toNumber());
                return this.stub.rr_node.PackNamedArray(T, o, this.stub.RRContext);
            },
            UnpackReadResult: function (res, buffer, bufferpos, count) {
                var data = this.stub.rr_node.UnpackNamedArray(T, Bridge.cast(res, RobotRaconteurWeb.MessageElementNamedArray), this.stub.RRContext);
                var buffer1 = Bridge.cast(buffer, System.Array.type(T));
                System.Array.copy(data, System.Int64(0).toNumber(), buffer1, System.Int64.clip64(bufferpos).toNumber(), System.Int64.clip64(count).toNumber());
            }
        }
    }; });

    Bridge.define("RobotRaconteurWeb.NamedArrayMemoryServiceSkel$1", function (T) { return {
        inherits: [RobotRaconteurWeb.ArrayMemoryServiceSkelBase],
        ctors: {
            ctor: function (membername, skel, element_size, direction) {
                if (direction === void 0) { direction = 2; }

                this.$initialize();
                RobotRaconteurWeb.ArrayMemoryServiceSkelBase.ctor.call(this, membername, skel, RobotRaconteurWeb.DataTypes.namedarray_t, element_size, direction);

            }
        },
        methods: {
            DoRead: function (memorypos, bufferpos, count, mem) {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    mem1, 
                    buf1, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        mem1 = Bridge.cast(mem, RobotRaconteurWeb.NamedArrayMemory$1(T));
                                        buf1 = System.Array.init(count, function (){
                                            return Bridge.getDefaultValue(T);
                                        }, T);
                                        $task1 = mem1.Read(memorypos, buf1, System.UInt64(0), count);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        $tcs.setResult(this.skel.rr_node.PackNamedArray(T, buf1, null));
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            DoWrite: function (memorypos, buffer, bufferpos, count, mem) {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    mem1, 
                    buf1, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        mem1 = Bridge.cast(mem, RobotRaconteurWeb.NamedArrayMemory$1(T));
                                        buf1 = this.skel.rr_node.UnpackNamedArray(T, Bridge.cast(buffer, RobotRaconteurWeb.MessageElementNamedArray), null);
                                        $task1 = mem1.Write(memorypos, buf1, System.UInt64(0), count);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            }
        }
    }; });

    Bridge.define("RobotRaconteurWeb.NamedMultiDimArrayMemory$1", function (T) { return {
        inherits: [RobotRaconteurWeb.MultiDimArrayMemoryBase],
        fields: {
            multimemory: null
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                RobotRaconteurWeb.MultiDimArrayMemoryBase.ctor.call(this);
            },
            $ctor1: function (memory) {
                this.$initialize();
                RobotRaconteurWeb.MultiDimArrayMemoryBase.ctor.call(this);
                this.multimemory = memory;
            }
        },
        methods: {
            Attach: function (memory) {
                this.multimemory = memory;
            },
            GetDimensions: function (cancel) {
                if (cancel === void 0) { cancel = new System.Threading.CancellationToken(); }
                return System.Threading.Tasks.Task.fromResult(System.Linq.Enumerable.from(this.multimemory.Dims, System.UInt32).select(function (x) {
                            return System.UInt64(x);
                        }).ToArray(System.UInt64), System.Array.type(System.UInt64));
            },
            GetDimCount: function (cancel) {
                if (cancel === void 0) { cancel = new System.Threading.CancellationToken(); }
                return System.Threading.Tasks.Task.fromResult(Bridge.Int.clipu64(this.multimemory.Dims.length), System.UInt64);
            },
            Read: function (memorypos, buffer, bufferpos, count, cancel) {
                if (cancel === void 0) { cancel = new System.Threading.CancellationToken(); }
                this.multimemory.RetrieveSubArray(System.Linq.Enumerable.from(memorypos, System.UInt64).select(function (x) {
                        return System.Int64.clipu32(x);
                    }).ToArray(System.UInt32), buffer, System.Linq.Enumerable.from(bufferpos, System.UInt64).select(function (x) {
                        return System.Int64.clipu32(x);
                    }).ToArray(System.UInt32), System.Linq.Enumerable.from(count, System.UInt64).select(function (x) {
                        return System.Int64.clipu32(x);
                    }).ToArray(System.UInt32));
                return System.Threading.Tasks.Task.fromResult(0, System.Int32);
            },
            Write: function (memorypos, buffer, bufferpos, count, cancel) {
                if (cancel === void 0) { cancel = new System.Threading.CancellationToken(); }
                this.multimemory.AssignSubArray(System.Linq.Enumerable.from(memorypos, System.UInt64).select(function (x) {
                        return System.Int64.clipu32(x);
                    }).ToArray(System.UInt32), buffer, System.Linq.Enumerable.from(bufferpos, System.UInt64).select(function (x) {
                        return System.Int64.clipu32(x);
                    }).ToArray(System.UInt32), System.Linq.Enumerable.from(count, System.UInt64).select(function (x) {
                        return System.Int64.clipu32(x);
                    }).ToArray(System.UInt32));
                return System.Threading.Tasks.Task.fromResult(0, System.Int32);
            }
        }
    }; });

    Bridge.define("RobotRaconteurWeb.NamedMultiDimArrayMemoryClientImpl$1", function (T) { return {
        inherits: [RobotRaconteurWeb.MultiDimArrayMemoryClientImplBase],
        ctors: {
            ctor: function (membername, stub, element_size, direction) {
                this.$initialize();
                RobotRaconteurWeb.MultiDimArrayMemoryClientImplBase.ctor.call(this, membername, stub, RobotRaconteurWeb.DataTypes.namedarray_t, element_size, direction);
            }
        },
        methods: {
            PackWriteRequest: function (buffer, bufferpos, count, elem_count) {
                var buffer1 = Bridge.cast((buffer), RobotRaconteurWeb.NamedMultiDimArray);

                var equ = true;
                for (var i = System.Int64(0); i.lt(System.Array.getLongLength(count)); i = i.inc()) {
                    if (bufferpos[System.Array.index(System.Int64.toNumber(i), bufferpos)].ne(System.UInt64(0)) || System.UInt64(buffer1.Dims[System.Array.index(System.Int64.toNumber(i), buffer1.Dims)]).ne(count[System.Array.index(System.Int64.toNumber(i), count)])) {
                        equ = false;
                        break;
                    }
                }

                if (equ) {
                    return this.stub.rr_node.PackNamedMultiDimArray(T, buffer1, this.stub.RRContext);
                } else {
                    var data = new RobotRaconteurWeb.NamedMultiDimArray.$ctor1(System.Linq.Enumerable.from(count, System.UInt64).select(function (x) {
                            return System.Int64.clipu32(x);
                        }).ToArray(System.UInt32), System.Array.init(elem_count, function (){
                        return Bridge.getDefaultValue(T);
                    }, T));

                    buffer1.RetrieveSubArray(System.Linq.Enumerable.from(bufferpos, System.UInt64).select(function (x) {
                            return System.Int64.clipu32(x);
                        }).ToArray(System.UInt32), data, System.Array.init(count.length, 0, System.UInt32), System.Linq.Enumerable.from(count, System.UInt64).select(function (x) {
                            return System.Int64.clipu32(x);
                        }).ToArray(System.UInt32));
                    return this.stub.rr_node.PackNamedMultiDimArray(T, data, this.stub.RRContext);
                }
            },
            UnpackReadResult: function (res, buffer, bufferpos, count, elem_count) {
                var buffer1 = Bridge.cast(buffer, RobotRaconteurWeb.NamedMultiDimArray);
                var data = this.stub.rr_node.UnpackNamedMultiDimArray(T, Bridge.cast(res, RobotRaconteurWeb.MessageElementNamedMultiDimArray), this.stub.RRContext);

                var data2 = new (RobotRaconteurWeb.NamedMultiDimArrayMemory$1(T)).$ctor1(data);
                data2.Read(System.Array.init(count.length, System.UInt64(0), System.UInt64), buffer1, bufferpos, count);
            }
        }
    }; });

    Bridge.define("RobotRaconteurWeb.NamedMultiDimArrayMemoryServiceSkel$1", function (T) { return {
        inherits: [RobotRaconteurWeb.MultiDimArrayMemoryServiceSkelBase],
        ctors: {
            ctor: function (membername, skel, element_size, direction) {
                if (direction === void 0) { direction = 2; }

                this.$initialize();
                RobotRaconteurWeb.MultiDimArrayMemoryServiceSkelBase.ctor.call(this, membername, skel, RobotRaconteurWeb.DataTypes.namedarray_t, element_size, direction);
            }
        },
        methods: {
            DoRead: function (memorypos, bufferpos, count, elem_count, mem) {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    mem1, 
                    buf1, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        mem1 = Bridge.cast(mem, RobotRaconteurWeb.NamedMultiDimArrayMemory$1(T));
                                        buf1 = new RobotRaconteurWeb.NamedMultiDimArray.$ctor1(System.Linq.Enumerable.from(count, System.UInt64).select(function (x) {
                                            return System.Int64.clipu32(x);
                                        }).ToArray(System.UInt32), System.Array.init(elem_count, function (){
                                            return Bridge.getDefaultValue(T);
                                        }, T));
                                        $task1 = mem1.Read(memorypos, buf1, System.Array.init(count.length, System.UInt64(0), System.UInt64), count);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        $tcs.setResult(this.skel.rr_node.PackNamedMultiDimArray(T, buf1, null));
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            DoWrite: function (memorypos, buffer, bufferpos, count, elem_count, mem) {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    mem1, 
                    buf1, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        mem1 = Bridge.cast(mem, RobotRaconteurWeb.NamedMultiDimArrayMemory$1(T));
                                        buf1 = this.skel.rr_node.UnpackNamedMultiDimArray(T, Bridge.cast(buffer, RobotRaconteurWeb.MessageElementNamedMultiDimArray), null);
                                        $task1 = mem1.Write(memorypos, buf1, System.Array.init(count.length, System.UInt64(0), System.UInt64), count);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            }
        }
    }; });

    Bridge.define("RobotRaconteurWeb.NodeNotFoundException", {
        inherits: [RobotRaconteurWeb.RobotRaconteurException],
        ctors: {
            ctor: function (message) {
                this.$initialize();
                RobotRaconteurWeb.RobotRaconteurException.$ctor1.call(this, RobotRaconteurWeb.MessageErrorType.NodeNotFound, "RobotRaconteur.NodeNotFound", message);
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.ObjectLockedException", {
        inherits: [RobotRaconteurWeb.RobotRaconteurException],
        ctors: {
            ctor: function (message) {
                this.$initialize();
                RobotRaconteurWeb.RobotRaconteurException.$ctor1.call(this, RobotRaconteurWeb.MessageErrorType.ObjectLockedError, "RobotRaconteur.ObjectLockedError", message);
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.ObjectNotFoundException", {
        inherits: [RobotRaconteurWeb.RobotRaconteurException],
        ctors: {
            ctor: function (message) {
                this.$initialize();
                RobotRaconteurWeb.RobotRaconteurException.$ctor1.call(this, RobotRaconteurWeb.MessageErrorType.ObjectNotFound, "RobotRaconteur.ObjectNotFound", message);
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.ObjRefDefinition", {
        inherits: [RobotRaconteurWeb.MemberDefinition],
        fields: {
            ObjectType: null,
            ArrayType: 0,
            ContainerType: 0
        },
        ctors: {
            ctor: function (ServiceEntry) {
                this.$initialize();
                RobotRaconteurWeb.MemberDefinition.ctor.call(this, ServiceEntry);
            }
        },
        methods: {
            toString: function () {
                var t = new RobotRaconteurWeb.TypeDefinition.$ctor1(this);
                t.Name = this.Name;
                t.TypeString = this.ObjectType;
                t.Type = RobotRaconteurWeb.DataTypes.namedtype_t;

                switch (this.ArrayType) {
                    case RobotRaconteurWeb.DataTypes_ArrayTypes.none: 
                        {
                            switch (this.ContainerType) {
                                case RobotRaconteurWeb.DataTypes_ContainerTypes.none: 
                                    break;
                                case RobotRaconteurWeb.DataTypes_ContainerTypes.map_int32: 
                                case RobotRaconteurWeb.DataTypes_ContainerTypes.map_string: 
                                    t.ContainerType = this.ContainerType;
                                    break;
                                default: 
                                    throw new RobotRaconteurWeb.ServiceDefinitionException("Invalid ObjRefDefinition for objref \"" + (this.Name || "") + "\"");
                            }
                            break;
                        }
                    case RobotRaconteurWeb.DataTypes_ArrayTypes.array: 
                        {
                            if (this.ContainerType !== RobotRaconteurWeb.DataTypes_ContainerTypes.none) {
                                throw new RobotRaconteurWeb.ServiceDefinitionException("Invalid ObjRefDefinition for objref \"" + (this.Name || "") + "\"");
                            }
                            t.ArrayType = this.ArrayType;
                            t.ArrayVarLength = true;
                            t.ArrayLength.add(0);
                            break;
                        }
                    default: 
                        throw new RobotRaconteurWeb.ServiceDefinitionException("Invalid ObjRefDefinition for objref \"" + (this.Name || "") + "\"");
                }

                return RobotRaconteurWeb.MemberDefinition.MemberDefinition_ToStringFormat1("objref", this, t);
            },
            FromString: function (s) {
                var t = { v : new RobotRaconteurWeb.TypeDefinition.ctor() };
                RobotRaconteurWeb.MemberDefinition.MemberDefinition_FromStringFormat1$1(s, "objref", this, t);

                switch (t.v.ArrayType) {
                    case RobotRaconteurWeb.DataTypes_ArrayTypes.none: 
                        {
                            switch (t.v.ContainerType) {
                                case RobotRaconteurWeb.DataTypes_ContainerTypes.none: 
                                case RobotRaconteurWeb.DataTypes_ContainerTypes.map_int32: 
                                case RobotRaconteurWeb.DataTypes_ContainerTypes.map_string: 
                                    break;
                                default: 
                                    throw new RobotRaconteurWeb.RobotRaconteurParseException.ctor("Invalid objref definition \"" + (s || "") + "\"");
                            }
                            break;
                        }
                    case RobotRaconteurWeb.DataTypes_ArrayTypes.array: 
                        {
                            if (this.ContainerType !== RobotRaconteurWeb.DataTypes_ContainerTypes.none) {
                                throw new RobotRaconteurWeb.RobotRaconteurParseException.ctor("Invalid objref definition \"" + (s || "") + "\"");
                            }
                            if (!t.v.ArrayVarLength) {
                                throw new RobotRaconteurWeb.RobotRaconteurParseException.ctor("Invalid objref definition \"" + (s || "") + "\"");
                            }
                            if (t.v.ArrayLength.getItem(0) !== 0) {
                                throw new RobotRaconteurWeb.RobotRaconteurParseException.ctor("Invalid objref definition \"" + (s || "") + "\"");
                            }
                            break;
                        }
                    default: 
                        throw new RobotRaconteurWeb.RobotRaconteurParseException.ctor("Invalid objref definition \"" + (s || "") + "\"");
                }

                if (!((!System.String.isNullOrEmpty(t.v.TypeString) && t.v.Type === RobotRaconteurWeb.DataTypes.namedtype_t) || (t.v.Type === RobotRaconteurWeb.DataTypes.varobject_t))) {
                    throw new RobotRaconteurWeb.RobotRaconteurParseException.ctor("Invalid objref definition \"" + (s || "") + "\"");
                }


                if (t.v.Type === RobotRaconteurWeb.DataTypes.namedtype_t) {
                    this.ObjectType = t.v.TypeString;
                } else {
                    this.ObjectType = "varobject";
                }

                this.ArrayType = t.v.ArrayType;
                this.ContainerType = t.v.ContainerType;
            },
            Reset: function () {
                RobotRaconteurWeb.MemberDefinition.prototype.Reset.call(this);
                this.ObjectType = "";
                this.ArrayType = RobotRaconteurWeb.DataTypes_ArrayTypes.none;
                this.ContainerType = RobotRaconteurWeb.DataTypes_ContainerTypes.none;
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.OperationAbortedException", {
        inherits: [RobotRaconteurWeb.RobotRaconteurException],
        ctors: {
            ctor: function (message) {
                this.$initialize();
                RobotRaconteurWeb.RobotRaconteurException.$ctor1.call(this, RobotRaconteurWeb.MessageErrorType.OperationAborted, "RobotRaconteur.OperationAborted", message);
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.OperationFailedException", {
        inherits: [RobotRaconteurWeb.RobotRaconteurException],
        ctors: {
            ctor: function (message) {
                this.$initialize();
                RobotRaconteurWeb.RobotRaconteurException.$ctor1.call(this, RobotRaconteurWeb.MessageErrorType.OperationFailed, "RobotRaconteur.OperationFailed", message);
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.OutOfRangeException", {
        inherits: [RobotRaconteurWeb.RobotRaconteurException],
        ctors: {
            ctor: function (message) {
                this.$initialize();
                RobotRaconteurWeb.RobotRaconteurException.$ctor1.call(this, RobotRaconteurWeb.MessageErrorType.OutOfRange, "RobotRaconteur.OutOfRange", message);
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.OutOfSystemResourceException", {
        inherits: [RobotRaconteurWeb.RobotRaconteurException],
        ctors: {
            ctor: function (message) {
                this.$initialize();
                RobotRaconteurWeb.RobotRaconteurException.$ctor1.call(this, RobotRaconteurWeb.MessageErrorType.OutOfSystemResource, "RobotRaconteur.OutOfSystemResource", message);
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.PermissionDeniedException", {
        inherits: [RobotRaconteurWeb.RobotRaconteurException],
        ctors: {
            ctor: function (message) {
                this.$initialize();
                RobotRaconteurWeb.RobotRaconteurException.$ctor1.call(this, RobotRaconteurWeb.MessageErrorType.PermissionDenied, "RobotRaconteur.PermissionDenied", message);
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.PipeClient$1", function (T) { return {
        inherits: [RobotRaconteurWeb.Pipe$1(T)],
        fields: {
            pipeendpoints: null,
            m_Name: null,
            stub: null,
            connecting: null,
            early_endpoints: null
        },
        props: {
            MemberName: {
                get: function () {
                    return this.m_Name;
                }
            },
            PipeConnectCallback: {
                get: function () {
                    throw new System.InvalidOperationException.ctor();
                },
                set: function (value) {
                    throw new System.InvalidOperationException.ctor();
                }
            }
        },
        ctors: {
            init: function () {
                this.pipeendpoints = new (System.Collections.Generic.Dictionary$2(System.Int32,RobotRaconteurWeb.Pipe$1.PipeEndpoint(T))).ctor();
                this.connecting = new (System.Collections.Generic.List$1(System.Tuple$2(System.Int32,System.Object))).ctor();
                this.early_endpoints = new (System.Collections.Generic.Dictionary$2(System.Int32,RobotRaconteurWeb.Pipe$1.PipeEndpoint(T))).ctor();
            },
            ctor: function (name, stub) {
                this.$initialize();
                RobotRaconteurWeb.Pipe$1(T).ctor.call(this);
                this.m_Name = name;
                this.stub = stub;
                stub.RRContext.addClientServiceListener(Bridge.fn.cacheBind(this, this.ClientContextListener));
            }
        },
        methods: {
            SendPipePacket: function (data, index, packetnumber, requestack, e, cancel) {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    me, 
                    m, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        if (e === void 0) { e = null; }
                                        if (cancel === void 0) { cancel = new System.Threading.CancellationToken(); }
                                        me = this.PackPacket(data, index, packetnumber, requestack);
                                        m = new RobotRaconteurWeb.MessageEntry.$ctor1(RobotRaconteurWeb.MessageEntryType.PipePacket, this.MemberName);
                                        m.AddElement(me);
                                        $task1 = this.stub.SendPipeMessage(m, cancel);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            Connect: function (index, cancel) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    connecting_key, 
                    rindex, 
                    m, 
                    ret, 
                    $t, 
                    e, 
                    $async_e, 
                    $async_e1, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4], $step);
                                switch ($step) {
                                    case 0: {
                                        if (cancel === void 0) { cancel = new System.Threading.CancellationToken(); }
                                        connecting_key = { };
                                        this.connecting.add({ Item1: index, Item2: connecting_key });
                                        rindex = -1;
                                        
                                        $step = 1;
                                        continue;
                                    }
                                    case 1: {
                                        m = new RobotRaconteurWeb.MessageEntry.$ctor1(RobotRaconteurWeb.MessageEntryType.PipeConnectReq, this.MemberName);
                                        m.AddElement$1("index", Bridge.box(index, System.Int32));
                                        $task1 = this.stub.ProcessRequest(m, cancel);
                                        $step = 2;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        ret = $taskResult1;

                                        rindex = ($t = (ret.FindElement("index").CastData(System.Array.type(System.Int32))))[System.Array.index(0, $t)];

                                        if (this.early_endpoints.containsKey(rindex)) {
                                            e = this.early_endpoints.getItem(rindex);
                                            this.early_endpoints.remove(rindex);
                                        } else {
                                            e = new (RobotRaconteurWeb.Pipe$1.PipeEndpoint(T))(this, rindex);
                                        }
                                        this.pipeendpoints.add(rindex, e);
                                        $returnValue = e;
                                        $step = 3;
                                        continue;
                                    }
                                    case 3: {
                                        this.connecting.RemoveAll(function (x) {
                                            return Bridge.referenceEquals(x.Item2, connecting_key);
                                        });
                                        if (this.connecting.Count === 0) {
                                            this.early_endpoints.clear();
                                        }

                                        if ($jumpFromFinally > -1) {
                                            $step = $jumpFromFinally;
                                            $jumpFromFinally = null;
                                        } else if ($async_e) {
                                            $tcs.setException($async_e);
                                            return;
                                        } else if (Bridge.isDefined($returnValue)) {
                                            $tcs.setResult($returnValue);
                                            return;
                                        }
                                        $step = 4;
                                        continue;
                                    }
                                    case 4: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            if ($step >= 1 && $step <= 2) {
                                $step = 3;
                                $asyncBody();
                                return;
                            }
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            Close: function (e, ee, cancel) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    m, 
                    ret, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        if (ee === void 0) { ee = null; }
                                        if (cancel === void 0) { cancel = new System.Threading.CancellationToken(); }
                                        m = new RobotRaconteurWeb.MessageEntry.$ctor1(RobotRaconteurWeb.MessageEntryType.PipeDisconnectReq, this.MemberName);
                                        m.AddElement$1("index", Bridge.box(e.Index, System.Int32));
                                        $task1 = this.stub.ProcessRequest(m, cancel);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        ret = $taskResult1;
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            PipePacketReceived: function (m, e) {
                var $t, $t1, $t2;
                if (e === void 0) { e = null; }
                if (m.EntryType === RobotRaconteurWeb.MessageEntryType.PipeClosed) {
                    try {

                        var index = ($t = (m.FindElement("index").CastData(System.Array.type(System.Int32))))[System.Array.index(0, $t)];
                        this.pipeendpoints.getItem(index).RemoteClose();
                    } catch ($e1) {
                        $e1 = System.Exception.create($e1);
                    }
                    ;
                } else if (m.EntryType === RobotRaconteurWeb.MessageEntryType.PipePacket) {
                    var ack = new (System.Collections.Generic.List$1(RobotRaconteurWeb.MessageElement)).ctor();
                    $t1 = Bridge.getEnumerator(m.elements);
                    try {
                        while ($t1.moveNext()) {
                            var me = $t1.Current;
                            try {

                                var index1 = { v : System.Int32.parse(me.ElementName) };
                                var pnum = { };

                                var p = null;
                                if (this.pipeendpoints.containsKey(index1.v)) {
                                    p = this.pipeendpoints.getItem(index1.v);
                                } else {
                                    if (this.early_endpoints.containsKey(index1.v)) {
                                        p = this.early_endpoints.getItem(index1.v);
                                    } else if (this.connecting.Count > 0) {
                                        if (System.Linq.Enumerable.from(this.connecting, System.Tuple$2(System.Int32,System.Object)).any((function ($me, index1) {
                                                return function (x) {
                                                    return x.Item1 === -1 || x.Item1 === index1.v;
                                                };
                                            })(this, index1))) {
                                            p = new (RobotRaconteurWeb.Pipe$1.PipeEndpoint(T))(this, index1.v);
                                            this.early_endpoints.add(index1.v, p);
                                        }
                                    }
                                }

                                if (p == null) {
                                    continue;
                                }
                                if (this.DispatchPacket(me, p, pnum)) {
                                    ack.add(new RobotRaconteurWeb.MessageElement.$ctor1(me.ElementName, System.Array.init([pnum.v], System.UInt32)));
                                }
                            } catch ($e2) {
                                $e2 = System.Exception.create($e2);

                            }
                        }
                    } finally {
                        if (Bridge.is($t1, System.IDisposable)) {
                            $t1.System$IDisposable$Dispose();
                        }
                    }
                    try {
                        if (ack.Count > 0) {
                            var mack = new RobotRaconteurWeb.MessageEntry.$ctor1(RobotRaconteurWeb.MessageEntryType.PipePacketRet, m.MemberName);
                            mack.elements = ack;
                            RobotRaconteurWeb.Extensions.Extensions.IgnoreResult(this.stub.SendPipeMessage(mack, Bridge.getDefaultValue(System.Threading.CancellationToken)));
                        }
                    } catch ($e3) {
                        $e3 = System.Exception.create($e3);
                    }
                } else if (m.EntryType === RobotRaconteurWeb.MessageEntryType.PipePacketRet) {
                    try {
                        $t2 = Bridge.getEnumerator(m.elements);
                        try {
                            while ($t2.moveNext()) {
                                var me1 = $t2.Current;
                                var index2 = System.Int32.parse(me1.ElementName);
                                this.DispatchPacketAck(me1, this.pipeendpoints.getItem(index2));
                            }
                        } finally {
                            if (Bridge.is($t2, System.IDisposable)) {
                                $t2.System$IDisposable$Dispose();
                            }
                        }
                    } catch ($e4) {
                        $e4 = System.Exception.create($e4);
                    }
                }
            },
            Shutdown: function () {
                var $t, $t1;
                var endps = ($t = RobotRaconteurWeb.Pipe$1.PipeEndpoint(T), System.Linq.Enumerable.from(this.pipeendpoints.Values, $t).ToArray($t));
                $t1 = Bridge.getEnumerator(endps);
                try {
                    while ($t1.moveNext()) {
                        var e = $t1.Current;
                        try {
                            e.RemoteClose();
                        } catch ($e1) {
                            $e1 = System.Exception.create($e1);
                        }
                    }
                } finally {
                    if (Bridge.is($t1, System.IDisposable)) {
                        $t1.System$IDisposable$Dispose();
                    }
                }
            },
            DeleteEndpoint: function (e) {
                this.pipeendpoints.remove(e.Index);
            },
            ClientContextListener: function (context, event_, param) {
                if (event_ === RobotRaconteurWeb.ClientServiceListenerEventType.ClientClosed) {
                    this.Shutdown();
                }
            },
            PackVarType: function (o) {
                return this.stub.RRContext.PackVarType(o);
            },
            UnpackVarType: function (o) {
                return this.stub.RRContext.UnpackVarType(o);
            }
        }
    }; });

    Bridge.define("RobotRaconteurWeb.PipeDefinition", {
        inherits: [RobotRaconteurWeb.MemberDefinition],
        fields: {
            Type: null
        },
        props: {
            Direction: {
                get: function () {
                    return RobotRaconteurWeb.MemberDefinition.MemberDefinition_GetDirection(this.Modifiers);
                }
            },
            IsUnreliable: {
                get: function () {
                    var $t;
                    if (System.Linq.Enumerable.from(this.Modifiers, System.String).count(function (x) {
                            return Bridge.referenceEquals(x, "unreliable");
                        }) !== 0) {
                        return true;
                    }

                    $t = Bridge.getEnumerator(this.ServiceEntry.Options);
                    try {
                        while ($t.moveNext()) {
                            var o = $t.Current;
                            var r = new System.Text.RegularExpressions.Regex.ctor("^[ \\t]*pipe[ \\t]+" + (this.Name || "") + "[ \\t]+unreliable[ \\t]*$");
                            if (r.isMatch(o)) {
                                return true;
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                    return false;
                }
            }
        },
        ctors: {
            ctor: function (ServiceEntry) {
                this.$initialize();
                RobotRaconteurWeb.MemberDefinition.ctor.call(this, ServiceEntry);
            }
        },
        methods: {
            toString: function () {
                return RobotRaconteurWeb.MemberDefinition.MemberDefinition_ToStringFormat1("pipe", this, this.Type);
            },
            FromString: function (s) {
                RobotRaconteurWeb.MemberDefinition.MemberDefinition_FromStringFormat1$1(s, "pipe", this, Bridge.ref(this, "Type"));
            },
            Reset: function () {
                RobotRaconteurWeb.MemberDefinition.prototype.Reset.call(this);
                RobotRaconteurWeb.TypeDefinition.op_Inequality(this.Type, null) ? this.Type.Reset() : null;
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.PipeServer$1", function (T) { return {
        inherits: [RobotRaconteurWeb.Pipe$1(T)],
        fields: {
            pipeendpoints: null,
            callback: null,
            m_Name: null,
            skel: null,
            pipeendpointlock: null
        },
        props: {
            MemberName: {
                get: function () {
                    return this.m_Name;
                }
            },
            PipeConnectCallback: {
                get: function () {
                    return this.callback;
                },
                set: function (value) {
                    this.callback = value;
                }
            }
        },
        ctors: {
            init: function () {
                this.pipeendpoints = new (System.Collections.Generic.Dictionary$2(System.UInt32,System.Collections.Generic.Dictionary$2(System.Int32,RobotRaconteurWeb.Pipe$1.PipeEndpoint(T)))).ctor();
                this.pipeendpointlock = { };
            },
            ctor: function (name, skel) {
                this.$initialize();
                RobotRaconteurWeb.Pipe$1(T).ctor.call(this);
                this.m_Name = name;
                this.skel = skel;
            }
        },
        methods: {
            SendPipePacket: function (data, index, packetnumber, requestack, e, cancel) {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    me, 
                    m, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        if (e === void 0) { e = null; }
                                        if (cancel === void 0) { cancel = new System.Threading.CancellationToken(); }
                                        if (!this.pipeendpoints.containsKey(e.LocalEndpoint)) {
                                            throw new System.Exception("Pipe has been disconnect");
                                        }
                                        if (!this.pipeendpoints.getItem(e.LocalEndpoint).containsKey(index)) {
                                            throw new System.Exception("Pipe has been disconnected");
                                        }

                                        me = this.PackPacket(data, index, packetnumber, requestack);
                                        m = new RobotRaconteurWeb.MessageEntry.$ctor1(RobotRaconteurWeb.MessageEntryType.PipePacket, this.MemberName);
                                        m.AddElement(me);

                                        $task1 = this.skel.SendPipeMessage(m, e, cancel);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            Connect: function (endpoint, cancel) {
                if (cancel === void 0) { cancel = new System.Threading.CancellationToken(); }
                throw new System.InvalidOperationException.ctor();
            },
            Close: function (e, ee, cancel) {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    m, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        if (cancel === void 0) { cancel = new System.Threading.CancellationToken(); }
                                        m = new RobotRaconteurWeb.MessageEntry.$ctor1(RobotRaconteurWeb.MessageEntryType.PipeClosed, this.MemberName);
                                        m.AddElement$1("index", Bridge.box(e.Index, System.Int32));
                                        $task1 = this.skel.SendPipeMessage(m, ee, cancel);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        this.DeleteEndpoint(e);
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            PipePacketReceived: function (m, e) {
                var $t, $t1;
                if (e === void 0) { e = null; }

                if (m.EntryType === RobotRaconteurWeb.MessageEntryType.PipePacket) {
                    var ack = new (System.Collections.Generic.List$1(RobotRaconteurWeb.MessageElement)).ctor();
                    $t = Bridge.getEnumerator(m.elements);
                    try {
                        while ($t.moveNext()) {
                            var me = $t.Current;
                            try {
                                var index = System.Int32.parse(me.ElementName);
                                var pnum = { };
                                if (this.DispatchPacket(me, this.pipeendpoints.getItem(e.LocalEndpoint).getItem(index), pnum)) {
                                    ack.add(new RobotRaconteurWeb.MessageElement.$ctor1(me.ElementName, System.Array.init([pnum.v], System.UInt32)));
                                }
                            } catch ($e1) {
                                $e1 = System.Exception.create($e1);

                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }

                    try {
                        if (ack.Count > 0) {
                            var mack = new RobotRaconteurWeb.MessageEntry.$ctor1(RobotRaconteurWeb.MessageEntryType.PipePacketRet, m.MemberName);
                            mack.elements = ack;
                            RobotRaconteurWeb.Extensions.Extensions.IgnoreResult(this.skel.SendPipeMessage(mack, e, Bridge.getDefaultValue(System.Threading.CancellationToken)));

                        }
                    } catch ($e2) {
                        $e2 = System.Exception.create($e2);
                    }
                } else if (m.EntryType === RobotRaconteurWeb.MessageEntryType.PipePacketRet) {

                    try {
                        $t1 = Bridge.getEnumerator(m.elements);
                        try {
                            while ($t1.moveNext()) {
                                var me1 = $t1.Current;
                                var index1 = System.Int32.parse(me1.ElementName);
                                this.DispatchPacketAck(me1, this.pipeendpoints.getItem(e.LocalEndpoint).getItem(index1));
                            }
                        } finally {
                            if (Bridge.is($t1, System.IDisposable)) {
                                $t1.System$IDisposable$Dispose();
                            }
                        }
                    } catch ($e3) {
                        $e3 = System.Exception.create($e3);
                    }

                }

            },
            PipeCommand: function (m, e) {
                var $t, $t1;
                this.pipeendpointlock;
                {
                    switch (m.EntryType) {
                        case RobotRaconteurWeb.MessageEntryType.PipeConnectReq: 
                            {
                                if (!System.Linq.Enumerable.from(this.pipeendpoints.Keys, System.UInt32).contains(e.LocalEndpoint)) {
                                    this.pipeendpoints.add(e.LocalEndpoint, new (System.Collections.Generic.Dictionary$2(System.Int32,RobotRaconteurWeb.Pipe$1.PipeEndpoint(T))).ctor());
                                }

                                var ep = this.pipeendpoints.getItem(e.LocalEndpoint);

                                var index = ($t = (m.FindElement("index").CastData(System.Array.type(System.Int32))))[System.Array.index(0, $t)];
                                if (index === -1) {
                                    index = (ep.Count === 0) ? 1 : (((System.Linq.Enumerable.from(ep.Keys, System.Int32).max() + 1) | 0));
                                }

                                if (System.Linq.Enumerable.from(ep.Keys, System.Int32).contains(index)) {
                                    throw new System.Exception("Pipe endpoint index in use");
                                }

                                var p = new (RobotRaconteurWeb.Pipe$1.PipeEndpoint(T))(this, index, e);
                                ep.add(index, p);
                                try {
                                    if (!Bridge.staticEquals(this.callback, null)) {
                                        this.callback(p);
                                    }
                                } catch ($e1) {
                                    $e1 = System.Exception.create($e1);
                                }

                                var ret = new RobotRaconteurWeb.MessageEntry.$ctor1(RobotRaconteurWeb.MessageEntryType.PipeConnectRet, this.MemberName);
                                ret.AddElement$1("index", Bridge.box(index, System.Int32));
                                return System.Threading.Tasks.Task.fromResult(ret, RobotRaconteurWeb.MessageEntry);
                            }
                        case RobotRaconteurWeb.MessageEntryType.PipeDisconnectReq: 
                            {
                                if (!System.Linq.Enumerable.from(this.pipeendpoints.Keys, System.UInt32).contains(e.LocalEndpoint)) {
                                    throw new System.Exception("Invalid pipe");
                                }
                                var ep1 = this.pipeendpoints.getItem(e.LocalEndpoint);

                                var index1 = ($t1 = (m.FindElement("index").CastData(System.Array.type(System.Int32))))[System.Array.index(0, $t1)];
                                if (!System.Linq.Enumerable.from(ep1.Keys, System.Int32).contains(index1)) {
                                    throw new System.Exception("Invalid pipe");
                                }


                                ep1.remove(index1);

                                return System.Threading.Tasks.Task.fromResult(new RobotRaconteurWeb.MessageEntry.$ctor1(RobotRaconteurWeb.MessageEntryType.PipeDisconnectReq, this.MemberName), RobotRaconteurWeb.MessageEntry);
                            }
                        default: 
                            throw new System.Exception("Invalid Command");
                    }
                }
            },
            Shutdown: function () {
                var $t, $t1, $t2, $t3;
                this.pipeendpointlock;
                {
                    var endpoints1 = ($t = System.Collections.Generic.Dictionary$2(System.Int32,RobotRaconteurWeb.Pipe$1.PipeEndpoint(T)), System.Linq.Enumerable.from(this.pipeendpoints.Values, $t).ToArray($t));
                    $t1 = Bridge.getEnumerator(endpoints1);
                    try {
                        while ($t1.moveNext()) {
                            var endpoints2 = $t1.Current;
                            var endpoints3 = ($t2 = RobotRaconteurWeb.Pipe$1.PipeEndpoint(T), System.Linq.Enumerable.from(endpoints2.Values, $t2).ToArray($t2));
                            $t3 = Bridge.getEnumerator(endpoints3);
                            try {
                                while ($t3.moveNext()) {
                                    var endpoint = $t3.Current;
                                    try {
                                        RobotRaconteurWeb.Extensions.Extensions.IgnoreResult(endpoint.Close());
                                    } catch ($e1) {
                                        $e1 = System.Exception.create($e1);
                                    }
                                }
                            } finally {
                                if (Bridge.is($t3, System.IDisposable)) {
                                    $t3.System$IDisposable$Dispose();
                                }
                            }

                            endpoints2.clear();

                        }
                    } finally {
                        if (Bridge.is($t1, System.IDisposable)) {
                            $t1.System$IDisposable$Dispose();
                        }
                    }

                    this.pipeendpoints.clear();
                }
            },
            DeleteEndpoint: function (e) {
                this.pipeendpointlock;
                {
                    this.pipeendpoints.getItem(e.Endpoint).remove(e.Index);
                }
            },
            PackVarType: function (o) {
                return this.skel.RRContext.PackVarType(o);
            },
            UnpackVarType: function (o) {
                return this.skel.RRContext.UnpackVarType(o);
            }
        }
    }; });

    Bridge.define("RobotRaconteurWeb.PodArrayMemoryClientImpl$1", function (T) { return {
        inherits: [RobotRaconteurWeb.ArrayMemoryClientImplBase],
        ctors: {
            ctor: function (membername, stub, element_size, direction) {
                this.$initialize();
                RobotRaconteurWeb.ArrayMemoryClientImplBase.ctor.call(this, membername, stub, RobotRaconteurWeb.DataTypes.pod_t, element_size, direction);
            }
        },
        methods: {
            GetBufferLength: function (buffer) {
                return System.Int64.clipu64(System.Array.getLongLength(Bridge.cast(buffer, System.Array.type(T))));
            },
            PackWriteRequest: function (buffer, bufferpos, count) {
                var buffer1 = Bridge.cast(buffer, System.Array.type(T));
                var o = System.Array.init(count, function (){
                    return Bridge.getDefaultValue(T);
                }, T);
                System.Array.copy(buffer1, System.Int64.clip64(bufferpos).toNumber(), o, System.Int64(0).toNumber(), System.Int64.clip64(count).toNumber());
                return this.stub.rr_node.PackPodArray(T, o, this.stub.RRContext);
            },
            UnpackReadResult: function (res, buffer, bufferpos, count) {
                var data = this.stub.rr_node.UnpackPodArray(T, Bridge.cast(res, RobotRaconteurWeb.MessageElementPodArray), this.stub.RRContext);
                var buffer1 = Bridge.cast(buffer, System.Array.type(T));
                System.Array.copy(data, System.Int64(0).toNumber(), buffer1, System.Int64.clip64(bufferpos).toNumber(), System.Int64.clip64(count).toNumber());
            }
        }
    }; });

    Bridge.define("RobotRaconteurWeb.PodArrayMemoryServiceSkel$1", function (T) { return {
        inherits: [RobotRaconteurWeb.ArrayMemoryServiceSkelBase],
        ctors: {
            ctor: function (membername, skel, element_size, direction) {
                if (direction === void 0) { direction = 2; }

                this.$initialize();
                RobotRaconteurWeb.ArrayMemoryServiceSkelBase.ctor.call(this, membername, skel, RobotRaconteurWeb.DataTypes.pod_t, element_size, direction);

            }
        },
        methods: {
            DoRead: function (memorypos, bufferpos, count, mem) {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    mem1, 
                    buf1, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        mem1 = Bridge.cast(mem, RobotRaconteurWeb.PodArrayMemory$1(T));
                                        buf1 = System.Array.init(count, function (){
                                            return Bridge.getDefaultValue(T);
                                        }, T);
                                        $task1 = mem1.Read(memorypos, buf1, System.UInt64(0), count);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        $tcs.setResult(this.skel.rr_node.PackPodArray(T, buf1, null));
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            DoWrite: function (memorypos, buffer, bufferpos, count, mem) {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    mem1, 
                    buf1, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        mem1 = Bridge.cast(mem, RobotRaconteurWeb.PodArrayMemory$1(T));
                                        buf1 = this.skel.rr_node.UnpackPodArray(T, Bridge.cast(buffer, RobotRaconteurWeb.MessageElementPodArray), null);
                                        $task1 = mem1.Write(memorypos, buf1, System.UInt64(0), count);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            }
        }
    }; });

    Bridge.define("RobotRaconteurWeb.PodMultiDimArrayMemory$1", function (T) { return {
        inherits: [RobotRaconteurWeb.MultiDimArrayMemoryBase],
        fields: {
            multimemory: null
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                RobotRaconteurWeb.MultiDimArrayMemoryBase.ctor.call(this);
            },
            $ctor1: function (memory) {
                this.$initialize();
                RobotRaconteurWeb.MultiDimArrayMemoryBase.ctor.call(this);
                this.multimemory = memory;
            }
        },
        methods: {
            Attach: function (memory) {
                this.multimemory = memory;
            },
            GetDimensions: function (cancel) {
                if (cancel === void 0) { cancel = new System.Threading.CancellationToken(); }
                return System.Threading.Tasks.Task.fromResult(System.Linq.Enumerable.from(this.multimemory.Dims, System.UInt32).select(function (x) {
                            return System.UInt64(x);
                        }).ToArray(System.UInt64), System.Array.type(System.UInt64));
            },
            GetDimCount: function (cancel) {
                if (cancel === void 0) { cancel = new System.Threading.CancellationToken(); }
                return System.Threading.Tasks.Task.fromResult(Bridge.Int.clipu64(this.multimemory.Dims.length), System.UInt64);
            },
            Read: function (memorypos, buffer, bufferpos, count, cancel) {
                if (cancel === void 0) { cancel = new System.Threading.CancellationToken(); }
                this.multimemory.RetrieveSubArray(System.Linq.Enumerable.from(memorypos, System.UInt64).select(function (x) {
                        return System.Int64.clipu32(x);
                    }).ToArray(System.UInt32), buffer, System.Linq.Enumerable.from(bufferpos, System.UInt64).select(function (x) {
                        return System.Int64.clipu32(x);
                    }).ToArray(System.UInt32), System.Linq.Enumerable.from(count, System.UInt64).select(function (x) {
                        return System.Int64.clipu32(x);
                    }).ToArray(System.UInt32));
                return System.Threading.Tasks.Task.fromResult(0, System.Int32);
            },
            Write: function (memorypos, buffer, bufferpos, count, cancel) {
                if (cancel === void 0) { cancel = new System.Threading.CancellationToken(); }
                this.multimemory.AssignSubArray(System.Linq.Enumerable.from(memorypos, System.UInt64).select(function (x) {
                        return System.Int64.clipu32(x);
                    }).ToArray(System.UInt32), buffer, System.Linq.Enumerable.from(bufferpos, System.UInt64).select(function (x) {
                        return System.Int64.clipu32(x);
                    }).ToArray(System.UInt32), System.Linq.Enumerable.from(count, System.UInt64).select(function (x) {
                        return System.Int64.clipu32(x);
                    }).ToArray(System.UInt32));
                return System.Threading.Tasks.Task.fromResult(0, System.Int32);
            }
        }
    }; });

    Bridge.define("RobotRaconteurWeb.PodMultiDimArrayMemoryClientImpl$1", function (T) { return {
        inherits: [RobotRaconteurWeb.MultiDimArrayMemoryClientImplBase],
        ctors: {
            ctor: function (membername, stub, element_size, direction) {
                this.$initialize();
                RobotRaconteurWeb.MultiDimArrayMemoryClientImplBase.ctor.call(this, membername, stub, RobotRaconteurWeb.DataTypes.pod_t, element_size, direction);
            }
        },
        methods: {
            PackWriteRequest: function (buffer, bufferpos, count, elem_count) {
                var buffer1 = Bridge.cast((buffer), RobotRaconteurWeb.PodMultiDimArray);

                var equ = true;
                for (var i = System.Int64(0); i.lt(System.Array.getLongLength(count)); i = i.inc()) {
                    if (bufferpos[System.Array.index(System.Int64.toNumber(i), bufferpos)].ne(System.UInt64(0)) || System.UInt64(buffer1.Dims[System.Array.index(System.Int64.toNumber(i), buffer1.Dims)]).ne(count[System.Array.index(System.Int64.toNumber(i), count)])) {
                        equ = false;
                        break;
                    }
                }

                if (equ) {
                    return this.stub.rr_node.PackPodMultiDimArray(T, buffer1, this.stub.RRContext);
                } else {
                    var data = new RobotRaconteurWeb.PodMultiDimArray.$ctor1(System.Linq.Enumerable.from(count, System.UInt64).select(function (x) {
                            return System.Int64.clipu32(x);
                        }).ToArray(System.UInt32), System.Array.init(elem_count, function (){
                        return Bridge.getDefaultValue(T);
                    }, T));

                    buffer1.RetrieveSubArray(System.Linq.Enumerable.from(bufferpos, System.UInt64).select(function (x) {
                            return System.Int64.clipu32(x);
                        }).ToArray(System.UInt32), data, System.Array.init(count.length, 0, System.UInt32), System.Linq.Enumerable.from(count, System.UInt64).select(function (x) {
                            return System.Int64.clipu32(x);
                        }).ToArray(System.UInt32));
                    return this.stub.rr_node.PackPodMultiDimArray(T, data, this.stub.RRContext);
                }
            },
            UnpackReadResult: function (res, buffer, bufferpos, count, elem_count) {
                var buffer1 = Bridge.cast(buffer, RobotRaconteurWeb.PodMultiDimArray);
                var data = this.stub.rr_node.UnpackPodMultiDimArray(T, Bridge.cast(res, RobotRaconteurWeb.MessageElementPodMultiDimArray), this.stub.RRContext);

                var data2 = new (RobotRaconteurWeb.PodMultiDimArrayMemory$1(T)).$ctor1(data);
                data2.Read(System.Array.init(count.length, System.UInt64(0), System.UInt64), buffer1, bufferpos, count);
            }
        }
    }; });

    Bridge.define("RobotRaconteurWeb.PodMultiDimArrayMemoryServiceSkel$1", function (T) { return {
        inherits: [RobotRaconteurWeb.MultiDimArrayMemoryServiceSkelBase],
        ctors: {
            ctor: function (membername, skel, element_size, direction) {
                if (direction === void 0) { direction = 2; }

                this.$initialize();
                RobotRaconteurWeb.MultiDimArrayMemoryServiceSkelBase.ctor.call(this, membername, skel, RobotRaconteurWeb.DataTypes.pod_t, element_size, direction);
            }
        },
        methods: {
            DoRead: function (memorypos, bufferpos, count, elem_count, mem) {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    mem1, 
                    buf1, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        mem1 = Bridge.cast(mem, RobotRaconteurWeb.PodMultiDimArrayMemory$1(T));
                                        buf1 = new RobotRaconteurWeb.PodMultiDimArray.$ctor1(System.Linq.Enumerable.from(count, System.UInt64).select(function (x) {
                                            return System.Int64.clipu32(x);
                                        }).ToArray(System.UInt32), System.Array.init(elem_count, function (){
                                            return Bridge.getDefaultValue(T);
                                        }, T));
                                        $task1 = mem1.Read(memorypos, buf1, System.Array.init(count.length, System.UInt64(0), System.UInt64), count);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        $tcs.setResult(this.skel.rr_node.PackPodMultiDimArray(T, buf1, null));
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            DoWrite: function (memorypos, buffer, bufferpos, count, elem_count, mem) {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    mem1, 
                    buf1, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        mem1 = Bridge.cast(mem, RobotRaconteurWeb.PodMultiDimArrayMemory$1(T));
                                        buf1 = this.skel.rr_node.UnpackPodMultiDimArray(T, Bridge.cast(buffer, RobotRaconteurWeb.MessageElementPodMultiDimArray), null);
                                        $task1 = mem1.Write(memorypos, buf1, System.Array.init(count.length, System.UInt64(0), System.UInt64), count);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            }
        }
    }; });

    Bridge.define("RobotRaconteurWeb.PodStub$1", function (T) { return {
        inherits: [RobotRaconteurWeb.IPodStub],
        alias: [
            "PackPod", "RobotRaconteurWeb$IPodStub$PackPod",
            "UnpackPod", "RobotRaconteurWeb$IPodStub$UnpackPod"
        ],
        methods: {
            PackPodToArray: function (s2) {
                var mm = new (System.Collections.Generic.List$1(RobotRaconteurWeb.MessageElement)).ctor();
                RobotRaconteurWeb.MessageElementUtil.AddMessageElement$3(mm, RobotRaconteurWeb.MessageElementUtil.NewMessageElement(0, this.PackPod$1(s2)));
                return new RobotRaconteurWeb.MessageElementPodArray(this.TypeName, mm);
            },
            PackPodArray: function (s2) {
                if (s2 == null) {
                    return null;
                }

                var mm = new (System.Collections.Generic.List$1(RobotRaconteurWeb.MessageElement)).ctor();
                for (var i = 0; i < s2.length; i = (i + 1) | 0) {
                    RobotRaconteurWeb.MessageElementUtil.AddMessageElement$3(mm, RobotRaconteurWeb.MessageElementUtil.NewMessageElement(i, this.PackPod$1(Bridge.ref(s2, i))));
                }
                return new RobotRaconteurWeb.MessageElementPodArray(this.TypeName, mm);
            },
            PackPodMultiDimArray: function (s3) {
                if (s3 == null) {
                    return null;
                }
                var l = new (System.Collections.Generic.List$1(RobotRaconteurWeb.MessageElement)).ctor();
                RobotRaconteurWeb.MessageElementUtil.AddMessageElement$5(l, "dims", s3.Dims);
                var s4 = this.PackPodArray(Bridge.cast(s3.pod_array, System.Array.type(T)));
                RobotRaconteurWeb.MessageElementUtil.AddMessageElement$5(l, "array", s4);
                return new RobotRaconteurWeb.MessageElementPodMultiDimArray(this.TypeName, l);
            },
            UnpackPodFromArray: function (s2) {
                if (!Bridge.referenceEquals(s2.Type, this.TypeName)) {
                    throw new RobotRaconteurWeb.DataTypeException("pod type mismatch");
                }
                var cdataElements = s2.Elements;
                if (cdataElements.Count !== 1) {
                    throw new RobotRaconteurWeb.DataTypeException("pod type mismatch");
                }
                var e = cdataElements.getItem(0);
                if (0 !== RobotRaconteurWeb.MessageElementUtil.GetMessageElementNumber(e)) {
                    throw new RobotRaconteurWeb.DataTypeException("Error in list format");
                }
                var md = Bridge.cast(e.Data, RobotRaconteurWeb.MessageElementPod);
                return this.UnpackPod$1(md);

            },
            UnpackPodArray: function (s2) {
                var $t;
                if (!Bridge.referenceEquals(s2.Type, this.TypeName)) {
                    throw new RobotRaconteurWeb.DataTypeException("pod type mismatch");
                }
                var count = 0;
                {
                    var cdataElements = s2.Elements;
                    var o = System.Array.init(cdataElements.Count, function (){
                        return Bridge.getDefaultValue(T);
                    }, T);
                    $t = Bridge.getEnumerator(cdataElements);
                    try {
                        while ($t.moveNext()) {
                            var e = $t.Current;
                            if (count !== RobotRaconteurWeb.MessageElementUtil.GetMessageElementNumber(e)) {
                                throw new RobotRaconteurWeb.DataTypeException("Error in list format");
                            }
                            o[System.Array.index(count, o)] = this.UnpackPod$1(Bridge.cast(e.Data, RobotRaconteurWeb.MessageElementPod));
                            count = (count + 1) | 0;
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                    return o;
                }
            },
            UnpackPodMultiDimArray: function (s3) {
                if (!Bridge.referenceEquals(s3.Type, this.TypeName)) {
                    throw new RobotRaconteurWeb.DataTypeException("pod type mismatch");
                }
                var o = new RobotRaconteurWeb.PodMultiDimArray.ctor();
                var marrayElements = s3.Elements;
                {
                    o.Dims = (RobotRaconteurWeb.MessageElementUtil.FindElementAndCast(System.Array.type(System.UInt32), marrayElements, "dims"));
                    var s2 = (RobotRaconteurWeb.MessageElementUtil.FindElementAndCast(RobotRaconteurWeb.MessageElementPodArray, marrayElements, "array"));
                    o.pod_array = this.UnpackPodArray(s2);
                }
                return o;
            },
            PackPod: function (s) {
                if (Bridge.is(s, T)) {
                    var s2 = { v : System.Nullable.getValue(Bridge.cast(Bridge.unbox(s, T), T)) };
                    return this.PackPodToArray(s2);
                }

                var s3 = Bridge.as(s, System.Array.type(T));
                if (s3 != null) {
                    return this.PackPodArray(s3);
                }

                var s4 = Bridge.as(s, RobotRaconteurWeb.PodMultiDimArray);
                if (s4 != null) {
                    return this.PackPodMultiDimArray(s4);
                }

                throw new RobotRaconteurWeb.DataTypeException("Unexpected message element type for PackPod");
            },
            UnpackPod: function (m) {
                /* var m2 = m as MessageElementPod;
                if (m2 != null)
                {

                   return UnpackPod(m2);           
                }*/

                var m3 = Bridge.as(m, RobotRaconteurWeb.MessageElementPodArray);
                if (m3 != null) {
                    return this.UnpackPodArray(m3);
                }

                var m4 = Bridge.as(m, RobotRaconteurWeb.MessageElementPodMultiDimArray);
                if (m4 != null) {
                    return this.UnpackPodMultiDimArray(m4);
                }

                throw new RobotRaconteurWeb.DataTypeException("Unexpected message element type for UnpackPod");
            }
        }
    }; });

    Bridge.define("RobotRaconteurWeb.PropertyDefinition", {
        inherits: [RobotRaconteurWeb.MemberDefinition],
        fields: {
            Type: null
        },
        props: {
            Direction: {
                get: function () {
                    return RobotRaconteurWeb.MemberDefinition.MemberDefinition_GetDirection(this.Modifiers);
                }
            }
        },
        ctors: {
            ctor: function (ServiceEntry) {
                this.$initialize();
                RobotRaconteurWeb.MemberDefinition.ctor.call(this, ServiceEntry);
            }
        },
        methods: {
            toString: function () {
                return this.ToString(false);
            },
            ToString: function (isstruct) {
                var member_type = isstruct ? "field" : "property";
                return RobotRaconteurWeb.MemberDefinition.MemberDefinition_ToStringFormat1(member_type, this, this.Type);
            },
            FromString: function (s) {
                var member_types = new (System.Collections.Generic.List$1(System.String)).ctor();
                member_types.add("property");
                member_types.add("field");
                RobotRaconteurWeb.MemberDefinition.MemberDefinition_FromStringFormat1(s, member_types, this, Bridge.ref(this, "Type"));
            },
            Reset: function () {
                RobotRaconteurWeb.MemberDefinition.prototype.Reset.call(this);
                RobotRaconteurWeb.TypeDefinition.op_Inequality(this.Type, null) ? this.Type.Reset() : null;
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.ProtocolException", {
        inherits: [RobotRaconteurWeb.RobotRaconteurException],
        ctors: {
            ctor: function (message) {
                this.$initialize();
                RobotRaconteurWeb.RobotRaconteurException.$ctor1.call(this, RobotRaconteurWeb.MessageErrorType.ProtocolError, "RobotRaconteur.ProtocolError", message);
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.ReadOnlyMemberException", {
        inherits: [RobotRaconteurWeb.RobotRaconteurException],
        ctors: {
            ctor: function (message) {
                this.$initialize();
                RobotRaconteurWeb.RobotRaconteurException.$ctor1.call(this, RobotRaconteurWeb.MessageErrorType.ReadOnlyMember, "RobotRaconteur.ReadOnlyMember", message);
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.RequestTimeoutException", {
        inherits: [RobotRaconteurWeb.RobotRaconteurException],
        ctors: {
            ctor: function (message) {
                this.$initialize();
                RobotRaconteurWeb.RobotRaconteurException.$ctor1.call(this, RobotRaconteurWeb.MessageErrorType.RequestTimeout, "RobotRaconteur.RequestTimeout", message);
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.ResourceNotFoundException", {
        inherits: [RobotRaconteurWeb.RobotRaconteurException],
        ctors: {
            ctor: function (message) {
                this.$initialize();
                RobotRaconteurWeb.RobotRaconteurException.$ctor1.call(this, RobotRaconteurWeb.MessageErrorType.ResourceNotFound, "RobotRaconteur.ResourceNotFound", message);
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.RobotRaconteurNode.ServiceIndexer", {
        inherits: [RobotRaconteurServiceIndex.ServiceIndex],
        $kind: "nested class",
        fields: {
            node: null
        },
        events: {
            LocalNodeServicesChanged: null
        },
        alias: [
            "GetLocalNodeServices", "RobotRaconteurServiceIndex$ServiceIndex$GetLocalNodeServices",
            "GetRoutedNodes", "RobotRaconteurServiceIndex$ServiceIndex$GetRoutedNodes",
            "GetDetectedNodes", "RobotRaconteurServiceIndex$ServiceIndex$GetDetectedNodes",
            "addLocalNodeServicesChanged", "RobotRaconteurServiceIndex$ServiceIndex$addLocalNodeServicesChanged",
            "removeLocalNodeServicesChanged", "RobotRaconteurServiceIndex$ServiceIndex$removeLocalNodeServicesChanged"
        ],
        ctors: {
            ctor: function (node) {
                this.$initialize();
                this.node = node;
            }
        },
        methods: {
            GetLocalNodeServices: function (cancel) {
                var $t, $t1;
                if (cancel === void 0) { cancel = new System.Threading.CancellationToken(); }
                if (RobotRaconteurWeb.Transport.CurrentThreadTransportConnectionURL == null) {
                    throw new RobotRaconteurWeb.ServiceException("GetLocalNodeServices must be called through a transport that supports node discovery");
                }

                var o = new (System.Collections.Generic.Dictionary$2(System.Int32,RobotRaconteurServiceIndex.ServiceInfo)).ctor();
                var count = 0;

                var sc;
                this.node.services;
                {
                    sc = ($t = RobotRaconteurWeb.ServerContext, System.Linq.Enumerable.from(this.node.services.Values, $t).ToArray($t));
                }

                $t1 = Bridge.getEnumerator(sc);
                try {
                    while ($t1.moveNext()) {
                        var c = $t1.Current;
                        var s = new RobotRaconteurServiceIndex.ServiceInfo();
                        s.Attributes = c.Attributes;
                        s.Name = c.ServiceName;
                        s.RootObjectType = c.RootObjectType;
                        s.ConnectionURL = new (System.Collections.Generic.Dictionary$2(System.Int32,System.String)).ctor();
                        s.ConnectionURL.add(1, (RobotRaconteurWeb.Transport.CurrentThreadTransportConnectionURL || "") + "?" + (("nodeid=" + (System.String.trim(this.node.NodeID.toString(), System.Array.init([123, 125], System.Char)) || "") + "&service=" + (RobotRaconteurWeb.Extensions.RRUriExtensions.EscapeDataString(s.Name) || "")) || ""));
                        s.RootObjectImplements = new (System.Collections.Generic.Dictionary$2(System.Int32,System.String)).ctor();

                        var $implements = c.ServiceDef.ServiceDef().Objects.getItem(RobotRaconteurWeb.ServiceDefinitionUtil.SplitQualifiedName(c.RootObjectType).Item2).Implements;
                        for (var i = 0; i < $implements.Count; i = (i + 1) | 0) {
                            s.RootObjectImplements.add(i, $implements.getItem(i));
                        }


                        o.add(count, s);
                        count = (count + 1) | 0;
                    }
                } finally {
                    if (Bridge.is($t1, System.IDisposable)) {
                        $t1.System$IDisposable$Dispose();
                    }
                }

                return System.Threading.Tasks.Task.fromResult(o, System.Collections.Generic.Dictionary$2(System.Int32,RobotRaconteurServiceIndex.ServiceInfo));
            },
            GetRoutedNodes: function (cancel) {
                if (cancel === void 0) { cancel = new System.Threading.CancellationToken(); }


                var ret = new (System.Collections.Generic.Dictionary$2(System.Int32,RobotRaconteurServiceIndex.NodeInfo)).ctor();


                return System.Threading.Tasks.Task.fromResult(ret, System.Collections.Generic.Dictionary$2(System.Int32,RobotRaconteurServiceIndex.NodeInfo));

            },
            GetDetectedNodes: function (cancel) {
                var $t;
                if (cancel === void 0) { cancel = new System.Threading.CancellationToken(); }
                this.node.m_DiscoveredNodes;
                {
                    var nodeids = ($t = System.String, System.Linq.Enumerable.from(this.node.m_DiscoveredNodes.Keys, $t).ToArray($t));
                    var len = nodeids.length;

                    var ret = new (System.Collections.Generic.Dictionary$2(System.Int32,RobotRaconteurServiceIndex.NodeInfo)).ctor();

                    for (var i = 0; i < len; i = (i + 1) | 0) {
                        var info = this.node.m_DiscoveredNodes.getItem(nodeids[System.Array.index(i, nodeids)]);

                        var ii = new RobotRaconteurServiceIndex.NodeInfo();
                        ii.NodeID = info.NodeID.ToByteArray();
                        ii.NodeName = info.NodeName;

                        var curl = new (System.Collections.Generic.Dictionary$2(System.Int32,System.String)).ctor();
                        for (var j = 0; j < info.URLs.Count; j = (j + 1) | 0) {
                            curl.add(j, info.URLs.getItem(j).URL);
                        }

                        ii.ServiceIndexConnectionURL = curl;
                        ret.add(i, ii);

                    }
                    return System.Threading.Tasks.Task.fromResult(ret, System.Collections.Generic.Dictionary$2(System.Int32,RobotRaconteurServiceIndex.NodeInfo));

                }
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.RobotRaconteurRemoteException", {
        inherits: [RobotRaconteurWeb.RobotRaconteurException],
        ctors: {
            ctor: function (error, message) {
                this.$initialize();
                RobotRaconteurWeb.RobotRaconteurException.$ctor1.call(this, RobotRaconteurWeb.MessageErrorType.RemoteError, error, message);
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.ServerEndpoint", {
        inherits: [RobotRaconteurWeb.Endpoint],
        statics: {
            fields: {
                m_CurrentEndpoint: null,
                m_CurrentAuthenticatedUser: null
            },
            props: {
                CurrentEndpoint: {
                    get: function () {
                        return RobotRaconteurWeb.ServerEndpoint.m_CurrentEndpoint;
                    }
                },
                CurrentAuthenticatedUser: {
                    get: function () {
                        return RobotRaconteurWeb.ServerEndpoint.m_CurrentAuthenticatedUser;
                    }
                }
            }
        },
        fields: {
            service: null,
            endpoint_authenticated_user: null
        },
        props: {
            AuthenticatedUsername: {
                get: function () {
                    if (this.endpoint_authenticated_user == null) {
                        return null;
                    }

                    return this.endpoint_authenticated_user.Username;
                }
            }
        },
        ctors: {
            ctor: function (service, node) {
                this.$initialize();
                RobotRaconteurWeb.Endpoint.ctor.call(this, node);
                this.service = service;
            }
        },
        methods: {
            MessageReceived: function (m) {
                if (m.entries.Count >= 0) {
                    if (m.entries.getItem(0).EntryType === RobotRaconteurWeb.MessageEntryType.EndpointCheckCapability) {
                        this.CheckEndpointCapabilityMessage(m);
                        return;
                    }
                }

                this.LastMessageReceivedTime = System.DateTime.getUtcNow();
                RobotRaconteurWeb.ServerEndpoint.m_CurrentEndpoint = this;
                RobotRaconteurWeb.ServerEndpoint.m_CurrentAuthenticatedUser = this.endpoint_authenticated_user;
                if (this.endpoint_authenticated_user != null) {
                    this.endpoint_authenticated_user.UpdateLastAccess();
                }
                this.service.MessageReceived(m, this);
                RobotRaconteurWeb.ServerEndpoint.m_CurrentEndpoint = null;
                RobotRaconteurWeb.ServerEndpoint.m_CurrentAuthenticatedUser = null;
            },
            AuthenticateUser: function (username, credentials) {
                var u = this.service.AuthenticateUser(username, credentials);
                this.endpoint_authenticated_user = u;
                RobotRaconteurWeb.ServerEndpoint.m_CurrentAuthenticatedUser = u;
            },
            LogoutUser: function () {
                this.endpoint_authenticated_user = null;
                RobotRaconteurWeb.ServerEndpoint.m_CurrentAuthenticatedUser = null;
            },
            PeriodicCleanupTask: function () {
                if ((System.DateTime.subdd(System.DateTime.getUtcNow(), this.LastMessageReceivedTime)).getTotalMilliseconds() > this.node.EndpointInactivityTimeout) {
                    this.service.RemoveClient(this);
                }
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.ServiceDefinitionException", {
        inherits: [RobotRaconteurWeb.RobotRaconteurException],
        ctors: {
            ctor: function (message) {
                this.$initialize();
                RobotRaconteurWeb.RobotRaconteurException.$ctor1.call(this, RobotRaconteurWeb.MessageErrorType.ServiceDefinitionError, "RobotRaconteur.SystemDefinitionError", message);
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.ServiceEntryDefinition", {
        inherits: [RobotRaconteurWeb.NamedTypeDefinition],
        fields: {
            Members: null,
            EntryType: 0,
            IsStructure: false,
            Implements: null,
            Options: null,
            Constants: null,
            ServiceDefinition: null
        },
        props: {
            RRDataType: {
                get: function () {

                    switch (this.EntryType) {
                        case RobotRaconteurWeb.DataTypes.structure_t: 
                        case RobotRaconteurWeb.DataTypes.pod_t: 
                        case RobotRaconteurWeb.DataTypes.namedarray_t: 
                        case RobotRaconteurWeb.DataTypes.object_t: 
                            break;
                        default: 
                            throw new RobotRaconteurWeb.ServiceDefinitionException("Invalid ServiceEntryDefinition type in " + (this.Name || ""));
                    }

                    return this.EntryType;
                }
            }
        },
        ctors: {
            init: function () {
                this.Members = new (System.Collections.Generic.Dictionary$2(System.String,RobotRaconteurWeb.MemberDefinition)).ctor();
                this.IsStructure = true;
                this.Implements = new (System.Collections.Generic.List$1(System.String)).ctor();
                this.Options = new (System.Collections.Generic.List$1(System.String)).ctor();
                this.Constants = new (System.Collections.Generic.Dictionary$2(System.String,RobotRaconteurWeb.ConstantDefinition)).ctor();
            },
            ctor: function (def) {
                this.$initialize();
                RobotRaconteurWeb.NamedTypeDefinition.ctor.call(this);
                this.ServiceDefinition = def;
            }
        },
        methods: {
            UnqualifyTypeWithUsing: function (s) {
                var $t;
                if (!System.Linq.Enumerable.from(s, System.Char).contains(46)) {
                    return s;
                }

                $t = Bridge.getEnumerator(this.ServiceDefinition.Using);
                try {
                    while ($t.moveNext()) {
                        var u = $t.Current;
                        if (Bridge.referenceEquals(u.QualifiedName, s)) {
                            return u.UnqualifiedName;
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
                return s;
            },
            QualifyTypeWithUsing: function (s) {
                var $t;
                if (System.Linq.Enumerable.from(s, System.Char).contains(46)) {
                    return s;
                }

                $t = Bridge.getEnumerator(this.ServiceDefinition.Using);
                try {
                    while ($t.moveNext()) {
                        var u = $t.Current;
                        if (Bridge.referenceEquals(u.UnqualifiedName, s)) {
                            return u.QualifiedName;
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
                return s;
            },
            ToWriter: function (o) {
                var $t, $t1, $t2, $t3;
                switch (this.EntryType) {
                    case RobotRaconteurWeb.DataTypes.structure_t: 
                        o.WriteLine$12("struct {0}", this.Name);
                        break;
                    case RobotRaconteurWeb.DataTypes.pod_t: 
                        o.WriteLine$12("pod {0}", this.Name);
                        break;
                    case RobotRaconteurWeb.DataTypes.namedarray_t: 
                        o.WriteLine$12("namedarray {0}", this.Name);
                        break;
                    case RobotRaconteurWeb.DataTypes.object_t: 
                        o.WriteLine$12("object {0}", this.Name);
                        break;
                    default: 
                        throw new RobotRaconteurWeb.ServiceDefinitionException("Invalid ServiceEntryDefinition type in " + (this.Name || ""));
                }

                $t = Bridge.getEnumerator(this.Implements);
                try {
                    while ($t.moveNext()) {
                        var imp = $t.Current;
                        o.WriteLine$12("    implements {0}", this.UnqualifyTypeWithUsing(imp));
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }

                $t1 = Bridge.getEnumerator(this.Options);
                try {
                    while ($t1.moveNext()) {
                        var option = $t1.Current;
                        o.WriteLine$12("    option {0}", option);
                    }
                } finally {
                    if (Bridge.is($t1, System.IDisposable)) {
                        $t1.System$IDisposable$Dispose();
                    }
                }

                $t2 = Bridge.getEnumerator(this.Constants);
                try {
                    while ($t2.moveNext()) {
                        var constant = $t2.Current;
                        o.WriteLine$12("    {0}", constant.toString());
                    }
                } finally {
                    if (Bridge.is($t2, System.IDisposable)) {
                        $t2.System$IDisposable$Dispose();
                    }
                }

                $t3 = Bridge.getEnumerator(this.Members.Values);
                try {
                    while ($t3.moveNext()) {
                        var d = $t3.Current;
                        var d1 = Bridge.toString(d);
                        if (this.EntryType !== RobotRaconteurWeb.DataTypes.object_t) {
                            var d2 = new System.Text.RegularExpressions.Regex.ctor("property");
                            d1 = d2.replace(d1, "field", 1);
                        }
                        o.WriteLine$11(d1);
                    }
                } finally {
                    if (Bridge.is($t3, System.IDisposable)) {
                        $t3.System$IDisposable$Dispose();
                    }
                }

                o.WriteLine$11("end");
            },
            toString: function () {
                var w = new System.IO.StringWriter.ctor();
                w.NewLine = "\n";
                this.ToWriter(w);
                return w.toString();
            },
            FromString: function (s) {
                this.FromString$1(s, 0);
            },
            FromString$1: function (s, startline) {
                var w = { v : new (System.Collections.Generic.List$1(System.Exception)).ctor() };
                this.FromString$2(s, startline, w);
            },
            FromString$2: function (s, startline, warnings) {
                var is_ = new System.IO.StringReader(s);
                this.FromStream$2(is_, startline, warnings);
            },
            FromStream: function (s) {
                this.FromStream$1(s, 0);
            },
            FromStream$1: function (s, startline) {
                var w = { v : new (System.Collections.Generic.List$1(System.Exception)).ctor() };
                this.FromStream$2(s, startline, w);
            },
            FromStream$2: function (s, startline, warnings) {
                this.Reset();

                var start_struct_regex = new System.Text.RegularExpressions.Regex.ctor("^[ \\t]*struct[ \\t]+(\\w+)[ \\t]*$");
                var start_pod_regex = new System.Text.RegularExpressions.Regex.ctor("^[ \\t]*pod[ \\t]+(\\w+)[ \\t]*$");
                var start_namedarray_regex = new System.Text.RegularExpressions.Regex.ctor("^[ \\t]*namedarray[ \\t]+(\\w+)[ \\t]*$");
                var start_object_regex = new System.Text.RegularExpressions.Regex.ctor("^[ \\t]*object[ \\t]+(\\w+)[ \\t]*$");
                var end_struct_regex = new System.Text.RegularExpressions.Regex.ctor("^[ \\t]*end[ \\t]+struct[ \\t]*$");
                var end_pod_regex = new System.Text.RegularExpressions.Regex.ctor("^[ \\t]*end[ \\t]+pod[ \\t]*$");
                var end_namedarray_regex = new System.Text.RegularExpressions.Regex.ctor("^[ \\t]*end[ \\t]+namedarray[ \\t]*$");
                var end_object_regex = new System.Text.RegularExpressions.Regex.ctor("^[ \\t]*end[ \\t]+object[ \\t]*$");

                var pos = { v : (startline - 1) >>> 0 };
                var l = { v : null };
                if (!RobotRaconteurWeb.detail.ServiceDefinitionUtil.ServiceDefinition_GetLine(s, l, pos)) {
                    throw new RobotRaconteurWeb.RobotRaconteurParseException.$ctor1("Invalid object member", (startline | 0));
                }

                var start_struct_cmatch = start_struct_regex.match(l.v);
                var start_pod_cmatch = start_pod_regex.match(l.v);
                var start_namedarray_cmatch = start_namedarray_regex.match(l.v);
                var start_object_cmatch = start_object_regex.match(l.v);
                if (start_struct_cmatch.getSuccess()) {
                    this.EntryType = RobotRaconteurWeb.DataTypes.structure_t;
                    this.Name = start_struct_cmatch.getGroups().get(1).getValue();
                } else if (start_pod_cmatch.getSuccess()) {
                    this.EntryType = RobotRaconteurWeb.DataTypes.pod_t;
                    this.Name = start_pod_cmatch.getGroups().get(1).getValue();
                } else if (start_namedarray_cmatch.getSuccess()) {
                    this.EntryType = RobotRaconteurWeb.DataTypes.namedarray_t;
                    this.Name = start_namedarray_cmatch.getGroups().get(1).getValue();
                } else if (start_object_cmatch.getSuccess()) {
                    this.EntryType = RobotRaconteurWeb.DataTypes.object_t;
                    this.Name = start_object_cmatch.getGroups().get(1).getValue();
                } else {
                    throw new RobotRaconteurWeb.RobotRaconteurParseException.$ctor1("Parse error", (startline | 0));
                }

                try {
                    var r_member = new System.Text.RegularExpressions.Regex.ctor("(?:^[ \\t]*(?:(option)|(implements)|(constant)|(field)|(property)|(function)|(event)|(objref)|(pipe)|(callback)|(wire)|(memory)|(end))[ \\t]+(\\w[^\\s]*(?:[ \\t]+[^\\s]+)*)[ \\t]*$)|(^[ \\t]*$)");

                    while (RobotRaconteurWeb.detail.ServiceDefinitionUtil.ServiceDefinition_GetLine(s, l, pos)) {

                        try {

                            var r_member_match = r_member.match(l.v);
                            if (!r_member_match.getSuccess()) {
                                if (Bridge.referenceEquals(l.v.trim(), "end")) {
                                    if (RobotRaconteurWeb.detail.ServiceDefinitionUtil.ServiceDefinition_GetLine(s, l, pos)) {
                                        throw new RobotRaconteurWeb.RobotRaconteurParseException.$ctor1("Parse error", (pos.v | 0));
                                    }
                                    return;
                                }
                                throw new RobotRaconteurWeb.RobotRaconteurParseException.$ctor1("Parse error near: " + (l.v || ""), (pos.v | 0));
                            }

                            var r_member_match_blank = r_member_match.getGroups().get(15);
                            if (r_member_match_blank.getSuccess()) {
                                continue;
                            }

                            var member_key = 1;
                            for (; member_key < 13; member_key = (member_key + 1) | 0) {
                                if (r_member_match.getGroups().get(member_key).getSuccess()) {
                                    break;
                                }
                            }

                            var r_member_match_remaining = r_member_match.getGroups().get(14);

                            if ((this.EntryType !== RobotRaconteurWeb.DataTypes.object_t) && (member_key >= 5 && member_key !== 13)) {
                                throw new RobotRaconteurWeb.RobotRaconteurParseException.$ctor1("Structures can only contain fields, constants, and options", (pos.v | 0));
                            }

                            switch (member_key) {
                                case 1: 
                                    {
                                        this.Options.add(r_member_match_remaining.getValue());
                                        warnings.v.add(new RobotRaconteurWeb.RobotRaconteurParseException.$ctor1("option keyword is deprecated", (pos.v | 0)));
                                        continue;
                                    }
                                case 2: 
                                    {
                                        if (this.Members.Count !== 0) {
                                            throw new RobotRaconteurWeb.RobotRaconteurParseException.$ctor1("Structure implements must come before members", (pos.v | 0));
                                        }
                                        if (this.EntryType !== RobotRaconteurWeb.DataTypes.object_t) {
                                            throw new RobotRaconteurWeb.RobotRaconteurParseException.$ctor1("Structures can only contain fields, constants, and options", (pos.v | 0));
                                        }
                                        var implements1 = { v : new (System.Collections.Generic.List$1(System.String)).ctor() };
                                        RobotRaconteurWeb.detail.ServiceDefinitionUtil.ServiceDefinition_FromStringTypeFormat(l.v, "implements", implements1);
                                        this.Implements.add(this.QualifyTypeWithUsing(implements1.v.getItem(0)));
                                        continue;
                                    }
                                case 3: 
                                    {
                                        if (this.Members.Count !== 0) {
                                            throw new RobotRaconteurWeb.RobotRaconteurParseException.$ctor1("Structure constants must come before members", (pos.v | 0));
                                        }
                                        var constant_def = new RobotRaconteurWeb.ConstantDefinition.$ctor1(this);
                                        constant_def.FromString(l.v);
                                        this.Constants.add(constant_def.Name, constant_def);
                                        continue;
                                    }
                                case 4: 
                                    {
                                        if (this.EntryType === RobotRaconteurWeb.DataTypes.object_t) {
                                            throw new RobotRaconteurWeb.RobotRaconteurParseException.$ctor1("Objects cannot contain fields.  Use properties instead.", (pos.v | 0));
                                        }
                                        var m = new RobotRaconteurWeb.PropertyDefinition(this);
                                        m.FromString(l.v);
                                        this.Members.add(m.Name, m);
                                        continue;
                                    }
                                case 5: 
                                    {
                                        var m1 = new RobotRaconteurWeb.PropertyDefinition(this);
                                        m1.FromString(l.v);
                                        this.Members.add(m1.Name, m1);
                                        continue;
                                    }
                                case 6: 
                                    {
                                        var m2 = new RobotRaconteurWeb.FunctionDefinition(this);
                                        m2.FromString(l.v);
                                        this.Members.add(m2.Name, m2);
                                        continue;
                                    }
                                case 7: 
                                    {
                                        var m3 = new RobotRaconteurWeb.EventDefinition(this);
                                        m3.FromString(l.v);
                                        this.Members.add(m3.Name, m3);
                                        continue;
                                    }
                                case 8: 
                                    {
                                        var m4 = new RobotRaconteurWeb.ObjRefDefinition(this);
                                        m4.FromString(l.v);
                                        this.Members.add(m4.Name, m4);
                                        continue;
                                    }
                                case 9: 
                                    {
                                        var m5 = new RobotRaconteurWeb.PipeDefinition(this);
                                        m5.FromString(l.v);
                                        this.Members.add(m5.Name, m5);
                                        continue;
                                    }
                                case 10: 
                                    {
                                        var m6 = new RobotRaconteurWeb.CallbackDefinition(this);
                                        m6.FromString(l.v);
                                        this.Members.add(m6.Name, m6);
                                        continue;
                                    }
                                case 11: 
                                    {
                                        var m7 = new RobotRaconteurWeb.WireDefinition(this);
                                        m7.FromString(l.v);
                                        this.Members.add(m7.Name, m7);
                                        continue;
                                    }
                                case 12: 
                                    {
                                        var m8 = new RobotRaconteurWeb.MemoryDefinition(this);
                                        m8.FromString(l.v);
                                        this.Members.add(m8.Name, m8);
                                        continue;
                                    }
                                case 13: 
                                    {
                                        if (this.EntryType === RobotRaconteurWeb.DataTypes.structure_t) {
                                            if (!end_struct_regex.isMatch(l.v)) {
                                                throw new RobotRaconteurWeb.RobotRaconteurParseException.$ctor1("Parse error", (pos.v | 0));
                                            }
                                        } else if (this.EntryType === RobotRaconteurWeb.DataTypes.pod_t) {
                                            if (!end_pod_regex.isMatch(l.v)) {
                                                throw new RobotRaconteurWeb.RobotRaconteurParseException.$ctor1("Parse error", (pos.v | 0));
                                            }
                                        } else if (this.EntryType === RobotRaconteurWeb.DataTypes.namedarray_t) {
                                            if (!end_namedarray_regex.isMatch(l.v)) {
                                                throw new RobotRaconteurWeb.RobotRaconteurParseException.$ctor1("Parse error", (pos.v | 0));
                                            }
                                        } else {
                                            if (!end_object_regex.isMatch(l.v)) {
                                                throw new RobotRaconteurWeb.RobotRaconteurParseException.$ctor1("Parse error", (pos.v | 0));
                                            }
                                        }

                                        if (RobotRaconteurWeb.detail.ServiceDefinitionUtil.ServiceDefinition_GetLine(s, l, pos)) {
                                            throw new RobotRaconteurWeb.RobotRaconteurParseException.$ctor1("Parse error", (pos.v | 0));
                                        }
                                        return;
                                    }
                                default: 
                                    throw new RobotRaconteurWeb.RobotRaconteurParseException.$ctor1("Parse error", (pos.v | 0));
                                    break;
                            }
                        } catch ($e1) {
                            $e1 = System.Exception.create($e1);
                            var e;
                            if (Bridge.is($e1, RobotRaconteurWeb.RobotRaconteurParseException)) {
                                e = $e1;
                                throw $e1;
                            } else {
                                throw $e1;
                            }
                        }
                    }
                } catch (exp) {
                    exp = System.Exception.create(exp);
                    throw new RobotRaconteurWeb.RobotRaconteurParseException.$ctor1("Parse error: " + (exp.Message || "") + " near: " + (l.v || ""), (pos.v | 0));
                }
            },
            Reset: function () {
                this.Name = "";
                this.Members.clear();
                this.EntryType = RobotRaconteurWeb.DataTypes.structure_t;
                this.Implements.clear();
                this.Options.clear();
                this.Constants.clear();
            },
            ResolveQualifiedName: function () {
                return (this.ServiceDefinition.Name || "") + "." + (this.Name || "");
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.ServiceException", {
        inherits: [RobotRaconteurWeb.RobotRaconteurException],
        ctors: {
            ctor: function (message) {
                this.$initialize();
                RobotRaconteurWeb.RobotRaconteurException.$ctor1.call(this, RobotRaconteurWeb.MessageErrorType.ServiceError, "RobotRaconteur.ServiceError", message);
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.ServiceNotFoundException", {
        inherits: [RobotRaconteurWeb.RobotRaconteurException],
        ctors: {
            ctor: function (message) {
                this.$initialize();
                RobotRaconteurWeb.RobotRaconteurException.$ctor1.call(this, RobotRaconteurWeb.MessageErrorType.ServiceNotFound, "RobotRaconteur.ServiceNotFound", message);
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.StopIterationException", {
        inherits: [RobotRaconteurWeb.RobotRaconteurException],
        ctors: {
            ctor: function (message) {
                this.$initialize();
                RobotRaconteurWeb.RobotRaconteurException.$ctor1.call(this, RobotRaconteurWeb.MessageErrorType.StopIteration, "RobotRaconteur.StopIteration", message);
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.SystemResourceException", {
        inherits: [RobotRaconteurWeb.RobotRaconteurException],
        ctors: {
            ctor: function (message) {
                this.$initialize();
                RobotRaconteurWeb.RobotRaconteurException.$ctor1.call(this, RobotRaconteurWeb.MessageErrorType.SystemResourceError, "RobotRaconteur.SystemResourceError", message);
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.SystemResourcePermissionDeniedException", {
        inherits: [RobotRaconteurWeb.RobotRaconteurException],
        ctors: {
            ctor: function (message) {
                this.$initialize();
                RobotRaconteurWeb.RobotRaconteurException.$ctor1.call(this, RobotRaconteurWeb.MessageErrorType.SystemResourcePermissionDenied, "RobotRaconteur.SystemResourcePermissionDenied", message);
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.UnknownException", {
        inherits: [RobotRaconteurWeb.RobotRaconteurException],
        ctors: {
            ctor: function (error, message) {
                this.$initialize();
                RobotRaconteurWeb.RobotRaconteurException.$ctor1.call(this, RobotRaconteurWeb.MessageErrorType.UnknownError, error, message);
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.ValueNotSetException", {
        inherits: [RobotRaconteurWeb.RobotRaconteurException],
        ctors: {
            ctor: function (message) {
                this.$initialize();
                RobotRaconteurWeb.RobotRaconteurException.$ctor1.call(this, RobotRaconteurWeb.MessageErrorType.ValueNotSet, "RobotRaconteur.ValueNotSet", message);
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.WallRate", {
        inherits: [RobotRaconteurWeb.IRate],
        fields: {
            node: null,
            period: 0,
            start_time: null,
            last_time: null
        },
        alias: ["Sleep", "RobotRaconteurWeb$IRate$Sleep"],
        ctors: {
            init: function () {
                this.start_time = System.DateTime.getDefaultValue();
                this.last_time = System.DateTime.getDefaultValue();
            },
            ctor: function (frequency, node) {
                if (node === void 0) { node = null; }

                this.$initialize();
                if (node == null) {
                    this.node = RobotRaconteurWeb.RobotRaconteurNode.s;
                } else {
                    this.node = node;
                }

                this.period = 1000.0 / frequency;
                this.last_time = node.UtcNow;
                this.start_time = node.UtcNow;
            }
        },
        methods: {
            Sleep: function () {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    p2, 
                    $async_e, 
                    $async_e1, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4], $step);
                                switch ($step) {
                                    case 0: {
                                        p2 = System.DateTime.adddt(this.last_time, System.TimeSpan.fromMilliseconds(this.period));
                                        
                                        $step = 1;
                                        continue;
                                    }
                                    case 1: {
                                        $task1 = System.Threading.Tasks.Task.delay(Bridge.Int.clip32((System.DateTime.subdd(p2, this.node.UtcNow)).getTotalMilliseconds()));
                                        $step = 2;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $task1.getAwaitedResult();
                                        $step = 4;
                                        continue;
                                    }
                                    case 3: {
                                        $async_e = null;
                                        $step = 4;
                                        continue;
                                    }
                                    case 4: {
                                        this.last_time = p2;
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            if ( $step >= 1 && $step <= 2 ) {
                                $step = 3;
                                $asyncBody();
                                return;
                            }
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.WallTimer", {
        inherits: [RobotRaconteurWeb.ITimer],
        fields: {
            start_time: null,
            actual_last_time: null,
            last_time: null,
            oneshot: false,
            node: null,
            handler: null,
            cancel: null,
            Period: 0
        },
        props: {
            IsRunning: {
                get: function () {
                    this;
                    {
                        if (this.cancel == null) {
                            return false;
                        }
                        return !this.cancel.isCancellationRequested;
                    }
                }
            }
        },
        alias: [
            "Start", "RobotRaconteurWeb$ITimer$Start",
            "Stop", "RobotRaconteurWeb$ITimer$Stop",
            "Period", "RobotRaconteurWeb$ITimer$Period",
            "IsRunning", "RobotRaconteurWeb$ITimer$IsRunning"
        ],
        ctors: {
            init: function () {
                this.start_time = System.DateTime.getDefaultValue();
                this.actual_last_time = System.DateTime.getDefaultValue();
                this.last_time = System.DateTime.getDefaultValue();
            },
            ctor: function (period, handler, oneshot, node) {
                if (node === void 0) { node = null; }

                this.$initialize();
                if (node == null) {
                    this.node = RobotRaconteurWeb.RobotRaconteurNode.s;
                } else {
                    this.node = node;
                }

                this.Period = period;
                this.handler = handler;
                this.oneshot = oneshot;
            }
        },
        methods: {
            Start: function () {
                this;
                {
                    if (this.IsRunning) {
                        throw new System.InvalidOperationException.$ctor1("Already running");
                    }
                    this.start_time = this.node.UtcNow;
                    this.last_time = this.start_time;
                    this.actual_last_time = this.last_time;

                    this.cancel = new System.Threading.CancellationTokenSource();
                    if (!this.oneshot) {
                        var noop = RobotRaconteurWeb.PeriodicTask.Run$1(Bridge.fn.cacheBind(this, this.periodic_handler), System.TimeSpan.fromMilliseconds(this.Period), this.cancel.token);
                    } else {
                        RobotRaconteurWeb.Extensions.Extensions.IgnoreResult(this.RunOne());
                    }

                }
            },
            RunOne: function () {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    e, 
                    $t, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = System.Threading.Tasks.Task.delay(this.Period);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        if (!this.cancel.isCancellationRequested) {
                                            this;
                                            {
                                                this.cancel.cancel();
                                                this.cancel = null;
                                                e = ($t = new RobotRaconteurWeb.TimerEvent(), $t.stopped = this.IsRunning, $t.last_expected = this.last_time, $t.last_real = this.actual_last_time, $t.current_expected = System.DateTime.adddt(this.last_time, System.TimeSpan.fromMilliseconds(this.Period)), $t.current_real = this.node.UtcNow, $t);
                                                this.handler(e.$clone());
                                            }
                                        }
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            periodic_handler: function () {
                var $t;
                var e = new RobotRaconteurWeb.TimerEvent();
                this;
                {
                    e = ($t = new RobotRaconteurWeb.TimerEvent(), $t.stopped = this.IsRunning, $t.last_expected = this.last_time, $t.last_real = this.actual_last_time, $t.current_expected = System.DateTime.adddt(this.last_time, System.TimeSpan.fromMilliseconds(this.Period)), $t.current_real = this.node.UtcNow, $t);

                    this.last_time = e.current_expected;
                    this.actual_last_time = e.last_real;
                }
                this.handler(e.$clone());
            },
            Stop: function () {
                this;
                {
                    if (!this.IsRunning) {
                        throw new System.InvalidOperationException.$ctor1("Not running");
                    }
                    if (this.cancel != null) {
                        this.cancel.cancel();
                    }
                    this.cancel = null;
                }
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.WireClient$1", function (T) { return {
        inherits: [RobotRaconteurWeb.Wire$1(T)],
        fields: {
            stub: null,
            connection: null,
            m_MemberName: null,
            connect_lock: null,
            Close_mutex: null
        },
        props: {
            MemberName: {
                get: function () {
                    return this.m_MemberName;
                }
            },
            WireConnectCallback: {
                get: function () {
                    throw new System.InvalidOperationException.ctor();
                },
                set: function (value) {
                    throw new System.InvalidOperationException.ctor();
                }
            },
            PeekInValueCallback: {
                get: function () {
                    return (function () {
                        throw new System.InvalidOperationException.$ctor1("Invalid for wire client");
                    })();
                },
                set: function (value) {
                    throw new System.InvalidOperationException.$ctor1("Invalid for wire client");
                }
            },
            PeekOutValueCallback: {
                get: function () {
                    return (function () {
                        throw new System.InvalidOperationException.$ctor1("Invalid for wire client");
                    })();
                },
                set: function (value) {
                    throw new System.InvalidOperationException.$ctor1("Invalid for wire client");
                }
            },
            PokeOutValueCallback: {
                get: function () {
                    return (function () {
                        throw new System.InvalidOperationException.$ctor1("Invalid for wire client");
                    })();
                },
                set: function (value) {
                    throw new System.InvalidOperationException.$ctor1("Invalid for wire client");
                }
            }
        },
        ctors: {
            init: function () {
                this.connect_lock = { };
                this.Close_mutex = new RobotRaconteurWeb.AsyncMutex();
            },
            ctor: function (name, stub) {
                this.$initialize();
                RobotRaconteurWeb.Wire$1(T).ctor.call(this);
                this.m_MemberName = name;
                this.stub = stub;
                stub.RRContext.addClientServiceListener(Bridge.fn.cacheBind(this, this.ClientContextListener));
            }
        },
        methods: {
            Connect: function (cancel) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    m, 
                    ret, 
                    e, 
                    $async_e, 
                    $async_e1, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4], $step);
                                switch ($step) {
                                    case 0: {
                                        if (cancel === void 0) { cancel = new System.Threading.CancellationToken(); }

                                        
                                        $step = 1;
                                        continue;
                                    }
                                    case 1: {
                                        this.connect_lock;
                                        {
                                            if (this.connection != null) {
                                                throw new System.InvalidOperationException.$ctor1("Already connected");
                                            }
                                            this.connection = new (RobotRaconteurWeb.Wire$1.WireConnection(T))(this);

                                        }
                                        m = new RobotRaconteurWeb.MessageEntry.$ctor1(RobotRaconteurWeb.MessageEntryType.WireConnectReq, this.MemberName);
                                        $task1 = this.stub.ProcessRequest(m, cancel);
                                        $step = 2;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        ret = $taskResult1;


                                        $tcs.setResult(this.connection);
                                        return;
                                    }
                                    case 3: {
                                        this.connection = null;
                                        throw e;
                                        $async_e = null;
                                        $step = 4;
                                        continue;
                                    }
                                    case 4: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            if ( $step >= 1 && $step <= 2 ) {
                                e = $async_e;
                                $step = 3;
                                $asyncBody();
                                return;
                            }
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            Close: function (c, e, cancel) {
                var $step = 0,
                    $task1, 
                    $task2, 
                    $taskResult2, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    mutex, 
                    m, 
                    ret, 
                    $async_e, 
                    $async_e1, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5], $step);
                                switch ($step) {
                                    case 0: {
                                        if (e === void 0) { e = null; }
                                        if (cancel === void 0) { cancel = new System.Threading.CancellationToken(); }
                                        mutex = this.Close_mutex.Enter();
                                        
                                        $step = 1;
                                        continue;
                                    }
                                    case 1: {
                                        $task1 = mutex;
                                        $step = 2;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $task1.getAwaitedResult();
                                        m = new RobotRaconteurWeb.MessageEntry.$ctor1(RobotRaconteurWeb.MessageEntryType.WireDisconnectReq, this.MemberName);
                                        $task2 = this.stub.ProcessRequest(m, cancel);
                                        $step = 3;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 3: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        ret = $taskResult2;
                                        this.connection = null;
                                        $step = 4;
                                        continue;
                                    }
                                    case 4: {
                                        this.Close_mutex.Exit(mutex);

                                        if ($jumpFromFinally > -1) {
                                            $step = $jumpFromFinally;
                                            $jumpFromFinally = null;
                                        } else if ($async_e) {
                                            $tcs.setException($async_e);
                                            return;
                                        } else if (Bridge.isDefined($returnValue)) {
                                            $tcs.setResult($returnValue);
                                            return;
                                        }
                                        $step = 5;
                                        continue;
                                    }
                                    case 5: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            if ($step >= 1 && $step <= 3) {
                                $step = 4;
                                $asyncBody();
                                return;
                            }
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            WirePacketReceived: function (m, e) {
                if (e === void 0) { e = null; }
                if (m.EntryType === RobotRaconteurWeb.MessageEntryType.WireClosed) {
                    try {
                        this.connection.Close();
                        this.connection = null;
                    } catch ($e1) {
                        $e1 = System.Exception.create($e1);
                    }
                } else if (m.EntryType === RobotRaconteurWeb.MessageEntryType.WirePacket) {
                    try {
                        if (this.connection == null) {
                            return;
                        }
                        this.DispatchPacket(m.elements, this.connection);
                    } catch ($e2) {
                        $e2 = System.Exception.create($e2);
                    }
                }
            },
            SendWirePacket: function (packet, time, e) {
                if (e === void 0) { e = null; }
                var el = this.PackPacket(packet, time);
                var m = new RobotRaconteurWeb.MessageEntry.$ctor1(RobotRaconteurWeb.MessageEntryType.WirePacket, this.MemberName);
                m.elements = el;
                RobotRaconteurWeb.Extensions.Extensions.IgnoreResult(this.stub.SendWireMessage(m, Bridge.getDefaultValue(System.Threading.CancellationToken)));
            },
            ClientContextListener: function (context, event_, param) {
                if (event_ === RobotRaconteurWeb.ClientServiceListenerEventType.ClientClosed) {
                    this.Shutdown();
                }
            },
            Shutdown: function () {
                try {
                    if (this.connection != null) {
                        this.connection.RemoteClose();
                    }
                } catch ($e1) {
                    $e1 = System.Exception.create($e1);
                }
            },
            PackVarType: function (o) {
                return this.stub.RRContext.PackVarType(o);
            },
            UnpackVarType: function (o) {
                return this.stub.RRContext.UnpackVarType(o);
            },
            PeekInValue: function (cancel) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    m, 
                    mr, 
                    ts, 
                    data, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        if (cancel === void 0) { cancel = new System.Threading.CancellationToken(); }
                                        m = new RobotRaconteurWeb.MessageEntry.$ctor1(RobotRaconteurWeb.MessageEntryType.WirePeekInValueReq, this.MemberName);
                                        $task1 = this.stub.ProcessRequest(m, cancel);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        mr = $taskResult1;
                                        ts = { };
                                        data = this.UnpackPacket(mr.elements, ts);
                                        $tcs.setResult({ Item1: data, Item2: ts.v });
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            PeekOutValue: function (cancel) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    m, 
                    mr, 
                    ts, 
                    data, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        if (cancel === void 0) { cancel = new System.Threading.CancellationToken(); }
                                        m = new RobotRaconteurWeb.MessageEntry.$ctor1(RobotRaconteurWeb.MessageEntryType.WirePeekOutValueReq, this.MemberName);
                                        $task1 = this.stub.ProcessRequest(m, cancel);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        mr = $taskResult1;
                                        ts = { };
                                        data = this.UnpackPacket(mr.elements, ts);
                                        $tcs.setResult({ Item1: data, Item2: ts.v });
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            PokeOutValue: function (value, cancel) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    m, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        if (cancel === void 0) { cancel = new System.Threading.CancellationToken(); }
                                        m = new RobotRaconteurWeb.MessageEntry.$ctor1(RobotRaconteurWeb.MessageEntryType.WirePokeOutValueReq, this.MemberName);
                                        m.elements = this.PackPacket(value, RobotRaconteurWeb.TimeSpec.Now);
                                        $task1 = this.stub.ProcessRequest(m, cancel);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            }
        }
    }; });

    Bridge.define("RobotRaconteurWeb.WireDefinition", {
        inherits: [RobotRaconteurWeb.MemberDefinition],
        fields: {
            Type: null
        },
        props: {
            Direction: {
                get: function () {
                    return RobotRaconteurWeb.MemberDefinition.MemberDefinition_GetDirection(this.Modifiers);
                }
            }
        },
        ctors: {
            ctor: function (ServiceEntry) {
                this.$initialize();
                RobotRaconteurWeb.MemberDefinition.ctor.call(this, ServiceEntry);
            }
        },
        methods: {
            toString: function () {
                return RobotRaconteurWeb.MemberDefinition.MemberDefinition_ToStringFormat1("wire", this, this.Type);
            },
            FromString: function (s) {
                RobotRaconteurWeb.MemberDefinition.MemberDefinition_FromStringFormat1$1(s, "wire", this, Bridge.ref(this, "Type"));
            },
            Reset: function () {
                RobotRaconteurWeb.MemberDefinition.prototype.Reset.call(this);
                RobotRaconteurWeb.TypeDefinition.op_Inequality(this.Type, null) ? this.Type.Reset() : null;
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.WireServer$1", function (T) { return {
        inherits: [RobotRaconteurWeb.Wire$1(T)],
        fields: {
            m_MemberName: null,
            skel: null,
            connections: null,
            connect_callback: null,
            PeekInValueCallback: null,
            PeekOutValueCallback: null,
            PokeOutValueCallback: null,
            connectionslock: null
        },
        props: {
            MemberName: {
                get: function () {
                    return this.m_MemberName;
                }
            },
            WireConnectCallback: {
                get: function () {
                    return this.connect_callback;
                },
                set: function (value) {
                    this.connect_callback = value;
                }
            }
        },
        ctors: {
            init: function () {
                this.connections = new (System.Collections.Generic.Dictionary$2(System.UInt32,RobotRaconteurWeb.Wire$1.WireConnection(T))).ctor();
                this.connectionslock = { };
            },
            ctor: function (name, skel) {
                this.$initialize();
                RobotRaconteurWeb.Wire$1(T).ctor.call(this);
                this.m_MemberName = name;
                this.skel = skel;

            }
        },
        methods: {
            Connect: function (cancel) {
                if (cancel === void 0) { cancel = new System.Threading.CancellationToken(); }
                throw new System.InvalidOperationException.$ctor1("Cannot connect from server side");
            },
            WirePacketReceived: function (m, e) {
                if (e === void 0) { e = null; }
                if (m.EntryType === RobotRaconteurWeb.MessageEntryType.WirePacket) {
                    try {
                        this.DispatchPacket(m.elements, this.connections.getItem(e.LocalEndpoint));
                    } catch ($e1) {
                        $e1 = System.Exception.create($e1);
                    }

                }
            },
            WireCommand: function (m, e) {
                this.connectionslock;
                {
                    switch (m.EntryType) {
                        case RobotRaconteurWeb.MessageEntryType.WireConnectReq: 
                            {
                                if (!this.connections.containsKey(e.LocalEndpoint)) {
                                    this.connections.add(e.LocalEndpoint, new (RobotRaconteurWeb.Wire$1.WireConnection(T))(this, e));
                                }
                                var con = this.connections.getItem(e.LocalEndpoint);
                                if (!Bridge.staticEquals(this.connect_callback, null)) {
                                    this.connect_callback(this, con);
                                }

                                var ret = new RobotRaconteurWeb.MessageEntry.$ctor1(RobotRaconteurWeb.MessageEntryType.WireConnectRet, this.MemberName);
                                return System.Threading.Tasks.Task.fromResult(ret, RobotRaconteurWeb.MessageEntry);
                            }
                        case RobotRaconteurWeb.MessageEntryType.WireDisconnectReq: 
                            {
                                if (!this.connections.containsKey(e.LocalEndpoint)) {
                                    throw new RobotRaconteurWeb.ServiceException("Invalid wire connection");
                                }
                                this.connections.remove(e.LocalEndpoint);
                                return System.Threading.Tasks.Task.fromResult(new RobotRaconteurWeb.MessageEntry.$ctor1(RobotRaconteurWeb.MessageEntryType.WireDisconnectRet, this.MemberName), RobotRaconteurWeb.MessageEntry);
                            }
                        case RobotRaconteurWeb.MessageEntryType.WirePeekInValueReq: 
                            {
                                if (this.direction === RobotRaconteurWeb.MemberDefinition_Direction.writeonly) {
                                    throw new RobotRaconteurWeb.WriteOnlyMemberException("Write only member");
                                }
                                var value = this.PeekInValueCallback(e.LocalEndpoint);
                                var mr_dat = this.PackPacket(value, RobotRaconteurWeb.TimeSpec.Now);
                                var mr = new RobotRaconteurWeb.MessageEntry.$ctor1(RobotRaconteurWeb.MessageEntryType.WirePeekInValueRet, this.MemberName);
                                mr.elements = mr_dat;
                                return System.Threading.Tasks.Task.fromResult(mr, RobotRaconteurWeb.MessageEntry);
                            }
                        case RobotRaconteurWeb.MessageEntryType.WirePeekOutValueReq: 
                            {
                                if (this.direction === RobotRaconteurWeb.MemberDefinition_Direction.readonly_) {
                                    throw new RobotRaconteurWeb.ReadOnlyMemberException("Read only member");
                                }
                                var value1 = this.PeekOutValueCallback(e.LocalEndpoint);
                                var mr_dat1 = this.PackPacket(value1, RobotRaconteurWeb.TimeSpec.Now);
                                var mr1 = new RobotRaconteurWeb.MessageEntry.$ctor1(RobotRaconteurWeb.MessageEntryType.WirePeekOutValueRet, this.MemberName);
                                mr1.elements = mr_dat1;
                                return System.Threading.Tasks.Task.fromResult(mr1, RobotRaconteurWeb.MessageEntry);
                            }
                        case RobotRaconteurWeb.MessageEntryType.WirePokeOutValueReq: 
                            {
                                if (this.direction === RobotRaconteurWeb.MemberDefinition_Direction.readonly_) {
                                    throw new RobotRaconteurWeb.ReadOnlyMemberException("Read only member");
                                }
                                var ts = { };
                                var value2 = this.UnpackPacket(m.elements, ts);
                                this.PokeOutValueCallback(value2, ts.v, e.LocalEndpoint);
                                var mr2 = new RobotRaconteurWeb.MessageEntry.$ctor1(RobotRaconteurWeb.MessageEntryType.WirePokeOutValueRet, this.MemberName);
                                return System.Threading.Tasks.Task.fromResult(mr2, RobotRaconteurWeb.MessageEntry);
                            }
                        default: 
                            throw new System.InvalidOperationException.$ctor1("Invalid Command");
                    }
                }
            },
            Close: function (c, ee, cancel) {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    m, 
                    $e1, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        if (cancel === void 0) { cancel = new System.Threading.CancellationToken(); }
                                        m = new RobotRaconteurWeb.MessageEntry.$ctor1(RobotRaconteurWeb.MessageEntryType.WireClosed, this.MemberName);

                                        $task1 = this.skel.SendWireMessage(m, ee, cancel);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        try {
                                            this.connectionslock;
                                            {
                                                if (this.connections.containsKey(c.Endpoint)) {
                                                    this.connections.remove(c.Endpoint);
                                                }
                                            }
                                        } catch ($e1) {
                                            $e1 = System.Exception.create($e1);
                                        }
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            SendWirePacket: function (packet, time, e) {
                if (e === void 0) { e = null; }
                if (!this.connections.containsKey(e.LocalEndpoint)) {
                    throw new System.Exception("Wire has been disconnected");
                }
                var el = this.PackPacket(packet, time);
                var m = new RobotRaconteurWeb.MessageEntry.$ctor1(RobotRaconteurWeb.MessageEntryType.WirePacket, this.MemberName);
                m.elements = el;

                RobotRaconteurWeb.Extensions.Extensions.IgnoreResult(this.skel.SendWireMessage(m, e, Bridge.getDefaultValue(System.Threading.CancellationToken)));
            },
            Shutdown: function () {
                var $t, $t1;
                var cons = ($t = RobotRaconteurWeb.Wire$1.WireConnection(T), System.Linq.Enumerable.from(this.connections.Values, $t).ToArray($t));
                $t1 = Bridge.getEnumerator(cons);
                try {
                    while ($t1.moveNext()) {
                        var con = $t1.Current;
                        try {
                            con.RemoteClose();
                        } catch ($e1) {
                            $e1 = System.Exception.create($e1);
                        }
                    }
                } finally {
                    if (Bridge.is($t1, System.IDisposable)) {
                        $t1.System$IDisposable$Dispose();
                    }
                }
            },
            PackVarType: function (o) {
                return this.skel.RRContext.PackVarType(o);
            },
            UnpackVarType: function (o) {
                return this.skel.RRContext.UnpackVarType(o);
            },
            PeekInValue: function (cancel) {
                if (cancel === void 0) { cancel = new System.Threading.CancellationToken(); }
                throw new System.InvalidOperationException.$ctor1("Invalid for wire server");
            },
            PeekOutValue: function (cancel) {
                if (cancel === void 0) { cancel = new System.Threading.CancellationToken(); }
                throw new System.InvalidOperationException.$ctor1("Invalid for wire server");
            },
            PokeOutValue: function (value, cancel) {
                if (cancel === void 0) { cancel = new System.Threading.CancellationToken(); }
                throw new System.InvalidOperationException.$ctor1("Invalid for wire server");
            }
        }
    }; });

    Bridge.define("RobotRaconteurWeb.WriteOnlyMemberException", {
        inherits: [RobotRaconteurWeb.RobotRaconteurException],
        ctors: {
            ctor: function (message) {
                this.$initialize();
                RobotRaconteurWeb.RobotRaconteurException.$ctor1.call(this, RobotRaconteurWeb.MessageErrorType.WriteOnlyMember, "RobotRaconteur.WriteOnlyMember", message);
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.ArrayMemoryClient$1", function (T) { return {
        inherits: [RobotRaconteurWeb.ArrayMemory$1(T)],
        fields: {
            impl: null
        },
        props: {
            MemberName: {
                get: function () {
                    return this.impl.MemberName;
                }
            },
            Direction: {
                get: function () {
                    return this.impl.Direction;
                }
            }
        },
        ctors: {
            ctor: function (membername, stub, direction) {
                if (direction === void 0) { direction = 2; }

                this.$initialize();
                RobotRaconteurWeb.ArrayMemory$1(T).ctor.call(this);
                this.impl = new (RobotRaconteurWeb.ArrayMemoryClientImpl$1(T))(membername, stub, direction);
            }
        },
        methods: {
            Attach: function (memory) {
                throw new System.InvalidOperationException.ctor();
            },
            GetLength: function (cancel) {
                if (cancel === void 0) { cancel = new System.Threading.CancellationToken(); }
                return this.impl.GetLength();
            },
            GetMaxTransferSize: function (cancel) {
                return this.impl.GetMaxTransferSize();
            },
            Read: function (memorypos, buffer, bufferpos, count, cancel) {
                if (cancel === void 0) { cancel = new System.Threading.CancellationToken(); }
                return this.impl.ReadImpl(memorypos, buffer, bufferpos, count, cancel);
            },
            Write: function (memorypos, buffer, bufferpos, count, cancel) {
                if (cancel === void 0) { cancel = new System.Threading.CancellationToken(); }
                return this.impl.WriteImpl(memorypos, buffer, bufferpos, count, cancel);
            }
        }
    }; });

    Bridge.define("RobotRaconteurWeb.BrowserWebSocketClientTransport", {
        inherits: [RobotRaconteurWeb.AsyncStreamTransport],
        fields: {
            websocket: null,
            parenttransport: null,
            LastMessageReceivedTime: null,
            connecturl: null
        },
        ctors: {
            init: function () {
                this.LastMessageReceivedTime = System.DateTime.getDefaultValue();
                this.LastMessageReceivedTime = System.DateTime.getUtcNow();
            },
            ctor: function (c) {
                this.$initialize();
                RobotRaconteurWeb.AsyncStreamTransport.ctor.call(this, c.node, c.parent_adapter);
                this.parenttransport = c;
            }
        },
        methods: {
            ConnectTransport: function (url, e, cancel) {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    u, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        if (cancel === void 0) { cancel = new System.Threading.CancellationToken(); }
                                        this.connecturl = url;

                                        u = RobotRaconteurWeb.TransportUtil.ParseConnectionUrl(url);

                                        if (Bridge.referenceEquals(u.host, "")) {
                                            throw new RobotRaconteurWeb.ConnectionException("Invalid connection URL for TCP");
                                        }

                                        $task1 = this.ConnectWebsocketTransport(url, e, cancel);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            ConnectWebsocketTransport: function (url, e, cancel) {
                var $step = 0,
                    $task1, 
                    $task2, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    u, 
                    http_scheme, 
                    u2, 
                    target_nodeid, 
                    target_nodename, 
                    socket1, 
                    socket2, 
                    webstream, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2], $step);
                                switch ($step) {
                                    case 0: {
                                        if (cancel === void 0) { cancel = new System.Threading.CancellationToken(); }
                                        u = RobotRaconteurWeb.TransportUtil.ParseConnectionUrl(url);
                                        /* Uri u = new Uri(url);

                                        string ap = Uri.UnescapeDataString(u.AbsolutePath);
                                        if (ap[0] == '/')
                                           ap = ap.Remove(0, 1);

                                        string[] s = ap.Split(new char[] { '/' }, StringSplitOptions.RemoveEmptyEntries);*/

                                        http_scheme = "ws";
                                        if (System.String.endsWith(u.scheme, "wss")) {
                                            http_scheme = "wss";
                                        }

                                        u2 = new System.Uri(RobotRaconteurWeb.Extensions.Extensions.ReplaceFirst(url, (u.scheme || "") + "://", (http_scheme || "") + "://"));


                                        target_nodeid = null;
                                        target_nodename = null;

                                        this.m_LocalEndpoint = e.LocalEndpoint;

                                        this.websocket = null;

                                        socket1 = new System.Net.WebSockets.ClientWebSocket();
                                        socket2 = socket1;
                                        socket2.options.addSubProtocol("robotraconteur.robotraconteur.com");
                                        $task1 = RobotRaconteurWeb.Extensions.Extensions.AwaitWithTimeout(socket1.connectAsync(u2, cancel), this.parenttransport.DefaultConnectTimeout);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        this.websocket = socket1;


                                        this.m_Connected = true;
                                        webstream = new RobotRaconteurWeb.WebSocketStreamWrapper(this.websocket);
                                        $task2 = this.ConnectStream(webstream, false, target_nodeid, target_nodename, false, false, this.parenttransport.HeartbeatPeriod, cancel);
                                        $step = 2;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $task2.getAwaitedResult();
                                        this.parenttransport.TransportConnections.add(this.LocalEndpoint, this);
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            GetConnectionURL: function () {
                return this.connecturl;
            }
        }
    });

    Bridge.define("RobotRaconteurWeb.MultiDimArrayMemoryClient$1", function (T) { return {
        inherits: [RobotRaconteurWeb.MultiDimArrayMemory$1(T)],
        fields: {
            impl: null
        },
        props: {
            MemberName: {
                get: function () {
                    return this.impl.MemberName;
                }
            },
            Direction: {
                get: function () {
                    return this.impl.Direction;
                }
            }
        },
        ctors: {
            ctor: function (membername, stub, direction) {
                if (direction === void 0) { direction = 2; }

                this.$initialize();
                RobotRaconteurWeb.MultiDimArrayMemory$1(T).ctor.call(this);
                this.impl = new (RobotRaconteurWeb.MultiDimArrayMemoryClientImpl$1(T))(membername, stub, direction);
            }
        },
        methods: {
            Attach: function (memory) {
                throw new System.InvalidOperationException.ctor();
            },
            GetDimensions: function (cancel) {
                if (cancel === void 0) { cancel = new System.Threading.CancellationToken(); }
                return this.impl.GetDimensions(cancel);
            },
            GetDimCount: function (cancel) {
                if (cancel === void 0) { cancel = new System.Threading.CancellationToken(); }
                return this.impl.GetDimCount(cancel);
            },
            GetMaxTransferSize: function (cancel) {
                if (cancel === void 0) { cancel = new System.Threading.CancellationToken(); }
                return this.impl.GetMaxTransferSize(cancel);
            },
            Read: function (memorypos, buffer, bufferpos, count, cancel) {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        if (cancel === void 0) { cancel = new System.Threading.CancellationToken(); }
                                        $task1 = this.impl.ReadImpl(memorypos, buffer, bufferpos, count, cancel);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            Write: function (memorypos, buffer, bufferpos, count, cancel) {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        if (cancel === void 0) { cancel = new System.Threading.CancellationToken(); }
                                        $task1 = this.impl.WriteImpl(memorypos, buffer, bufferpos, count, cancel);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            }
        }
    }; });

    Bridge.define("RobotRaconteurWeb.NamedArrayMemory$1", function (T) { return {
        inherits: [RobotRaconteurWeb.ArrayMemory$1(T)],
        ctors: {
            ctor: function () {
                this.$initialize();
                RobotRaconteurWeb.ArrayMemory$1(T).ctor.call(this);
            },
            $ctor1: function (memory) {
                this.$initialize();
                RobotRaconteurWeb.ArrayMemory$1(T).$ctor1.call(this, memory);
            }
        }
    }; });

    Bridge.define("RobotRaconteurWeb.NamedArrayStub$2", function (T, U) { return {
        inherits: [RobotRaconteurWeb.INamedArrayStub$1(T)],
        alias: [
            "PackNamedArrayStructToArray", "RobotRaconteurWeb$INamedArrayStub$1$" + Bridge.getTypeAlias(T) + "$PackNamedArrayStructToArray",
            "PackNamedArray$1", "RobotRaconteurWeb$INamedArrayStub$1$" + Bridge.getTypeAlias(T) + "$PackNamedArray$1",
            "PackNamedMultiDimArray", "RobotRaconteurWeb$INamedArrayStub$1$" + Bridge.getTypeAlias(T) + "$PackNamedMultiDimArray",
            "UnpackNamedArrayStructFromArray", "RobotRaconteurWeb$INamedArrayStub$1$" + Bridge.getTypeAlias(T) + "$UnpackNamedArrayStructFromArray",
            "UnpackNamedArray$1", "RobotRaconteurWeb$INamedArrayStub$1$" + Bridge.getTypeAlias(T) + "$UnpackNamedArray$1",
            "UnpackNamedMultiDimArray", "RobotRaconteurWeb$INamedArrayStub$1$" + Bridge.getTypeAlias(T) + "$UnpackNamedMultiDimArray",
            "PackNamedArray", "RobotRaconteurWeb$INamedArrayStub$PackNamedArray",
            "UnpackNamedArray", "RobotRaconteurWeb$INamedArrayStub$UnpackNamedArray"
        ],
        methods: {
            PackNamedArrayStructToArray: function (s2) {
                var mm = new (System.Collections.Generic.List$1(RobotRaconteurWeb.MessageElement)).ctor();
                RobotRaconteurWeb.MessageElementUtil.AddMessageElement$3(mm, RobotRaconteurWeb.MessageElementUtil.NewMessageElement$1("array", this.GetNumericArrayFromNamedArrayStruct(s2)));

                return new RobotRaconteurWeb.MessageElementNamedArray(this.TypeName, mm);
            },
            PackNamedArray$1: function (s2) {
                if (s2 == null) {
                    return null;
                }
                var mm = new (System.Collections.Generic.List$1(RobotRaconteurWeb.MessageElement)).ctor();
                RobotRaconteurWeb.MessageElementUtil.AddMessageElement$3(mm, RobotRaconteurWeb.MessageElementUtil.NewMessageElement$1("array", this.GetNumericArrayFromNamedArray(s2)));

                return new RobotRaconteurWeb.MessageElementNamedArray(this.TypeName, mm);
            },
            PackNamedArray: function (s) {
                if (Bridge.is(s, T)) {
                    var s2 = { v : System.Nullable.getValue(Bridge.cast(Bridge.unbox(s, T), T)) };
                    return this.PackNamedArrayStructToArray(s2);
                }

                var s3 = Bridge.as(s, System.Array.type(T));
                if (s3 != null) {
                    return this.PackNamedArray$1(s3);
                }

                var s4 = Bridge.as(s, RobotRaconteurWeb.NamedMultiDimArray);
                if (s4 != null) {
                    return this.PackNamedMultiDimArray(s4);
                }

                throw new RobotRaconteurWeb.DataTypeException("Unexpected message element type for PackNamedArray");
            },
            PackNamedMultiDimArray: function (s3) {
                if (s3 == null) {
                    return null;
                }
                var l = new (System.Collections.Generic.List$1(RobotRaconteurWeb.MessageElement)).ctor();

                RobotRaconteurWeb.MessageElementUtil.AddMessageElement$5(l, "dims", s3.Dims);
                RobotRaconteurWeb.MessageElementUtil.AddMessageElement$5(l, "array", this.PackNamedArray$1(Bridge.cast(s3.namedarray_array, System.Array.type(T))));
                return new RobotRaconteurWeb.MessageElementNamedMultiDimArray(this.TypeName, l);
            },
            UnpackNamedArrayStructFromArray: function (s2) {
                if (!Bridge.referenceEquals(s2.Type, this.TypeName)) {
                    throw new RobotRaconteurWeb.DataTypeException("namedarray type mismatch");
                }
                var cdataElements = s2.Elements;
                if (cdataElements.Count !== 1) {
                    throw new RobotRaconteurWeb.DataTypeException("pod type mismatch");
                }
                var a = RobotRaconteurWeb.MessageElementUtil.FindElementAndCast(System.Array.type(U), cdataElements, "array");
                return this.GetNamedArrayStructFromNumericArray(a);
            },
            UnpackNamedArray$1: function (s2) {
                if (!Bridge.referenceEquals(s2.Type, this.TypeName)) {
                    throw new RobotRaconteurWeb.DataTypeException("namedarray type mismatch");
                }
                var cdataElements = s2.Elements;
                if (cdataElements.Count !== 1) {
                    throw new RobotRaconteurWeb.DataTypeException("pod type mismatch");
                }
                var a = RobotRaconteurWeb.MessageElementUtil.FindElementAndCast(System.Array.type(U), cdataElements, "array");
                return this.GetNamedArrayFromNumericArray(a);
            },
            UnpackNamedArray: function (m) {
                /* var m2 = m as MessageElementPod;
                if (m2 != null)
                {

                   return UnpackPod(m2);           
                }*/

                var m3 = Bridge.as(m, RobotRaconteurWeb.MessageElementNamedArray);
                if (m3 != null) {
                    return this.UnpackNamedArray$1(m3);
                }

                var m4 = Bridge.as(m, RobotRaconteurWeb.MessageElementNamedMultiDimArray);
                if (m4 != null) {
                    return this.UnpackNamedMultiDimArray(m4);
                }

                throw new RobotRaconteurWeb.DataTypeException("Unexpected message element type for UnpackNamedArray");
            },
            UnpackNamedMultiDimArray: function (s3) {
                if (!Bridge.referenceEquals(s3.Type, this.TypeName)) {
                    throw new RobotRaconteurWeb.DataTypeException("pod type mismatch");
                }
                var o = new RobotRaconteurWeb.NamedMultiDimArray.ctor();
                var marrayElements = s3.Elements;
                o.Dims = (RobotRaconteurWeb.MessageElementUtil.FindElementAndCast(System.Array.type(System.UInt32), marrayElements, "dims"));
                var s2 = (RobotRaconteurWeb.MessageElementUtil.FindElementAndCast(RobotRaconteurWeb.MessageElementNamedArray, marrayElements, "array"));
                o.namedarray_array = this.UnpackNamedArray$1(s2);
                return o;
            }
        }
    }; });

    Bridge.define("RobotRaconteurWeb.NamedMultiDimArrayMemoryClient$1", function (T) { return {
        inherits: [RobotRaconteurWeb.NamedMultiDimArrayMemory$1(T)],
        fields: {
            impl: null
        },
        props: {
            MemberName: {
                get: function () {
                    return this.impl.MemberName;
                }
            },
            Direction: {
                get: function () {
                    return this.impl.Direction;
                }
            }
        },
        ctors: {
            ctor: function (membername, stub, element_size, direction) {
                if (direction === void 0) { direction = 2; }

                this.$initialize();
                RobotRaconteurWeb.NamedMultiDimArrayMemory$1(T).ctor.call(this);
                this.impl = new (RobotRaconteurWeb.NamedMultiDimArrayMemoryClientImpl$1(T))(membername, stub, element_size, direction);
            }
        },
        methods: {
            Attach: function (memory) {
                throw new System.InvalidOperationException.ctor();
            },
            GetDimensions: function (cancel) {
                if (cancel === void 0) { cancel = new System.Threading.CancellationToken(); }
                return this.impl.GetDimensions(cancel);
            },
            GetDimCount: function (cancel) {
                if (cancel === void 0) { cancel = new System.Threading.CancellationToken(); }
                return this.impl.GetDimCount(cancel);
            },
            GetMaxTransferSize: function (cancel) {
                if (cancel === void 0) { cancel = new System.Threading.CancellationToken(); }
                return this.impl.GetMaxTransferSize(cancel);
            },
            Read: function (memorypos, buffer, bufferpos, count, cancel) {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        if (cancel === void 0) { cancel = new System.Threading.CancellationToken(); }
                                        $task1 = this.impl.ReadImpl(memorypos, buffer, bufferpos, count, cancel);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            Write: function (memorypos, buffer, bufferpos, count, cancel) {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        if (cancel === void 0) { cancel = new System.Threading.CancellationToken(); }
                                        $task1 = this.impl.WriteImpl(memorypos, buffer, bufferpos, count, cancel);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            }
        }
    }; });

    Bridge.define("RobotRaconteurWeb.PodArrayMemory$1", function (T) { return {
        inherits: [RobotRaconteurWeb.ArrayMemory$1(T)],
        ctors: {
            ctor: function () {
                this.$initialize();
                RobotRaconteurWeb.ArrayMemory$1(T).ctor.call(this);
            },
            $ctor1: function (memory) {
                this.$initialize();
                RobotRaconteurWeb.ArrayMemory$1(T).$ctor1.call(this, memory);
            }
        }
    }; });

    Bridge.define("RobotRaconteurWeb.PodMultiDimArrayMemoryClient$1", function (T) { return {
        inherits: [RobotRaconteurWeb.PodMultiDimArrayMemory$1(T)],
        fields: {
            impl: null
        },
        props: {
            MemberName: {
                get: function () {
                    return this.impl.MemberName;
                }
            },
            Direction: {
                get: function () {
                    return this.impl.Direction;
                }
            }
        },
        ctors: {
            ctor: function (membername, stub, element_size, direction) {
                if (direction === void 0) { direction = 2; }

                this.$initialize();
                RobotRaconteurWeb.PodMultiDimArrayMemory$1(T).ctor.call(this);
                this.impl = new (RobotRaconteurWeb.PodMultiDimArrayMemoryClientImpl$1(T))(membername, stub, element_size, direction);
            }
        },
        methods: {
            Attach: function (memory) {
                throw new System.InvalidOperationException.ctor();
            },
            GetDimensions: function (cancel) {
                if (cancel === void 0) { cancel = new System.Threading.CancellationToken(); }
                return this.impl.GetDimensions(cancel);
            },
            GetDimCount: function (cancel) {
                if (cancel === void 0) { cancel = new System.Threading.CancellationToken(); }
                return this.impl.GetDimCount(cancel);
            },
            GetMaxTransferSize: function (cancel) {
                if (cancel === void 0) { cancel = new System.Threading.CancellationToken(); }
                return this.impl.GetMaxTransferSize(cancel);
            },
            Read: function (memorypos, buffer, bufferpos, count, cancel) {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        if (cancel === void 0) { cancel = new System.Threading.CancellationToken(); }
                                        $task1 = this.impl.ReadImpl(memorypos, buffer, bufferpos, count, cancel);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            Write: function (memorypos, buffer, bufferpos, count, cancel) {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        if (cancel === void 0) { cancel = new System.Threading.CancellationToken(); }
                                        $task1 = this.impl.WriteImpl(memorypos, buffer, bufferpos, count, cancel);
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            }
        }
    }; });

    Bridge.define("RobotRaconteurWeb.NamedArrayMemoryClient$1", function (T) { return {
        inherits: [RobotRaconteurWeb.NamedArrayMemory$1(T)],
        fields: {
            impl: null
        },
        props: {
            MemberName: {
                get: function () {
                    return this.impl.MemberName;
                }
            },
            Direction: {
                get: function () {
                    return this.impl.Direction;
                }
            }
        },
        ctors: {
            ctor: function (membername, stub, element_size, direction) {
                if (direction === void 0) { direction = 2; }

                this.$initialize();
                RobotRaconteurWeb.NamedArrayMemory$1(T).ctor.call(this);
                this.impl = new (RobotRaconteurWeb.NamedArrayMemoryClientImpl$1(T))(membername, stub, element_size, direction);
            }
        },
        methods: {
            Attach: function (memory) {
                throw new System.InvalidOperationException.ctor();
            },
            GetLength: function (cancel) {
                if (cancel === void 0) { cancel = new System.Threading.CancellationToken(); }
                return this.impl.GetLength();
            },
            GetMaxTransferSize: function (cancel) {
                return this.impl.GetMaxTransferSize();
            },
            Read: function (memorypos, buffer, bufferpos, count, cancel) {
                if (cancel === void 0) { cancel = new System.Threading.CancellationToken(); }
                return this.impl.ReadImpl(memorypos, buffer, bufferpos, count, cancel);
            },
            Write: function (memorypos, buffer, bufferpos, count, cancel) {
                if (cancel === void 0) { cancel = new System.Threading.CancellationToken(); }
                return this.impl.WriteImpl(memorypos, buffer, bufferpos, count, cancel);
            }
        }
    }; });

    Bridge.define("RobotRaconteurWeb.PodArrayMemoryClient$1", function (T) { return {
        inherits: [RobotRaconteurWeb.PodArrayMemory$1(T)],
        fields: {
            impl: null
        },
        props: {
            MemberName: {
                get: function () {
                    return this.impl.MemberName;
                }
            },
            Direction: {
                get: function () {
                    return this.impl.Direction;
                }
            }
        },
        ctors: {
            ctor: function (membername, stub, element_size, direction) {
                if (direction === void 0) { direction = 2; }

                this.$initialize();
                RobotRaconteurWeb.PodArrayMemory$1(T).ctor.call(this);
                this.impl = new (RobotRaconteurWeb.PodArrayMemoryClientImpl$1(T))(membername, stub, element_size, direction);
            }
        },
        methods: {
            Attach: function (memory) {
                throw new System.InvalidOperationException.ctor();
            },
            GetLength: function (cancel) {
                if (cancel === void 0) { cancel = new System.Threading.CancellationToken(); }
                return this.impl.GetLength();
            },
            GetMaxTransferSize: function (cancel) {
                return this.impl.GetMaxTransferSize();
            },
            Read: function (memorypos, buffer, bufferpos, count, cancel) {
                if (cancel === void 0) { cancel = new System.Threading.CancellationToken(); }
                return this.impl.ReadImpl(memorypos, buffer, bufferpos, count, cancel);
            },
            Write: function (memorypos, buffer, bufferpos, count, cancel) {
                if (cancel === void 0) { cancel = new System.Threading.CancellationToken(); }
                return this.impl.WriteImpl(memorypos, buffer, bufferpos, count, cancel);
            }
        }
    }; });

    var $m = Bridge.setMetadata,
        $n = ["RobotRaconteurWeb","System","RobotRaconteurServiceIndex","System.Collections.Generic","System.Threading","System.Threading.Tasks","System.Net.WebSockets","System.IO","System.Text.RegularExpressions"];
    $m("RobotRaconteurServiceIndex.RobotRaconteurServiceIndexFactory", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[0].RobotRaconteurNode],"pi":[{"n":"node","dv":null,"o":true,"pt":$n[0].RobotRaconteurNode,"ps":0}],"sn":"ctor"},{"ov":true,"a":2,"n":"CreateSkel","t":8,"pi":[{"n":"path","pt":$n[1].String,"ps":0},{"n":"obj","pt":$n[1].Object,"ps":1},{"n":"context","pt":$n[0].ServerContext,"ps":2}],"sn":"CreateSkel","rt":$n[0].ServiceSkel,"p":[$n[1].String,$n[1].Object,$n[0].ServerContext]},{"ov":true,"a":2,"n":"CreateStub","t":8,"pi":[{"n":"objecttype","pt":$n[1].String,"ps":0},{"n":"path","pt":$n[1].String,"ps":1},{"n":"context","pt":$n[0].ClientContext,"ps":2}],"sn":"CreateStub","rt":$n[0].ServiceStub,"p":[$n[1].String,$n[1].String,$n[0].ClientContext]},{"ov":true,"a":2,"n":"DefString","t":8,"sn":"DefString","rt":$n[1].String},{"ov":true,"a":2,"n":"FindNamedArrayStub","t":8,"pi":[{"n":"objecttype","pt":$n[1].String,"ps":0}],"sn":"FindNamedArrayStub","rt":$n[0].INamedArrayStub,"p":[$n[1].String]},{"ov":true,"a":2,"n":"FindPodStub","t":8,"pi":[{"n":"objecttype","pt":$n[1].String,"ps":0}],"sn":"FindPodStub","rt":$n[0].IPodStub,"p":[$n[1].String]},{"ov":true,"a":2,"n":"FindStructureStub","t":8,"pi":[{"n":"objecttype","pt":$n[1].String,"ps":0}],"sn":"FindStructureStub","rt":$n[0].IStructureStub,"p":[$n[1].String]},{"ov":true,"a":2,"n":"GetServiceName","t":8,"sn":"GetServiceName","rt":$n[1].String},{"ov":true,"a":2,"n":"PackStructure","t":8,"pi":[{"n":"s","pt":$n[1].Object,"ps":0}],"sn":"PackStructure","rt":$n[0].MessageElementStructure,"p":[$n[1].Object]},{"ov":true,"a":2,"n":"UnpackStructure","t":8,"pi":[{"n":"l","pt":$n[0].MessageElementStructure,"ps":0}],"tpc":1,"tprm":["T"],"sn":"UnpackStructure","rt":System.Object,"p":[$n[0].MessageElementStructure]},{"a":2,"n":"NodeInfo_stubentry","t":4,"rt":$n[2].NodeInfo_stub,"sn":"NodeInfo_stubentry"},{"a":2,"n":"ServiceInfo_stubentry","t":4,"rt":$n[2].ServiceInfo_stub,"sn":"ServiceInfo_stubentry"}]}; }, $n);
    $m("RobotRaconteurServiceIndex.NodeInfo", function () { return {"att":1048577,"a":2,"at":[new RobotRaconteurWeb.RobotRaconteurServiceStruct("RobotRaconteurServiceIndex.NodeInfo")],"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"NodeID","t":4,"rt":$n[1].Array.type(System.Byte),"sn":"NodeID"},{"a":2,"n":"NodeName","t":4,"rt":$n[1].String,"sn":"NodeName"},{"a":2,"n":"ServiceIndexConnectionURL","t":4,"rt":$n[3].Dictionary$2(System.Int32,System.String),"sn":"ServiceIndexConnectionURL"}]}; }, $n);
    $m("RobotRaconteurServiceIndex.ServiceInfo", function () { return {"att":1048577,"a":2,"at":[new RobotRaconteurWeb.RobotRaconteurServiceStruct("RobotRaconteurServiceIndex.ServiceInfo")],"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"Attributes","t":4,"rt":$n[3].Dictionary$2(System.String,System.Object),"sn":"Attributes"},{"a":2,"n":"ConnectionURL","t":4,"rt":$n[3].Dictionary$2(System.Int32,System.String),"sn":"ConnectionURL"},{"a":2,"n":"Name","t":4,"rt":$n[1].String,"sn":"Name"},{"a":2,"n":"RootObjectImplements","t":4,"rt":$n[3].Dictionary$2(System.Int32,System.String),"sn":"RootObjectImplements"},{"a":2,"n":"RootObjectType","t":4,"rt":$n[1].String,"sn":"RootObjectType"}]}; }, $n);
    $m("RobotRaconteurServiceIndex.ServiceIndex", function () { return {"att":161,"a":2,"at":[new RobotRaconteurWeb.RobotRaconteurServiceObjectInterface("RobotRaconteurServiceIndex.ServiceIndex")],"m":[{"ab":true,"a":2,"n":"GetDetectedNodes","t":8,"pi":[{"n":"rr_cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":0}],"sn":"RobotRaconteurServiceIndex$ServiceIndex$GetDetectedNodes","rt":$n[5].Task$1(System.Collections.Generic.Dictionary$2(System.Int32,RobotRaconteurServiceIndex.NodeInfo)),"p":[$n[4].CancellationToken]},{"ab":true,"a":2,"n":"GetLocalNodeServices","t":8,"pi":[{"n":"rr_cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":0}],"sn":"RobotRaconteurServiceIndex$ServiceIndex$GetLocalNodeServices","rt":$n[5].Task$1(System.Collections.Generic.Dictionary$2(System.Int32,RobotRaconteurServiceIndex.ServiceInfo)),"p":[$n[4].CancellationToken]},{"ab":true,"a":2,"n":"GetRoutedNodes","t":8,"pi":[{"n":"rr_cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":0}],"sn":"RobotRaconteurServiceIndex$ServiceIndex$GetRoutedNodes","rt":$n[5].Task$1(System.Collections.Generic.Dictionary$2(System.Int32,RobotRaconteurServiceIndex.NodeInfo)),"p":[$n[4].CancellationToken]},{"ab":true,"a":2,"n":"LocalNodeServicesChanged","t":2,"ad":{"ab":true,"a":2,"n":"add_LocalNodeServicesChanged","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"RobotRaconteurServiceIndex$ServiceIndex$addLocalNodeServicesChanged","rt":$n[1].Void,"p":[Function]},"r":{"ab":true,"a":2,"n":"remove_LocalNodeServicesChanged","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"RobotRaconteurServiceIndex$ServiceIndex$removeLocalNodeServicesChanged","rt":$n[1].Void,"p":[Function]}}]}; }, $n);
    $m("RobotRaconteurServiceIndex.NodeInfo_stub", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[2].RobotRaconteurServiceIndexFactory],"pi":[{"n":"d","pt":$n[2].RobotRaconteurServiceIndexFactory,"ps":0}],"sn":"ctor"},{"a":2,"n":"PackStructure","t":8,"pi":[{"n":"s1","pt":$n[1].Object,"ps":0}],"sn":"PackStructure","rt":$n[0].MessageElementStructure,"p":[$n[1].Object]},{"a":2,"n":"UnpackStructure","t":8,"pi":[{"n":"m","pt":$n[0].MessageElementStructure,"ps":0}],"tpc":1,"tprm":["T"],"sn":"UnpackStructure","rt":System.Object,"p":[$n[0].MessageElementStructure]},{"a":1,"n":"def","t":4,"rt":$n[2].RobotRaconteurServiceIndexFactory,"sn":"def"}]}; }, $n);
    $m("RobotRaconteurServiceIndex.ServiceInfo_stub", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[2].RobotRaconteurServiceIndexFactory],"pi":[{"n":"d","pt":$n[2].RobotRaconteurServiceIndexFactory,"ps":0}],"sn":"ctor"},{"a":2,"n":"PackStructure","t":8,"pi":[{"n":"s1","pt":$n[1].Object,"ps":0}],"sn":"PackStructure","rt":$n[0].MessageElementStructure,"p":[$n[1].Object]},{"a":2,"n":"UnpackStructure","t":8,"pi":[{"n":"m","pt":$n[0].MessageElementStructure,"ps":0}],"tpc":1,"tprm":["T"],"sn":"UnpackStructure","rt":System.Object,"p":[$n[0].MessageElementStructure]},{"a":1,"n":"def","t":4,"rt":$n[2].RobotRaconteurServiceIndexFactory,"sn":"def"}]}; }, $n);
    $m("RobotRaconteurServiceIndex.ServiceIndex_stub", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].String,$n[0].ClientContext],"pi":[{"n":"path","pt":$n[1].String,"ps":0},{"n":"c","pt":$n[0].ClientContext,"ps":1}],"sn":"ctor"},{"ov":true,"a":5,"n":"CallbackCall","t":8,"pi":[{"n":"rr_m","pt":$n[0].MessageEntry,"ps":0}],"sn":"CallbackCall","rt":$n[5].Task$1(RobotRaconteurWeb.MessageEntry),"p":[$n[0].MessageEntry]},{"ov":true,"a":5,"n":"DispatchEvent","t":8,"pi":[{"n":"rr_m","pt":$n[0].MessageEntry,"ps":0}],"sn":"DispatchEvent","rt":$n[1].Void,"p":[$n[0].MessageEntry]},{"ov":true,"a":5,"n":"DispatchPipeMessage","t":8,"pi":[{"n":"m","pt":$n[0].MessageEntry,"ps":0}],"sn":"DispatchPipeMessage","rt":$n[1].Void,"p":[$n[0].MessageEntry]},{"ov":true,"a":5,"n":"DispatchWireMessage","t":8,"pi":[{"n":"m","pt":$n[0].MessageEntry,"ps":0}],"sn":"DispatchWireMessage","rt":$n[1].Void,"p":[$n[0].MessageEntry]},{"a":2,"n":"GetDetectedNodes","t":8,"pi":[{"n":"rr_cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":0}],"sn":"GetDetectedNodes","rt":$n[5].Task$1(System.Collections.Generic.Dictionary$2(System.Int32,RobotRaconteurServiceIndex.NodeInfo)),"p":[$n[4].CancellationToken]},{"a":2,"n":"GetLocalNodeServices","t":8,"pi":[{"n":"rr_cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":0}],"sn":"GetLocalNodeServices","rt":$n[5].Task$1(System.Collections.Generic.Dictionary$2(System.Int32,RobotRaconteurServiceIndex.ServiceInfo)),"p":[$n[4].CancellationToken]},{"a":2,"n":"GetRoutedNodes","t":8,"pi":[{"n":"rr_cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":0}],"sn":"GetRoutedNodes","rt":$n[5].Task$1(System.Collections.Generic.Dictionary$2(System.Int32,RobotRaconteurServiceIndex.NodeInfo)),"p":[$n[4].CancellationToken]},{"a":2,"n":"LocalNodeServicesChanged","t":2,"ad":{"a":2,"n":"add_LocalNodeServicesChanged","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"addLocalNodeServicesChanged","rt":$n[1].Void,"p":[Function]},"r":{"a":2,"n":"remove_LocalNodeServicesChanged","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"removeLocalNodeServicesChanged","rt":$n[1].Void,"p":[Function]}}]}; }, $n);
    $m("RobotRaconteurServiceIndex.ServiceIndex_skel", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].String,$n[2].ServiceIndex,$n[0].ServerContext],"pi":[{"n":"p","pt":$n[1].String,"ps":0},{"n":"o","pt":$n[2].ServiceIndex,"ps":1},{"n":"c","pt":$n[0].ServerContext,"ps":2}],"sn":"ctor"},{"ov":true,"a":2,"n":"CallFunction","t":8,"pi":[{"n":"rr_m","pt":$n[0].MessageEntry,"ps":0}],"sn":"CallFunction","rt":$n[5].Task$1(RobotRaconteurWeb.MessageEntry),"p":[$n[0].MessageEntry]},{"ov":true,"a":2,"n":"CallGetProperty","t":8,"pi":[{"n":"m","pt":$n[0].MessageEntry,"ps":0}],"sn":"CallGetProperty","rt":$n[5].Task$1(RobotRaconteurWeb.MessageEntry),"p":[$n[0].MessageEntry]},{"ov":true,"a":2,"n":"CallMemoryFunction","t":8,"pi":[{"n":"m","pt":$n[0].MessageEntry,"ps":0},{"n":"e","pt":$n[0].Endpoint,"ps":1}],"sn":"CallMemoryFunction","rt":$n[5].Task$1(RobotRaconteurWeb.MessageEntry),"p":[$n[0].MessageEntry,$n[0].Endpoint]},{"ov":true,"a":2,"n":"CallPipeFunction","t":8,"pi":[{"n":"m","pt":$n[0].MessageEntry,"ps":0},{"n":"e","pt":$n[0].Endpoint,"ps":1}],"sn":"CallPipeFunction","rt":$n[5].Task$1(RobotRaconteurWeb.MessageEntry),"p":[$n[0].MessageEntry,$n[0].Endpoint]},{"ov":true,"a":2,"n":"CallSetProperty","t":8,"pi":[{"n":"m","pt":$n[0].MessageEntry,"ps":0}],"sn":"CallSetProperty","rt":$n[5].Task$1(RobotRaconteurWeb.MessageEntry),"p":[$n[0].MessageEntry]},{"ov":true,"a":2,"n":"CallWireFunction","t":8,"pi":[{"n":"m","pt":$n[0].MessageEntry,"ps":0},{"n":"e","pt":$n[0].Endpoint,"ps":1}],"sn":"CallWireFunction","rt":$n[5].Task$1(RobotRaconteurWeb.MessageEntry),"p":[$n[0].MessageEntry,$n[0].Endpoint]},{"ov":true,"a":2,"n":"DispatchPipeMessage","t":8,"pi":[{"n":"m","pt":$n[0].MessageEntry,"ps":0},{"n":"e","pt":$n[0].Endpoint,"ps":1}],"sn":"DispatchPipeMessage","rt":$n[1].Void,"p":[$n[0].MessageEntry,$n[0].Endpoint]},{"ov":true,"a":2,"n":"DispatchWireMessage","t":8,"pi":[{"n":"m","pt":$n[0].MessageEntry,"ps":0},{"n":"e","pt":$n[0].Endpoint,"ps":1}],"sn":"DispatchWireMessage","rt":$n[1].Void,"p":[$n[0].MessageEntry,$n[0].Endpoint]},{"ov":true,"a":2,"n":"GetCallbackFunction","t":8,"pi":[{"n":"endpoint","pt":$n[1].UInt32,"ps":0},{"n":"membername","pt":$n[1].String,"ps":1}],"sn":"GetCallbackFunction","rt":$n[1].Object,"p":[$n[1].UInt32,$n[1].String]},{"ov":true,"a":2,"n":"GetSubObj","t":8,"pi":[{"n":"name","pt":$n[1].String,"ps":0},{"n":"ind","pt":$n[1].String,"ps":1}],"sn":"GetSubObj$1","rt":$n[5].Task$1(System.Object),"p":[$n[1].String,$n[1].String]},{"ov":true,"a":2,"n":"InitCallbackServers","t":8,"pi":[{"n":"o","pt":$n[1].Object,"ps":0}],"sn":"InitCallbackServers","rt":$n[1].Void,"p":[$n[1].Object]},{"ov":true,"a":2,"n":"InitPipeServers","t":8,"pi":[{"n":"o","pt":$n[1].Object,"ps":0}],"sn":"InitPipeServers","rt":$n[1].Void,"p":[$n[1].Object]},{"a":2,"n":"LocalNodeServicesChanged_Handler","t":8,"sn":"LocalNodeServicesChanged_Handler","rt":$n[1].Void},{"ov":true,"a":2,"n":"RegisterEvents","t":8,"pi":[{"n":"obj1","pt":$n[1].Object,"ps":0}],"sn":"RegisterEvents","rt":$n[1].Void,"p":[$n[1].Object]},{"ov":true,"a":2,"n":"ReleaseCastObject","t":8,"sn":"ReleaseCastObject","rt":$n[1].Void},{"ov":true,"a":2,"n":"UnregisterEvents","t":8,"pi":[{"n":"obj1","pt":$n[1].Object,"ps":0}],"sn":"UnregisterEvents","rt":$n[1].Void,"p":[$n[1].Object]},{"a":1,"n":"obj","t":16,"rt":$n[2].ServiceIndex,"g":{"a":1,"n":"get_obj","t":8,"rt":$n[2].ServiceIndex,"fg":"obj"},"fn":"obj"},{"a":1,"n":"rr_InitPipeServersRun","t":4,"rt":$n[1].Boolean,"sn":"rr_InitPipeServersRun","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}}]}; }, $n);
    $m("RobotRaconteurWeb.BrowserWebSocketTransport", function () { return {"nested":[$n[0].BrowserWebSocketTransport.AsyncStreamTransportParentImpl],"att":1048833,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[0].RobotRaconteurNode],"pi":[{"n":"node","dv":null,"o":true,"pt":$n[0].RobotRaconteurNode,"ps":0}],"sn":"ctor"},{"ov":true,"a":2,"n":"CanConnectService","t":8,"pi":[{"n":"url","pt":$n[1].String,"ps":0}],"sn":"CanConnectService","rt":$n[1].Boolean,"p":[$n[1].String],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"ov":true,"a":2,"n":"CheckConnection","t":8,"pi":[{"n":"endpoint","pt":$n[1].UInt32,"ps":0}],"sn":"CheckConnection","rt":$n[1].Void,"p":[$n[1].UInt32]},{"ov":true,"a":2,"n":"Close","t":8,"sn":"Close","rt":$n[5].Task},{"ov":true,"a":2,"n":"CloseTransportConnection","t":8,"pi":[{"n":"e","pt":$n[0].Endpoint,"ps":0},{"n":"cancel","pt":$n[4].CancellationToken,"ps":1}],"sn":"CloseTransportConnection","rt":$n[5].Task,"p":[$n[0].Endpoint,$n[4].CancellationToken]},{"ov":true,"a":2,"n":"CreateTransportConnection","t":8,"pi":[{"n":"url","pt":$n[1].String,"ps":0},{"n":"e","pt":$n[0].Endpoint,"ps":1},{"n":"cancel","pt":$n[4].CancellationToken,"ps":2}],"sn":"CreateTransportConnection","rt":$n[5].Task$1(RobotRaconteurWeb.ITransportConnection),"p":[$n[1].String,$n[0].Endpoint,$n[4].CancellationToken]},{"ov":true,"a":5,"n":"MessageReceived","t":8,"pi":[{"n":"m","pt":$n[0].Message,"ps":0}],"sn":"MessageReceived","rt":$n[1].Void,"p":[$n[0].Message]},{"a":4,"n":"RemoveTransportConnection","t":8,"pi":[{"n":"e","pt":$n[1].UInt32,"ps":0}],"sn":"RemoveTransportConnection","rt":$n[1].Void,"p":[$n[1].UInt32]},{"ov":true,"a":2,"n":"SendMessage","t":8,"pi":[{"n":"m","pt":$n[0].Message,"ps":0},{"n":"cancel","pt":$n[4].CancellationToken,"ps":1}],"sn":"SendMessage","rt":$n[5].Task,"p":[$n[0].Message,$n[4].CancellationToken]},{"ov":true,"a":2,"n":"TransportCapability","t":8,"pi":[{"n":"name","pt":$n[1].String,"ps":0}],"sn":"TransportCapability","rt":$n[1].UInt32,"p":[$n[1].String],"box":function ($v) { return Bridge.box($v, System.UInt32);}},{"a":2,"n":"AcceptWebSockets","t":16,"rt":$n[1].Boolean,"g":{"a":2,"n":"get_AcceptWebSockets","t":8,"rt":$n[1].Boolean,"fg":"AcceptWebSockets","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"s":{"a":2,"n":"set_AcceptWebSockets","t":8,"p":[$n[1].Boolean],"rt":$n[1].Void,"fs":"AcceptWebSockets"},"fn":"AcceptWebSockets"},{"a":2,"n":"DefaultConnectTimeout","t":16,"rt":$n[1].Int32,"g":{"a":2,"n":"get_DefaultConnectTimeout","t":8,"rt":$n[1].Int32,"fg":"DefaultConnectTimeout","box":function ($v) { return Bridge.box($v, System.Int32);}},"s":{"a":2,"n":"set_DefaultConnectTimeout","t":8,"p":[$n[1].Int32],"rt":$n[1].Void,"fs":"DefaultConnectTimeout"},"fn":"DefaultConnectTimeout"},{"a":2,"n":"DefaultReceiveTimeout","t":16,"rt":$n[1].Int32,"g":{"a":2,"n":"get_DefaultReceiveTimeout","t":8,"rt":$n[1].Int32,"fg":"DefaultReceiveTimeout","box":function ($v) { return Bridge.box($v, System.Int32);}},"s":{"a":2,"n":"set_DefaultReceiveTimeout","t":8,"p":[$n[1].Int32],"rt":$n[1].Void,"fs":"DefaultReceiveTimeout"},"fn":"DefaultReceiveTimeout"},{"a":2,"n":"HeartbeatPeriod","t":16,"rt":$n[1].Int32,"g":{"a":2,"n":"get_HeartbeatPeriod","t":8,"rt":$n[1].Int32,"fg":"HeartbeatPeriod","box":function ($v) { return Bridge.box($v, System.Int32);}},"s":{"a":2,"n":"set_HeartbeatPeriod","t":8,"p":[$n[1].Int32],"rt":$n[1].Void,"fs":"HeartbeatPeriod"},"fn":"HeartbeatPeriod"},{"ov":true,"a":2,"n":"IsClient","t":16,"rt":$n[1].Boolean,"g":{"ov":true,"a":2,"n":"get_IsClient","t":8,"rt":$n[1].Boolean,"fg":"IsClient","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"fn":"IsClient"},{"ov":true,"a":2,"n":"IsServer","t":16,"rt":$n[1].Boolean,"g":{"ov":true,"a":2,"n":"get_IsServer","t":8,"rt":$n[1].Boolean,"fg":"IsServer","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"fn":"IsServer"},{"ov":true,"a":2,"n":"UrlSchemeString","t":16,"rt":$n[1].Array.type(System.String),"g":{"ov":true,"a":2,"n":"get_UrlSchemeString","t":8,"rt":$n[1].Array.type(System.String),"fg":"UrlSchemeString"},"fn":"UrlSchemeString"},{"a":4,"n":"TransportConnections","t":4,"rt":$n[3].Dictionary$2(System.UInt32,RobotRaconteurWeb.AsyncStreamTransport),"sn":"TransportConnections"},{"a":1,"n":"m_HeartbeatPeriod","t":4,"rt":$n[1].Int32,"sn":"m_HeartbeatPeriod","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"m_Port","t":4,"rt":$n[1].Int32,"sn":"m_Port","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":4,"n":"parent_adapter","t":4,"rt":$n[0].AsyncStreamTransportParent,"sn":"parent_adapter","ro":true},{"a":1,"n":"transportcancel","t":4,"rt":$n[4].CancellationTokenSource,"sn":"transportcancel"},{"a":1,"n":"transportopen","t":4,"rt":$n[1].Boolean,"sn":"transportopen","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"backing":true,"n":"<AcceptWebSockets>k__BackingField","t":4,"rt":$n[1].Boolean,"sn":"AcceptWebSockets","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"backing":true,"n":"<DefaultConnectTimeout>k__BackingField","t":4,"rt":$n[1].Int32,"sn":"DefaultConnectTimeout","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"backing":true,"n":"<DefaultReceiveTimeout>k__BackingField","t":4,"rt":$n[1].Int32,"sn":"DefaultReceiveTimeout","box":function ($v) { return Bridge.box($v, System.Int32);}}]}; }, $n);
    $m("RobotRaconteurWeb.BrowserWebSocketTransport.AsyncStreamTransportParentImpl", function () { return {"td":$n[0].BrowserWebSocketTransport,"att":1048579,"a":1,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[0].BrowserWebSocketTransport],"pi":[{"n":"parent","pt":$n[0].BrowserWebSocketTransport,"ps":0}],"sn":"ctor"},{"a":2,"n":"AddTransportConnection","t":8,"pi":[{"n":"endpoint","pt":$n[1].UInt32,"ps":0},{"n":"transport","pt":$n[0].AsyncStreamTransport,"ps":1}],"sn":"AddTransportConnection","rt":$n[1].Void,"p":[$n[1].UInt32,$n[0].AsyncStreamTransport]},{"a":2,"n":"MessageReceived","t":8,"pi":[{"n":"m","pt":$n[0].Message,"ps":0}],"sn":"MessageReceived","rt":$n[5].Task,"p":[$n[0].Message]},{"a":2,"n":"RemoveTransportConnection","t":8,"pi":[{"n":"transport","pt":$n[0].AsyncStreamTransport,"ps":0}],"sn":"RemoveTransportConnection","rt":$n[1].Void,"p":[$n[0].AsyncStreamTransport]},{"a":2,"n":"SpecialRequest","t":8,"pi":[{"n":"m","pt":$n[0].Message,"ps":0}],"sn":"SpecialRequest","rt":$n[5].Task$1(RobotRaconteurWeb.Message),"p":[$n[0].Message]},{"a":1,"n":"parent","t":4,"rt":$n[0].BrowserWebSocketTransport,"sn":"parent"}]}; }, $n);
    $m("RobotRaconteurWeb.BrowserWebSocketClientTransport", function () { return {"att":1048832,"a":4,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[0].BrowserWebSocketTransport],"pi":[{"n":"c","pt":$n[0].BrowserWebSocketTransport,"ps":0}],"sn":"ctor"},{"a":2,"n":"ConnectTransport","t":8,"pi":[{"n":"url","pt":$n[1].String,"ps":0},{"n":"e","pt":$n[0].Endpoint,"ps":1},{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":2}],"sn":"ConnectTransport","rt":$n[5].Task,"p":[$n[1].String,$n[0].Endpoint,$n[4].CancellationToken]},{"a":1,"n":"ConnectWebsocketTransport","t":8,"pi":[{"n":"url","pt":$n[1].String,"ps":0},{"n":"e","pt":$n[0].Endpoint,"ps":1},{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":2}],"sn":"ConnectWebsocketTransport","rt":$n[5].Task,"p":[$n[1].String,$n[0].Endpoint,$n[4].CancellationToken]},{"ov":true,"a":2,"n":"GetConnectionURL","t":8,"sn":"GetConnectionURL","rt":$n[1].String},{"a":1,"n":"LastMessageReceivedTime","t":4,"rt":$n[1].DateTime,"sn":"LastMessageReceivedTime","box":function ($v) { return Bridge.box($v, System.DateTime, System.DateTime.format);}},{"a":1,"n":"connecturl","t":4,"rt":$n[1].String,"sn":"connecturl"},{"a":1,"n":"parenttransport","t":4,"rt":$n[0].BrowserWebSocketTransport,"sn":"parenttransport"},{"a":1,"n":"websocket","t":4,"rt":$n[6].ClientWebSocket,"sn":"websocket"}]}; }, $n);
    $m("RobotRaconteurWeb.WebSocketStreamWrapper", function () { return {"att":1048576,"a":4,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[6].ClientWebSocket],"pi":[{"n":"websocket","pt":$n[6].ClientWebSocket,"ps":0}],"sn":"ctor"},{"ov":true,"a":2,"n":"BeginRead","t":8,"pi":[{"n":"buffer","pt":$n[1].Array.type(System.Byte),"ps":0},{"n":"offset","pt":$n[1].Int32,"ps":1},{"n":"count","pt":$n[1].Int32,"ps":2},{"n":"callback","pt":Function,"ps":3},{"n":"state","pt":$n[1].Object,"ps":4}],"sn":"BeginRead","rt":$n[1].IAsyncResult,"p":[$n[1].Array.type(System.Byte),$n[1].Int32,$n[1].Int32,Function,$n[1].Object]},{"ov":true,"a":2,"n":"BeginWrite","t":8,"pi":[{"n":"buffer","pt":$n[1].Array.type(System.Byte),"ps":0},{"n":"offset","pt":$n[1].Int32,"ps":1},{"n":"count","pt":$n[1].Int32,"ps":2},{"n":"callback","pt":Function,"ps":3},{"n":"state","pt":$n[1].Object,"ps":4}],"sn":"BeginWrite","rt":$n[1].IAsyncResult,"p":[$n[1].Array.type(System.Byte),$n[1].Int32,$n[1].Int32,Function,$n[1].Object]},{"ov":true,"a":2,"n":"Close","t":8,"sn":"Close","rt":$n[1].Void},{"a":1,"n":"DoBeginRead","t":8,"pi":[{"n":"buffer","pt":$n[1].Array.type(System.Byte),"ps":0},{"n":"offset","pt":$n[1].Int32,"ps":1},{"n":"count","pt":$n[1].Int32,"ps":2}],"sn":"DoBeginRead","rt":$n[5].Task$1(System.Int32),"p":[$n[1].Array.type(System.Byte),$n[1].Int32,$n[1].Int32]},{"a":1,"n":"DoBeginWrite","t":8,"pi":[{"n":"buffer","pt":$n[1].Array.type(System.Byte),"ps":0},{"n":"offset","pt":$n[1].Int32,"ps":1},{"n":"count","pt":$n[1].Int32,"ps":2}],"sn":"DoBeginWrite","rt":$n[5].Task$1(System.Int32),"p":[$n[1].Array.type(System.Byte),$n[1].Int32,$n[1].Int32]},{"ov":true,"a":2,"n":"EndRead","t":8,"pi":[{"n":"asyncResult","pt":$n[1].IAsyncResult,"ps":0}],"sn":"EndRead","rt":$n[1].Int32,"p":[$n[1].IAsyncResult],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"ov":true,"a":2,"n":"EndWrite","t":8,"pi":[{"n":"asyncResult","pt":$n[1].IAsyncResult,"ps":0}],"sn":"EndWrite","rt":$n[1].Void,"p":[$n[1].IAsyncResult]},{"ov":true,"a":2,"n":"Flush","t":8,"sn":"Flush","rt":$n[1].Void},{"ov":true,"a":2,"n":"Read","t":8,"pi":[{"n":"buffer","pt":$n[1].Array.type(System.Byte),"ps":0},{"n":"offset","pt":$n[1].Int32,"ps":1},{"n":"count","pt":$n[1].Int32,"ps":2}],"sn":"Read","rt":$n[1].Int32,"p":[$n[1].Array.type(System.Byte),$n[1].Int32,$n[1].Int32],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"ov":true,"a":2,"n":"Seek","t":8,"pi":[{"n":"offset","pt":$n[1].Int64,"ps":0},{"n":"origin","pt":$n[7].SeekOrigin,"ps":1}],"sn":"Seek","rt":$n[1].Int64,"p":[$n[1].Int64,$n[7].SeekOrigin]},{"ov":true,"a":2,"n":"SetLength","t":8,"pi":[{"n":"value","pt":$n[1].Int64,"ps":0}],"sn":"SetLength","rt":$n[1].Void,"p":[$n[1].Int64]},{"ov":true,"a":2,"n":"Write","t":8,"pi":[{"n":"buffer","pt":$n[1].Array.type(System.Byte),"ps":0},{"n":"offset","pt":$n[1].Int32,"ps":1},{"n":"count","pt":$n[1].Int32,"ps":2}],"sn":"Write","rt":$n[1].Void,"p":[$n[1].Array.type(System.Byte),$n[1].Int32,$n[1].Int32]},{"ov":true,"a":2,"n":"CanRead","t":16,"rt":$n[1].Boolean,"g":{"ov":true,"a":2,"n":"get_CanRead","t":8,"rt":$n[1].Boolean,"fg":"CanRead","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"fn":"CanRead"},{"ov":true,"a":2,"n":"CanSeek","t":16,"rt":$n[1].Boolean,"g":{"ov":true,"a":2,"n":"get_CanSeek","t":8,"rt":$n[1].Boolean,"fg":"CanSeek","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"fn":"CanSeek"},{"ov":true,"a":2,"n":"CanWrite","t":16,"rt":$n[1].Boolean,"g":{"ov":true,"a":2,"n":"get_CanWrite","t":8,"rt":$n[1].Boolean,"fg":"CanWrite","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"fn":"CanWrite"},{"ov":true,"a":2,"n":"Length","t":16,"rt":$n[1].Int64,"g":{"ov":true,"a":2,"n":"get_Length","t":8,"rt":$n[1].Int64,"fg":"Length"},"fn":"Length"},{"ov":true,"a":2,"n":"Position","t":16,"rt":$n[1].Int64,"g":{"ov":true,"a":2,"n":"get_Position","t":8,"rt":$n[1].Int64,"fg":"Position"},"s":{"ov":true,"a":2,"n":"set_Position","t":8,"p":[$n[1].Int64],"rt":$n[1].Void,"fs":"Position"},"fn":"Position"},{"a":1,"n":"websock","t":4,"rt":$n[6].ClientWebSocket,"sn":"websock"}]}; }, $n);
    $m("RobotRaconteurWeb.AsyncMutex", function () { return {"nested":[$n[0].AsyncMutex.LockHandle],"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"CancelAll","t":8,"sn":"CancelAll","rt":$n[1].Void},{"a":2,"n":"Enter","t":8,"sn":"Enter","rt":$n[5].Task},{"a":2,"n":"Exit","t":8,"pi":[{"n":"t","pt":$n[5].Task,"ps":0}],"sn":"Exit","rt":$n[1].Void,"p":[$n[5].Task]},{"a":2,"n":"Lock","t":8,"sn":"Lock","rt":$n[5].Task$1(System.IDisposable)},{"a":2,"n":"LockWithTimeout","t":8,"pi":[{"n":"timeout","pt":$n[1].Int32,"ps":0}],"sn":"LockWithTimeout","rt":$n[5].Task$1(System.IDisposable),"p":[$n[1].Int32]},{"a":1,"n":"current","t":4,"rt":$n[5].Task,"sn":"current"},{"a":1,"n":"waiting_tasks","t":4,"rt":$n[3].Queue$1(System.Threading.Tasks.TaskCompletionSource),"sn":"waiting_tasks"}]}; }, $n);
    $m("RobotRaconteurWeb.AsyncMutex.LockHandle", function () { return {"td":$n[0].AsyncMutex,"att":1048578,"a":2,"m":[{"a":4,"n":".ctor","t":1,"p":[$n[0].AsyncMutex,$n[5].Task],"pi":[{"n":"owner","pt":$n[0].AsyncMutex,"ps":0},{"n":"task","pt":$n[5].Task,"ps":1}],"sn":"ctor"},{"a":2,"n":"Dispose","t":8,"sn":"Dispose","rt":$n[1].Void},{"a":1,"n":"owner","t":4,"rt":$n[0].AsyncMutex,"sn":"owner"},{"a":1,"n":"task","t":4,"rt":$n[5].Task,"sn":"task"}]}; }, $n);
    $m("RobotRaconteurWeb.AsyncStreamTransport", function () { return {"att":1048705,"a":2,"m":[{"a":3,"n":".ctor","t":1,"p":[$n[0].RobotRaconteurNode,$n[0].AsyncStreamTransportParent],"pi":[{"n":"node","pt":$n[0].RobotRaconteurNode,"ps":0},{"n":"parent","pt":$n[0].AsyncStreamTransportParent,"ps":1}],"sn":"ctor"},{"v":true,"a":2,"n":"CheckConnection","t":8,"pi":[{"n":"endpoint","pt":$n[1].UInt32,"ps":0}],"sn":"CheckConnection","rt":$n[1].Void,"p":[$n[1].UInt32]},{"a":2,"n":"CheckStreamCapability","t":8,"pi":[{"n":"name","pt":$n[1].String,"ps":0},{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":1}],"sn":"CheckStreamCapability","rt":$n[5].Task$1(System.UInt32),"p":[$n[1].String,$n[4].CancellationToken]},{"a":3,"n":"CheckStreamCapability_MessageReceived","t":8,"pi":[{"n":"m","pt":$n[0].Message,"ps":0}],"sn":"CheckStreamCapability_MessageReceived","rt":$n[1].Void,"p":[$n[0].Message]},{"v":true,"a":2,"n":"Close","t":8,"sn":"Close","rt":$n[1].Void},{"a":3,"n":"ConnectStream","t":8,"pi":[{"n":"s","pt":$n[7].Stream,"ps":0},{"n":"is_server","pt":$n[1].Boolean,"ps":1},{"n":"target_nodeid","pt":$n[0].NodeID,"ps":2},{"n":"target_nodename","pt":$n[1].String,"ps":3},{"n":"starttls","pt":$n[1].Boolean,"ps":4},{"n":"requiretls","pt":$n[1].Boolean,"ps":5},{"n":"heartbeat_period","pt":$n[1].Int32,"ps":6},{"n":"cancel","pt":$n[4].CancellationToken,"ps":7}],"sn":"ConnectStream","rt":$n[5].Task,"p":[$n[7].Stream,$n[1].Boolean,$n[0].NodeID,$n[1].String,$n[1].Boolean,$n[1].Boolean,$n[1].Int32,$n[4].CancellationToken]},{"a":1,"n":"DoHeartbeat","t":8,"sn":"DoHeartbeat","rt":$n[5].Task},{"a":3,"n":"DoReceive","t":8,"sn":"DoReceive","rt":$n[5].Task},{"ab":true,"a":2,"n":"GetConnectionURL","t":8,"sn":"GetConnectionURL","rt":$n[1].String},{"v":true,"a":2,"n":"MessageReceived","t":8,"pi":[{"n":"m","pt":$n[0].Message,"ps":0}],"sn":"MessageReceived","rt":$n[5].Task,"p":[$n[0].Message]},{"v":true,"a":3,"n":"PackStreamOpRequest","t":8,"pi":[{"n":"command","pt":$n[1].String,"ps":0},{"n":"args","pt":$n[1].Object,"ps":1}],"sn":"PackStreamOpRequest","rt":$n[5].Task$1(RobotRaconteurWeb.MessageEntry),"p":[$n[1].String,$n[1].Object]},{"v":true,"a":3,"n":"ProcessMessage","t":8,"pi":[{"n":"mes","pt":$n[0].Message,"ps":0}],"sn":"ProcessMessage","rt":$n[5].Task,"p":[$n[0].Message]},{"v":true,"a":2,"n":"ProcessMessage2","t":8,"pi":[{"n":"m","pt":$n[0].Message,"ps":0}],"sn":"ProcessMessage2","rt":$n[5].Task,"p":[$n[0].Message]},{"v":true,"a":3,"n":"ProcessStreamOpRequest","t":8,"pi":[{"n":"request","pt":$n[0].MessageEntry,"ps":0},{"n":"header","pt":$n[0].MessageHeader,"ps":1}],"sn":"ProcessStreamOpRequest","rt":$n[5].Task$1(RobotRaconteurWeb.MessageEntry),"p":[$n[0].MessageEntry,$n[0].MessageHeader]},{"a":3,"n":"RequestReceivePause","t":8,"sn":"RequestReceivePause","rt":$n[5].Task},{"a":3,"n":"RequestSendPause","t":8,"sn":"RequestSendPause","rt":$n[5].Task},{"a":3,"n":"ResumeReceivePause","t":8,"sn":"ResumeReceivePause","rt":$n[5].Task},{"a":3,"n":"ResumeSendPause","t":8,"sn":"ResumeSendPause","rt":$n[5].Task},{"v":true,"a":2,"n":"SendMessage","t":8,"pi":[{"n":"m","pt":$n[0].Message,"ps":0},{"n":"cancel","pt":$n[4].CancellationToken,"ps":1}],"sn":"SendMessage","rt":$n[5].Task,"p":[$n[0].Message,$n[4].CancellationToken]},{"v":true,"a":2,"n":"StreamCapabilities","t":8,"pi":[{"n":"name","pt":$n[1].String,"ps":0}],"sn":"StreamCapabilities","rt":$n[1].UInt32,"p":[$n[1].String],"box":function ($v) { return Bridge.box($v, System.UInt32);}},{"v":true,"a":3,"n":"StreamOp","t":8,"pi":[{"n":"command","pt":$n[1].String,"ps":0},{"n":"args","dv":null,"o":true,"pt":$n[1].Object,"ps":1},{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":2}],"sn":"StreamOp","rt":$n[5].Task$1(System.Object),"p":[$n[1].String,$n[1].Object,$n[4].CancellationToken]},{"v":true,"a":3,"n":"StreamOpMessageReceived","t":8,"pi":[{"n":"m","pt":$n[0].Message,"ps":0}],"sn":"StreamOpMessageReceived","rt":$n[5].Task,"p":[$n[0].Message]},{"v":true,"a":3,"n":"UnpackStreamOpResponse","t":8,"pi":[{"n":"response","pt":$n[0].MessageEntry,"ps":0},{"n":"header","pt":$n[0].MessageHeader,"ps":1}],"sn":"UnpackStreamOpResponse","rt":$n[5].Task$1(System.Object),"p":[$n[0].MessageEntry,$n[0].MessageHeader]},{"a":2,"n":"Connected","t":16,"rt":$n[1].Boolean,"g":{"a":2,"n":"get_Connected","t":8,"rt":$n[1].Boolean,"fg":"Connected","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"fn":"Connected"},{"a":2,"n":"IsTls","t":16,"rt":$n[1].Boolean,"g":{"a":2,"n":"get_IsTls","t":8,"rt":$n[1].Boolean,"fg":"IsTls","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"fn":"IsTls"},{"a":2,"n":"LocalEndpoint","t":16,"rt":$n[1].UInt32,"g":{"a":2,"n":"get_LocalEndpoint","t":8,"rt":$n[1].UInt32,"fg":"LocalEndpoint","box":function ($v) { return Bridge.box($v, System.UInt32);}},"fn":"LocalEndpoint"},{"a":2,"n":"RemoteEndpoint","t":16,"rt":$n[1].UInt32,"g":{"a":2,"n":"get_RemoteEndpoint","t":8,"rt":$n[1].UInt32,"fg":"RemoteEndpoint","box":function ($v) { return Bridge.box($v, System.UInt32);}},"fn":"RemoteEndpoint"},{"a":2,"n":"RemoteNodeID","t":16,"rt":$n[0].NodeID,"g":{"a":2,"n":"get_RemoteNodeID","t":8,"rt":$n[0].NodeID,"fg":"RemoteNodeID"},"fn":"RemoteNodeID"},{"a":2,"n":"RequireTls","t":16,"rt":$n[1].Boolean,"g":{"a":2,"n":"get_RequireTls","t":8,"rt":$n[1].Boolean,"fg":"RequireTls","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"fn":"RequireTls"},{"a":1,"n":"CheckStreamCapability_queue","t":4,"rt":$n[3].Queue$1(System.Threading.Tasks.TaskCompletionSource),"sn":"CheckStreamCapability_queue"},{"a":1,"n":"CheckStreamCapability_ret","t":4,"rt":$n[5].TaskCompletionSource,"sn":"CheckStreamCapability_ret"},{"a":2,"n":"ReceiveTimeout","t":4,"rt":$n[1].Int32,"sn":"ReceiveTimeout","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":3,"n":"basestream","t":4,"rt":$n[7].Stream,"sn":"basestream"},{"a":3,"n":"cancellationToken","t":4,"rt":$n[4].CancellationTokenSource,"sn":"cancellationToken"},{"a":3,"n":"is_server","t":4,"rt":$n[1].Boolean,"sn":"is_server","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":3,"n":"m_Connected","t":4,"rt":$n[1].Boolean,"sn":"m_Connected","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":3,"n":"m_HeartbeatPeriod","t":4,"rt":$n[1].Int32,"sn":"m_HeartbeatPeriod","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":3,"n":"m_IsTls","t":4,"rt":$n[1].Boolean,"sn":"m_IsTls","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":3,"n":"m_LocalEndpoint","t":4,"rt":$n[1].UInt32,"sn":"m_LocalEndpoint","box":function ($v) { return Bridge.box($v, System.UInt32);}},{"a":3,"n":"m_RemoteEndpoint","t":4,"rt":$n[1].UInt32,"sn":"m_RemoteEndpoint","box":function ($v) { return Bridge.box($v, System.UInt32);}},{"a":3,"n":"m_RemoteNodeID","t":4,"rt":$n[0].NodeID,"sn":"m_RemoteNodeID"},{"a":3,"n":"m_RequireTls","t":4,"rt":$n[1].Boolean,"sn":"m_RequireTls","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":3,"n":"mread","t":4,"rt":$n[7].MemoryStream,"sn":"mread"},{"a":3,"n":"mwrite","t":4,"rt":$n[7].MemoryStream,"sn":"mwrite"},{"a":3,"n":"node","t":4,"rt":$n[0].RobotRaconteurNode,"sn":"node","ro":true},{"a":3,"n":"parent","t":4,"rt":$n[0].AsyncStreamTransportParent,"sn":"parent"},{"a":1,"n":"pause_receive_task","t":4,"rt":$n[5].TaskCompletionSource,"sn":"pause_receive_task"},{"a":1,"n":"pause_send_task","t":4,"rt":$n[5].TaskCompletionSource,"sn":"pause_send_task"},{"a":1,"n":"recbuf","t":4,"rt":$n[1].Array.type(System.Byte),"sn":"recbuf"},{"a":1,"n":"request_receive_pause","t":4,"rt":$n[1].Boolean,"sn":"request_receive_pause","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"request_receive_pause_task","t":4,"rt":$n[5].TaskCompletionSource,"sn":"request_receive_pause_task"},{"a":1,"n":"request_send_pause","t":4,"rt":$n[1].Boolean,"sn":"request_send_pause","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"request_send_pause_task","t":4,"rt":$n[5].TaskCompletionSource,"sn":"request_send_pause_task"},{"a":1,"n":"send_queue","t":4,"rt":$n[3].List$1(System.Tuple$2(System.Threading.Tasks.TaskCompletionSource,RobotRaconteurWeb.Message)),"sn":"send_queue"},{"a":1,"n":"sendbuf","t":4,"rt":$n[1].Array.type(System.Byte),"sn":"sendbuf"},{"a":1,"n":"sending","t":4,"rt":$n[1].Boolean,"sn":"sending","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":3,"n":"sreader","t":4,"rt":$n[0].ArrayBinaryReader,"sn":"sreader"},{"a":1,"n":"streamop_queue","t":4,"rt":$n[3].Queue$1(System.Threading.Tasks.TaskCompletionSource),"sn":"streamop_queue"},{"a":1,"n":"streamop_ret","t":4,"rt":$n[5].TaskCompletionSource,"sn":"streamop_ret"},{"a":3,"n":"swriter","t":4,"rt":$n[0].ArrayBinaryWriter,"sn":"swriter"},{"a":3,"n":"target_nodeid","t":4,"rt":$n[0].NodeID,"sn":"target_nodeid"},{"a":3,"n":"target_nodename","t":4,"rt":$n[1].String,"sn":"target_nodename"},{"a":1,"n":"tlastrec","t":4,"rt":$n[1].DateTime,"sn":"tlastrec","box":function ($v) { return Bridge.box($v, System.DateTime, System.DateTime.format);}},{"a":1,"n":"tlastrec_mes","t":4,"rt":$n[1].DateTime,"sn":"tlastrec_mes","box":function ($v) { return Bridge.box($v, System.DateTime, System.DateTime.format);}},{"a":1,"n":"tlastsend","t":4,"rt":$n[1].DateTime,"sn":"tlastsend","box":function ($v) { return Bridge.box($v, System.DateTime, System.DateTime.format);}}]}; }, $n);
    $m("RobotRaconteurWeb.AsyncStreamTransportParent", function () { return {"att":161,"a":2,"m":[{"ab":true,"a":2,"n":"AddTransportConnection","t":8,"pi":[{"n":"endpoint","pt":$n[1].UInt32,"ps":0},{"n":"transport","pt":$n[0].AsyncStreamTransport,"ps":1}],"sn":"RobotRaconteurWeb$AsyncStreamTransportParent$AddTransportConnection","rt":$n[1].Void,"p":[$n[1].UInt32,$n[0].AsyncStreamTransport]},{"ab":true,"a":2,"n":"MessageReceived","t":8,"pi":[{"n":"m","pt":$n[0].Message,"ps":0}],"sn":"RobotRaconteurWeb$AsyncStreamTransportParent$MessageReceived","rt":$n[5].Task,"p":[$n[0].Message]},{"ab":true,"a":2,"n":"RemoveTransportConnection","t":8,"pi":[{"n":"transport","pt":$n[0].AsyncStreamTransport,"ps":0}],"sn":"RobotRaconteurWeb$AsyncStreamTransportParent$RemoveTransportConnection","rt":$n[1].Void,"p":[$n[0].AsyncStreamTransport]},{"ab":true,"a":2,"n":"SpecialRequest","t":8,"pi":[{"n":"m","pt":$n[0].Message,"ps":0}],"sn":"RobotRaconteurWeb$AsyncStreamTransportParent$SpecialRequest","rt":$n[5].Task$1(RobotRaconteurWeb.Message),"p":[$n[0].Message]}]}; }, $n);
    $m("RobotRaconteurWeb.Callback$1", function (T) { return {"att":1048705,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].String],"pi":[{"n":"name","pt":$n[1].String,"ps":0}],"sn":"ctor"},{"ab":true,"a":2,"n":"GetClientFunction","t":8,"pi":[{"n":"e","pt":$n[0].Endpoint,"ps":0}],"sn":"GetClientFunction","rt":T,"p":[$n[0].Endpoint]},{"ab":true,"a":2,"n":"GetClientFunction","t":8,"pi":[{"n":"e","pt":$n[1].UInt32,"ps":0}],"sn":"GetClientFunction$1","rt":T,"p":[$n[1].UInt32]},{"ab":true,"a":2,"n":"Function","t":16,"rt":T,"g":{"ab":true,"a":2,"n":"get_Function","t":8,"rt":T,"fg":"Function"},"s":{"ab":true,"a":2,"n":"set_Function","t":8,"p":[T],"rt":$n[1].Void,"fs":"Function"},"fn":"Function"},{"a":3,"n":"m_MemberName","t":4,"rt":$n[1].String,"sn":"m_MemberName"},{"a":1,"backing":true,"n":"<Function>k__BackingField","t":4,"rt":T,"sn":"Function"}]}; }, $n);
    $m("RobotRaconteurWeb.CallbackClient$1", function (T) { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].String],"pi":[{"n":"name","pt":$n[1].String,"ps":0}],"sn":"ctor"},{"ov":true,"a":2,"n":"GetClientFunction","t":8,"pi":[{"n":"e","pt":$n[0].Endpoint,"ps":0}],"sn":"GetClientFunction","rt":T,"p":[$n[0].Endpoint]},{"ov":true,"a":2,"n":"GetClientFunction","t":8,"pi":[{"n":"e","pt":$n[1].UInt32,"ps":0}],"sn":"GetClientFunction$1","rt":T,"p":[$n[1].UInt32]},{"ov":true,"a":2,"n":"Function","t":16,"rt":T,"g":{"ov":true,"a":2,"n":"get_Function","t":8,"rt":T,"fg":"Function"},"s":{"ov":true,"a":2,"n":"set_Function","t":8,"p":[T],"rt":$n[1].Void,"fs":"Function"},"fn":"Function"},{"a":1,"n":"function","t":4,"rt":T,"sn":"function"}]}; }, $n);
    $m("RobotRaconteurWeb.CallbackServer$1", function (T) { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].String,$n[0].ServiceSkel],"pi":[{"n":"name","pt":$n[1].String,"ps":0},{"n":"skel","pt":$n[0].ServiceSkel,"ps":1}],"sn":"ctor"},{"ov":true,"a":2,"n":"GetClientFunction","t":8,"pi":[{"n":"e","pt":$n[0].Endpoint,"ps":0}],"sn":"GetClientFunction","rt":T,"p":[$n[0].Endpoint]},{"ov":true,"a":2,"n":"GetClientFunction","t":8,"pi":[{"n":"e","pt":$n[1].UInt32,"ps":0}],"sn":"GetClientFunction$1","rt":T,"p":[$n[1].UInt32]},{"ov":true,"a":2,"n":"Function","t":16,"rt":T,"g":{"ov":true,"a":2,"n":"get_Function","t":8,"rt":T,"fg":"Function"},"s":{"ov":true,"a":2,"n":"set_Function","t":8,"p":[T],"rt":$n[1].Void,"fs":"Function"},"fn":"Function"},{"a":1,"n":"skel","t":4,"rt":$n[0].ServiceSkel,"sn":"skel"}]}; }, $n);
    $m("RobotRaconteurWeb.ServiceStub", function () { return {"att":1048705,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].String,$n[0].ClientContext],"pi":[{"n":"path","pt":$n[1].String,"ps":0},{"n":"c","pt":$n[0].ClientContext,"ps":1}],"sn":"ctor"},{"v":true,"a":5,"n":"CallbackCall","t":8,"pi":[{"n":"m","pt":$n[0].MessageEntry,"ps":0}],"sn":"CallbackCall","rt":$n[5].Task$1(RobotRaconteurWeb.MessageEntry),"p":[$n[0].MessageEntry]},{"ab":true,"a":5,"n":"DispatchEvent","t":8,"pi":[{"n":"m","pt":$n[0].MessageEntry,"ps":0}],"sn":"DispatchEvent","rt":$n[1].Void,"p":[$n[0].MessageEntry]},{"v":true,"a":5,"n":"DispatchPipeMessage","t":8,"pi":[{"n":"m","pt":$n[0].MessageEntry,"ps":0}],"sn":"DispatchPipeMessage","rt":$n[1].Void,"p":[$n[0].MessageEntry]},{"v":true,"a":5,"n":"DispatchWireMessage","t":8,"pi":[{"n":"m","pt":$n[0].MessageEntry,"ps":0}],"sn":"DispatchWireMessage","rt":$n[1].Void,"p":[$n[0].MessageEntry]},{"a":2,"n":"FindObjRef","t":8,"pi":[{"n":"n","pt":$n[1].String,"ps":0},{"n":"cancel","pt":$n[4].CancellationToken,"ps":1}],"sn":"FindObjRef$1","rt":$n[5].Task$1(System.Object),"p":[$n[1].String,$n[4].CancellationToken]},{"a":2,"n":"FindObjRef","t":8,"pi":[{"n":"n","pt":$n[1].String,"ps":0},{"n":"i","pt":$n[1].String,"ps":1},{"n":"cancel","pt":$n[4].CancellationToken,"ps":2}],"sn":"FindObjRef","rt":$n[5].Task$1(System.Object),"p":[$n[1].String,$n[1].String,$n[4].CancellationToken]},{"a":2,"n":"FindObjRefTyped","t":8,"pi":[{"n":"n","pt":$n[1].String,"ps":0},{"n":"objecttype","pt":$n[1].String,"ps":1},{"n":"cancel","pt":$n[4].CancellationToken,"ps":2}],"sn":"FindObjRefTyped$1","rt":$n[5].Task$1(System.Object),"p":[$n[1].String,$n[1].String,$n[4].CancellationToken]},{"a":2,"n":"FindObjRefTyped","t":8,"pi":[{"n":"n","pt":$n[1].String,"ps":0},{"n":"i","pt":$n[1].String,"ps":1},{"n":"objecttype","pt":$n[1].String,"ps":2},{"n":"cancel","pt":$n[4].CancellationToken,"ps":3}],"sn":"FindObjRefTyped","rt":$n[5].Task$1(System.Object),"p":[$n[1].String,$n[1].String,$n[1].String,$n[4].CancellationToken]},{"a":2,"n":"ProcessRequest","t":8,"pi":[{"n":"m","pt":$n[0].MessageEntry,"ps":0},{"n":"cancel","pt":$n[4].CancellationToken,"ps":1}],"sn":"ProcessRequest","rt":$n[5].Task$1(RobotRaconteurWeb.MessageEntry),"p":[$n[0].MessageEntry,$n[4].CancellationToken]},{"a":5,"n":"RRReleaseContext","t":8,"sn":"RRReleaseContext","rt":$n[1].Void},{"a":5,"n":"SendPipeMessage","t":8,"pi":[{"n":"m","pt":$n[0].MessageEntry,"ps":0},{"n":"cancel","pt":$n[4].CancellationToken,"ps":1}],"sn":"SendPipeMessage","rt":$n[5].Task,"p":[$n[0].MessageEntry,$n[4].CancellationToken]},{"a":5,"n":"SendWireMessage","t":8,"pi":[{"n":"m","pt":$n[0].MessageEntry,"ps":0},{"n":"cancel","pt":$n[4].CancellationToken,"ps":1}],"sn":"SendWireMessage","rt":$n[5].Task,"p":[$n[0].MessageEntry,$n[4].CancellationToken]},{"a":2,"n":"RRContext","t":16,"rt":$n[0].ClientContext,"g":{"a":2,"n":"get_RRContext","t":8,"rt":$n[0].ClientContext,"fg":"RRContext"},"fn":"RRContext"},{"a":5,"n":"RRServicePath","t":4,"rt":$n[1].String,"sn":"RRServicePath","ro":true},{"a":4,"n":"rr_async_mutex","t":4,"rt":$n[0].AsyncMutex,"sn":"rr_async_mutex","ro":true},{"a":5,"n":"rr_context","t":4,"rt":$n[0].ClientContext,"sn":"rr_context"},{"a":1,"n":"rr_context_lock","t":4,"rt":$n[1].Object,"sn":"rr_context_lock"},{"a":5,"n":"rr_node","t":4,"rt":$n[0].RobotRaconteurNode,"sn":"rr_node"}]}; }, $n);
    $m("RobotRaconteurWeb.ClientContext", function () { return {"nested":[Function],"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[0].RobotRaconteurNode],"pi":[{"n":"node","pt":$n[0].RobotRaconteurNode,"ps":0}],"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[0].ServiceFactory,$n[0].RobotRaconteurNode],"pi":[{"n":"service_def","pt":$n[0].ServiceFactory,"ps":0},{"n":"node","pt":$n[0].RobotRaconteurNode,"ps":1}],"sn":"$ctor1"},{"a":2,"n":"AuthenticateUser","t":8,"pi":[{"n":"username","pt":$n[1].String,"ps":0},{"n":"credentials","pt":$n[1].Object,"ps":1},{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":2}],"sn":"AuthenticateUser","rt":$n[5].Task$1(System.String),"p":[$n[1].String,$n[1].Object,$n[4].CancellationToken]},{"a":2,"n":"CheckServiceCapability","t":8,"pi":[{"n":"name","pt":$n[1].String,"ps":0},{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":1}],"sn":"CheckServiceCapability","rt":$n[5].Task$1(System.UInt32),"p":[$n[1].String,$n[4].CancellationToken]},{"a":2,"n":"Close","t":8,"pi":[{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":0}],"sn":"Close","rt":$n[5].Task,"p":[$n[4].CancellationToken]},{"a":2,"n":"ConnectService","t":8,"pi":[{"n":"c","pt":$n[0].Transport,"ps":0},{"n":"url","pt":$n[1].String,"ps":1},{"n":"username","dv":null,"o":true,"pt":$n[1].String,"ps":2},{"n":"credentials","dv":null,"o":true,"pt":$n[1].Object,"ps":3},{"n":"objecttype","dv":null,"o":true,"pt":$n[1].String,"ps":4},{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":5}],"sn":"ConnectService","rt":$n[5].Task$1(System.Object),"p":[$n[0].Transport,$n[1].String,$n[1].String,$n[1].Object,$n[1].String,$n[4].CancellationToken]},{"a":2,"n":"FindObjRef","t":8,"pi":[{"n":"path","pt":$n[1].String,"ps":0},{"n":"objecttype","pt":$n[1].String,"ps":1},{"n":"cancel","pt":$n[4].CancellationToken,"ps":2}],"sn":"FindObjRef","rt":$n[5].Task$1(System.Object),"p":[$n[1].String,$n[1].String,$n[4].CancellationToken]},{"a":2,"n":"GetPulledServiceType","t":8,"pi":[{"n":"type","pt":$n[1].String,"ps":0}],"sn":"GetPulledServiceType","rt":$n[0].ServiceFactory,"p":[$n[1].String]},{"a":2,"n":"GetPulledServiceTypes","t":8,"sn":"GetPulledServiceTypes","rt":$n[1].Array.type(System.String)},{"a":2,"n":"LogoutUser","t":8,"pi":[{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":0}],"sn":"LogoutUser","rt":$n[5].Task$1(System.String),"p":[$n[4].CancellationToken]},{"a":3,"n":"MessageEntryReceived","t":8,"pi":[{"n":"m","pt":$n[0].MessageEntry,"ps":0}],"sn":"MessageEntryReceived","rt":$n[1].Void,"p":[$n[0].MessageEntry]},{"ov":true,"a":2,"n":"MessageReceived","t":8,"pi":[{"n":"m","pt":$n[0].Message,"ps":0}],"sn":"MessageReceived","rt":$n[1].Void,"p":[$n[0].Message]},{"a":2,"n":"MonitorEnter","t":8,"pi":[{"n":"obj","pt":$n[1].Object,"ps":0},{"n":"timeout","pt":$n[1].Int32,"ps":1},{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":2}],"sn":"MonitorEnter","rt":$n[5].Task$1(RobotRaconteurWeb.RobotRaconteurNode.MonitorLock),"p":[$n[1].Object,$n[1].Int32,$n[4].CancellationToken]},{"a":2,"n":"MonitorExit","t":8,"pi":[{"n":"lock_","pt":$n[0].RobotRaconteurNode.MonitorLock,"ps":0},{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":1}],"sn":"MonitorExit","rt":$n[5].Task,"p":[$n[0].RobotRaconteurNode.MonitorLock,$n[4].CancellationToken]},{"v":true,"a":2,"n":"PackListType","t":8,"pi":[{"n":"o","pt":$n[1].Object,"ps":0}],"tpc":1,"tprm":["T"],"sn":"PackListType","rt":$n[1].Object,"p":[$n[1].Object]},{"v":true,"a":2,"n":"PackMapType","t":8,"pi":[{"n":"o","pt":$n[1].Object,"ps":0}],"tpc":2,"tprm":["K","T"],"sn":"PackMapType","rt":$n[1].Object,"p":[$n[1].Object]},{"v":true,"a":2,"n":"PackMultiDimArray","t":8,"pi":[{"n":"multiDimArray","pt":$n[0].MultiDimArray,"ps":0}],"sn":"PackMultiDimArray","rt":$n[1].Object,"p":[$n[0].MultiDimArray]},{"a":2,"n":"PackStructure","t":8,"pi":[{"n":"s","pt":$n[1].Object,"ps":0}],"sn":"PackStructure","rt":$n[0].MessageElementStructure,"p":[$n[1].Object]},{"v":true,"a":2,"n":"PackVarType","t":8,"pi":[{"n":"p","pt":$n[1].Object,"ps":0}],"sn":"PackVarType","rt":$n[1].Object,"p":[$n[1].Object]},{"a":2,"n":"PeriodicCleanupTask","t":8,"sn":"PeriodicCleanupTask","rt":$n[1].Void},{"a":3,"n":"ProcessCallbackCall","t":8,"pi":[{"n":"m","pt":$n[0].MessageEntry,"ps":0}],"sn":"ProcessCallbackCall","rt":$n[5].Task,"p":[$n[0].MessageEntry]},{"a":2,"n":"ProcessRequest","t":8,"pi":[{"n":"m","pt":$n[0].MessageEntry,"ps":0},{"n":"cancel","pt":$n[4].CancellationToken,"ps":1}],"sn":"ProcessRequest","rt":$n[5].Task$1(RobotRaconteurWeb.MessageEntry),"p":[$n[0].MessageEntry,$n[4].CancellationToken]},{"a":1,"n":"ProcessRequest_checkconnection","t":8,"sn":"ProcessRequest_checkconnection","rt":$n[5].Task},{"a":3,"n":"PullServiceDefinition","t":8,"pi":[{"n":"servicetype","pt":$n[1].String,"ps":0},{"n":"cancel","pt":$n[4].CancellationToken,"ps":1}],"sn":"PullServiceDefinition","rt":$n[5].Task$1(RobotRaconteurWeb.ServiceDefinition),"p":[$n[1].String,$n[4].CancellationToken]},{"a":3,"n":"PullServiceDefinitionAndImports","t":8,"pi":[{"n":"servicetype","pt":$n[1].String,"ps":0},{"n":"cancel","pt":$n[4].CancellationToken,"ps":1}],"sn":"PullServiceDefinitionAndImports","rt":$n[5].Task$1(System.Array.type(RobotRaconteurWeb.ServiceDefinition)),"p":[$n[1].String,$n[4].CancellationToken]},{"a":2,"n":"ReleaseObjectLock","t":8,"pi":[{"n":"obj","pt":$n[1].Object,"ps":0},{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":1}],"sn":"ReleaseObjectLock","rt":$n[5].Task$1(System.String),"p":[$n[1].Object,$n[4].CancellationToken]},{"a":2,"n":"RequestObjectLock","t":8,"pi":[{"n":"obj","pt":$n[1].Object,"ps":0},{"n":"flags","pt":$n[0].RobotRaconteurObjectLockFlags,"ps":1},{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":2}],"sn":"RequestObjectLock","rt":$n[5].Task$1(System.String),"p":[$n[1].Object,$n[0].RobotRaconteurObjectLockFlags,$n[4].CancellationToken]},{"a":2,"n":"SendMessage","t":8,"pi":[{"n":"m","pt":$n[0].MessageEntry,"ps":0},{"n":"cancel","pt":$n[4].CancellationToken,"ps":1}],"sn":"SendMessage$1","rt":$n[5].Task,"p":[$n[0].MessageEntry,$n[4].CancellationToken]},{"a":2,"n":"SendPipeMessage","t":8,"pi":[{"n":"m","pt":$n[0].MessageEntry,"ps":0},{"n":"cancel","pt":$n[4].CancellationToken,"ps":1}],"sn":"SendPipeMessage","rt":$n[5].Task,"p":[$n[0].MessageEntry,$n[4].CancellationToken]},{"a":2,"n":"SendWireMessage","t":8,"pi":[{"n":"m","pt":$n[0].MessageEntry,"ps":0},{"n":"cancel","pt":$n[4].CancellationToken,"ps":1}],"sn":"SendWireMessage","rt":$n[5].Task,"p":[$n[0].MessageEntry,$n[4].CancellationToken]},{"a":2,"n":"TryGetPulledServiceType","t":8,"pi":[{"n":"type","pt":$n[1].String,"ps":0},{"n":"f","out":true,"pt":$n[0].ServiceFactory,"ps":1}],"sn":"TryGetPulledServiceType","rt":$n[1].Boolean,"p":[$n[1].String,$n[0].ServiceFactory],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"v":true,"a":2,"n":"UnpackListType","t":8,"pi":[{"n":"o","pt":$n[1].Object,"ps":0}],"tpc":1,"tprm":["T"],"sn":"UnpackListType","rt":$n[1].Object,"p":[$n[1].Object]},{"v":true,"a":2,"n":"UnpackMapType","t":8,"pi":[{"n":"o","pt":$n[1].Object,"ps":0}],"tpc":2,"tprm":["K","T"],"sn":"UnpackMapType","rt":$n[1].Object,"p":[$n[1].Object]},{"v":true,"a":2,"n":"UnpackMultiDimArray","t":8,"pi":[{"n":"o","pt":$n[0].MessageElementMultiDimArray,"ps":0}],"sn":"UnpackMultiDimArray","rt":$n[0].MultiDimArray,"p":[$n[0].MessageElementMultiDimArray]},{"a":2,"n":"UnpackStructure","t":8,"pi":[{"n":"l","pt":$n[0].MessageElementStructure,"ps":0}],"tpc":1,"tprm":["T"],"sn":"UnpackStructure","rt":System.Object,"p":[$n[0].MessageElementStructure]},{"v":true,"a":2,"n":"UnpackVarType","t":8,"pi":[{"n":"o","pt":$n[0].MessageElement,"ps":0}],"sn":"UnpackVarType","rt":$n[1].Object,"p":[$n[0].MessageElement]},{"a":2,"n":"VerifyObjectImplements","t":8,"pi":[{"n":"objecttype","pt":$n[1].String,"ps":0},{"n":"implementstype","pt":$n[1].String,"ps":1}],"sn":"VerifyObjectImplements","rt":$n[1].Boolean,"p":[$n[1].String,$n[1].String],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":3,"n":"VerifyObjectImplements2","t":8,"pi":[{"n":"objecttype","pt":$n[1].String,"ps":0},{"n":"implementstype","pt":$n[1].String,"ps":1}],"sn":"VerifyObjectImplements2","rt":$n[1].Boolean,"p":[$n[1].String,$n[1].String],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"AuthenticatedUsername","t":16,"rt":$n[1].String,"g":{"a":2,"n":"get_AuthenticatedUsername","t":8,"rt":$n[1].String,"fg":"AuthenticatedUsername"},"fn":"AuthenticatedUsername"},{"a":2,"n":"Connected","t":16,"rt":$n[1].Boolean,"g":{"a":2,"n":"get_Connected","t":8,"rt":$n[1].Boolean,"fg":"Connected","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"fn":"Connected"},{"a":2,"n":"ServiceDef","t":16,"rt":$n[0].ServiceFactory,"g":{"a":2,"n":"get_ServiceDef","t":8,"rt":$n[0].ServiceFactory,"fg":"ServiceDef"},"fn":"ServiceDef"},{"a":2,"n":"ServiceName","t":16,"rt":$n[1].String,"g":{"a":2,"n":"get_ServiceName","t":8,"rt":$n[1].String,"fg":"ServiceName"},"fn":"ServiceName"},{"a":2,"n":"UserAuthenticated","t":16,"rt":$n[1].Boolean,"g":{"a":2,"n":"get_UserAuthenticated","t":8,"rt":$n[1].Boolean,"fg":"UserAuthenticated","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"fn":"UserAuthenticated"},{"a":2,"n":"Attributes","t":4,"rt":$n[3].Dictionary$2(System.String,System.Object),"sn":"Attributes"},{"a":3,"n":"DynamicServiceFactory_","t":4,"rt":$n[0].DynamicServiceFactory,"sn":"DynamicServiceFactory_","ro":true},{"a":3,"n":"LastMessageSentTime","t":4,"rt":$n[1].DateTime,"sn":"LastMessageSentTime","box":function ($v) { return Bridge.box($v, System.DateTime, System.DateTime.format);}},{"a":1,"n":"ProcessRequest_checkconnection_current","t":4,"rt":$n[5].Task,"sn":"ProcessRequest_checkconnection_current"},{"a":3,"n":"UsePulledServiceTypes","t":4,"rt":$n[1].Boolean,"sn":"UsePulledServiceTypes","ro":true,"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":3,"n":"cancel_source","t":4,"rt":$n[4].CancellationTokenSource,"sn":"cancel_source"},{"a":1,"n":"connecttransport","t":4,"rt":$n[0].Transport,"sn":"connecttransport"},{"a":1,"n":"connecturl","t":4,"rt":$n[1].String,"sn":"connecturl"},{"a":1,"n":"m_AuthenticatedUsername","t":4,"rt":$n[1].String,"sn":"m_AuthenticatedUsername"},{"a":3,"n":"m_Connected","t":4,"rt":$n[1].Boolean,"sn":"m_Connected","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":3,"n":"m_ServiceDef","t":4,"rt":$n[0].ServiceFactory,"sn":"m_ServiceDef"},{"a":3,"n":"m_ServiceName","t":4,"rt":$n[1].String,"sn":"m_ServiceName"},{"a":1,"n":"m_UserAuthenticated","t":4,"rt":$n[1].Boolean,"sn":"m_UserAuthenticated","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":3,"n":"pulled_service_defs","t":4,"rt":$n[3].Dictionary$2(System.String,RobotRaconteurWeb.ServiceDefinition),"sn":"pulled_service_defs","ro":true},{"a":3,"n":"pulled_service_types","t":4,"rt":$n[3].Dictionary$2(System.String,RobotRaconteurWeb.ServiceFactory),"sn":"pulled_service_types","ro":true},{"a":1,"n":"rec_loc","t":4,"rt":$n[1].Object,"sn":"rec_loc"},{"a":1,"n":"rec_wait","t":4,"rt":$n[3].Dictionary$2(System.UInt32,System.Threading.Tasks.TaskCompletionSource),"sn":"rec_wait"},{"a":1,"n":"request_number","t":4,"rt":$n[1].UInt32,"sn":"request_number","box":function ($v) { return Bridge.box($v, System.UInt32);}},{"a":5,"n":"stubs","t":4,"rt":$n[3].Dictionary$2(System.String,RobotRaconteurWeb.ServiceStub),"sn":"stubs"},{"a":2,"n":"ClientServiceListener","t":2,"ad":{"a":2,"n":"add_ClientServiceListener","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"addClientServiceListener","rt":$n[1].Void,"p":[Function]},"r":{"a":2,"n":"remove_ClientServiceListener","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"removeClientServiceListener","rt":$n[1].Void,"p":[Function]}}]}; }, $n);
    $m("RobotRaconteurWeb.ClientServiceListenerEventType", function () { return {"att":257,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"ClientClosed","is":true,"t":4,"rt":$n[0].ClientServiceListenerEventType,"sn":"ClientClosed","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.ClientServiceListenerEventType, System.Enum.toStringFn(RobotRaconteurWeb.ClientServiceListenerEventType));}}]}; }, $n);
    $m("RobotRaconteurWeb.Endpoint", function () { return {"att":1048705,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[0].RobotRaconteurNode],"pi":[{"n":"node","pt":$n[0].RobotRaconteurNode,"ps":0}],"sn":"ctor"},{"v":true,"a":3,"n":"CheckEndpointCapabilityMessage","t":8,"pi":[{"n":"m","pt":$n[0].Message,"ps":0}],"sn":"CheckEndpointCapabilityMessage","rt":$n[1].Void,"p":[$n[0].Message]},{"v":true,"a":2,"n":"EndpointCapability","t":8,"pi":[{"n":"name","pt":$n[1].String,"ps":0}],"sn":"EndpointCapability","rt":$n[1].UInt32,"p":[$n[1].String],"box":function ($v) { return Bridge.box($v, System.UInt32);}},{"ab":true,"a":2,"n":"MessageReceived","t":8,"pi":[{"n":"m","pt":$n[0].Message,"ps":0}],"sn":"MessageReceived","rt":$n[1].Void,"p":[$n[0].Message]},{"v":true,"a":2,"n":"SendMessage","t":8,"pi":[{"n":"m","pt":$n[0].Message,"ps":0},{"n":"cancel","pt":$n[4].CancellationToken,"ps":1}],"sn":"SendMessage","rt":$n[5].Task,"p":[$n[0].Message,$n[4].CancellationToken]},{"a":2,"n":"LocalEndpoint","t":16,"rt":$n[1].UInt32,"g":{"a":2,"n":"get_LocalEndpoint","t":8,"rt":$n[1].UInt32,"fg":"LocalEndpoint","box":function ($v) { return Bridge.box($v, System.UInt32);}},"fn":"LocalEndpoint"},{"a":2,"n":"RemoteEndpoint","t":16,"rt":$n[1].UInt32,"g":{"a":2,"n":"get_RemoteEndpoint","t":8,"rt":$n[1].UInt32,"fg":"RemoteEndpoint","box":function ($v) { return Bridge.box($v, System.UInt32);}},"fn":"RemoteEndpoint"},{"a":2,"n":"RemoteNodeID","t":16,"rt":$n[0].NodeID,"g":{"a":2,"n":"get_RemoteNodeID","t":8,"rt":$n[0].NodeID,"fg":"RemoteNodeID"},"fn":"RemoteNodeID"},{"a":2,"n":"RemoteNodeName","t":16,"rt":$n[1].String,"g":{"a":2,"n":"get_RemoteNodeName","t":8,"rt":$n[1].String,"fg":"RemoteNodeName"},"fn":"RemoteNodeName"},{"a":5,"n":"LastMessageReceivedTime","t":4,"rt":$n[1].DateTime,"sn":"LastMessageReceivedTime","box":function ($v) { return Bridge.box($v, System.DateTime, System.DateTime.format);}},{"a":3,"n":"MessageNumber","t":4,"rt":$n[1].UInt16,"sn":"MessageNumber","box":function ($v) { return Bridge.box($v, System.UInt16);}},{"a":3,"n":"MessageNumberLock","t":4,"rt":$n[1].Object,"sn":"MessageNumberLock"},{"a":5,"n":"TransportConnection","t":4,"rt":$n[0].ITransportConnection,"sn":"TransportConnection"},{"a":5,"n":"m_LocalEndpoint","t":4,"rt":$n[1].UInt32,"sn":"m_LocalEndpoint","box":function ($v) { return Bridge.box($v, System.UInt32);}},{"a":5,"n":"m_RemoteEndpoint","t":4,"rt":$n[1].UInt32,"sn":"m_RemoteEndpoint","box":function ($v) { return Bridge.box($v, System.UInt32);}},{"a":5,"n":"m_RemoteNodeID","t":4,"rt":$n[0].NodeID,"sn":"m_RemoteNodeID"},{"a":3,"n":"m_RemoteNodeName","t":4,"rt":$n[1].String,"sn":"m_RemoteNodeName"},{"a":5,"n":"node","t":4,"rt":$n[0].RobotRaconteurNode,"sn":"node","ro":true},{"a":5,"n":"transport","t":4,"rt":$n[1].UInt32,"sn":"transport","box":function ($v) { return Bridge.box($v, System.UInt32);}}]}; }, $n);
    $m("RobotRaconteurWeb.RobotRaconteurException", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[1].String,$n[1].Exception],"pi":[{"n":"message","pt":$n[1].String,"ps":0},{"n":"innerexception","pt":$n[1].Exception,"ps":1}],"sn":"$ctor2"},{"a":2,"n":".ctor","t":1,"p":[$n[0].MessageErrorType,$n[1].String,$n[1].String],"pi":[{"n":"ErrorCode","pt":$n[0].MessageErrorType,"ps":0},{"n":"error","pt":$n[1].String,"ps":1},{"n":"message","pt":$n[1].String,"ps":2}],"sn":"$ctor1"},{"ov":true,"a":2,"n":"ToString","t":8,"sn":"toString","rt":$n[1].String},{"a":2,"n":"Error","t":4,"rt":$n[1].String,"sn":"error"},{"a":2,"n":"ErrorCode","t":4,"rt":$n[0].MessageErrorType,"sn":"errorCode","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageErrorType, System.Enum.toStringFn(RobotRaconteurWeb.MessageErrorType));}}]}; }, $n);
    $m("RobotRaconteurWeb.ConnectionException", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].String],"pi":[{"n":"message","pt":$n[1].String,"ps":0}],"sn":"ctor"}]}; }, $n);
    $m("RobotRaconteurWeb.ProtocolException", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].String],"pi":[{"n":"message","pt":$n[1].String,"ps":0}],"sn":"ctor"}]}; }, $n);
    $m("RobotRaconteurWeb.ServiceNotFoundException", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].String],"pi":[{"n":"message","pt":$n[1].String,"ps":0}],"sn":"ctor"}]}; }, $n);
    $m("RobotRaconteurWeb.ObjectNotFoundException", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].String],"pi":[{"n":"message","pt":$n[1].String,"ps":0}],"sn":"ctor"}]}; }, $n);
    $m("RobotRaconteurWeb.InvalidEndpointException", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].String],"pi":[{"n":"message","pt":$n[1].String,"ps":0}],"sn":"ctor"}]}; }, $n);
    $m("RobotRaconteurWeb.EndpointCommunicationFatalException", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].String],"pi":[{"n":"message","pt":$n[1].String,"ps":0}],"sn":"ctor"}]}; }, $n);
    $m("RobotRaconteurWeb.NodeNotFoundException", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].String],"pi":[{"n":"message","pt":$n[1].String,"ps":0}],"sn":"ctor"}]}; }, $n);
    $m("RobotRaconteurWeb.ServiceException", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].String],"pi":[{"n":"message","pt":$n[1].String,"ps":0}],"sn":"ctor"}]}; }, $n);
    $m("RobotRaconteurWeb.MemberNotFoundException", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].String],"pi":[{"n":"message","pt":$n[1].String,"ps":0}],"sn":"ctor"}]}; }, $n);
    $m("RobotRaconteurWeb.MemberFormatMismatchException", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].String],"pi":[{"n":"message","pt":$n[1].String,"ps":0}],"sn":"ctor"}]}; }, $n);
    $m("RobotRaconteurWeb.DataTypeMismatchException", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].String],"pi":[{"n":"message","pt":$n[1].String,"ps":0}],"sn":"ctor"}]}; }, $n);
    $m("RobotRaconteurWeb.DataTypeException", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].String],"pi":[{"n":"message","pt":$n[1].String,"ps":0}],"sn":"ctor"}]}; }, $n);
    $m("RobotRaconteurWeb.DataSerializationException", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].String],"pi":[{"n":"message","pt":$n[1].String,"ps":0}],"sn":"ctor"}]}; }, $n);
    $m("RobotRaconteurWeb.MessageEntryNotFoundException", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].String],"pi":[{"n":"message","pt":$n[1].String,"ps":0}],"sn":"ctor"}]}; }, $n);
    $m("RobotRaconteurWeb.MessageElementNotFoundException", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].String],"pi":[{"n":"message","pt":$n[1].String,"ps":0}],"sn":"ctor"}]}; }, $n);
    $m("RobotRaconteurWeb.UnknownException", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].String,$n[1].String],"pi":[{"n":"error","pt":$n[1].String,"ps":0},{"n":"message","pt":$n[1].String,"ps":1}],"sn":"ctor"}]}; }, $n);
    $m("RobotRaconteurWeb.OperationFailedException", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].String],"pi":[{"n":"message","pt":$n[1].String,"ps":0}],"sn":"ctor"}]}; }, $n);
    $m("RobotRaconteurWeb.InternalErrorException", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].String],"pi":[{"n":"message","pt":$n[1].String,"ps":0}],"sn":"ctor"}]}; }, $n);
    $m("RobotRaconteurWeb.SystemResourcePermissionDeniedException", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].String],"pi":[{"n":"message","pt":$n[1].String,"ps":0}],"sn":"ctor"}]}; }, $n);
    $m("RobotRaconteurWeb.OutOfSystemResourceException", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].String],"pi":[{"n":"message","pt":$n[1].String,"ps":0}],"sn":"ctor"}]}; }, $n);
    $m("RobotRaconteurWeb.SystemResourceException", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].String],"pi":[{"n":"message","pt":$n[1].String,"ps":0}],"sn":"ctor"}]}; }, $n);
    $m("RobotRaconteurWeb.ResourceNotFoundException", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].String],"pi":[{"n":"message","pt":$n[1].String,"ps":0}],"sn":"ctor"}]}; }, $n);
    $m("RobotRaconteurWeb.IOException", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].String],"pi":[{"n":"message","pt":$n[1].String,"ps":0}],"sn":"ctor"}]}; }, $n);
    $m("RobotRaconteurWeb.BufferLimitViolationException", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].String],"pi":[{"n":"message","pt":$n[1].String,"ps":0}],"sn":"ctor"}]}; }, $n);
    $m("RobotRaconteurWeb.ServiceDefinitionException", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].String],"pi":[{"n":"message","pt":$n[1].String,"ps":0}],"sn":"ctor"}]}; }, $n);
    $m("RobotRaconteurWeb.OutOfRangeException", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].String],"pi":[{"n":"message","pt":$n[1].String,"ps":0}],"sn":"ctor"}]}; }, $n);
    $m("RobotRaconteurWeb.KeyNotFoundException", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].String],"pi":[{"n":"message","pt":$n[1].String,"ps":0}],"sn":"ctor"}]}; }, $n);
    $m("RobotRaconteurWeb.RobotRaconteurRemoteException", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].String,$n[1].String],"pi":[{"n":"error","pt":$n[1].String,"ps":0},{"n":"message","pt":$n[1].String,"ps":1}],"sn":"ctor"}]}; }, $n);
    $m("RobotRaconteurWeb.RequestTimeoutException", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].String],"pi":[{"n":"message","pt":$n[1].String,"ps":0}],"sn":"ctor"}]}; }, $n);
    $m("RobotRaconteurWeb.ReadOnlyMemberException", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].String],"pi":[{"n":"message","pt":$n[1].String,"ps":0}],"sn":"ctor"}]}; }, $n);
    $m("RobotRaconteurWeb.WriteOnlyMemberException", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].String],"pi":[{"n":"message","pt":$n[1].String,"ps":0}],"sn":"ctor"}]}; }, $n);
    $m("RobotRaconteurWeb.MemberBusyException", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].String],"pi":[{"n":"message","pt":$n[1].String,"ps":0}],"sn":"ctor"}]}; }, $n);
    $m("RobotRaconteurWeb.ValueNotSetException", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].String],"pi":[{"n":"message","pt":$n[1].String,"ps":0}],"sn":"ctor"}]}; }, $n);
    $m("RobotRaconteurWeb.AuthenticationException", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].String],"pi":[{"n":"message","pt":$n[1].String,"ps":0}],"sn":"ctor"}]}; }, $n);
    $m("RobotRaconteurWeb.ObjectLockedException", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].String],"pi":[{"n":"message","pt":$n[1].String,"ps":0}],"sn":"ctor"}]}; }, $n);
    $m("RobotRaconteurWeb.PermissionDeniedException", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].String],"pi":[{"n":"message","pt":$n[1].String,"ps":0}],"sn":"ctor"}]}; }, $n);
    $m("RobotRaconteurWeb.AbortOperationException", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].String],"pi":[{"n":"message","pt":$n[1].String,"ps":0}],"sn":"ctor"}]}; }, $n);
    $m("RobotRaconteurWeb.OperationAbortedException", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].String],"pi":[{"n":"message","pt":$n[1].String,"ps":0}],"sn":"ctor"}]}; }, $n);
    $m("RobotRaconteurWeb.StopIterationException", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].String],"pi":[{"n":"message","pt":$n[1].String,"ps":0}],"sn":"ctor"}]}; }, $n);
    $m("RobotRaconteurWeb.RobotRaconteurExceptionUtil", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"ExceptionToMessageEntry","is":true,"t":8,"pi":[{"n":"exception","pt":$n[1].Exception,"ps":0},{"n":"entry","pt":$n[0].MessageEntry,"ps":1}],"sn":"ExceptionToMessageEntry","rt":$n[1].Void,"p":[$n[1].Exception,$n[0].MessageEntry]},{"a":2,"n":"MessageEntryToException","is":true,"t":8,"pi":[{"n":"entry","pt":$n[0].MessageEntry,"ps":0}],"sn":"MessageEntryToException","rt":$n[1].Exception,"p":[$n[0].MessageEntry]}]}; }, $n);
    $m("RobotRaconteurWeb.Generator1$2", function (ReturnType, ParamType) { return {"att":161,"a":2,"m":[{"ab":true,"a":2,"n":"Abort","t":8,"pi":[{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":0}],"sn":"RobotRaconteurWeb$Generator1$2$" + Bridge.getTypeAlias(ReturnType) + "$" + Bridge.getTypeAlias(ParamType) + "$Abort","rt":$n[5].Task,"p":[$n[4].CancellationToken]},{"ab":true,"a":2,"n":"Close","t":8,"pi":[{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":0}],"sn":"RobotRaconteurWeb$Generator1$2$" + Bridge.getTypeAlias(ReturnType) + "$" + Bridge.getTypeAlias(ParamType) + "$Close","rt":$n[5].Task,"p":[$n[4].CancellationToken]},{"ab":true,"a":2,"n":"Next","t":8,"pi":[{"n":"param","pt":ParamType,"ps":0},{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":1}],"sn":"RobotRaconteurWeb$Generator1$2$" + Bridge.getTypeAlias(ReturnType) + "$" + Bridge.getTypeAlias(ParamType) + "$Next","rt":$n[5].Task$1(ReturnType),"p":[ParamType,$n[4].CancellationToken]}]}; }, $n);
    $m("RobotRaconteurWeb.Generator2$1", function (ReturnType) { return {"att":161,"a":2,"m":[{"ab":true,"a":2,"n":"Abort","t":8,"pi":[{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":0}],"sn":"RobotRaconteurWeb$Generator2$1$" + Bridge.getTypeAlias(ReturnType) + "$Abort","rt":$n[5].Task,"p":[$n[4].CancellationToken]},{"ab":true,"a":2,"n":"Close","t":8,"pi":[{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":0}],"sn":"RobotRaconteurWeb$Generator2$1$" + Bridge.getTypeAlias(ReturnType) + "$Close","rt":$n[5].Task,"p":[$n[4].CancellationToken]},{"ab":true,"a":2,"n":"Next","t":8,"pi":[{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":0}],"sn":"RobotRaconteurWeb$Generator2$1$" + Bridge.getTypeAlias(ReturnType) + "$Next","rt":$n[5].Task$1(ReturnType),"p":[$n[4].CancellationToken]},{"ab":true,"a":2,"n":"NextAll","t":8,"pi":[{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":0}],"sn":"RobotRaconteurWeb$Generator2$1$" + Bridge.getTypeAlias(ReturnType) + "$NextAll","rt":$n[5].Task$1(System.Array.type(ReturnType)),"p":[$n[4].CancellationToken]}]}; }, $n);
    $m("RobotRaconteurWeb.Generator3$1", function (ParamType) { return {"att":161,"a":2,"m":[{"ab":true,"a":2,"n":"Abort","t":8,"pi":[{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":0}],"sn":"RobotRaconteurWeb$Generator3$1$" + Bridge.getTypeAlias(ParamType) + "$Abort","rt":$n[5].Task,"p":[$n[4].CancellationToken]},{"ab":true,"a":2,"n":"Close","t":8,"pi":[{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":0}],"sn":"RobotRaconteurWeb$Generator3$1$" + Bridge.getTypeAlias(ParamType) + "$Close","rt":$n[5].Task,"p":[$n[4].CancellationToken]},{"ab":true,"a":2,"n":"Next","t":8,"pi":[{"n":"param","pt":ParamType,"ps":0},{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":1}],"sn":"RobotRaconteurWeb$Generator3$1$" + Bridge.getTypeAlias(ParamType) + "$Next","rt":$n[5].Task,"p":[ParamType,$n[4].CancellationToken]}]}; }, $n);
    $m("RobotRaconteurWeb.GeneratorClientBase", function () { return {"att":1048705,"a":2,"m":[{"a":3,"n":".ctor","t":1,"p":[$n[1].String,$n[0].ServiceStub,$n[1].Int32],"pi":[{"n":"membername","pt":$n[1].String,"ps":0},{"n":"stub","pt":$n[0].ServiceStub,"ps":1},{"n":"id","pt":$n[1].Int32,"ps":2}],"sn":"ctor"},{"a":2,"n":"Abort","t":8,"pi":[{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":0}],"sn":"Abort","rt":$n[5].Task,"p":[$n[4].CancellationToken]},{"a":2,"n":"Close","t":8,"pi":[{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":0}],"sn":"Close","rt":$n[5].Task,"p":[$n[4].CancellationToken]},{"a":2,"n":"NextBase","t":8,"pi":[{"n":"v","pt":$n[0].MessageElement,"ps":0},{"n":"cancel","pt":$n[4].CancellationToken,"ps":1}],"sn":"NextBase","rt":$n[5].Task$1(RobotRaconteurWeb.MessageElement),"p":[$n[0].MessageElement,$n[4].CancellationToken]},{"a":2,"n":"MemberName","t":16,"rt":$n[1].String,"g":{"a":2,"n":"get_MemberName","t":8,"rt":$n[1].String,"fg":"MemberName"},"fn":"MemberName"},{"a":4,"n":"id","t":4,"rt":$n[1].Int32,"sn":"id","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":3,"n":"membername","t":4,"rt":$n[1].String,"sn":"membername"},{"a":3,"n":"stub","t":4,"rt":$n[0].ServiceStub,"sn":"stub"}]}; }, $n);
    $m("RobotRaconteurWeb.Generator1Client$2", function (ReturnType, ParamType) { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].String,$n[0].ServiceStub,$n[1].Int32],"pi":[{"n":"membername","pt":$n[1].String,"ps":0},{"n":"stub","pt":$n[0].ServiceStub,"ps":1},{"n":"id","pt":$n[1].Int32,"ps":2}],"sn":"ctor"},{"a":2,"n":"Next","t":8,"pi":[{"n":"param","pt":ParamType,"ps":0},{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":1}],"sn":"Next","rt":$n[5].Task$1(ReturnType),"p":[ParamType,$n[4].CancellationToken]}]}; }, $n);
    $m("RobotRaconteurWeb.Generator2Client$1", function (ReturnType) { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].String,$n[0].ServiceStub,$n[1].Int32],"pi":[{"n":"membername","pt":$n[1].String,"ps":0},{"n":"stub","pt":$n[0].ServiceStub,"ps":1},{"n":"id","pt":$n[1].Int32,"ps":2}],"sn":"ctor"},{"a":2,"n":"Next","t":8,"pi":[{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":0}],"sn":"Next","rt":$n[5].Task$1(ReturnType),"p":[$n[4].CancellationToken]},{"a":2,"n":"NextAll","t":8,"pi":[{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":0}],"sn":"NextAll","rt":$n[5].Task$1(System.Array.type(ReturnType)),"p":[$n[4].CancellationToken]}]}; }, $n);
    $m("RobotRaconteurWeb.Generator3Client$1", function (ParamType) { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].String,$n[0].ServiceStub,$n[1].Int32],"pi":[{"n":"membername","pt":$n[1].String,"ps":0},{"n":"stub","pt":$n[0].ServiceStub,"ps":1},{"n":"id","pt":$n[1].Int32,"ps":2}],"sn":"ctor"},{"a":2,"n":"Next","t":8,"pi":[{"n":"param","pt":ParamType,"ps":0},{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":1}],"sn":"Next","rt":$n[5].Task,"p":[ParamType,$n[4].CancellationToken]}]}; }, $n);
    $m("RobotRaconteurWeb.GeneratorServerBase", function () { return {"att":1048705,"a":2,"m":[{"a":3,"n":".ctor","t":1,"p":[$n[1].String,$n[1].Int32,$n[0].ServiceSkel,$n[0].ServerEndpoint],"pi":[{"n":"name","pt":$n[1].String,"ps":0},{"n":"index","pt":$n[1].Int32,"ps":1},{"n":"skel","pt":$n[0].ServiceSkel,"ps":2},{"n":"ep","pt":$n[0].ServerEndpoint,"ps":3}],"sn":"ctor"},{"ab":true,"a":2,"n":"CallNext","t":8,"pi":[{"n":"m","pt":$n[0].MessageEntry,"ps":0}],"sn":"CallNext","rt":$n[5].Task$1(RobotRaconteurWeb.MessageEntry),"p":[$n[0].MessageEntry]},{"a":2,"n":"Endpoint","t":16,"rt":$n[1].UInt32,"g":{"a":2,"n":"get_Endpoint","t":8,"rt":$n[1].UInt32,"fg":"Endpoint","box":function ($v) { return Bridge.box($v, System.UInt32);}},"fn":"Endpoint"},{"a":3,"n":"ep","t":4,"rt":$n[0].ServerEndpoint,"sn":"ep"},{"a":3,"n":"index","t":4,"rt":$n[1].Int32,"sn":"index","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":5,"n":"last_access_time","t":4,"rt":$n[1].DateTime,"sn":"last_access_time","box":function ($v) { return Bridge.box($v, System.DateTime, System.DateTime.format);}},{"a":3,"n":"name","t":4,"rt":$n[1].String,"sn":"name"},{"a":3,"n":"skel","t":4,"rt":$n[0].ServiceSkel,"sn":"skel"}]}; }, $n);
    $m("RobotRaconteurWeb.Generator1Server$2", function (ReturnType, ParamType) { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[0].Generator1$2(ReturnType,ParamType),$n[1].String,$n[1].Int32,$n[0].ServiceSkel,$n[0].ServerEndpoint],"pi":[{"n":"generator","pt":$n[0].Generator1$2(ReturnType,ParamType),"ps":0},{"n":"name","pt":$n[1].String,"ps":1},{"n":"id","pt":$n[1].Int32,"ps":2},{"n":"skel","pt":$n[0].ServiceSkel,"ps":3},{"n":"ep","pt":$n[0].ServerEndpoint,"ps":4}],"sn":"ctor"},{"ov":true,"a":2,"n":"CallNext","t":8,"pi":[{"n":"m","pt":$n[0].MessageEntry,"ps":0}],"sn":"CallNext","rt":$n[5].Task$1(RobotRaconteurWeb.MessageEntry),"p":[$n[0].MessageEntry]},{"a":3,"n":"generator","t":4,"rt":$n[0].Generator1$2(ReturnType,ParamType),"sn":"generator"}]}; }, $n);
    $m("RobotRaconteurWeb.Generator2Server$1", function (ReturnType) { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[0].Generator2$1(ReturnType),$n[1].String,$n[1].Int32,$n[0].ServiceSkel,$n[0].ServerEndpoint],"pi":[{"n":"generator","pt":$n[0].Generator2$1(ReturnType),"ps":0},{"n":"name","pt":$n[1].String,"ps":1},{"n":"id","pt":$n[1].Int32,"ps":2},{"n":"skel","pt":$n[0].ServiceSkel,"ps":3},{"n":"ep","pt":$n[0].ServerEndpoint,"ps":4}],"sn":"ctor"},{"ov":true,"a":2,"n":"CallNext","t":8,"pi":[{"n":"m","pt":$n[0].MessageEntry,"ps":0}],"sn":"CallNext","rt":$n[5].Task$1(RobotRaconteurWeb.MessageEntry),"p":[$n[0].MessageEntry]},{"a":3,"n":"generator","t":4,"rt":$n[0].Generator2$1(ReturnType),"sn":"generator"}]}; }, $n);
    $m("RobotRaconteurWeb.Generator3Server$1", function (ParamType) { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[0].Generator3$1(ParamType),$n[1].String,$n[1].Int32,$n[0].ServiceSkel,$n[0].ServerEndpoint],"pi":[{"n":"generator","pt":$n[0].Generator3$1(ParamType),"ps":0},{"n":"name","pt":$n[1].String,"ps":1},{"n":"id","pt":$n[1].Int32,"ps":2},{"n":"skel","pt":$n[0].ServiceSkel,"ps":3},{"n":"ep","pt":$n[0].ServerEndpoint,"ps":4}],"sn":"ctor"},{"ov":true,"a":2,"n":"CallNext","t":8,"pi":[{"n":"m","pt":$n[0].MessageEntry,"ps":0}],"sn":"CallNext","rt":$n[5].Task$1(RobotRaconteurWeb.MessageEntry),"p":[$n[0].MessageEntry]},{"a":3,"n":"generator","t":4,"rt":$n[0].Generator3$1(ParamType),"sn":"generator"}]}; }, $n);
    $m("RobotRaconteurWeb.EnumeratorGenerator$1", function (T) { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[3].IEnumerable$1(T)],"pi":[{"n":"enumerable","pt":$n[3].IEnumerable$1(T),"ps":0}],"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[3].IEnumerator$1(T)],"pi":[{"n":"enumerator","pt":$n[3].IEnumerator$1(T),"ps":0}],"sn":"$ctor1"},{"a":2,"n":"Abort","t":8,"pi":[{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":0}],"sn":"Abort","rt":$n[5].Task,"p":[$n[4].CancellationToken]},{"a":2,"n":"Close","t":8,"pi":[{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":0}],"sn":"Close","rt":$n[5].Task,"p":[$n[4].CancellationToken]},{"a":2,"n":"Next","t":8,"pi":[{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":0}],"sn":"Next","rt":$n[5].Task$1(T),"p":[$n[4].CancellationToken]},{"a":2,"n":"NextAll","t":8,"pi":[{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":0}],"sn":"NextAll","rt":$n[5].Task$1(System.Array.type(T)),"p":[$n[4].CancellationToken]},{"a":1,"n":"aborted","t":4,"rt":$n[1].Boolean,"sn":"aborted","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"closed","t":4,"rt":$n[1].Boolean,"sn":"closed","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"enumerator","t":4,"rt":$n[3].IEnumerator$1(T),"sn":"enumerator"}]}; }, $n);
    $m("RobotRaconteurWeb.ArrayBinaryWriter", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[7].Stream,$n[1].Int32],"pi":[{"n":"s","pt":$n[7].Stream,"ps":0},{"n":"length","pt":$n[1].Int32,"ps":1}],"sn":"$ctor1"},{"a":2,"n":".ctor","t":1,"p":[$n[7].MemoryStream,$n[1].Array.type(System.Byte),$n[1].Int32],"pi":[{"n":"s","pt":$n[7].MemoryStream,"ps":0},{"n":"membuf1","pt":$n[1].Array.type(System.Byte),"ps":1},{"n":"length","pt":$n[1].Int32,"ps":2}],"sn":"ctor"},{"a":2,"n":"GetStringByteCount8","is":true,"t":8,"pi":[{"n":"s","pt":$n[1].String,"ps":0}],"sn":"GetStringByteCount8","rt":$n[1].Int32,"p":[$n[1].String],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"PopLimit","t":8,"sn":"PopLimit","rt":$n[1].Void},{"a":2,"n":"PushAbsoluteLimit","t":8,"pi":[{"n":"limit","pt":$n[1].UInt32,"ps":0}],"sn":"PushAbsoluteLimit","rt":$n[1].Void,"p":[$n[1].UInt32]},{"a":2,"n":"PushRelativeLimit","t":8,"pi":[{"n":"limit","pt":$n[1].UInt32,"ps":0}],"sn":"PushRelativeLimit","rt":$n[1].Void,"p":[$n[1].UInt32]},{"a":2,"n":"Reset","t":8,"pi":[{"n":"length","pt":$n[1].Int32,"ps":0}],"sn":"Reset","rt":$n[1].Void,"p":[$n[1].Int32]},{"ov":true,"a":2,"n":"Write","t":8,"pi":[{"n":"value","pt":$n[1].Byte,"ps":0}],"sn":"Write$1","rt":$n[1].Void,"p":[$n[1].Byte]},{"ov":true,"a":2,"n":"Write","t":8,"pi":[{"n":"value","pt":$n[1].Double,"ps":0}],"sn":"Write$8","rt":$n[1].Void,"p":[$n[1].Double]},{"ov":true,"a":2,"n":"Write","t":8,"pi":[{"n":"value","pt":$n[1].Int16,"ps":0}],"sn":"Write$9","rt":$n[1].Void,"p":[$n[1].Int16]},{"ov":true,"a":2,"n":"Write","t":8,"pi":[{"n":"value","pt":$n[1].Int32,"ps":0}],"sn":"Write$10","rt":$n[1].Void,"p":[$n[1].Int32]},{"ov":true,"a":2,"n":"Write","t":8,"pi":[{"n":"value","pt":$n[1].Int64,"ps":0}],"sn":"Write$11","rt":$n[1].Void,"p":[$n[1].Int64]},{"ov":true,"a":2,"n":"Write","t":8,"pi":[{"n":"value","pt":$n[1].SByte,"ps":0}],"sn":"Write$12","rt":$n[1].Void,"p":[$n[1].SByte]},{"ov":true,"a":2,"n":"Write","t":8,"pi":[{"n":"value","pt":$n[1].Single,"ps":0}],"sn":"Write$13","rt":$n[1].Void,"p":[$n[1].Single]},{"ov":true,"a":2,"n":"Write","t":8,"pi":[{"n":"value","pt":$n[1].UInt16,"ps":0}],"sn":"Write$15","rt":$n[1].Void,"p":[$n[1].UInt16]},{"ov":true,"a":2,"n":"Write","t":8,"pi":[{"n":"value","pt":$n[1].UInt32,"ps":0}],"sn":"Write$16","rt":$n[1].Void,"p":[$n[1].UInt32]},{"ov":true,"a":2,"n":"Write","t":8,"pi":[{"n":"value","pt":$n[1].UInt64,"ps":0}],"sn":"Write$17","rt":$n[1].Void,"p":[$n[1].UInt64]},{"ov":true,"a":2,"n":"Write","t":8,"pi":[{"n":"buffer","pt":$n[1].Array.type(System.Byte),"ps":0},{"n":"index","pt":$n[1].Int32,"ps":1},{"n":"count","pt":$n[1].Int32,"ps":2}],"sn":"Write$3","rt":$n[1].Void,"p":[$n[1].Array.type(System.Byte),$n[1].Int32,$n[1].Int32]},{"a":2,"n":"WriteArray","t":8,"pi":[{"n":"a","pt":Array,"ps":0}],"sn":"WriteArray","rt":$n[1].Void,"p":[Array]},{"a":2,"n":"WriteNumber","t":8,"pi":[{"n":"n","pt":$n[1].Object,"ps":0},{"n":"t","pt":$n[0].DataTypes,"ps":1}],"sn":"WriteNumber","rt":$n[1].Void,"p":[$n[1].Object,$n[0].DataTypes]},{"a":2,"n":"WriteString8","t":8,"pi":[{"n":"s","pt":$n[1].String,"ps":0}],"sn":"WriteString8","rt":$n[1].Void,"p":[$n[1].String]},{"a":2,"n":"CurrentLimit","t":16,"rt":$n[1].UInt32,"g":{"a":2,"n":"get_CurrentLimit","t":8,"rt":$n[1].UInt32,"fg":"CurrentLimit","box":function ($v) { return Bridge.box($v, System.UInt32);}},"fn":"CurrentLimit"},{"a":2,"n":"DistanceFromLimit","t":16,"rt":$n[1].Int32,"g":{"a":2,"n":"get_DistanceFromLimit","t":8,"rt":$n[1].Int32,"fg":"DistanceFromLimit","box":function ($v) { return Bridge.box($v, System.Int32);}},"fn":"DistanceFromLimit"},{"a":2,"n":"Position","t":16,"rt":$n[1].UInt32,"g":{"a":2,"n":"get_Position","t":8,"rt":$n[1].UInt32,"fg":"Position","box":function ($v) { return Bridge.box($v, System.UInt32);}},"fn":"Position"},{"a":1,"n":"abuffer","t":4,"rt":$n[1].Array.type(System.Byte),"sn":"abuffer"},{"a":1,"n":"bufsize","is":true,"t":4,"rt":$n[1].Int32,"sn":"bufsize","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"limits","t":4,"rt":$n[3].Stack$1(System.UInt32),"sn":"limits"},{"a":3,"n":"m_Position","t":4,"rt":$n[1].UInt32,"sn":"m_Position","box":function ($v) { return Bridge.box($v, System.UInt32);}},{"a":1,"n":"membuf","t":4,"rt":$n[1].Array.type(System.Byte),"sn":"membuf"},{"a":1,"n":"memstream","t":4,"rt":$n[1].Boolean,"sn":"memstream","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"s_memstream","t":4,"rt":$n[7].MemoryStream,"sn":"s_memstream"}]}; }, $n);
    $m("RobotRaconteurWeb.ArrayBinaryReader", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[7].Stream,$n[1].Int32],"pi":[{"n":"s","pt":$n[7].Stream,"ps":0},{"n":"length","pt":$n[1].Int32,"ps":1}],"sn":"$ctor1"},{"a":2,"n":".ctor","t":1,"p":[$n[7].MemoryStream,$n[1].Array.type(System.Byte),$n[1].Int32],"pi":[{"n":"s","pt":$n[7].MemoryStream,"ps":0},{"n":"membuf1","pt":$n[1].Array.type(System.Byte),"ps":1},{"n":"length","pt":$n[1].Int32,"ps":2}],"sn":"ctor"},{"a":2,"n":"PopLimit","t":8,"sn":"PopLimit","rt":$n[1].Void},{"a":2,"n":"PushAbsoluteLimit","t":8,"pi":[{"n":"limit","pt":$n[1].UInt32,"ps":0}],"sn":"PushAbsoluteLimit","rt":$n[1].Void,"p":[$n[1].UInt32]},{"a":2,"n":"PushRelativeLimit","t":8,"pi":[{"n":"limit","pt":$n[1].UInt32,"ps":0}],"sn":"PushRelativeLimit","rt":$n[1].Void,"p":[$n[1].UInt32]},{"ov":true,"a":2,"n":"Read","t":8,"sn":"Read","rt":$n[1].Int32,"box":function ($v) { return Bridge.box($v, System.Int32);}},{"ov":true,"a":2,"n":"Read","t":8,"pi":[{"n":"buffer","pt":$n[1].Array.type(System.Byte),"ps":0},{"n":"index","pt":$n[1].Int32,"ps":1},{"n":"count","pt":$n[1].Int32,"ps":2}],"sn":"Read$1","rt":$n[1].Int32,"p":[$n[1].Array.type(System.Byte),$n[1].Int32,$n[1].Int32],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"ReadArray","t":8,"pi":[{"n":"a","pt":Array,"ps":0}],"sn":"ReadArray","rt":$n[1].Void,"p":[Array]},{"ov":true,"a":2,"n":"ReadByte","t":8,"sn":"ReadByte","rt":$n[1].Byte,"box":function ($v) { return Bridge.box($v, System.Byte);}},{"ov":true,"a":2,"n":"ReadDouble","t":8,"sn":"ReadDouble","rt":$n[1].Double,"box":function ($v) { return Bridge.box($v, System.Double, System.Double.format, System.Double.getHashCode);}},{"ov":true,"a":2,"n":"ReadInt16","t":8,"sn":"ReadInt16","rt":$n[1].Int16,"box":function ($v) { return Bridge.box($v, System.Int16);}},{"ov":true,"a":2,"n":"ReadInt32","t":8,"sn":"ReadInt32","rt":$n[1].Int32,"box":function ($v) { return Bridge.box($v, System.Int32);}},{"ov":true,"a":2,"n":"ReadInt64","t":8,"sn":"ReadInt64","rt":$n[1].Int64},{"a":2,"n":"ReadNumber","t":8,"pi":[{"n":"t","pt":$n[0].DataTypes,"ps":0}],"sn":"ReadNumber","rt":$n[1].Object,"p":[$n[0].DataTypes]},{"ov":true,"a":2,"n":"ReadSByte","t":8,"sn":"ReadSByte","rt":$n[1].SByte,"box":function ($v) { return Bridge.box($v, System.SByte);}},{"ov":true,"a":2,"n":"ReadSingle","t":8,"sn":"ReadSingle","rt":$n[1].Single,"box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"ReadString8","t":8,"pi":[{"n":"l","pt":$n[1].UInt32,"ps":0}],"sn":"ReadString8","rt":$n[1].String,"p":[$n[1].UInt32]},{"ov":true,"a":2,"n":"ReadUInt16","t":8,"sn":"ReadUInt16","rt":$n[1].UInt16,"box":function ($v) { return Bridge.box($v, System.UInt16);}},{"ov":true,"a":2,"n":"ReadUInt32","t":8,"sn":"ReadUInt32","rt":$n[1].UInt32,"box":function ($v) { return Bridge.box($v, System.UInt32);}},{"ov":true,"a":2,"n":"ReadUInt64","t":8,"sn":"ReadUInt64","rt":$n[1].UInt64},{"a":2,"n":"Reset","t":8,"pi":[{"n":"length","pt":$n[1].Int32,"ps":0}],"sn":"Reset","rt":$n[1].Void,"p":[$n[1].Int32]},{"a":2,"n":"CurrentLimit","t":16,"rt":$n[1].UInt32,"g":{"a":2,"n":"get_CurrentLimit","t":8,"rt":$n[1].UInt32,"fg":"CurrentLimit","box":function ($v) { return Bridge.box($v, System.UInt32);}},"fn":"CurrentLimit"},{"a":2,"n":"DistanceFromLimit","t":16,"rt":$n[1].Int32,"g":{"a":2,"n":"get_DistanceFromLimit","t":8,"rt":$n[1].Int32,"fg":"DistanceFromLimit","box":function ($v) { return Bridge.box($v, System.Int32);}},"fn":"DistanceFromLimit"},{"a":2,"n":"Position","t":16,"rt":$n[1].UInt32,"g":{"a":2,"n":"get_Position","t":8,"rt":$n[1].UInt32,"fg":"Position","box":function ($v) { return Bridge.box($v, System.UInt32);}},"fn":"Position"},{"a":1,"n":"abuffer","t":4,"rt":$n[1].Array.type(System.Byte),"sn":"abuffer"},{"a":1,"n":"bufsize","is":true,"t":4,"rt":$n[1].Int32,"sn":"bufsize","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"limits","t":4,"rt":$n[3].Stack$1(System.UInt32),"sn":"limits"},{"a":3,"n":"m_Position","t":4,"rt":$n[1].UInt32,"sn":"m_Position","box":function ($v) { return Bridge.box($v, System.UInt32);}},{"a":1,"n":"membuf","t":4,"rt":$n[1].Array.type(System.Byte),"sn":"membuf"},{"a":1,"n":"memstream","t":4,"rt":$n[1].Boolean,"sn":"memstream","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"s_memstream","t":4,"rt":$n[7].MemoryStream,"sn":"s_memstream"}]}; }, $n);
    $m("RobotRaconteurWeb.ArrayMemoryBase", function () { return {"att":1048705,"a":2,"m":[{"a":3,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"ab":true,"a":2,"n":"GetLength","t":8,"pi":[{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":0}],"sn":"GetLength","rt":$n[5].Task$1(System.UInt64),"p":[$n[4].CancellationToken]}]}; }, $n);
    $m("RobotRaconteurWeb.ArrayMemory$1", function (T) { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[System.Array.type(T)],"pi":[{"n":"memory","pt":System.Array.type(T),"ps":0}],"sn":"$ctor1"},{"v":true,"a":2,"n":"Attach","t":8,"pi":[{"n":"memory","pt":System.Array.type(T),"ps":0}],"sn":"Attach","rt":$n[1].Void,"p":[System.Array.type(T)]},{"ov":true,"a":2,"n":"GetLength","t":8,"pi":[{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":0}],"sn":"GetLength","rt":$n[5].Task$1(System.UInt64),"p":[$n[4].CancellationToken]},{"v":true,"a":2,"n":"Read","t":8,"pi":[{"n":"memorypos","pt":$n[1].UInt64,"ps":0},{"n":"buffer","pt":System.Array.type(T),"ps":1},{"n":"bufferpos","pt":$n[1].UInt64,"ps":2},{"n":"count","pt":$n[1].UInt64,"ps":3},{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":4}],"sn":"Read","rt":$n[5].Task,"p":[$n[1].UInt64,System.Array.type(T),$n[1].UInt64,$n[1].UInt64,$n[4].CancellationToken]},{"v":true,"a":2,"n":"Write","t":8,"pi":[{"n":"memorypos","pt":$n[1].UInt64,"ps":0},{"n":"buffer","pt":System.Array.type(T),"ps":1},{"n":"bufferpos","pt":$n[1].UInt64,"ps":2},{"n":"count","pt":$n[1].UInt64,"ps":3},{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":4}],"sn":"Write","rt":$n[5].Task,"p":[$n[1].UInt64,System.Array.type(T),$n[1].UInt64,$n[1].UInt64,$n[4].CancellationToken]},{"a":1,"n":"memory","t":4,"rt":System.Array.type(T),"sn":"memory"}]}; }, $n);
    $m("RobotRaconteurWeb.MultiDimArrayMemoryBase", function () { return {"att":1048705,"a":2,"m":[{"a":3,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"ab":true,"a":2,"n":"GetDimCount","t":8,"pi":[{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":0}],"sn":"GetDimCount","rt":$n[5].Task$1(System.UInt64),"p":[$n[4].CancellationToken]},{"ab":true,"a":2,"n":"GetDimensions","t":8,"pi":[{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":0}],"sn":"GetDimensions","rt":$n[5].Task$1(System.Array.type(System.UInt64)),"p":[$n[4].CancellationToken]}]}; }, $n);
    $m("RobotRaconteurWeb.MultiDimArrayMemory$1", function (T) { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[0].MultiDimArray],"pi":[{"n":"memory","pt":$n[0].MultiDimArray,"ps":0}],"sn":"$ctor1"},{"v":true,"a":2,"n":"Attach","t":8,"pi":[{"n":"memory","pt":$n[0].MultiDimArray,"ps":0}],"sn":"Attach","rt":$n[1].Void,"p":[$n[0].MultiDimArray]},{"ov":true,"a":2,"n":"GetDimCount","t":8,"pi":[{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":0}],"sn":"GetDimCount","rt":$n[5].Task$1(System.UInt64),"p":[$n[4].CancellationToken]},{"ov":true,"a":2,"n":"GetDimensions","t":8,"pi":[{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":0}],"sn":"GetDimensions","rt":$n[5].Task$1(System.Array.type(System.UInt64)),"p":[$n[4].CancellationToken]},{"v":true,"a":2,"n":"Read","t":8,"pi":[{"n":"memorypos","pt":$n[1].Array.type(System.UInt64),"ps":0},{"n":"buffer","pt":$n[0].MultiDimArray,"ps":1},{"n":"bufferpos","pt":$n[1].Array.type(System.UInt64),"ps":2},{"n":"count","pt":$n[1].Array.type(System.UInt64),"ps":3},{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":4}],"sn":"Read","rt":$n[5].Task,"p":[$n[1].Array.type(System.UInt64),$n[0].MultiDimArray,$n[1].Array.type(System.UInt64),$n[1].Array.type(System.UInt64),$n[4].CancellationToken]},{"v":true,"a":2,"n":"Write","t":8,"pi":[{"n":"memorypos","pt":$n[1].Array.type(System.UInt64),"ps":0},{"n":"buffer","pt":$n[0].MultiDimArray,"ps":1},{"n":"bufferpos","pt":$n[1].Array.type(System.UInt64),"ps":2},{"n":"count","pt":$n[1].Array.type(System.UInt64),"ps":3},{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":4}],"sn":"Write","rt":$n[5].Task,"p":[$n[1].Array.type(System.UInt64),$n[0].MultiDimArray,$n[1].Array.type(System.UInt64),$n[1].Array.type(System.UInt64),$n[4].CancellationToken]},{"a":1,"n":"multimemory","t":4,"rt":$n[0].MultiDimArray,"sn":"multimemory"}]}; }, $n);
    $m("RobotRaconteurWeb.ArrayMemoryServiceSkelBase", function () { return {"att":1048705,"a":2,"m":[{"a":3,"n":".ctor","t":1,"p":[$n[1].String,$n[0].ServiceSkel,$n[0].DataTypes,$n[1].UInt32,$n[0].MemberDefinition_Direction],"pi":[{"n":"membername","pt":$n[1].String,"ps":0},{"n":"skel","pt":$n[0].ServiceSkel,"ps":1},{"n":"element_type","pt":$n[0].DataTypes,"ps":2},{"n":"element_size","pt":$n[1].UInt32,"ps":3},{"n":"direction","pt":$n[0].MemberDefinition_Direction,"ps":4}],"sn":"ctor"},{"v":true,"a":2,"n":"CallMemoryFunction","t":8,"pi":[{"n":"m","pt":$n[0].MessageEntry,"ps":0},{"n":"e","pt":$n[0].Endpoint,"ps":1},{"n":"mem","pt":$n[0].ArrayMemoryBase,"ps":2}],"sn":"CallMemoryFunction","rt":$n[5].Task$1(RobotRaconteurWeb.MessageEntry),"p":[$n[0].MessageEntry,$n[0].Endpoint,$n[0].ArrayMemoryBase]},{"ab":true,"a":3,"n":"DoRead","t":8,"pi":[{"n":"memorypos","pt":$n[1].UInt64,"ps":0},{"n":"bufferpos","pt":$n[1].UInt64,"ps":1},{"n":"count","pt":$n[1].UInt64,"ps":2},{"n":"mem","pt":$n[0].ArrayMemoryBase,"ps":3}],"sn":"DoRead","rt":$n[5].Task$1(System.Object),"p":[$n[1].UInt64,$n[1].UInt64,$n[1].UInt64,$n[0].ArrayMemoryBase]},{"ab":true,"a":3,"n":"DoWrite","t":8,"pi":[{"n":"memorypos","pt":$n[1].UInt64,"ps":0},{"n":"buffer","pt":$n[1].Object,"ps":1},{"n":"bufferpos","pt":$n[1].UInt64,"ps":2},{"n":"count","pt":$n[1].UInt64,"ps":3},{"n":"mem","pt":$n[0].ArrayMemoryBase,"ps":4}],"sn":"DoWrite","rt":$n[5].Task,"p":[$n[1].UInt64,$n[1].Object,$n[1].UInt64,$n[1].UInt64,$n[0].ArrayMemoryBase]},{"a":2,"n":"MemberName","t":16,"rt":$n[1].String,"g":{"a":2,"n":"get_MemberName","t":8,"rt":$n[1].String,"fg":"MemberName"},"fn":"MemberName"},{"a":3,"n":"direction","t":4,"rt":$n[0].MemberDefinition_Direction,"sn":"direction","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MemberDefinition_Direction, System.Enum.toStringFn(RobotRaconteurWeb.MemberDefinition_Direction));}},{"a":3,"n":"element_size","t":4,"rt":$n[1].UInt32,"sn":"element_size","box":function ($v) { return Bridge.box($v, System.UInt32);}},{"a":3,"n":"element_type","t":4,"rt":$n[0].DataTypes,"sn":"element_type","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.DataTypes, System.Enum.toStringFn(RobotRaconteurWeb.DataTypes));}},{"a":3,"n":"m_MemberName","t":4,"rt":$n[1].String,"sn":"m_MemberName"},{"a":3,"n":"skel","t":4,"rt":$n[0].ServiceSkel,"sn":"skel"}]}; }, $n);
    $m("RobotRaconteurWeb.ArrayMemoryServiceSkel$1", function (T) { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].String,$n[0].ServiceSkel,$n[0].MemberDefinition_Direction],"pi":[{"n":"membername","pt":$n[1].String,"ps":0},{"n":"skel","pt":$n[0].ServiceSkel,"ps":1},{"n":"direction","dv":2,"o":true,"pt":$n[0].MemberDefinition_Direction,"ps":2}],"sn":"ctor"},{"ov":true,"a":3,"n":"DoRead","t":8,"pi":[{"n":"memorypos","pt":$n[1].UInt64,"ps":0},{"n":"bufferpos","pt":$n[1].UInt64,"ps":1},{"n":"count","pt":$n[1].UInt64,"ps":2},{"n":"mem","pt":$n[0].ArrayMemoryBase,"ps":3}],"sn":"DoRead","rt":$n[5].Task$1(System.Object),"p":[$n[1].UInt64,$n[1].UInt64,$n[1].UInt64,$n[0].ArrayMemoryBase]},{"ov":true,"a":3,"n":"DoWrite","t":8,"pi":[{"n":"memorypos","pt":$n[1].UInt64,"ps":0},{"n":"buffer","pt":$n[1].Object,"ps":1},{"n":"bufferpos","pt":$n[1].UInt64,"ps":2},{"n":"count","pt":$n[1].UInt64,"ps":3},{"n":"mem","pt":$n[0].ArrayMemoryBase,"ps":4}],"sn":"DoWrite","rt":$n[5].Task,"p":[$n[1].UInt64,$n[1].Object,$n[1].UInt64,$n[1].UInt64,$n[0].ArrayMemoryBase]}]}; }, $n);
    $m("RobotRaconteurWeb.MultiDimArrayMemoryServiceSkelBase", function () { return {"att":1048705,"a":2,"m":[{"a":3,"n":".ctor","t":1,"p":[$n[1].String,$n[0].ServiceSkel,$n[0].DataTypes,$n[1].UInt32,$n[0].MemberDefinition_Direction],"pi":[{"n":"membername","pt":$n[1].String,"ps":0},{"n":"skel","pt":$n[0].ServiceSkel,"ps":1},{"n":"element_type","pt":$n[0].DataTypes,"ps":2},{"n":"element_size","pt":$n[1].UInt32,"ps":3},{"n":"direction","pt":$n[0].MemberDefinition_Direction,"ps":4}],"sn":"ctor"},{"v":true,"a":2,"n":"CallMemoryFunction","t":8,"pi":[{"n":"m","pt":$n[0].MessageEntry,"ps":0},{"n":"e","pt":$n[0].Endpoint,"ps":1},{"n":"mem","pt":$n[0].MultiDimArrayMemoryBase,"ps":2}],"sn":"CallMemoryFunction","rt":$n[5].Task$1(RobotRaconteurWeb.MessageEntry),"p":[$n[0].MessageEntry,$n[0].Endpoint,$n[0].MultiDimArrayMemoryBase]},{"ab":true,"a":3,"n":"DoRead","t":8,"pi":[{"n":"memorypos","pt":$n[1].Array.type(System.UInt64),"ps":0},{"n":"bufferpos","pt":$n[1].Array.type(System.UInt64),"ps":1},{"n":"count","pt":$n[1].Array.type(System.UInt64),"ps":2},{"n":"elem_count","pt":$n[1].UInt64,"ps":3},{"n":"mem","pt":$n[0].MultiDimArrayMemoryBase,"ps":4}],"sn":"DoRead","rt":$n[5].Task$1(System.Object),"p":[$n[1].Array.type(System.UInt64),$n[1].Array.type(System.UInt64),$n[1].Array.type(System.UInt64),$n[1].UInt64,$n[0].MultiDimArrayMemoryBase]},{"ab":true,"a":3,"n":"DoWrite","t":8,"pi":[{"n":"memorypos","pt":$n[1].Array.type(System.UInt64),"ps":0},{"n":"buffer","pt":$n[1].Object,"ps":1},{"n":"bufferpos","pt":$n[1].Array.type(System.UInt64),"ps":2},{"n":"count","pt":$n[1].Array.type(System.UInt64),"ps":3},{"n":"elem_count","pt":$n[1].UInt64,"ps":4},{"n":"mem","pt":$n[0].MultiDimArrayMemoryBase,"ps":5}],"sn":"DoWrite","rt":$n[5].Task,"p":[$n[1].Array.type(System.UInt64),$n[1].Object,$n[1].Array.type(System.UInt64),$n[1].Array.type(System.UInt64),$n[1].UInt64,$n[0].MultiDimArrayMemoryBase]},{"a":2,"n":"MemberName","t":16,"rt":$n[1].String,"g":{"a":2,"n":"get_MemberName","t":8,"rt":$n[1].String,"fg":"MemberName"},"fn":"MemberName"},{"a":3,"n":"direction","t":4,"rt":$n[0].MemberDefinition_Direction,"sn":"direction","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MemberDefinition_Direction, System.Enum.toStringFn(RobotRaconteurWeb.MemberDefinition_Direction));}},{"a":3,"n":"element_size","t":4,"rt":$n[1].UInt32,"sn":"element_size","box":function ($v) { return Bridge.box($v, System.UInt32);}},{"a":3,"n":"element_type","t":4,"rt":$n[0].DataTypes,"sn":"element_type","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.DataTypes, System.Enum.toStringFn(RobotRaconteurWeb.DataTypes));}},{"a":3,"n":"m_MemberName","t":4,"rt":$n[1].String,"sn":"m_MemberName"},{"a":3,"n":"skel","t":4,"rt":$n[0].ServiceSkel,"sn":"skel"}]}; }, $n);
    $m("RobotRaconteurWeb.MultiDimArrayMemoryServiceSkel$1", function (T) { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].String,$n[0].ServiceSkel,$n[0].MemberDefinition_Direction],"pi":[{"n":"membername","pt":$n[1].String,"ps":0},{"n":"skel","pt":$n[0].ServiceSkel,"ps":1},{"n":"direction","dv":2,"o":true,"pt":$n[0].MemberDefinition_Direction,"ps":2}],"sn":"ctor"},{"ov":true,"a":3,"n":"DoRead","t":8,"pi":[{"n":"memorypos","pt":$n[1].Array.type(System.UInt64),"ps":0},{"n":"bufferpos","pt":$n[1].Array.type(System.UInt64),"ps":1},{"n":"count","pt":$n[1].Array.type(System.UInt64),"ps":2},{"n":"elem_count","pt":$n[1].UInt64,"ps":3},{"n":"mem","pt":$n[0].MultiDimArrayMemoryBase,"ps":4}],"sn":"DoRead","rt":$n[5].Task$1(System.Object),"p":[$n[1].Array.type(System.UInt64),$n[1].Array.type(System.UInt64),$n[1].Array.type(System.UInt64),$n[1].UInt64,$n[0].MultiDimArrayMemoryBase]},{"ov":true,"a":3,"n":"DoWrite","t":8,"pi":[{"n":"memorypos","pt":$n[1].Array.type(System.UInt64),"ps":0},{"n":"buffer","pt":$n[1].Object,"ps":1},{"n":"bufferpos","pt":$n[1].Array.type(System.UInt64),"ps":2},{"n":"count","pt":$n[1].Array.type(System.UInt64),"ps":3},{"n":"elem_count","pt":$n[1].UInt64,"ps":4},{"n":"mem","pt":$n[0].MultiDimArrayMemoryBase,"ps":5}],"sn":"DoWrite","rt":$n[5].Task,"p":[$n[1].Array.type(System.UInt64),$n[1].Object,$n[1].Array.type(System.UInt64),$n[1].Array.type(System.UInt64),$n[1].UInt64,$n[0].MultiDimArrayMemoryBase]}]}; }, $n);
    $m("RobotRaconteurWeb.ArrayMemoryClientImplBase", function () { return {"att":1048705,"a":2,"m":[{"a":3,"n":".ctor","t":1,"p":[$n[1].String,$n[0].ServiceStub,$n[0].DataTypes,$n[1].UInt32,$n[0].MemberDefinition_Direction],"pi":[{"n":"membername","pt":$n[1].String,"ps":0},{"n":"stub","pt":$n[0].ServiceStub,"ps":1},{"n":"element_type","pt":$n[0].DataTypes,"ps":2},{"n":"element_size","pt":$n[1].UInt32,"ps":3},{"n":"direction","pt":$n[0].MemberDefinition_Direction,"ps":4}],"sn":"ctor"},{"ab":true,"a":3,"n":"GetBufferLength","t":8,"pi":[{"n":"buffer","pt":$n[1].Object,"ps":0}],"sn":"GetBufferLength","rt":$n[1].UInt64,"p":[$n[1].Object]},{"v":true,"a":2,"n":"GetLength","t":8,"pi":[{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":0}],"sn":"GetLength","rt":$n[5].Task$1(System.UInt64),"p":[$n[4].CancellationToken]},{"a":2,"n":"GetMaxTransferSize","t":8,"pi":[{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":0}],"sn":"GetMaxTransferSize","rt":$n[5].Task$1(System.UInt32),"p":[$n[4].CancellationToken]},{"ab":true,"a":3,"n":"PackWriteRequest","t":8,"pi":[{"n":"buffer","pt":$n[1].Object,"ps":0},{"n":"bufferpos","pt":$n[1].UInt64,"ps":1},{"n":"count","pt":$n[1].UInt64,"ps":2}],"sn":"PackWriteRequest","rt":$n[1].Object,"p":[$n[1].Object,$n[1].UInt64,$n[1].UInt64]},{"a":2,"n":"ReadImpl","t":8,"pi":[{"n":"memorypos","pt":$n[1].UInt64,"ps":0},{"n":"buffer","pt":$n[1].Object,"ps":1},{"n":"bufferpos","pt":$n[1].UInt64,"ps":2},{"n":"count","pt":$n[1].UInt64,"ps":3},{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":4}],"sn":"ReadImpl","rt":$n[5].Task,"p":[$n[1].UInt64,$n[1].Object,$n[1].UInt64,$n[1].UInt64,$n[4].CancellationToken]},{"ab":true,"a":3,"n":"UnpackReadResult","t":8,"pi":[{"n":"res","pt":$n[1].Object,"ps":0},{"n":"buffer","pt":$n[1].Object,"ps":1},{"n":"bufferpos","pt":$n[1].UInt64,"ps":2},{"n":"count","pt":$n[1].UInt64,"ps":3}],"sn":"UnpackReadResult","rt":$n[1].Void,"p":[$n[1].Object,$n[1].Object,$n[1].UInt64,$n[1].UInt64]},{"a":2,"n":"WriteImpl","t":8,"pi":[{"n":"memorypos","pt":$n[1].UInt64,"ps":0},{"n":"buffer","pt":$n[1].Object,"ps":1},{"n":"bufferpos","pt":$n[1].UInt64,"ps":2},{"n":"count","pt":$n[1].UInt64,"ps":3},{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":4}],"sn":"WriteImpl","rt":$n[5].Task,"p":[$n[1].UInt64,$n[1].Object,$n[1].UInt64,$n[1].UInt64,$n[4].CancellationToken]},{"a":2,"n":"Direction","t":16,"rt":$n[0].MemberDefinition_Direction,"g":{"a":2,"n":"get_Direction","t":8,"rt":$n[0].MemberDefinition_Direction,"fg":"Direction","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MemberDefinition_Direction, System.Enum.toStringFn(RobotRaconteurWeb.MemberDefinition_Direction));}},"fn":"Direction"},{"a":2,"n":"MemberName","t":16,"rt":$n[1].String,"g":{"a":2,"n":"get_MemberName","t":8,"rt":$n[1].String,"fg":"MemberName"},"fn":"MemberName"},{"a":3,"n":"direction","t":4,"rt":$n[0].MemberDefinition_Direction,"sn":"direction","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MemberDefinition_Direction, System.Enum.toStringFn(RobotRaconteurWeb.MemberDefinition_Direction));}},{"a":3,"n":"element_size","t":4,"rt":$n[1].UInt32,"sn":"element_size","box":function ($v) { return Bridge.box($v, System.UInt32);}},{"a":3,"n":"element_type","t":4,"rt":$n[0].DataTypes,"sn":"element_type","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.DataTypes, System.Enum.toStringFn(RobotRaconteurWeb.DataTypes));}},{"a":3,"n":"m_MemberName","t":4,"rt":$n[1].String,"sn":"m_MemberName"},{"a":3,"n":"max_size_read","t":4,"rt":$n[1].Boolean,"sn":"max_size_read","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":3,"n":"remote_max_size","t":4,"rt":$n[1].UInt32,"sn":"remote_max_size","box":function ($v) { return Bridge.box($v, System.UInt32);}},{"a":3,"n":"stub","t":4,"rt":$n[0].ServiceStub,"sn":"stub"}]}; }, $n);
    $m("RobotRaconteurWeb.ArrayMemoryClientImpl$1", function (T) { return {"att":1048576,"a":4,"m":[{"a":4,"n":".ctor","t":1,"p":[$n[1].String,$n[0].ServiceStub,$n[0].MemberDefinition_Direction],"pi":[{"n":"membername","pt":$n[1].String,"ps":0},{"n":"stub","pt":$n[0].ServiceStub,"ps":1},{"n":"direction","pt":$n[0].MemberDefinition_Direction,"ps":2}],"sn":"ctor"},{"ov":true,"a":3,"n":"GetBufferLength","t":8,"pi":[{"n":"buffer","pt":$n[1].Object,"ps":0}],"sn":"GetBufferLength","rt":$n[1].UInt64,"p":[$n[1].Object]},{"ov":true,"a":3,"n":"PackWriteRequest","t":8,"pi":[{"n":"buffer","pt":$n[1].Object,"ps":0},{"n":"bufferpos","pt":$n[1].UInt64,"ps":1},{"n":"count","pt":$n[1].UInt64,"ps":2}],"sn":"PackWriteRequest","rt":$n[1].Object,"p":[$n[1].Object,$n[1].UInt64,$n[1].UInt64]},{"ov":true,"a":3,"n":"UnpackReadResult","t":8,"pi":[{"n":"res","pt":$n[1].Object,"ps":0},{"n":"buffer","pt":$n[1].Object,"ps":1},{"n":"bufferpos","pt":$n[1].UInt64,"ps":2},{"n":"count","pt":$n[1].UInt64,"ps":3}],"sn":"UnpackReadResult","rt":$n[1].Void,"p":[$n[1].Object,$n[1].Object,$n[1].UInt64,$n[1].UInt64]}]}; }, $n);
    $m("RobotRaconteurWeb.ArrayMemoryClient$1", function (T) { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].String,$n[0].ServiceStub,$n[0].MemberDefinition_Direction],"pi":[{"n":"membername","pt":$n[1].String,"ps":0},{"n":"stub","pt":$n[0].ServiceStub,"ps":1},{"n":"direction","dv":2,"o":true,"pt":$n[0].MemberDefinition_Direction,"ps":2}],"sn":"ctor"},{"ov":true,"a":2,"n":"Attach","t":8,"pi":[{"n":"memory","pt":System.Array.type(T),"ps":0}],"sn":"Attach","rt":$n[1].Void,"p":[System.Array.type(T)]},{"ov":true,"a":2,"n":"GetLength","t":8,"pi":[{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":0}],"sn":"GetLength","rt":$n[5].Task$1(System.UInt64),"p":[$n[4].CancellationToken]},{"a":1,"n":"GetMaxTransferSize","t":8,"pi":[{"n":"cancel","pt":$n[4].CancellationToken,"ps":0}],"sn":"GetMaxTransferSize","rt":$n[5].Task$1(System.UInt32),"p":[$n[4].CancellationToken]},{"ov":true,"a":2,"n":"Read","t":8,"pi":[{"n":"memorypos","pt":$n[1].UInt64,"ps":0},{"n":"buffer","pt":System.Array.type(T),"ps":1},{"n":"bufferpos","pt":$n[1].UInt64,"ps":2},{"n":"count","pt":$n[1].UInt64,"ps":3},{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":4}],"sn":"Read","rt":$n[5].Task,"p":[$n[1].UInt64,System.Array.type(T),$n[1].UInt64,$n[1].UInt64,$n[4].CancellationToken]},{"ov":true,"a":2,"n":"Write","t":8,"pi":[{"n":"memorypos","pt":$n[1].UInt64,"ps":0},{"n":"buffer","pt":System.Array.type(T),"ps":1},{"n":"bufferpos","pt":$n[1].UInt64,"ps":2},{"n":"count","pt":$n[1].UInt64,"ps":3},{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":4}],"sn":"Write","rt":$n[5].Task,"p":[$n[1].UInt64,System.Array.type(T),$n[1].UInt64,$n[1].UInt64,$n[4].CancellationToken]},{"a":2,"n":"Direction","t":16,"rt":$n[0].MemberDefinition_Direction,"g":{"a":2,"n":"get_Direction","t":8,"rt":$n[0].MemberDefinition_Direction,"fg":"Direction","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MemberDefinition_Direction, System.Enum.toStringFn(RobotRaconteurWeb.MemberDefinition_Direction));}},"fn":"Direction"},{"a":2,"n":"MemberName","t":16,"rt":$n[1].String,"g":{"a":2,"n":"get_MemberName","t":8,"rt":$n[1].String,"fg":"MemberName"},"fn":"MemberName"},{"a":1,"n":"impl","t":4,"rt":$n[0].ArrayMemoryClientImpl$1(T),"sn":"impl"}]}; }, $n);
    $m("RobotRaconteurWeb.MultiDimArrayMemoryClientImplBase", function () { return {"att":1048704,"a":4,"m":[{"a":3,"n":".ctor","t":1,"p":[$n[1].String,$n[0].ServiceStub,$n[0].DataTypes,$n[1].UInt32,$n[0].MemberDefinition_Direction],"pi":[{"n":"membername","pt":$n[1].String,"ps":0},{"n":"stub","pt":$n[0].ServiceStub,"ps":1},{"n":"element_type","pt":$n[0].DataTypes,"ps":2},{"n":"element_size","pt":$n[1].UInt32,"ps":3},{"n":"direction","pt":$n[0].MemberDefinition_Direction,"ps":4}],"sn":"ctor"},{"a":1,"n":"CalculateMatrixBlocks","is":true,"t":8,"pi":[{"n":"element_size","pt":$n[1].UInt32,"ps":0},{"n":"count","pt":$n[1].Array.type(System.UInt64),"ps":1},{"n":"max_elems","pt":$n[1].UInt64,"ps":2},{"n":"split_dim","out":true,"pt":$n[1].Int32,"ps":3},{"n":"split_dim_block","out":true,"pt":$n[1].UInt64,"ps":4},{"n":"split_elem_count","out":true,"pt":$n[1].UInt64,"ps":5},{"n":"splits_count","out":true,"pt":$n[1].Int32,"ps":6},{"n":"split_remainder","out":true,"pt":$n[1].Int32,"ps":7},{"n":"block_count","out":true,"pt":$n[1].Array.type(System.UInt64),"ps":8},{"n":"block_count_edge","out":true,"pt":$n[1].Array.type(System.UInt64),"ps":9}],"sn":"CalculateMatrixBlocks","rt":$n[1].Void,"p":[$n[1].UInt32,$n[1].Array.type(System.UInt64),$n[1].UInt64,$n[1].Int32,$n[1].UInt64,$n[1].UInt64,$n[1].Int32,$n[1].Int32,$n[1].Array.type(System.UInt64),$n[1].Array.type(System.UInt64)]},{"v":true,"a":2,"n":"GetDimCount","t":8,"pi":[{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":0}],"sn":"GetDimCount","rt":$n[5].Task$1(System.UInt64),"p":[$n[4].CancellationToken]},{"v":true,"a":2,"n":"GetDimensions","t":8,"pi":[{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":0}],"sn":"GetDimensions","rt":$n[5].Task$1(System.Array.type(System.UInt64)),"p":[$n[4].CancellationToken]},{"a":2,"n":"GetMaxTransferSize","t":8,"pi":[{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":0}],"sn":"GetMaxTransferSize","rt":$n[5].Task$1(System.UInt32),"p":[$n[4].CancellationToken]},{"ab":true,"a":3,"n":"PackWriteRequest","t":8,"pi":[{"n":"buffer","pt":$n[1].Object,"ps":0},{"n":"bufferpos","pt":$n[1].Array.type(System.UInt64),"ps":1},{"n":"count","pt":$n[1].Array.type(System.UInt64),"ps":2},{"n":"elem_count","pt":$n[1].UInt64,"ps":3}],"sn":"PackWriteRequest","rt":$n[1].Object,"p":[$n[1].Object,$n[1].Array.type(System.UInt64),$n[1].Array.type(System.UInt64),$n[1].UInt64]},{"a":2,"n":"ReadImpl","t":8,"pi":[{"n":"memorypos","pt":$n[1].Array.type(System.UInt64),"ps":0},{"n":"buffer","pt":$n[1].Object,"ps":1},{"n":"bufferpos","pt":$n[1].Array.type(System.UInt64),"ps":2},{"n":"count","pt":$n[1].Array.type(System.UInt64),"ps":3},{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":4}],"sn":"ReadImpl","rt":$n[5].Task,"p":[$n[1].Array.type(System.UInt64),$n[1].Object,$n[1].Array.type(System.UInt64),$n[1].Array.type(System.UInt64),$n[4].CancellationToken]},{"ab":true,"a":3,"n":"UnpackReadResult","t":8,"pi":[{"n":"res","pt":$n[1].Object,"ps":0},{"n":"buffer","pt":$n[1].Object,"ps":1},{"n":"bufferpos","pt":$n[1].Array.type(System.UInt64),"ps":2},{"n":"count","pt":$n[1].Array.type(System.UInt64),"ps":3},{"n":"elem_count","pt":$n[1].UInt64,"ps":4}],"sn":"UnpackReadResult","rt":$n[1].Void,"p":[$n[1].Object,$n[1].Object,$n[1].Array.type(System.UInt64),$n[1].Array.type(System.UInt64),$n[1].UInt64]},{"a":2,"n":"WriteImpl","t":8,"pi":[{"n":"memorypos","pt":$n[1].Array.type(System.UInt64),"ps":0},{"n":"buffer","pt":$n[1].Object,"ps":1},{"n":"bufferpos","pt":$n[1].Array.type(System.UInt64),"ps":2},{"n":"count","pt":$n[1].Array.type(System.UInt64),"ps":3},{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":4}],"sn":"WriteImpl","rt":$n[5].Task,"p":[$n[1].Array.type(System.UInt64),$n[1].Object,$n[1].Array.type(System.UInt64),$n[1].Array.type(System.UInt64),$n[4].CancellationToken]},{"a":2,"n":"Direction","t":16,"rt":$n[0].MemberDefinition_Direction,"g":{"a":2,"n":"get_Direction","t":8,"rt":$n[0].MemberDefinition_Direction,"fg":"Direction","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MemberDefinition_Direction, System.Enum.toStringFn(RobotRaconteurWeb.MemberDefinition_Direction));}},"fn":"Direction"},{"a":2,"n":"MemberName","t":16,"rt":$n[1].String,"g":{"a":2,"n":"get_MemberName","t":8,"rt":$n[1].String,"fg":"MemberName"},"fn":"MemberName"},{"a":3,"n":"direction","t":4,"rt":$n[0].MemberDefinition_Direction,"sn":"direction","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MemberDefinition_Direction, System.Enum.toStringFn(RobotRaconteurWeb.MemberDefinition_Direction));}},{"a":3,"n":"element_size","t":4,"rt":$n[1].UInt32,"sn":"element_size","box":function ($v) { return Bridge.box($v, System.UInt32);}},{"a":3,"n":"element_type","t":4,"rt":$n[0].DataTypes,"sn":"element_type","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.DataTypes, System.Enum.toStringFn(RobotRaconteurWeb.DataTypes));}},{"a":3,"n":"m_MemberName","t":4,"rt":$n[1].String,"sn":"m_MemberName"},{"a":3,"n":"max_size_read","t":4,"rt":$n[1].Boolean,"sn":"max_size_read","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":3,"n":"remote_max_size","t":4,"rt":$n[1].UInt32,"sn":"remote_max_size","box":function ($v) { return Bridge.box($v, System.UInt32);}},{"a":3,"n":"stub","t":4,"rt":$n[0].ServiceStub,"sn":"stub"}]}; }, $n);
    $m("RobotRaconteurWeb.MultiDimArrayMemoryClientImpl$1", function (T) { return {"att":1048576,"a":4,"m":[{"a":4,"n":".ctor","t":1,"p":[$n[1].String,$n[0].ServiceStub,$n[0].MemberDefinition_Direction],"pi":[{"n":"membername","pt":$n[1].String,"ps":0},{"n":"stub","pt":$n[0].ServiceStub,"ps":1},{"n":"direction","pt":$n[0].MemberDefinition_Direction,"ps":2}],"sn":"ctor"},{"ov":true,"a":3,"n":"PackWriteRequest","t":8,"pi":[{"n":"buffer","pt":$n[1].Object,"ps":0},{"n":"bufferpos","pt":$n[1].Array.type(System.UInt64),"ps":1},{"n":"count","pt":$n[1].Array.type(System.UInt64),"ps":2},{"n":"elem_count","pt":$n[1].UInt64,"ps":3}],"sn":"PackWriteRequest","rt":$n[1].Object,"p":[$n[1].Object,$n[1].Array.type(System.UInt64),$n[1].Array.type(System.UInt64),$n[1].UInt64]},{"ov":true,"a":3,"n":"UnpackReadResult","t":8,"pi":[{"n":"res","pt":$n[1].Object,"ps":0},{"n":"buffer","pt":$n[1].Object,"ps":1},{"n":"bufferpos","pt":$n[1].Array.type(System.UInt64),"ps":2},{"n":"count","pt":$n[1].Array.type(System.UInt64),"ps":3},{"n":"elem_count","pt":$n[1].UInt64,"ps":4}],"sn":"UnpackReadResult","rt":$n[1].Void,"p":[$n[1].Object,$n[1].Object,$n[1].Array.type(System.UInt64),$n[1].Array.type(System.UInt64),$n[1].UInt64]}]}; }, $n);
    $m("RobotRaconteurWeb.MultiDimArrayMemoryClient$1", function (T) { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].String,$n[0].ServiceStub,$n[0].MemberDefinition_Direction],"pi":[{"n":"membername","pt":$n[1].String,"ps":0},{"n":"stub","pt":$n[0].ServiceStub,"ps":1},{"n":"direction","dv":2,"o":true,"pt":$n[0].MemberDefinition_Direction,"ps":2}],"sn":"ctor"},{"ov":true,"a":2,"n":"Attach","t":8,"pi":[{"n":"memory","pt":$n[0].MultiDimArray,"ps":0}],"sn":"Attach","rt":$n[1].Void,"p":[$n[0].MultiDimArray]},{"ov":true,"a":2,"n":"GetDimCount","t":8,"pi":[{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":0}],"sn":"GetDimCount","rt":$n[5].Task$1(System.UInt64),"p":[$n[4].CancellationToken]},{"ov":true,"a":2,"n":"GetDimensions","t":8,"pi":[{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":0}],"sn":"GetDimensions","rt":$n[5].Task$1(System.Array.type(System.UInt64)),"p":[$n[4].CancellationToken]},{"a":1,"n":"GetMaxTransferSize","t":8,"pi":[{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":0}],"sn":"GetMaxTransferSize","rt":$n[5].Task$1(System.UInt32),"p":[$n[4].CancellationToken]},{"ov":true,"a":2,"n":"Read","t":8,"pi":[{"n":"memorypos","pt":$n[1].Array.type(System.UInt64),"ps":0},{"n":"buffer","pt":$n[0].MultiDimArray,"ps":1},{"n":"bufferpos","pt":$n[1].Array.type(System.UInt64),"ps":2},{"n":"count","pt":$n[1].Array.type(System.UInt64),"ps":3},{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":4}],"sn":"Read","rt":$n[5].Task,"p":[$n[1].Array.type(System.UInt64),$n[0].MultiDimArray,$n[1].Array.type(System.UInt64),$n[1].Array.type(System.UInt64),$n[4].CancellationToken]},{"ov":true,"a":2,"n":"Write","t":8,"pi":[{"n":"memorypos","pt":$n[1].Array.type(System.UInt64),"ps":0},{"n":"buffer","pt":$n[0].MultiDimArray,"ps":1},{"n":"bufferpos","pt":$n[1].Array.type(System.UInt64),"ps":2},{"n":"count","pt":$n[1].Array.type(System.UInt64),"ps":3},{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":4}],"sn":"Write","rt":$n[5].Task,"p":[$n[1].Array.type(System.UInt64),$n[0].MultiDimArray,$n[1].Array.type(System.UInt64),$n[1].Array.type(System.UInt64),$n[4].CancellationToken]},{"a":2,"n":"Direction","t":16,"rt":$n[0].MemberDefinition_Direction,"g":{"a":2,"n":"get_Direction","t":8,"rt":$n[0].MemberDefinition_Direction,"fg":"Direction","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MemberDefinition_Direction, System.Enum.toStringFn(RobotRaconteurWeb.MemberDefinition_Direction));}},"fn":"Direction"},{"a":2,"n":"MemberName","t":16,"rt":$n[1].String,"g":{"a":2,"n":"get_MemberName","t":8,"rt":$n[1].String,"fg":"MemberName"},"fn":"MemberName"},{"a":1,"n":"impl","t":4,"rt":$n[0].MultiDimArrayMemoryClientImpl$1(T),"sn":"impl"}]}; }, $n);
    $m("RobotRaconteurWeb.PodArrayMemory$1", function (T) { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[System.Array.type(T)],"pi":[{"n":"memory","pt":System.Array.type(T),"ps":0}],"sn":"$ctor1"}]}; }, $n);
    $m("RobotRaconteurWeb.PodArrayMemoryClientImpl$1", function (T) { return {"att":1048576,"a":4,"m":[{"a":4,"n":".ctor","t":1,"p":[$n[1].String,$n[0].ServiceStub,$n[1].UInt32,$n[0].MemberDefinition_Direction],"pi":[{"n":"membername","pt":$n[1].String,"ps":0},{"n":"stub","pt":$n[0].ServiceStub,"ps":1},{"n":"element_size","pt":$n[1].UInt32,"ps":2},{"n":"direction","pt":$n[0].MemberDefinition_Direction,"ps":3}],"sn":"ctor"},{"ov":true,"a":3,"n":"GetBufferLength","t":8,"pi":[{"n":"buffer","pt":$n[1].Object,"ps":0}],"sn":"GetBufferLength","rt":$n[1].UInt64,"p":[$n[1].Object]},{"ov":true,"a":3,"n":"PackWriteRequest","t":8,"pi":[{"n":"buffer","pt":$n[1].Object,"ps":0},{"n":"bufferpos","pt":$n[1].UInt64,"ps":1},{"n":"count","pt":$n[1].UInt64,"ps":2}],"sn":"PackWriteRequest","rt":$n[1].Object,"p":[$n[1].Object,$n[1].UInt64,$n[1].UInt64]},{"ov":true,"a":3,"n":"UnpackReadResult","t":8,"pi":[{"n":"res","pt":$n[1].Object,"ps":0},{"n":"buffer","pt":$n[1].Object,"ps":1},{"n":"bufferpos","pt":$n[1].UInt64,"ps":2},{"n":"count","pt":$n[1].UInt64,"ps":3}],"sn":"UnpackReadResult","rt":$n[1].Void,"p":[$n[1].Object,$n[1].Object,$n[1].UInt64,$n[1].UInt64]}]}; }, $n);
    $m("RobotRaconteurWeb.PodArrayMemoryClient$1", function (T) { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].String,$n[0].ServiceStub,$n[1].UInt32,$n[0].MemberDefinition_Direction],"pi":[{"n":"membername","pt":$n[1].String,"ps":0},{"n":"stub","pt":$n[0].ServiceStub,"ps":1},{"n":"element_size","pt":$n[1].UInt32,"ps":2},{"n":"direction","dv":2,"o":true,"pt":$n[0].MemberDefinition_Direction,"ps":3}],"sn":"ctor"},{"ov":true,"a":2,"n":"Attach","t":8,"pi":[{"n":"memory","pt":System.Array.type(T),"ps":0}],"sn":"Attach","rt":$n[1].Void,"p":[System.Array.type(T)]},{"ov":true,"a":2,"n":"GetLength","t":8,"pi":[{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":0}],"sn":"GetLength","rt":$n[5].Task$1(System.UInt64),"p":[$n[4].CancellationToken]},{"a":1,"n":"GetMaxTransferSize","t":8,"pi":[{"n":"cancel","pt":$n[4].CancellationToken,"ps":0}],"sn":"GetMaxTransferSize","rt":$n[5].Task$1(System.UInt32),"p":[$n[4].CancellationToken]},{"ov":true,"a":2,"n":"Read","t":8,"pi":[{"n":"memorypos","pt":$n[1].UInt64,"ps":0},{"n":"buffer","pt":System.Array.type(T),"ps":1},{"n":"bufferpos","pt":$n[1].UInt64,"ps":2},{"n":"count","pt":$n[1].UInt64,"ps":3},{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":4}],"sn":"Read","rt":$n[5].Task,"p":[$n[1].UInt64,System.Array.type(T),$n[1].UInt64,$n[1].UInt64,$n[4].CancellationToken]},{"ov":true,"a":2,"n":"Write","t":8,"pi":[{"n":"memorypos","pt":$n[1].UInt64,"ps":0},{"n":"buffer","pt":System.Array.type(T),"ps":1},{"n":"bufferpos","pt":$n[1].UInt64,"ps":2},{"n":"count","pt":$n[1].UInt64,"ps":3},{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":4}],"sn":"Write","rt":$n[5].Task,"p":[$n[1].UInt64,System.Array.type(T),$n[1].UInt64,$n[1].UInt64,$n[4].CancellationToken]},{"a":2,"n":"Direction","t":16,"rt":$n[0].MemberDefinition_Direction,"g":{"a":2,"n":"get_Direction","t":8,"rt":$n[0].MemberDefinition_Direction,"fg":"Direction","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MemberDefinition_Direction, System.Enum.toStringFn(RobotRaconteurWeb.MemberDefinition_Direction));}},"fn":"Direction"},{"a":2,"n":"MemberName","t":16,"rt":$n[1].String,"g":{"a":2,"n":"get_MemberName","t":8,"rt":$n[1].String,"fg":"MemberName"},"fn":"MemberName"},{"a":1,"n":"impl","t":4,"rt":$n[0].PodArrayMemoryClientImpl$1(T),"sn":"impl"}]}; }, $n);
    $m("RobotRaconteurWeb.PodMultiDimArrayMemory$1", function (T) { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[0].PodMultiDimArray],"pi":[{"n":"memory","pt":$n[0].PodMultiDimArray,"ps":0}],"sn":"$ctor1"},{"v":true,"a":2,"n":"Attach","t":8,"pi":[{"n":"memory","pt":$n[0].PodMultiDimArray,"ps":0}],"sn":"Attach","rt":$n[1].Void,"p":[$n[0].PodMultiDimArray]},{"ov":true,"a":2,"n":"GetDimCount","t":8,"pi":[{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":0}],"sn":"GetDimCount","rt":$n[5].Task$1(System.UInt64),"p":[$n[4].CancellationToken]},{"ov":true,"a":2,"n":"GetDimensions","t":8,"pi":[{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":0}],"sn":"GetDimensions","rt":$n[5].Task$1(System.Array.type(System.UInt64)),"p":[$n[4].CancellationToken]},{"v":true,"a":2,"n":"Read","t":8,"pi":[{"n":"memorypos","pt":$n[1].Array.type(System.UInt64),"ps":0},{"n":"buffer","pt":$n[0].PodMultiDimArray,"ps":1},{"n":"bufferpos","pt":$n[1].Array.type(System.UInt64),"ps":2},{"n":"count","pt":$n[1].Array.type(System.UInt64),"ps":3},{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":4}],"sn":"Read","rt":$n[5].Task,"p":[$n[1].Array.type(System.UInt64),$n[0].PodMultiDimArray,$n[1].Array.type(System.UInt64),$n[1].Array.type(System.UInt64),$n[4].CancellationToken]},{"v":true,"a":2,"n":"Write","t":8,"pi":[{"n":"memorypos","pt":$n[1].Array.type(System.UInt64),"ps":0},{"n":"buffer","pt":$n[0].PodMultiDimArray,"ps":1},{"n":"bufferpos","pt":$n[1].Array.type(System.UInt64),"ps":2},{"n":"count","pt":$n[1].Array.type(System.UInt64),"ps":3},{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":4}],"sn":"Write","rt":$n[5].Task,"p":[$n[1].Array.type(System.UInt64),$n[0].PodMultiDimArray,$n[1].Array.type(System.UInt64),$n[1].Array.type(System.UInt64),$n[4].CancellationToken]},{"a":1,"n":"multimemory","t":4,"rt":$n[0].PodMultiDimArray,"sn":"multimemory"}]}; }, $n);
    $m("RobotRaconteurWeb.PodMultiDimArrayMemoryClientImpl$1", function (T) { return {"att":1048576,"a":4,"m":[{"a":4,"n":".ctor","t":1,"p":[$n[1].String,$n[0].ServiceStub,$n[1].UInt32,$n[0].MemberDefinition_Direction],"pi":[{"n":"membername","pt":$n[1].String,"ps":0},{"n":"stub","pt":$n[0].ServiceStub,"ps":1},{"n":"element_size","pt":$n[1].UInt32,"ps":2},{"n":"direction","pt":$n[0].MemberDefinition_Direction,"ps":3}],"sn":"ctor"},{"ov":true,"a":3,"n":"PackWriteRequest","t":8,"pi":[{"n":"buffer","pt":$n[1].Object,"ps":0},{"n":"bufferpos","pt":$n[1].Array.type(System.UInt64),"ps":1},{"n":"count","pt":$n[1].Array.type(System.UInt64),"ps":2},{"n":"elem_count","pt":$n[1].UInt64,"ps":3}],"sn":"PackWriteRequest","rt":$n[1].Object,"p":[$n[1].Object,$n[1].Array.type(System.UInt64),$n[1].Array.type(System.UInt64),$n[1].UInt64]},{"ov":true,"a":3,"n":"UnpackReadResult","t":8,"pi":[{"n":"res","pt":$n[1].Object,"ps":0},{"n":"buffer","pt":$n[1].Object,"ps":1},{"n":"bufferpos","pt":$n[1].Array.type(System.UInt64),"ps":2},{"n":"count","pt":$n[1].Array.type(System.UInt64),"ps":3},{"n":"elem_count","pt":$n[1].UInt64,"ps":4}],"sn":"UnpackReadResult","rt":$n[1].Void,"p":[$n[1].Object,$n[1].Object,$n[1].Array.type(System.UInt64),$n[1].Array.type(System.UInt64),$n[1].UInt64]}]}; }, $n);
    $m("RobotRaconteurWeb.PodMultiDimArrayMemoryClient$1", function (T) { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].String,$n[0].ServiceStub,$n[1].UInt32,$n[0].MemberDefinition_Direction],"pi":[{"n":"membername","pt":$n[1].String,"ps":0},{"n":"stub","pt":$n[0].ServiceStub,"ps":1},{"n":"element_size","pt":$n[1].UInt32,"ps":2},{"n":"direction","dv":2,"o":true,"pt":$n[0].MemberDefinition_Direction,"ps":3}],"sn":"ctor"},{"ov":true,"a":2,"n":"Attach","t":8,"pi":[{"n":"memory","pt":$n[0].PodMultiDimArray,"ps":0}],"sn":"Attach","rt":$n[1].Void,"p":[$n[0].PodMultiDimArray]},{"ov":true,"a":2,"n":"GetDimCount","t":8,"pi":[{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":0}],"sn":"GetDimCount","rt":$n[5].Task$1(System.UInt64),"p":[$n[4].CancellationToken]},{"ov":true,"a":2,"n":"GetDimensions","t":8,"pi":[{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":0}],"sn":"GetDimensions","rt":$n[5].Task$1(System.Array.type(System.UInt64)),"p":[$n[4].CancellationToken]},{"a":1,"n":"GetMaxTransferSize","t":8,"pi":[{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":0}],"sn":"GetMaxTransferSize","rt":$n[5].Task$1(System.UInt32),"p":[$n[4].CancellationToken]},{"ov":true,"a":2,"n":"Read","t":8,"pi":[{"n":"memorypos","pt":$n[1].Array.type(System.UInt64),"ps":0},{"n":"buffer","pt":$n[0].PodMultiDimArray,"ps":1},{"n":"bufferpos","pt":$n[1].Array.type(System.UInt64),"ps":2},{"n":"count","pt":$n[1].Array.type(System.UInt64),"ps":3},{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":4}],"sn":"Read","rt":$n[5].Task,"p":[$n[1].Array.type(System.UInt64),$n[0].PodMultiDimArray,$n[1].Array.type(System.UInt64),$n[1].Array.type(System.UInt64),$n[4].CancellationToken]},{"ov":true,"a":2,"n":"Write","t":8,"pi":[{"n":"memorypos","pt":$n[1].Array.type(System.UInt64),"ps":0},{"n":"buffer","pt":$n[0].PodMultiDimArray,"ps":1},{"n":"bufferpos","pt":$n[1].Array.type(System.UInt64),"ps":2},{"n":"count","pt":$n[1].Array.type(System.UInt64),"ps":3},{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":4}],"sn":"Write","rt":$n[5].Task,"p":[$n[1].Array.type(System.UInt64),$n[0].PodMultiDimArray,$n[1].Array.type(System.UInt64),$n[1].Array.type(System.UInt64),$n[4].CancellationToken]},{"a":2,"n":"Direction","t":16,"rt":$n[0].MemberDefinition_Direction,"g":{"a":2,"n":"get_Direction","t":8,"rt":$n[0].MemberDefinition_Direction,"fg":"Direction","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MemberDefinition_Direction, System.Enum.toStringFn(RobotRaconteurWeb.MemberDefinition_Direction));}},"fn":"Direction"},{"a":2,"n":"MemberName","t":16,"rt":$n[1].String,"g":{"a":2,"n":"get_MemberName","t":8,"rt":$n[1].String,"fg":"MemberName"},"fn":"MemberName"},{"a":1,"n":"impl","t":4,"rt":$n[0].PodMultiDimArrayMemoryClientImpl$1(T),"sn":"impl"}]}; }, $n);
    $m("RobotRaconteurWeb.PodArrayMemoryServiceSkel$1", function (T) { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].String,$n[0].ServiceSkel,$n[1].UInt32,$n[0].MemberDefinition_Direction],"pi":[{"n":"membername","pt":$n[1].String,"ps":0},{"n":"skel","pt":$n[0].ServiceSkel,"ps":1},{"n":"element_size","pt":$n[1].UInt32,"ps":2},{"n":"direction","dv":2,"o":true,"pt":$n[0].MemberDefinition_Direction,"ps":3}],"sn":"ctor"},{"ov":true,"a":3,"n":"DoRead","t":8,"pi":[{"n":"memorypos","pt":$n[1].UInt64,"ps":0},{"n":"bufferpos","pt":$n[1].UInt64,"ps":1},{"n":"count","pt":$n[1].UInt64,"ps":2},{"n":"mem","pt":$n[0].ArrayMemoryBase,"ps":3}],"sn":"DoRead","rt":$n[5].Task$1(System.Object),"p":[$n[1].UInt64,$n[1].UInt64,$n[1].UInt64,$n[0].ArrayMemoryBase]},{"ov":true,"a":3,"n":"DoWrite","t":8,"pi":[{"n":"memorypos","pt":$n[1].UInt64,"ps":0},{"n":"buffer","pt":$n[1].Object,"ps":1},{"n":"bufferpos","pt":$n[1].UInt64,"ps":2},{"n":"count","pt":$n[1].UInt64,"ps":3},{"n":"mem","pt":$n[0].ArrayMemoryBase,"ps":4}],"sn":"DoWrite","rt":$n[5].Task,"p":[$n[1].UInt64,$n[1].Object,$n[1].UInt64,$n[1].UInt64,$n[0].ArrayMemoryBase]}]}; }, $n);
    $m("RobotRaconteurWeb.PodMultiDimArrayMemoryServiceSkel$1", function (T) { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].String,$n[0].ServiceSkel,$n[1].UInt32,$n[0].MemberDefinition_Direction],"pi":[{"n":"membername","pt":$n[1].String,"ps":0},{"n":"skel","pt":$n[0].ServiceSkel,"ps":1},{"n":"element_size","pt":$n[1].UInt32,"ps":2},{"n":"direction","dv":2,"o":true,"pt":$n[0].MemberDefinition_Direction,"ps":3}],"sn":"ctor"},{"ov":true,"a":3,"n":"DoRead","t":8,"pi":[{"n":"memorypos","pt":$n[1].Array.type(System.UInt64),"ps":0},{"n":"bufferpos","pt":$n[1].Array.type(System.UInt64),"ps":1},{"n":"count","pt":$n[1].Array.type(System.UInt64),"ps":2},{"n":"elem_count","pt":$n[1].UInt64,"ps":3},{"n":"mem","pt":$n[0].MultiDimArrayMemoryBase,"ps":4}],"sn":"DoRead","rt":$n[5].Task$1(System.Object),"p":[$n[1].Array.type(System.UInt64),$n[1].Array.type(System.UInt64),$n[1].Array.type(System.UInt64),$n[1].UInt64,$n[0].MultiDimArrayMemoryBase]},{"ov":true,"a":3,"n":"DoWrite","t":8,"pi":[{"n":"memorypos","pt":$n[1].Array.type(System.UInt64),"ps":0},{"n":"buffer","pt":$n[1].Object,"ps":1},{"n":"bufferpos","pt":$n[1].Array.type(System.UInt64),"ps":2},{"n":"count","pt":$n[1].Array.type(System.UInt64),"ps":3},{"n":"elem_count","pt":$n[1].UInt64,"ps":4},{"n":"mem","pt":$n[0].MultiDimArrayMemoryBase,"ps":5}],"sn":"DoWrite","rt":$n[5].Task,"p":[$n[1].Array.type(System.UInt64),$n[1].Object,$n[1].Array.type(System.UInt64),$n[1].Array.type(System.UInt64),$n[1].UInt64,$n[0].MultiDimArrayMemoryBase]}]}; }, $n);
    $m("RobotRaconteurWeb.NamedArrayMemory$1", function (T) { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[System.Array.type(T)],"pi":[{"n":"memory","pt":System.Array.type(T),"ps":0}],"sn":"$ctor1"}]}; }, $n);
    $m("RobotRaconteurWeb.NamedArrayMemoryClientImpl$1", function (T) { return {"att":1048576,"a":4,"m":[{"a":4,"n":".ctor","t":1,"p":[$n[1].String,$n[0].ServiceStub,$n[1].UInt32,$n[0].MemberDefinition_Direction],"pi":[{"n":"membername","pt":$n[1].String,"ps":0},{"n":"stub","pt":$n[0].ServiceStub,"ps":1},{"n":"element_size","pt":$n[1].UInt32,"ps":2},{"n":"direction","pt":$n[0].MemberDefinition_Direction,"ps":3}],"sn":"ctor"},{"ov":true,"a":3,"n":"GetBufferLength","t":8,"pi":[{"n":"buffer","pt":$n[1].Object,"ps":0}],"sn":"GetBufferLength","rt":$n[1].UInt64,"p":[$n[1].Object]},{"ov":true,"a":3,"n":"PackWriteRequest","t":8,"pi":[{"n":"buffer","pt":$n[1].Object,"ps":0},{"n":"bufferpos","pt":$n[1].UInt64,"ps":1},{"n":"count","pt":$n[1].UInt64,"ps":2}],"sn":"PackWriteRequest","rt":$n[1].Object,"p":[$n[1].Object,$n[1].UInt64,$n[1].UInt64]},{"ov":true,"a":3,"n":"UnpackReadResult","t":8,"pi":[{"n":"res","pt":$n[1].Object,"ps":0},{"n":"buffer","pt":$n[1].Object,"ps":1},{"n":"bufferpos","pt":$n[1].UInt64,"ps":2},{"n":"count","pt":$n[1].UInt64,"ps":3}],"sn":"UnpackReadResult","rt":$n[1].Void,"p":[$n[1].Object,$n[1].Object,$n[1].UInt64,$n[1].UInt64]}]}; }, $n);
    $m("RobotRaconteurWeb.NamedArrayMemoryClient$1", function (T) { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].String,$n[0].ServiceStub,$n[1].UInt32,$n[0].MemberDefinition_Direction],"pi":[{"n":"membername","pt":$n[1].String,"ps":0},{"n":"stub","pt":$n[0].ServiceStub,"ps":1},{"n":"element_size","pt":$n[1].UInt32,"ps":2},{"n":"direction","dv":2,"o":true,"pt":$n[0].MemberDefinition_Direction,"ps":3}],"sn":"ctor"},{"ov":true,"a":2,"n":"Attach","t":8,"pi":[{"n":"memory","pt":System.Array.type(T),"ps":0}],"sn":"Attach","rt":$n[1].Void,"p":[System.Array.type(T)]},{"ov":true,"a":2,"n":"GetLength","t":8,"pi":[{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":0}],"sn":"GetLength","rt":$n[5].Task$1(System.UInt64),"p":[$n[4].CancellationToken]},{"a":1,"n":"GetMaxTransferSize","t":8,"pi":[{"n":"cancel","pt":$n[4].CancellationToken,"ps":0}],"sn":"GetMaxTransferSize","rt":$n[5].Task$1(System.UInt32),"p":[$n[4].CancellationToken]},{"ov":true,"a":2,"n":"Read","t":8,"pi":[{"n":"memorypos","pt":$n[1].UInt64,"ps":0},{"n":"buffer","pt":System.Array.type(T),"ps":1},{"n":"bufferpos","pt":$n[1].UInt64,"ps":2},{"n":"count","pt":$n[1].UInt64,"ps":3},{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":4}],"sn":"Read","rt":$n[5].Task,"p":[$n[1].UInt64,System.Array.type(T),$n[1].UInt64,$n[1].UInt64,$n[4].CancellationToken]},{"ov":true,"a":2,"n":"Write","t":8,"pi":[{"n":"memorypos","pt":$n[1].UInt64,"ps":0},{"n":"buffer","pt":System.Array.type(T),"ps":1},{"n":"bufferpos","pt":$n[1].UInt64,"ps":2},{"n":"count","pt":$n[1].UInt64,"ps":3},{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":4}],"sn":"Write","rt":$n[5].Task,"p":[$n[1].UInt64,System.Array.type(T),$n[1].UInt64,$n[1].UInt64,$n[4].CancellationToken]},{"a":2,"n":"Direction","t":16,"rt":$n[0].MemberDefinition_Direction,"g":{"a":2,"n":"get_Direction","t":8,"rt":$n[0].MemberDefinition_Direction,"fg":"Direction","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MemberDefinition_Direction, System.Enum.toStringFn(RobotRaconteurWeb.MemberDefinition_Direction));}},"fn":"Direction"},{"a":2,"n":"MemberName","t":16,"rt":$n[1].String,"g":{"a":2,"n":"get_MemberName","t":8,"rt":$n[1].String,"fg":"MemberName"},"fn":"MemberName"},{"a":1,"n":"impl","t":4,"rt":$n[0].NamedArrayMemoryClientImpl$1(T),"sn":"impl"}]}; }, $n);
    $m("RobotRaconteurWeb.NamedMultiDimArrayMemory$1", function (T) { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[0].NamedMultiDimArray],"pi":[{"n":"memory","pt":$n[0].NamedMultiDimArray,"ps":0}],"sn":"$ctor1"},{"v":true,"a":2,"n":"Attach","t":8,"pi":[{"n":"memory","pt":$n[0].NamedMultiDimArray,"ps":0}],"sn":"Attach","rt":$n[1].Void,"p":[$n[0].NamedMultiDimArray]},{"ov":true,"a":2,"n":"GetDimCount","t":8,"pi":[{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":0}],"sn":"GetDimCount","rt":$n[5].Task$1(System.UInt64),"p":[$n[4].CancellationToken]},{"ov":true,"a":2,"n":"GetDimensions","t":8,"pi":[{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":0}],"sn":"GetDimensions","rt":$n[5].Task$1(System.Array.type(System.UInt64)),"p":[$n[4].CancellationToken]},{"v":true,"a":2,"n":"Read","t":8,"pi":[{"n":"memorypos","pt":$n[1].Array.type(System.UInt64),"ps":0},{"n":"buffer","pt":$n[0].NamedMultiDimArray,"ps":1},{"n":"bufferpos","pt":$n[1].Array.type(System.UInt64),"ps":2},{"n":"count","pt":$n[1].Array.type(System.UInt64),"ps":3},{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":4}],"sn":"Read","rt":$n[5].Task,"p":[$n[1].Array.type(System.UInt64),$n[0].NamedMultiDimArray,$n[1].Array.type(System.UInt64),$n[1].Array.type(System.UInt64),$n[4].CancellationToken]},{"v":true,"a":2,"n":"Write","t":8,"pi":[{"n":"memorypos","pt":$n[1].Array.type(System.UInt64),"ps":0},{"n":"buffer","pt":$n[0].NamedMultiDimArray,"ps":1},{"n":"bufferpos","pt":$n[1].Array.type(System.UInt64),"ps":2},{"n":"count","pt":$n[1].Array.type(System.UInt64),"ps":3},{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":4}],"sn":"Write","rt":$n[5].Task,"p":[$n[1].Array.type(System.UInt64),$n[0].NamedMultiDimArray,$n[1].Array.type(System.UInt64),$n[1].Array.type(System.UInt64),$n[4].CancellationToken]},{"a":1,"n":"multimemory","t":4,"rt":$n[0].NamedMultiDimArray,"sn":"multimemory"}]}; }, $n);
    $m("RobotRaconteurWeb.NamedMultiDimArrayMemoryClientImpl$1", function (T) { return {"att":1048576,"a":4,"m":[{"a":4,"n":".ctor","t":1,"p":[$n[1].String,$n[0].ServiceStub,$n[1].UInt32,$n[0].MemberDefinition_Direction],"pi":[{"n":"membername","pt":$n[1].String,"ps":0},{"n":"stub","pt":$n[0].ServiceStub,"ps":1},{"n":"element_size","pt":$n[1].UInt32,"ps":2},{"n":"direction","pt":$n[0].MemberDefinition_Direction,"ps":3}],"sn":"ctor"},{"ov":true,"a":3,"n":"PackWriteRequest","t":8,"pi":[{"n":"buffer","pt":$n[1].Object,"ps":0},{"n":"bufferpos","pt":$n[1].Array.type(System.UInt64),"ps":1},{"n":"count","pt":$n[1].Array.type(System.UInt64),"ps":2},{"n":"elem_count","pt":$n[1].UInt64,"ps":3}],"sn":"PackWriteRequest","rt":$n[1].Object,"p":[$n[1].Object,$n[1].Array.type(System.UInt64),$n[1].Array.type(System.UInt64),$n[1].UInt64]},{"ov":true,"a":3,"n":"UnpackReadResult","t":8,"pi":[{"n":"res","pt":$n[1].Object,"ps":0},{"n":"buffer","pt":$n[1].Object,"ps":1},{"n":"bufferpos","pt":$n[1].Array.type(System.UInt64),"ps":2},{"n":"count","pt":$n[1].Array.type(System.UInt64),"ps":3},{"n":"elem_count","pt":$n[1].UInt64,"ps":4}],"sn":"UnpackReadResult","rt":$n[1].Void,"p":[$n[1].Object,$n[1].Object,$n[1].Array.type(System.UInt64),$n[1].Array.type(System.UInt64),$n[1].UInt64]}]}; }, $n);
    $m("RobotRaconteurWeb.NamedMultiDimArrayMemoryClient$1", function (T) { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].String,$n[0].ServiceStub,$n[1].UInt32,$n[0].MemberDefinition_Direction],"pi":[{"n":"membername","pt":$n[1].String,"ps":0},{"n":"stub","pt":$n[0].ServiceStub,"ps":1},{"n":"element_size","pt":$n[1].UInt32,"ps":2},{"n":"direction","dv":2,"o":true,"pt":$n[0].MemberDefinition_Direction,"ps":3}],"sn":"ctor"},{"ov":true,"a":2,"n":"Attach","t":8,"pi":[{"n":"memory","pt":$n[0].NamedMultiDimArray,"ps":0}],"sn":"Attach","rt":$n[1].Void,"p":[$n[0].NamedMultiDimArray]},{"ov":true,"a":2,"n":"GetDimCount","t":8,"pi":[{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":0}],"sn":"GetDimCount","rt":$n[5].Task$1(System.UInt64),"p":[$n[4].CancellationToken]},{"ov":true,"a":2,"n":"GetDimensions","t":8,"pi":[{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":0}],"sn":"GetDimensions","rt":$n[5].Task$1(System.Array.type(System.UInt64)),"p":[$n[4].CancellationToken]},{"a":1,"n":"GetMaxTransferSize","t":8,"pi":[{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":0}],"sn":"GetMaxTransferSize","rt":$n[5].Task$1(System.UInt32),"p":[$n[4].CancellationToken]},{"ov":true,"a":2,"n":"Read","t":8,"pi":[{"n":"memorypos","pt":$n[1].Array.type(System.UInt64),"ps":0},{"n":"buffer","pt":$n[0].NamedMultiDimArray,"ps":1},{"n":"bufferpos","pt":$n[1].Array.type(System.UInt64),"ps":2},{"n":"count","pt":$n[1].Array.type(System.UInt64),"ps":3},{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":4}],"sn":"Read","rt":$n[5].Task,"p":[$n[1].Array.type(System.UInt64),$n[0].NamedMultiDimArray,$n[1].Array.type(System.UInt64),$n[1].Array.type(System.UInt64),$n[4].CancellationToken]},{"ov":true,"a":2,"n":"Write","t":8,"pi":[{"n":"memorypos","pt":$n[1].Array.type(System.UInt64),"ps":0},{"n":"buffer","pt":$n[0].NamedMultiDimArray,"ps":1},{"n":"bufferpos","pt":$n[1].Array.type(System.UInt64),"ps":2},{"n":"count","pt":$n[1].Array.type(System.UInt64),"ps":3},{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":4}],"sn":"Write","rt":$n[5].Task,"p":[$n[1].Array.type(System.UInt64),$n[0].NamedMultiDimArray,$n[1].Array.type(System.UInt64),$n[1].Array.type(System.UInt64),$n[4].CancellationToken]},{"a":2,"n":"Direction","t":16,"rt":$n[0].MemberDefinition_Direction,"g":{"a":2,"n":"get_Direction","t":8,"rt":$n[0].MemberDefinition_Direction,"fg":"Direction","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MemberDefinition_Direction, System.Enum.toStringFn(RobotRaconteurWeb.MemberDefinition_Direction));}},"fn":"Direction"},{"a":2,"n":"MemberName","t":16,"rt":$n[1].String,"g":{"a":2,"n":"get_MemberName","t":8,"rt":$n[1].String,"fg":"MemberName"},"fn":"MemberName"},{"a":1,"n":"impl","t":4,"rt":$n[0].NamedMultiDimArrayMemoryClientImpl$1(T),"sn":"impl"}]}; }, $n);
    $m("RobotRaconteurWeb.NamedArrayMemoryServiceSkel$1", function (T) { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].String,$n[0].ServiceSkel,$n[1].UInt32,$n[0].MemberDefinition_Direction],"pi":[{"n":"membername","pt":$n[1].String,"ps":0},{"n":"skel","pt":$n[0].ServiceSkel,"ps":1},{"n":"element_size","pt":$n[1].UInt32,"ps":2},{"n":"direction","dv":2,"o":true,"pt":$n[0].MemberDefinition_Direction,"ps":3}],"sn":"ctor"},{"ov":true,"a":3,"n":"DoRead","t":8,"pi":[{"n":"memorypos","pt":$n[1].UInt64,"ps":0},{"n":"bufferpos","pt":$n[1].UInt64,"ps":1},{"n":"count","pt":$n[1].UInt64,"ps":2},{"n":"mem","pt":$n[0].ArrayMemoryBase,"ps":3}],"sn":"DoRead","rt":$n[5].Task$1(System.Object),"p":[$n[1].UInt64,$n[1].UInt64,$n[1].UInt64,$n[0].ArrayMemoryBase]},{"ov":true,"a":3,"n":"DoWrite","t":8,"pi":[{"n":"memorypos","pt":$n[1].UInt64,"ps":0},{"n":"buffer","pt":$n[1].Object,"ps":1},{"n":"bufferpos","pt":$n[1].UInt64,"ps":2},{"n":"count","pt":$n[1].UInt64,"ps":3},{"n":"mem","pt":$n[0].ArrayMemoryBase,"ps":4}],"sn":"DoWrite","rt":$n[5].Task,"p":[$n[1].UInt64,$n[1].Object,$n[1].UInt64,$n[1].UInt64,$n[0].ArrayMemoryBase]}]}; }, $n);
    $m("RobotRaconteurWeb.NamedMultiDimArrayMemoryServiceSkel$1", function (T) { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].String,$n[0].ServiceSkel,$n[1].UInt32,$n[0].MemberDefinition_Direction],"pi":[{"n":"membername","pt":$n[1].String,"ps":0},{"n":"skel","pt":$n[0].ServiceSkel,"ps":1},{"n":"element_size","pt":$n[1].UInt32,"ps":2},{"n":"direction","dv":2,"o":true,"pt":$n[0].MemberDefinition_Direction,"ps":3}],"sn":"ctor"},{"ov":true,"a":3,"n":"DoRead","t":8,"pi":[{"n":"memorypos","pt":$n[1].Array.type(System.UInt64),"ps":0},{"n":"bufferpos","pt":$n[1].Array.type(System.UInt64),"ps":1},{"n":"count","pt":$n[1].Array.type(System.UInt64),"ps":2},{"n":"elem_count","pt":$n[1].UInt64,"ps":3},{"n":"mem","pt":$n[0].MultiDimArrayMemoryBase,"ps":4}],"sn":"DoRead","rt":$n[5].Task$1(System.Object),"p":[$n[1].Array.type(System.UInt64),$n[1].Array.type(System.UInt64),$n[1].Array.type(System.UInt64),$n[1].UInt64,$n[0].MultiDimArrayMemoryBase]},{"ov":true,"a":3,"n":"DoWrite","t":8,"pi":[{"n":"memorypos","pt":$n[1].Array.type(System.UInt64),"ps":0},{"n":"buffer","pt":$n[1].Object,"ps":1},{"n":"bufferpos","pt":$n[1].Array.type(System.UInt64),"ps":2},{"n":"count","pt":$n[1].Array.type(System.UInt64),"ps":3},{"n":"elem_count","pt":$n[1].UInt64,"ps":4},{"n":"mem","pt":$n[0].MultiDimArrayMemoryBase,"ps":5}],"sn":"DoWrite","rt":$n[5].Task,"p":[$n[1].Array.type(System.UInt64),$n[1].Object,$n[1].Array.type(System.UInt64),$n[1].Array.type(System.UInt64),$n[1].UInt64,$n[0].MultiDimArrayMemoryBase]}]}; }, $n);
    $m("RobotRaconteurWeb.DataTypes", function () { return {"att":257,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"bool_t","is":true,"t":4,"rt":$n[0].DataTypes,"sn":"bool_t","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.DataTypes, System.Enum.toStringFn(RobotRaconteurWeb.DataTypes));}},{"a":2,"n":"cdouble_t","is":true,"t":4,"rt":$n[0].DataTypes,"sn":"cdouble_t","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.DataTypes, System.Enum.toStringFn(RobotRaconteurWeb.DataTypes));}},{"a":2,"n":"csingle_t","is":true,"t":4,"rt":$n[0].DataTypes,"sn":"csingle_t","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.DataTypes, System.Enum.toStringFn(RobotRaconteurWeb.DataTypes));}},{"a":2,"n":"dictionary_t","is":true,"t":4,"rt":$n[0].DataTypes,"sn":"dictionary_t","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.DataTypes, System.Enum.toStringFn(RobotRaconteurWeb.DataTypes));}},{"a":2,"n":"double_t","is":true,"t":4,"rt":$n[0].DataTypes,"sn":"double_t","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.DataTypes, System.Enum.toStringFn(RobotRaconteurWeb.DataTypes));}},{"a":2,"n":"enum_t","is":true,"t":4,"rt":$n[0].DataTypes,"sn":"enum_t","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.DataTypes, System.Enum.toStringFn(RobotRaconteurWeb.DataTypes));}},{"a":2,"n":"int16_t","is":true,"t":4,"rt":$n[0].DataTypes,"sn":"int16_t","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.DataTypes, System.Enum.toStringFn(RobotRaconteurWeb.DataTypes));}},{"a":2,"n":"int32_t","is":true,"t":4,"rt":$n[0].DataTypes,"sn":"int32_t","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.DataTypes, System.Enum.toStringFn(RobotRaconteurWeb.DataTypes));}},{"a":2,"n":"int64_t","is":true,"t":4,"rt":$n[0].DataTypes,"sn":"int64_t","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.DataTypes, System.Enum.toStringFn(RobotRaconteurWeb.DataTypes));}},{"a":2,"n":"int8_t","is":true,"t":4,"rt":$n[0].DataTypes,"sn":"int8_t","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.DataTypes, System.Enum.toStringFn(RobotRaconteurWeb.DataTypes));}},{"a":2,"n":"list_t","is":true,"t":4,"rt":$n[0].DataTypes,"sn":"list_t","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.DataTypes, System.Enum.toStringFn(RobotRaconteurWeb.DataTypes));}},{"a":2,"n":"multidimarray_t","is":true,"t":4,"rt":$n[0].DataTypes,"sn":"multidimarray_t","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.DataTypes, System.Enum.toStringFn(RobotRaconteurWeb.DataTypes));}},{"a":2,"n":"namedarray_array_t","is":true,"t":4,"rt":$n[0].DataTypes,"sn":"namedarray_array_t","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.DataTypes, System.Enum.toStringFn(RobotRaconteurWeb.DataTypes));}},{"a":2,"n":"namedarray_multidimarray_t","is":true,"t":4,"rt":$n[0].DataTypes,"sn":"namedarray_multidimarray_t","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.DataTypes, System.Enum.toStringFn(RobotRaconteurWeb.DataTypes));}},{"a":2,"n":"namedarray_t","is":true,"t":4,"rt":$n[0].DataTypes,"sn":"namedarray_t","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.DataTypes, System.Enum.toStringFn(RobotRaconteurWeb.DataTypes));}},{"a":2,"n":"namedtype_t","is":true,"t":4,"rt":$n[0].DataTypes,"sn":"namedtype_t","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.DataTypes, System.Enum.toStringFn(RobotRaconteurWeb.DataTypes));}},{"a":2,"n":"object_t","is":true,"t":4,"rt":$n[0].DataTypes,"sn":"object_t","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.DataTypes, System.Enum.toStringFn(RobotRaconteurWeb.DataTypes));}},{"a":2,"n":"pod_array_t","is":true,"t":4,"rt":$n[0].DataTypes,"sn":"pod_array_t","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.DataTypes, System.Enum.toStringFn(RobotRaconteurWeb.DataTypes));}},{"a":2,"n":"pod_multidimarray_t","is":true,"t":4,"rt":$n[0].DataTypes,"sn":"pod_multidimarray_t","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.DataTypes, System.Enum.toStringFn(RobotRaconteurWeb.DataTypes));}},{"a":2,"n":"pod_t","is":true,"t":4,"rt":$n[0].DataTypes,"sn":"pod_t","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.DataTypes, System.Enum.toStringFn(RobotRaconteurWeb.DataTypes));}},{"a":2,"n":"single_t","is":true,"t":4,"rt":$n[0].DataTypes,"sn":"single_t","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.DataTypes, System.Enum.toStringFn(RobotRaconteurWeb.DataTypes));}},{"a":2,"n":"string_t","is":true,"t":4,"rt":$n[0].DataTypes,"sn":"string_t","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.DataTypes, System.Enum.toStringFn(RobotRaconteurWeb.DataTypes));}},{"a":2,"n":"structure_t","is":true,"t":4,"rt":$n[0].DataTypes,"sn":"structure_t","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.DataTypes, System.Enum.toStringFn(RobotRaconteurWeb.DataTypes));}},{"a":2,"n":"uint16_t","is":true,"t":4,"rt":$n[0].DataTypes,"sn":"uint16_t","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.DataTypes, System.Enum.toStringFn(RobotRaconteurWeb.DataTypes));}},{"a":2,"n":"uint32_t","is":true,"t":4,"rt":$n[0].DataTypes,"sn":"uint32_t","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.DataTypes, System.Enum.toStringFn(RobotRaconteurWeb.DataTypes));}},{"a":2,"n":"uint64_t","is":true,"t":4,"rt":$n[0].DataTypes,"sn":"uint64_t","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.DataTypes, System.Enum.toStringFn(RobotRaconteurWeb.DataTypes));}},{"a":2,"n":"uint8_t","is":true,"t":4,"rt":$n[0].DataTypes,"sn":"uint8_t","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.DataTypes, System.Enum.toStringFn(RobotRaconteurWeb.DataTypes));}},{"a":2,"n":"varobject_t","is":true,"t":4,"rt":$n[0].DataTypes,"sn":"varobject_t","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.DataTypes, System.Enum.toStringFn(RobotRaconteurWeb.DataTypes));}},{"a":2,"n":"varvalue_t","is":true,"t":4,"rt":$n[0].DataTypes,"sn":"varvalue_t","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.DataTypes, System.Enum.toStringFn(RobotRaconteurWeb.DataTypes));}},{"a":2,"n":"vector_t","is":true,"t":4,"rt":$n[0].DataTypes,"sn":"vector_t","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.DataTypes, System.Enum.toStringFn(RobotRaconteurWeb.DataTypes));}},{"a":2,"n":"void_t","is":true,"t":4,"rt":$n[0].DataTypes,"sn":"void_t","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.DataTypes, System.Enum.toStringFn(RobotRaconteurWeb.DataTypes));}}]}; }, $n);
    $m("RobotRaconteurWeb.DataTypes_ArrayTypes", function () { return {"att":257,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"array","is":true,"t":4,"rt":$n[0].DataTypes_ArrayTypes,"sn":"array","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.DataTypes_ArrayTypes, System.Enum.toStringFn(RobotRaconteurWeb.DataTypes_ArrayTypes));}},{"a":2,"n":"multidimarray","is":true,"t":4,"rt":$n[0].DataTypes_ArrayTypes,"sn":"multidimarray","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.DataTypes_ArrayTypes, System.Enum.toStringFn(RobotRaconteurWeb.DataTypes_ArrayTypes));}},{"a":2,"n":"none","is":true,"t":4,"rt":$n[0].DataTypes_ArrayTypes,"sn":"none","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.DataTypes_ArrayTypes, System.Enum.toStringFn(RobotRaconteurWeb.DataTypes_ArrayTypes));}}]}; }, $n);
    $m("RobotRaconteurWeb.DataTypes_ContainerTypes", function () { return {"att":257,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"generator","is":true,"t":4,"rt":$n[0].DataTypes_ContainerTypes,"sn":"generator","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.DataTypes_ContainerTypes, System.Enum.toStringFn(RobotRaconteurWeb.DataTypes_ContainerTypes));}},{"a":2,"n":"list","is":true,"t":4,"rt":$n[0].DataTypes_ContainerTypes,"sn":"list","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.DataTypes_ContainerTypes, System.Enum.toStringFn(RobotRaconteurWeb.DataTypes_ContainerTypes));}},{"a":2,"n":"map_int32","is":true,"t":4,"rt":$n[0].DataTypes_ContainerTypes,"sn":"map_int32","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.DataTypes_ContainerTypes, System.Enum.toStringFn(RobotRaconteurWeb.DataTypes_ContainerTypes));}},{"a":2,"n":"map_string","is":true,"t":4,"rt":$n[0].DataTypes_ContainerTypes,"sn":"map_string","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.DataTypes_ContainerTypes, System.Enum.toStringFn(RobotRaconteurWeb.DataTypes_ContainerTypes));}},{"a":2,"n":"none","is":true,"t":4,"rt":$n[0].DataTypes_ContainerTypes,"sn":"none","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.DataTypes_ContainerTypes, System.Enum.toStringFn(RobotRaconteurWeb.DataTypes_ContainerTypes));}}]}; }, $n);
    $m("RobotRaconteurWeb.MessageEntryType", function () { return {"att":257,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"CallbackCallReq","is":true,"t":4,"rt":$n[0].MessageEntryType,"sn":"CallbackCallReq","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageEntryType, System.Enum.toStringFn(RobotRaconteurWeb.MessageEntryType));}},{"a":2,"n":"CallbackCallRet","is":true,"t":4,"rt":$n[0].MessageEntryType,"sn":"CallbackCallRet","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageEntryType, System.Enum.toStringFn(RobotRaconteurWeb.MessageEntryType));}},{"a":2,"n":"ClientKeepAliveReq","is":true,"t":4,"rt":$n[0].MessageEntryType,"sn":"ClientKeepAliveReq","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageEntryType, System.Enum.toStringFn(RobotRaconteurWeb.MessageEntryType));}},{"a":2,"n":"ClientKeepAliveRet","is":true,"t":4,"rt":$n[0].MessageEntryType,"sn":"ClientKeepAliveRet","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageEntryType, System.Enum.toStringFn(RobotRaconteurWeb.MessageEntryType));}},{"a":2,"n":"ClientSessionOpReq","is":true,"t":4,"rt":$n[0].MessageEntryType,"sn":"ClientSessionOpReq","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageEntryType, System.Enum.toStringFn(RobotRaconteurWeb.MessageEntryType));}},{"a":2,"n":"ClientSessionOpRet","is":true,"t":4,"rt":$n[0].MessageEntryType,"sn":"ClientSessionOpRet","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageEntryType, System.Enum.toStringFn(RobotRaconteurWeb.MessageEntryType));}},{"a":2,"n":"ConnectClient","is":true,"t":4,"rt":$n[0].MessageEntryType,"sn":"ConnectClient","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageEntryType, System.Enum.toStringFn(RobotRaconteurWeb.MessageEntryType));}},{"a":2,"n":"ConnectClientCombined","is":true,"t":4,"rt":$n[0].MessageEntryType,"sn":"ConnectClientCombined","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageEntryType, System.Enum.toStringFn(RobotRaconteurWeb.MessageEntryType));}},{"a":2,"n":"ConnectClientCombinedRet","is":true,"t":4,"rt":$n[0].MessageEntryType,"sn":"ConnectClientCombinedRet","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageEntryType, System.Enum.toStringFn(RobotRaconteurWeb.MessageEntryType));}},{"a":2,"n":"ConnectClientRet","is":true,"t":4,"rt":$n[0].MessageEntryType,"sn":"ConnectClientRet","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageEntryType, System.Enum.toStringFn(RobotRaconteurWeb.MessageEntryType));}},{"a":2,"n":"ConnectionTest","is":true,"t":4,"rt":$n[0].MessageEntryType,"sn":"ConnectionTest","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageEntryType, System.Enum.toStringFn(RobotRaconteurWeb.MessageEntryType));}},{"a":2,"n":"ConnectionTestRet","is":true,"t":4,"rt":$n[0].MessageEntryType,"sn":"ConnectionTestRet","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageEntryType, System.Enum.toStringFn(RobotRaconteurWeb.MessageEntryType));}},{"a":2,"n":"DisconnectClient","is":true,"t":4,"rt":$n[0].MessageEntryType,"sn":"DisconnectClient","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageEntryType, System.Enum.toStringFn(RobotRaconteurWeb.MessageEntryType));}},{"a":2,"n":"DisconnectClientRet","is":true,"t":4,"rt":$n[0].MessageEntryType,"sn":"DisconnectClientRet","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageEntryType, System.Enum.toStringFn(RobotRaconteurWeb.MessageEntryType));}},{"a":2,"n":"EndpointCheckCapability","is":true,"t":4,"rt":$n[0].MessageEntryType,"sn":"EndpointCheckCapability","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageEntryType, System.Enum.toStringFn(RobotRaconteurWeb.MessageEntryType));}},{"a":2,"n":"EndpointCheckCapabilityRet","is":true,"t":4,"rt":$n[0].MessageEntryType,"sn":"EndpointCheckCapabilityRet","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageEntryType, System.Enum.toStringFn(RobotRaconteurWeb.MessageEntryType));}},{"a":2,"n":"EventReq","is":true,"t":4,"rt":$n[0].MessageEntryType,"sn":"EventReq","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageEntryType, System.Enum.toStringFn(RobotRaconteurWeb.MessageEntryType));}},{"a":2,"n":"EventRes","is":true,"t":4,"rt":$n[0].MessageEntryType,"sn":"EventRes","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageEntryType, System.Enum.toStringFn(RobotRaconteurWeb.MessageEntryType));}},{"a":2,"n":"FunctionCallReq","is":true,"t":4,"rt":$n[0].MessageEntryType,"sn":"FunctionCallReq","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageEntryType, System.Enum.toStringFn(RobotRaconteurWeb.MessageEntryType));}},{"a":2,"n":"FunctionCallRes","is":true,"t":4,"rt":$n[0].MessageEntryType,"sn":"FunctionCallRes","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageEntryType, System.Enum.toStringFn(RobotRaconteurWeb.MessageEntryType));}},{"a":2,"n":"GeneratorNextReq","is":true,"t":4,"rt":$n[0].MessageEntryType,"sn":"GeneratorNextReq","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageEntryType, System.Enum.toStringFn(RobotRaconteurWeb.MessageEntryType));}},{"a":2,"n":"GeneratorNextRes","is":true,"t":4,"rt":$n[0].MessageEntryType,"sn":"GeneratorNextRes","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageEntryType, System.Enum.toStringFn(RobotRaconteurWeb.MessageEntryType));}},{"a":2,"n":"GetNodeInfo","is":true,"t":4,"rt":$n[0].MessageEntryType,"sn":"GetNodeInfo","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageEntryType, System.Enum.toStringFn(RobotRaconteurWeb.MessageEntryType));}},{"a":2,"n":"GetNodeInfoRet","is":true,"t":4,"rt":$n[0].MessageEntryType,"sn":"GetNodeInfoRet","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageEntryType, System.Enum.toStringFn(RobotRaconteurWeb.MessageEntryType));}},{"a":2,"n":"GetServiceAttributes","is":true,"t":4,"rt":$n[0].MessageEntryType,"sn":"GetServiceAttributes","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageEntryType, System.Enum.toStringFn(RobotRaconteurWeb.MessageEntryType));}},{"a":2,"n":"GetServiceAttributesRet","is":true,"t":4,"rt":$n[0].MessageEntryType,"sn":"GetServiceAttributesRet","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageEntryType, System.Enum.toStringFn(RobotRaconteurWeb.MessageEntryType));}},{"a":2,"n":"GetServiceDesc","is":true,"t":4,"rt":$n[0].MessageEntryType,"sn":"GetServiceDesc","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageEntryType, System.Enum.toStringFn(RobotRaconteurWeb.MessageEntryType));}},{"a":2,"n":"GetServiceDescRet","is":true,"t":4,"rt":$n[0].MessageEntryType,"sn":"GetServiceDescRet","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageEntryType, System.Enum.toStringFn(RobotRaconteurWeb.MessageEntryType));}},{"a":2,"n":"MemoryGetParam","is":true,"t":4,"rt":$n[0].MessageEntryType,"sn":"MemoryGetParam","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageEntryType, System.Enum.toStringFn(RobotRaconteurWeb.MessageEntryType));}},{"a":2,"n":"MemoryGetParamRet","is":true,"t":4,"rt":$n[0].MessageEntryType,"sn":"MemoryGetParamRet","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageEntryType, System.Enum.toStringFn(RobotRaconteurWeb.MessageEntryType));}},{"a":2,"n":"MemoryRead","is":true,"t":4,"rt":$n[0].MessageEntryType,"sn":"MemoryRead","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageEntryType, System.Enum.toStringFn(RobotRaconteurWeb.MessageEntryType));}},{"a":2,"n":"MemoryReadRet","is":true,"t":4,"rt":$n[0].MessageEntryType,"sn":"MemoryReadRet","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageEntryType, System.Enum.toStringFn(RobotRaconteurWeb.MessageEntryType));}},{"a":2,"n":"MemoryWrite","is":true,"t":4,"rt":$n[0].MessageEntryType,"sn":"MemoryWrite","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageEntryType, System.Enum.toStringFn(RobotRaconteurWeb.MessageEntryType));}},{"a":2,"n":"MemoryWriteRet","is":true,"t":4,"rt":$n[0].MessageEntryType,"sn":"MemoryWriteRet","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageEntryType, System.Enum.toStringFn(RobotRaconteurWeb.MessageEntryType));}},{"a":2,"n":"NodeCheckCapability","is":true,"t":4,"rt":$n[0].MessageEntryType,"sn":"NodeCheckCapability","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageEntryType, System.Enum.toStringFn(RobotRaconteurWeb.MessageEntryType));}},{"a":2,"n":"NodeCheckCapabilityRet","is":true,"t":4,"rt":$n[0].MessageEntryType,"sn":"NodeCheckCapabilityRet","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageEntryType, System.Enum.toStringFn(RobotRaconteurWeb.MessageEntryType));}},{"a":2,"n":"Null","is":true,"t":4,"rt":$n[0].MessageEntryType,"sn":"Null","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageEntryType, System.Enum.toStringFn(RobotRaconteurWeb.MessageEntryType));}},{"a":2,"n":"ObjectTypeName","is":true,"t":4,"rt":$n[0].MessageEntryType,"sn":"ObjectTypeName","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageEntryType, System.Enum.toStringFn(RobotRaconteurWeb.MessageEntryType));}},{"a":2,"n":"ObjectTypeNameRet","is":true,"t":4,"rt":$n[0].MessageEntryType,"sn":"ObjectTypeNameRet","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageEntryType, System.Enum.toStringFn(RobotRaconteurWeb.MessageEntryType));}},{"a":2,"n":"PipeClosed","is":true,"t":4,"rt":$n[0].MessageEntryType,"sn":"PipeClosed","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageEntryType, System.Enum.toStringFn(RobotRaconteurWeb.MessageEntryType));}},{"a":2,"n":"PipeClosedRet","is":true,"t":4,"rt":$n[0].MessageEntryType,"sn":"PipeClosedRet","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageEntryType, System.Enum.toStringFn(RobotRaconteurWeb.MessageEntryType));}},{"a":2,"n":"PipeConnectReq","is":true,"t":4,"rt":$n[0].MessageEntryType,"sn":"PipeConnectReq","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageEntryType, System.Enum.toStringFn(RobotRaconteurWeb.MessageEntryType));}},{"a":2,"n":"PipeConnectRet","is":true,"t":4,"rt":$n[0].MessageEntryType,"sn":"PipeConnectRet","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageEntryType, System.Enum.toStringFn(RobotRaconteurWeb.MessageEntryType));}},{"a":2,"n":"PipeDisconnectReq","is":true,"t":4,"rt":$n[0].MessageEntryType,"sn":"PipeDisconnectReq","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageEntryType, System.Enum.toStringFn(RobotRaconteurWeb.MessageEntryType));}},{"a":2,"n":"PipeDisconnectRet","is":true,"t":4,"rt":$n[0].MessageEntryType,"sn":"PipeDisconnectRet","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageEntryType, System.Enum.toStringFn(RobotRaconteurWeb.MessageEntryType));}},{"a":2,"n":"PipePacket","is":true,"t":4,"rt":$n[0].MessageEntryType,"sn":"PipePacket","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageEntryType, System.Enum.toStringFn(RobotRaconteurWeb.MessageEntryType));}},{"a":2,"n":"PipePacketRet","is":true,"t":4,"rt":$n[0].MessageEntryType,"sn":"PipePacketRet","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageEntryType, System.Enum.toStringFn(RobotRaconteurWeb.MessageEntryType));}},{"a":2,"n":"PropertyGetReq","is":true,"t":4,"rt":$n[0].MessageEntryType,"sn":"PropertyGetReq","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageEntryType, System.Enum.toStringFn(RobotRaconteurWeb.MessageEntryType));}},{"a":2,"n":"PropertyGetRes","is":true,"t":4,"rt":$n[0].MessageEntryType,"sn":"PropertyGetRes","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageEntryType, System.Enum.toStringFn(RobotRaconteurWeb.MessageEntryType));}},{"a":2,"n":"PropertySetReq","is":true,"t":4,"rt":$n[0].MessageEntryType,"sn":"PropertySetReq","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageEntryType, System.Enum.toStringFn(RobotRaconteurWeb.MessageEntryType));}},{"a":2,"n":"PropertySetRes","is":true,"t":4,"rt":$n[0].MessageEntryType,"sn":"PropertySetRes","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageEntryType, System.Enum.toStringFn(RobotRaconteurWeb.MessageEntryType));}},{"a":2,"n":"ReconnectClient","is":true,"t":4,"rt":$n[0].MessageEntryType,"sn":"ReconnectClient","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageEntryType, System.Enum.toStringFn(RobotRaconteurWeb.MessageEntryType));}},{"a":2,"n":"ReconnectClientRet","is":true,"t":4,"rt":$n[0].MessageEntryType,"sn":"ReconnectClientRet","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageEntryType, System.Enum.toStringFn(RobotRaconteurWeb.MessageEntryType));}},{"a":2,"n":"ServiceCheckCapabilityReq","is":true,"t":4,"rt":$n[0].MessageEntryType,"sn":"ServiceCheckCapabilityReq","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageEntryType, System.Enum.toStringFn(RobotRaconteurWeb.MessageEntryType));}},{"a":2,"n":"ServiceCheckCapabilityRet","is":true,"t":4,"rt":$n[0].MessageEntryType,"sn":"ServiceCheckCapabilityRet","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageEntryType, System.Enum.toStringFn(RobotRaconteurWeb.MessageEntryType));}},{"a":2,"n":"ServiceClosed","is":true,"t":4,"rt":$n[0].MessageEntryType,"sn":"ServiceClosed","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageEntryType, System.Enum.toStringFn(RobotRaconteurWeb.MessageEntryType));}},{"a":2,"n":"ServiceClosedRet","is":true,"t":4,"rt":$n[0].MessageEntryType,"sn":"ServiceClosedRet","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageEntryType, System.Enum.toStringFn(RobotRaconteurWeb.MessageEntryType));}},{"a":2,"n":"ServicePathReleasedReq","is":true,"t":4,"rt":$n[0].MessageEntryType,"sn":"ServicePathReleasedReq","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageEntryType, System.Enum.toStringFn(RobotRaconteurWeb.MessageEntryType));}},{"a":2,"n":"ServicePathReleasedRet","is":true,"t":4,"rt":$n[0].MessageEntryType,"sn":"ServicePathReleasedRet","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageEntryType, System.Enum.toStringFn(RobotRaconteurWeb.MessageEntryType));}},{"a":2,"n":"StreamCheckCapability","is":true,"t":4,"rt":$n[0].MessageEntryType,"sn":"StreamCheckCapability","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageEntryType, System.Enum.toStringFn(RobotRaconteurWeb.MessageEntryType));}},{"a":2,"n":"StreamCheckCapabilityRet","is":true,"t":4,"rt":$n[0].MessageEntryType,"sn":"StreamCheckCapabilityRet","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageEntryType, System.Enum.toStringFn(RobotRaconteurWeb.MessageEntryType));}},{"a":2,"n":"StreamOp","is":true,"t":4,"rt":$n[0].MessageEntryType,"sn":"StreamOp","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageEntryType, System.Enum.toStringFn(RobotRaconteurWeb.MessageEntryType));}},{"a":2,"n":"StreamOpRet","is":true,"t":4,"rt":$n[0].MessageEntryType,"sn":"StreamOpRet","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageEntryType, System.Enum.toStringFn(RobotRaconteurWeb.MessageEntryType));}},{"a":2,"n":"StringTableOp","is":true,"t":4,"rt":$n[0].MessageEntryType,"sn":"StringTableOp","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageEntryType, System.Enum.toStringFn(RobotRaconteurWeb.MessageEntryType));}},{"a":2,"n":"StringTableOpRet","is":true,"t":4,"rt":$n[0].MessageEntryType,"sn":"StringTableOpRet","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageEntryType, System.Enum.toStringFn(RobotRaconteurWeb.MessageEntryType));}},{"a":2,"n":"WireClosed","is":true,"t":4,"rt":$n[0].MessageEntryType,"sn":"WireClosed","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageEntryType, System.Enum.toStringFn(RobotRaconteurWeb.MessageEntryType));}},{"a":2,"n":"WireClosedRet","is":true,"t":4,"rt":$n[0].MessageEntryType,"sn":"WireClosedRet","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageEntryType, System.Enum.toStringFn(RobotRaconteurWeb.MessageEntryType));}},{"a":2,"n":"WireConnectReq","is":true,"t":4,"rt":$n[0].MessageEntryType,"sn":"WireConnectReq","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageEntryType, System.Enum.toStringFn(RobotRaconteurWeb.MessageEntryType));}},{"a":2,"n":"WireConnectRet","is":true,"t":4,"rt":$n[0].MessageEntryType,"sn":"WireConnectRet","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageEntryType, System.Enum.toStringFn(RobotRaconteurWeb.MessageEntryType));}},{"a":2,"n":"WireDisconnectReq","is":true,"t":4,"rt":$n[0].MessageEntryType,"sn":"WireDisconnectReq","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageEntryType, System.Enum.toStringFn(RobotRaconteurWeb.MessageEntryType));}},{"a":2,"n":"WireDisconnectRet","is":true,"t":4,"rt":$n[0].MessageEntryType,"sn":"WireDisconnectRet","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageEntryType, System.Enum.toStringFn(RobotRaconteurWeb.MessageEntryType));}},{"a":2,"n":"WirePacket","is":true,"t":4,"rt":$n[0].MessageEntryType,"sn":"WirePacket","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageEntryType, System.Enum.toStringFn(RobotRaconteurWeb.MessageEntryType));}},{"a":2,"n":"WirePacketRet","is":true,"t":4,"rt":$n[0].MessageEntryType,"sn":"WirePacketRet","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageEntryType, System.Enum.toStringFn(RobotRaconteurWeb.MessageEntryType));}},{"a":2,"n":"WirePeekInValueReq","is":true,"t":4,"rt":$n[0].MessageEntryType,"sn":"WirePeekInValueReq","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageEntryType, System.Enum.toStringFn(RobotRaconteurWeb.MessageEntryType));}},{"a":2,"n":"WirePeekInValueRet","is":true,"t":4,"rt":$n[0].MessageEntryType,"sn":"WirePeekInValueRet","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageEntryType, System.Enum.toStringFn(RobotRaconteurWeb.MessageEntryType));}},{"a":2,"n":"WirePeekOutValueReq","is":true,"t":4,"rt":$n[0].MessageEntryType,"sn":"WirePeekOutValueReq","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageEntryType, System.Enum.toStringFn(RobotRaconteurWeb.MessageEntryType));}},{"a":2,"n":"WirePeekOutValueRet","is":true,"t":4,"rt":$n[0].MessageEntryType,"sn":"WirePeekOutValueRet","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageEntryType, System.Enum.toStringFn(RobotRaconteurWeb.MessageEntryType));}},{"a":2,"n":"WirePokeOutValueReq","is":true,"t":4,"rt":$n[0].MessageEntryType,"sn":"WirePokeOutValueReq","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageEntryType, System.Enum.toStringFn(RobotRaconteurWeb.MessageEntryType));}},{"a":2,"n":"WirePokeOutValueRet","is":true,"t":4,"rt":$n[0].MessageEntryType,"sn":"WirePokeOutValueRet","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageEntryType, System.Enum.toStringFn(RobotRaconteurWeb.MessageEntryType));}},{"a":2,"n":"WireTransportEvent","is":true,"t":4,"rt":$n[0].MessageEntryType,"sn":"WireTransportEvent","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageEntryType, System.Enum.toStringFn(RobotRaconteurWeb.MessageEntryType));}},{"a":2,"n":"WireTransportEventRet","is":true,"t":4,"rt":$n[0].MessageEntryType,"sn":"WireTransportEventRet","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageEntryType, System.Enum.toStringFn(RobotRaconteurWeb.MessageEntryType));}},{"a":2,"n":"WireTransportOpReq","is":true,"t":4,"rt":$n[0].MessageEntryType,"sn":"WireTransportOpReq","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageEntryType, System.Enum.toStringFn(RobotRaconteurWeb.MessageEntryType));}},{"a":2,"n":"WireTransportOpRet","is":true,"t":4,"rt":$n[0].MessageEntryType,"sn":"WireTransportOpRet","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageEntryType, System.Enum.toStringFn(RobotRaconteurWeb.MessageEntryType));}}]}; }, $n);
    $m("RobotRaconteurWeb.MessageErrorType", function () { return {"att":257,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"AbortOperation","is":true,"t":4,"rt":$n[0].MessageErrorType,"sn":"AbortOperation","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageErrorType, System.Enum.toStringFn(RobotRaconteurWeb.MessageErrorType));}},{"a":2,"n":"AuthenticationError","is":true,"t":4,"rt":$n[0].MessageErrorType,"sn":"AuthenticationError","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageErrorType, System.Enum.toStringFn(RobotRaconteurWeb.MessageErrorType));}},{"a":2,"n":"BufferLimitViolation","is":true,"t":4,"rt":$n[0].MessageErrorType,"sn":"BufferLimitViolation","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageErrorType, System.Enum.toStringFn(RobotRaconteurWeb.MessageErrorType));}},{"a":2,"n":"ConnectionError","is":true,"t":4,"rt":$n[0].MessageErrorType,"sn":"ConnectionError","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageErrorType, System.Enum.toStringFn(RobotRaconteurWeb.MessageErrorType));}},{"a":2,"n":"DataSerializationError","is":true,"t":4,"rt":$n[0].MessageErrorType,"sn":"DataSerializationError","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageErrorType, System.Enum.toStringFn(RobotRaconteurWeb.MessageErrorType));}},{"a":2,"n":"DataTypeError","is":true,"t":4,"rt":$n[0].MessageErrorType,"sn":"DataTypeError","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageErrorType, System.Enum.toStringFn(RobotRaconteurWeb.MessageErrorType));}},{"a":2,"n":"DataTypeMismatch","is":true,"t":4,"rt":$n[0].MessageErrorType,"sn":"DataTypeMismatch","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageErrorType, System.Enum.toStringFn(RobotRaconteurWeb.MessageErrorType));}},{"a":2,"n":"EndpointCommunicationFatalError","is":true,"t":4,"rt":$n[0].MessageErrorType,"sn":"EndpointCommunicationFatalError","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageErrorType, System.Enum.toStringFn(RobotRaconteurWeb.MessageErrorType));}},{"a":2,"n":"IOError","is":true,"t":4,"rt":$n[0].MessageErrorType,"sn":"IOError","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageErrorType, System.Enum.toStringFn(RobotRaconteurWeb.MessageErrorType));}},{"a":2,"n":"InternalError","is":true,"t":4,"rt":$n[0].MessageErrorType,"sn":"InternalError","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageErrorType, System.Enum.toStringFn(RobotRaconteurWeb.MessageErrorType));}},{"a":2,"n":"InvalidArgument","is":true,"t":4,"rt":$n[0].MessageErrorType,"sn":"InvalidArgument","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageErrorType, System.Enum.toStringFn(RobotRaconteurWeb.MessageErrorType));}},{"a":2,"n":"InvalidEndpoint","is":true,"t":4,"rt":$n[0].MessageErrorType,"sn":"InvalidEndpoint","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageErrorType, System.Enum.toStringFn(RobotRaconteurWeb.MessageErrorType));}},{"a":2,"n":"InvalidOperation","is":true,"t":4,"rt":$n[0].MessageErrorType,"sn":"InvalidOperation","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageErrorType, System.Enum.toStringFn(RobotRaconteurWeb.MessageErrorType));}},{"a":2,"n":"KeyNotFound","is":true,"t":4,"rt":$n[0].MessageErrorType,"sn":"KeyNotFound","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageErrorType, System.Enum.toStringFn(RobotRaconteurWeb.MessageErrorType));}},{"a":2,"n":"MemberBusy","is":true,"t":4,"rt":$n[0].MessageErrorType,"sn":"MemberBusy","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageErrorType, System.Enum.toStringFn(RobotRaconteurWeb.MessageErrorType));}},{"a":2,"n":"MemberFormatMismatch","is":true,"t":4,"rt":$n[0].MessageErrorType,"sn":"MemberFormatMismatch","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageErrorType, System.Enum.toStringFn(RobotRaconteurWeb.MessageErrorType));}},{"a":2,"n":"MemberNotFound","is":true,"t":4,"rt":$n[0].MessageErrorType,"sn":"MemberNotFound","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageErrorType, System.Enum.toStringFn(RobotRaconteurWeb.MessageErrorType));}},{"a":2,"n":"MessageElementNotFound","is":true,"t":4,"rt":$n[0].MessageErrorType,"sn":"MessageElementNotFound","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageErrorType, System.Enum.toStringFn(RobotRaconteurWeb.MessageErrorType));}},{"a":2,"n":"MessageEntryNotFound","is":true,"t":4,"rt":$n[0].MessageErrorType,"sn":"MessageEntryNotFound","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageErrorType, System.Enum.toStringFn(RobotRaconteurWeb.MessageErrorType));}},{"a":2,"n":"NodeNotFound","is":true,"t":4,"rt":$n[0].MessageErrorType,"sn":"NodeNotFound","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageErrorType, System.Enum.toStringFn(RobotRaconteurWeb.MessageErrorType));}},{"a":2,"n":"None","is":true,"t":4,"rt":$n[0].MessageErrorType,"sn":"None","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageErrorType, System.Enum.toStringFn(RobotRaconteurWeb.MessageErrorType));}},{"a":2,"n":"NotImplementedError","is":true,"t":4,"rt":$n[0].MessageErrorType,"sn":"NotImplementedError","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageErrorType, System.Enum.toStringFn(RobotRaconteurWeb.MessageErrorType));}},{"a":2,"n":"NullValue","is":true,"t":4,"rt":$n[0].MessageErrorType,"sn":"NullValue","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageErrorType, System.Enum.toStringFn(RobotRaconteurWeb.MessageErrorType));}},{"a":2,"n":"ObjectLockedError","is":true,"t":4,"rt":$n[0].MessageErrorType,"sn":"ObjectLockedError","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageErrorType, System.Enum.toStringFn(RobotRaconteurWeb.MessageErrorType));}},{"a":2,"n":"ObjectNotFound","is":true,"t":4,"rt":$n[0].MessageErrorType,"sn":"ObjectNotFound","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageErrorType, System.Enum.toStringFn(RobotRaconteurWeb.MessageErrorType));}},{"a":2,"n":"OperationAborted","is":true,"t":4,"rt":$n[0].MessageErrorType,"sn":"OperationAborted","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageErrorType, System.Enum.toStringFn(RobotRaconteurWeb.MessageErrorType));}},{"a":2,"n":"OperationFailed","is":true,"t":4,"rt":$n[0].MessageErrorType,"sn":"OperationFailed","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageErrorType, System.Enum.toStringFn(RobotRaconteurWeb.MessageErrorType));}},{"a":2,"n":"OutOfRange","is":true,"t":4,"rt":$n[0].MessageErrorType,"sn":"OutOfRange","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageErrorType, System.Enum.toStringFn(RobotRaconteurWeb.MessageErrorType));}},{"a":2,"n":"OutOfSystemResource","is":true,"t":4,"rt":$n[0].MessageErrorType,"sn":"OutOfSystemResource","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageErrorType, System.Enum.toStringFn(RobotRaconteurWeb.MessageErrorType));}},{"a":2,"n":"PermissionDenied","is":true,"t":4,"rt":$n[0].MessageErrorType,"sn":"PermissionDenied","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageErrorType, System.Enum.toStringFn(RobotRaconteurWeb.MessageErrorType));}},{"a":2,"n":"ProtocolError","is":true,"t":4,"rt":$n[0].MessageErrorType,"sn":"ProtocolError","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageErrorType, System.Enum.toStringFn(RobotRaconteurWeb.MessageErrorType));}},{"a":2,"n":"ReadOnlyMember","is":true,"t":4,"rt":$n[0].MessageErrorType,"sn":"ReadOnlyMember","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageErrorType, System.Enum.toStringFn(RobotRaconteurWeb.MessageErrorType));}},{"a":2,"n":"RemoteError","is":true,"t":4,"rt":$n[0].MessageErrorType,"sn":"RemoteError","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageErrorType, System.Enum.toStringFn(RobotRaconteurWeb.MessageErrorType));}},{"a":2,"n":"RequestTimeout","is":true,"t":4,"rt":$n[0].MessageErrorType,"sn":"RequestTimeout","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageErrorType, System.Enum.toStringFn(RobotRaconteurWeb.MessageErrorType));}},{"a":2,"n":"ResourceNotFound","is":true,"t":4,"rt":$n[0].MessageErrorType,"sn":"ResourceNotFound","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageErrorType, System.Enum.toStringFn(RobotRaconteurWeb.MessageErrorType));}},{"a":2,"n":"ServiceDefinitionError","is":true,"t":4,"rt":$n[0].MessageErrorType,"sn":"ServiceDefinitionError","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageErrorType, System.Enum.toStringFn(RobotRaconteurWeb.MessageErrorType));}},{"a":2,"n":"ServiceError","is":true,"t":4,"rt":$n[0].MessageErrorType,"sn":"ServiceError","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageErrorType, System.Enum.toStringFn(RobotRaconteurWeb.MessageErrorType));}},{"a":2,"n":"ServiceNotFound","is":true,"t":4,"rt":$n[0].MessageErrorType,"sn":"ServiceNotFound","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageErrorType, System.Enum.toStringFn(RobotRaconteurWeb.MessageErrorType));}},{"a":2,"n":"StopIteration","is":true,"t":4,"rt":$n[0].MessageErrorType,"sn":"StopIteration","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageErrorType, System.Enum.toStringFn(RobotRaconteurWeb.MessageErrorType));}},{"a":2,"n":"SystemResourceError","is":true,"t":4,"rt":$n[0].MessageErrorType,"sn":"SystemResourceError","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageErrorType, System.Enum.toStringFn(RobotRaconteurWeb.MessageErrorType));}},{"a":2,"n":"SystemResourcePermissionDenied","is":true,"t":4,"rt":$n[0].MessageErrorType,"sn":"SystemResourcePermissionDenied","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageErrorType, System.Enum.toStringFn(RobotRaconteurWeb.MessageErrorType));}},{"a":2,"n":"UnknownError","is":true,"t":4,"rt":$n[0].MessageErrorType,"sn":"UnknownError","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageErrorType, System.Enum.toStringFn(RobotRaconteurWeb.MessageErrorType));}},{"a":2,"n":"ValueNotSet","is":true,"t":4,"rt":$n[0].MessageErrorType,"sn":"ValueNotSet","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageErrorType, System.Enum.toStringFn(RobotRaconteurWeb.MessageErrorType));}},{"a":2,"n":"WriteOnlyMember","is":true,"t":4,"rt":$n[0].MessageErrorType,"sn":"WriteOnlyMember","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageErrorType, System.Enum.toStringFn(RobotRaconteurWeb.MessageErrorType));}}]}; }, $n);
    $m("RobotRaconteurWeb.CDouble", function () { return {"att":1048841,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[1].Double,$n[1].Double],"pi":[{"n":"real","pt":$n[1].Double,"ps":0},{"n":"imag","pt":$n[1].Double,"ps":1}],"sn":"$ctor1"},{"ov":true,"a":2,"n":"Equals","t":8,"pi":[{"n":"obj","pt":$n[1].Object,"ps":0}],"sn":"equals","rt":$n[1].Boolean,"p":[$n[1].Object],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"ov":true,"a":2,"n":"GetHashCode","t":8,"sn":"getHashCode","rt":$n[1].Int32,"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"op_Equality","is":true,"t":8,"pi":[{"n":"a","pt":$n[0].CDouble,"ps":0},{"n":"b","pt":$n[0].CDouble,"ps":1}],"sn":"op_Equality","rt":$n[1].Boolean,"p":[$n[0].CDouble,$n[0].CDouble],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"op_Inequality","is":true,"t":8,"pi":[{"n":"a","pt":$n[0].CDouble,"ps":0},{"n":"b","pt":$n[0].CDouble,"ps":1}],"sn":"op_Inequality","rt":$n[1].Boolean,"p":[$n[0].CDouble,$n[0].CDouble],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"Imag","t":4,"rt":$n[1].Double,"sn":"Imag","box":function ($v) { return Bridge.box($v, System.Double, System.Double.format, System.Double.getHashCode);}},{"a":2,"n":"Real","t":4,"rt":$n[1].Double,"sn":"Real","box":function ($v) { return Bridge.box($v, System.Double, System.Double.format, System.Double.getHashCode);}}]}; }, $n);
    $m("RobotRaconteurWeb.CSingle", function () { return {"att":1048841,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[1].Single,$n[1].Single],"pi":[{"n":"real","pt":$n[1].Single,"ps":0},{"n":"imag","pt":$n[1].Single,"ps":1}],"sn":"$ctor1"},{"ov":true,"a":2,"n":"Equals","t":8,"pi":[{"n":"obj","pt":$n[1].Object,"ps":0}],"sn":"equals","rt":$n[1].Boolean,"p":[$n[1].Object],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"ov":true,"a":2,"n":"GetHashCode","t":8,"sn":"getHashCode","rt":$n[1].Int32,"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"op_Equality","is":true,"t":8,"pi":[{"n":"a","pt":$n[0].CSingle,"ps":0},{"n":"b","pt":$n[0].CSingle,"ps":1}],"sn":"op_Equality","rt":$n[1].Boolean,"p":[$n[0].CSingle,$n[0].CSingle],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"op_Inequality","is":true,"t":8,"pi":[{"n":"a","pt":$n[0].CSingle,"ps":0},{"n":"b","pt":$n[0].CSingle,"ps":1}],"sn":"op_Inequality","rt":$n[1].Boolean,"p":[$n[0].CSingle,$n[0].CSingle],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"Imag","t":4,"rt":$n[1].Single,"sn":"Imag","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"Real","t":4,"rt":$n[1].Single,"sn":"Real","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}}]}; }, $n);
    $m("RobotRaconteurWeb.DataTypeUtil", function () { return {"att":1048961,"a":2,"s":true,"m":[{"a":2,"n":"ArrayFromDataType","is":true,"t":8,"pi":[{"n":"t","pt":$n[0].DataTypes,"ps":0},{"n":"length","pt":$n[1].UInt32,"ps":1}],"sn":"ArrayFromDataType","rt":Array,"p":[$n[0].DataTypes,$n[1].UInt32]},{"a":2,"n":"ArrayFromScalar","is":true,"t":8,"pi":[{"n":"inv","pt":$n[1].Object,"ps":0}],"sn":"ArrayFromScalar","rt":$n[1].Object,"p":[$n[1].Object]},{"a":2,"n":"IsNumber","is":true,"t":8,"pi":[{"n":"t","pt":$n[0].DataTypes,"ps":0}],"sn":"IsNumber","rt":$n[1].Boolean,"p":[$n[0].DataTypes],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"TypeIDFromString","is":true,"t":8,"pi":[{"n":"stype","pt":$n[1].String,"ps":0}],"sn":"TypeIDFromString","rt":$n[0].DataTypes,"p":[$n[1].String],"box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.DataTypes, System.Enum.toStringFn(RobotRaconteurWeb.DataTypes));}},{"a":2,"n":"TypeIDFromString_known","is":true,"t":8,"pi":[{"n":"stype","pt":$n[1].String,"ps":0}],"sn":"TypeIDFromString_known","rt":$n[1].Boolean,"p":[$n[1].String],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"TypeIDFromType","is":true,"t":8,"pi":[{"n":"stype","pt":$n[1].Type,"ps":0}],"sn":"TypeIDFromType","rt":$n[0].DataTypes,"p":[$n[1].Type],"box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.DataTypes, System.Enum.toStringFn(RobotRaconteurWeb.DataTypes));}},{"a":2,"n":"VerifyArrayLength","is":true,"t":8,"pi":[{"n":"a","pt":$n[0].MultiDimArray,"ps":0},{"n":"n_elems","pt":$n[1].Int32,"ps":1},{"n":"len","pt":$n[1].Array.type(System.UInt32),"ps":2}],"sn":"VerifyArrayLength$1","rt":$n[0].MultiDimArray,"p":[$n[0].MultiDimArray,$n[1].Int32,$n[1].Array.type(System.UInt32)]},{"a":2,"n":"VerifyArrayLength","is":true,"t":8,"pi":[{"n":"a","pt":$n[0].NamedMultiDimArray,"ps":0},{"n":"n_elems","pt":$n[1].Int32,"ps":1},{"n":"len","pt":$n[1].Array.type(System.UInt32),"ps":2}],"sn":"VerifyArrayLength$2","rt":$n[0].NamedMultiDimArray,"p":[$n[0].NamedMultiDimArray,$n[1].Int32,$n[1].Array.type(System.UInt32)]},{"a":2,"n":"VerifyArrayLength","is":true,"t":8,"pi":[{"n":"a","pt":$n[0].PodMultiDimArray,"ps":0},{"n":"n_elems","pt":$n[1].Int32,"ps":1},{"n":"len","pt":$n[1].Array.type(System.UInt32),"ps":2}],"sn":"VerifyArrayLength$3","rt":$n[0].PodMultiDimArray,"p":[$n[0].PodMultiDimArray,$n[1].Int32,$n[1].Array.type(System.UInt32)]},{"a":2,"n":"VerifyArrayLength","is":true,"t":8,"pi":[{"n":"a","pt":$n[3].Dictionary$2(System.Object,System.Array.type(System.Object)),"ps":0},{"n":"len","pt":$n[1].Int32,"ps":1},{"n":"varlength","pt":$n[1].Boolean,"ps":2}],"tpc":2,"tprm":["K","T"],"sn":"VerifyArrayLength$4","rt":$n[3].Dictionary$2(System.Object,System.Array.type(System.Object)),"p":[$n[3].Dictionary$2(System.Object,System.Array.type(System.Object)),$n[1].Int32,$n[1].Boolean]},{"a":2,"n":"VerifyArrayLength","is":true,"t":8,"pi":[{"n":"a","pt":$n[3].Dictionary$2(System.Object,RobotRaconteurWeb.MultiDimArray),"ps":0},{"n":"n_elems","pt":$n[1].Int32,"ps":1},{"n":"len","pt":$n[1].Array.type(System.UInt32),"ps":2}],"tpc":1,"tprm":["K"],"sn":"VerifyArrayLength$5","rt":$n[3].Dictionary$2(System.Object,RobotRaconteurWeb.MultiDimArray),"p":[$n[3].Dictionary$2(System.Object,RobotRaconteurWeb.MultiDimArray),$n[1].Int32,$n[1].Array.type(System.UInt32)]},{"a":2,"n":"VerifyArrayLength","is":true,"t":8,"pi":[{"n":"a","pt":$n[3].Dictionary$2(System.Object,RobotRaconteurWeb.PodMultiDimArray),"ps":0},{"n":"n_elems","pt":$n[1].Int32,"ps":1},{"n":"len","pt":$n[1].Array.type(System.UInt32),"ps":2}],"tpc":1,"tprm":["K"],"sn":"VerifyArrayLength$7","rt":$n[3].Dictionary$2(System.Object,RobotRaconteurWeb.PodMultiDimArray),"p":[$n[3].Dictionary$2(System.Object,RobotRaconteurWeb.PodMultiDimArray),$n[1].Int32,$n[1].Array.type(System.UInt32)]},{"a":2,"n":"VerifyArrayLength","is":true,"t":8,"pi":[{"n":"a","pt":$n[3].Dictionary$2(System.Object,RobotRaconteurWeb.NamedMultiDimArray),"ps":0},{"n":"n_elems","pt":$n[1].Int32,"ps":1},{"n":"len","pt":$n[1].Array.type(System.UInt32),"ps":2}],"tpc":1,"tprm":["K"],"sn":"VerifyArrayLength$6","rt":$n[3].Dictionary$2(System.Object,RobotRaconteurWeb.NamedMultiDimArray),"p":[$n[3].Dictionary$2(System.Object,RobotRaconteurWeb.NamedMultiDimArray),$n[1].Int32,$n[1].Array.type(System.UInt32)]},{"a":2,"n":"VerifyArrayLength","is":true,"t":8,"pi":[{"n":"a","pt":$n[3].List$1(System.Array.type(System.Object)),"ps":0},{"n":"len","pt":$n[1].Int32,"ps":1},{"n":"varlength","pt":$n[1].Boolean,"ps":2}],"tpc":1,"tprm":["T"],"sn":"VerifyArrayLength$8","rt":$n[3].List$1(System.Array.type(System.Object)),"p":[$n[3].List$1(System.Array.type(System.Object)),$n[1].Int32,$n[1].Boolean]},{"a":2,"n":"VerifyArrayLength","is":true,"t":8,"pi":[{"n":"a","pt":$n[3].List$1(RobotRaconteurWeb.MultiDimArray),"ps":0},{"n":"n_elems","pt":$n[1].Int32,"ps":1},{"n":"len","pt":$n[1].Array.type(System.UInt32),"ps":2}],"sn":"VerifyArrayLength$9","rt":$n[3].List$1(RobotRaconteurWeb.MultiDimArray),"p":[$n[3].List$1(RobotRaconteurWeb.MultiDimArray),$n[1].Int32,$n[1].Array.type(System.UInt32)]},{"a":2,"n":"VerifyArrayLength","is":true,"t":8,"pi":[{"n":"a","pt":$n[3].List$1(RobotRaconteurWeb.PodMultiDimArray),"ps":0},{"n":"n_elems","pt":$n[1].Int32,"ps":1},{"n":"len","pt":$n[1].Array.type(System.UInt32),"ps":2}],"sn":"VerifyArrayLength$11","rt":$n[3].List$1(RobotRaconteurWeb.PodMultiDimArray),"p":[$n[3].List$1(RobotRaconteurWeb.PodMultiDimArray),$n[1].Int32,$n[1].Array.type(System.UInt32)]},{"a":2,"n":"VerifyArrayLength","is":true,"t":8,"pi":[{"n":"a","pt":$n[3].List$1(RobotRaconteurWeb.NamedMultiDimArray),"ps":0},{"n":"n_elems","pt":$n[1].Int32,"ps":1},{"n":"len","pt":$n[1].Array.type(System.UInt32),"ps":2}],"sn":"VerifyArrayLength$10","rt":$n[3].List$1(RobotRaconteurWeb.NamedMultiDimArray),"p":[$n[3].List$1(RobotRaconteurWeb.NamedMultiDimArray),$n[1].Int32,$n[1].Array.type(System.UInt32)]},{"a":2,"n":"VerifyArrayLength","is":true,"t":8,"pi":[{"n":"a","pt":System.Array.type(System.Object),"ps":0},{"n":"len","pt":$n[1].Int32,"ps":1},{"n":"varlength","pt":$n[1].Boolean,"ps":2}],"tpc":1,"tprm":["T"],"sn":"VerifyArrayLength","rt":System.Array.type(System.Object),"p":[System.Array.type(System.Object),$n[1].Int32,$n[1].Boolean]},{"a":2,"n":"size","is":true,"t":8,"pi":[{"n":"type","pt":$n[0].DataTypes,"ps":0}],"sn":"size","rt":$n[1].UInt32,"p":[$n[0].DataTypes],"box":function ($v) { return Bridge.box($v, System.UInt32);}}]}; }, $n);
    $m("RobotRaconteurWeb.Message", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"AddEntry","t":8,"pi":[{"n":"t","pt":$n[0].MessageEntryType,"ps":0},{"n":"name","pt":$n[1].String,"ps":1}],"sn":"AddEntry","rt":$n[0].MessageEntry,"p":[$n[0].MessageEntryType,$n[1].String]},{"a":2,"n":"ComputeSize","t":8,"sn":"ComputeSize","rt":$n[1].UInt32,"box":function ($v) { return Bridge.box($v, System.UInt32);}},{"a":2,"n":"FindEntry","t":8,"pi":[{"n":"name","pt":$n[1].String,"ps":0}],"sn":"FindEntry","rt":$n[0].MessageEntry,"p":[$n[1].String]},{"a":2,"n":"Read","t":8,"pi":[{"n":"r","pt":$n[0].ArrayBinaryReader,"ps":0}],"sn":"Read","rt":$n[1].Void,"p":[$n[0].ArrayBinaryReader]},{"a":2,"n":"Write","t":8,"pi":[{"n":"w","pt":$n[0].ArrayBinaryWriter,"ps":0}],"sn":"Write","rt":$n[1].Void,"p":[$n[0].ArrayBinaryWriter]},{"a":2,"n":"entries","t":4,"rt":$n[3].List$1(RobotRaconteurWeb.MessageEntry),"sn":"entries"},{"a":2,"n":"header","t":4,"rt":$n[0].MessageHeader,"sn":"header"}]}; }, $n);
    $m("RobotRaconteurWeb.MessageHeader", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"ComputeSize","t":8,"sn":"ComputeSize","rt":$n[1].UInt16,"box":function ($v) { return Bridge.box($v, System.UInt16);}},{"a":2,"n":"Read","t":8,"pi":[{"n":"r","pt":$n[0].ArrayBinaryReader,"ps":0}],"sn":"Read","rt":$n[1].Void,"p":[$n[0].ArrayBinaryReader]},{"a":2,"n":"UpdateHeader","t":8,"pi":[{"n":"message_size","pt":$n[1].UInt32,"ps":0},{"n":"entry_count","pt":$n[1].UInt16,"ps":1}],"sn":"UpdateHeader","rt":$n[1].Void,"p":[$n[1].UInt32,$n[1].UInt16]},{"a":2,"n":"Write","t":8,"pi":[{"n":"w","pt":$n[0].ArrayBinaryWriter,"ps":0}],"sn":"Write","rt":$n[1].Void,"p":[$n[0].ArrayBinaryWriter]},{"a":2,"n":"EntryCount","t":4,"rt":$n[1].UInt16,"sn":"EntryCount","box":function ($v) { return Bridge.box($v, System.UInt16);}},{"a":2,"n":"HeaderLength","t":4,"rt":$n[1].UInt16,"sn":"HeaderLength","box":function ($v) { return Bridge.box($v, System.UInt16);}},{"a":2,"n":"MessageID","t":4,"rt":$n[1].UInt16,"sn":"MessageID","box":function ($v) { return Bridge.box($v, System.UInt16);}},{"a":2,"n":"MessageResID","t":4,"rt":$n[1].UInt16,"sn":"MessageResID","box":function ($v) { return Bridge.box($v, System.UInt16);}},{"a":2,"n":"MessageSize","t":4,"rt":$n[1].UInt32,"sn":"MessageSize","box":function ($v) { return Bridge.box($v, System.UInt32);}},{"a":2,"n":"MetaData","t":4,"rt":$n[1].String,"sn":"MetaData"},{"a":2,"n":"ReceiverEndpoint","t":4,"rt":$n[1].UInt32,"sn":"ReceiverEndpoint","box":function ($v) { return Bridge.box($v, System.UInt32);}},{"a":2,"n":"ReceiverNodeID","t":4,"rt":$n[0].NodeID,"sn":"ReceiverNodeID"},{"a":2,"n":"ReceiverNodeName","t":4,"rt":$n[1].String,"sn":"ReceiverNodeName"},{"a":2,"n":"SenderEndpoint","t":4,"rt":$n[1].UInt32,"sn":"SenderEndpoint","box":function ($v) { return Bridge.box($v, System.UInt32);}},{"a":2,"n":"SenderNodeID","t":4,"rt":$n[0].NodeID,"sn":"SenderNodeID"},{"a":2,"n":"SenderNodeName","t":4,"rt":$n[1].String,"sn":"SenderNodeName"}]}; }, $n);
    $m("RobotRaconteurWeb.MessageEntry", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[0].MessageEntryType,$n[1].String],"pi":[{"n":"t","pt":$n[0].MessageEntryType,"ps":0},{"n":"n","pt":$n[1].String,"ps":1}],"sn":"$ctor1"},{"a":2,"n":"AddElement","t":8,"pi":[{"n":"m","pt":$n[0].MessageElement,"ps":0}],"sn":"AddElement","rt":$n[0].MessageElement,"p":[$n[0].MessageElement]},{"a":2,"n":"AddElement","t":8,"pi":[{"n":"name","pt":$n[1].String,"ps":0},{"n":"data","pt":$n[1].Object,"ps":1}],"sn":"AddElement$1","rt":$n[0].MessageElement,"p":[$n[1].String,$n[1].Object]},{"a":2,"n":"ComputeSize","t":8,"sn":"ComputeSize","rt":$n[1].UInt32,"box":function ($v) { return Bridge.box($v, System.UInt32);}},{"a":2,"n":"FindElement","t":8,"pi":[{"n":"name","pt":$n[1].String,"ps":0}],"sn":"FindElement","rt":$n[0].MessageElement,"p":[$n[1].String]},{"a":2,"n":"Read","t":8,"pi":[{"n":"r","pt":$n[0].ArrayBinaryReader,"ps":0}],"sn":"Read","rt":$n[1].Void,"p":[$n[0].ArrayBinaryReader]},{"a":2,"n":"TryFindElement","t":8,"pi":[{"n":"name","pt":$n[1].String,"ps":0},{"n":"m","out":true,"pt":$n[0].MessageElement,"ps":1}],"sn":"TryFindElement","rt":$n[1].Boolean,"p":[$n[1].String,$n[0].MessageElement],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"Write","t":8,"pi":[{"n":"w","pt":$n[0].ArrayBinaryWriter,"ps":0}],"sn":"Write","rt":$n[1].Void,"p":[$n[0].ArrayBinaryWriter]},{"a":2,"n":"EntrySize","t":4,"rt":$n[1].UInt32,"sn":"EntrySize","box":function ($v) { return Bridge.box($v, System.UInt32);}},{"a":2,"n":"EntryType","t":4,"rt":$n[0].MessageEntryType,"sn":"EntryType","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageEntryType, System.Enum.toStringFn(RobotRaconteurWeb.MessageEntryType));}},{"a":2,"n":"Error","t":4,"rt":$n[0].MessageErrorType,"sn":"Error","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MessageErrorType, System.Enum.toStringFn(RobotRaconteurWeb.MessageErrorType));}},{"a":2,"n":"MemberName","t":4,"rt":$n[1].String,"sn":"MemberName"},{"a":2,"n":"MetaData","t":4,"rt":$n[1].String,"sn":"MetaData"},{"a":2,"n":"RequestID","t":4,"rt":$n[1].UInt32,"sn":"RequestID","box":function ($v) { return Bridge.box($v, System.UInt32);}},{"a":2,"n":"ServicePath","t":4,"rt":$n[1].String,"sn":"ServicePath"},{"a":2,"n":"elements","t":4,"rt":$n[3].List$1(RobotRaconteurWeb.MessageElement),"sn":"elements"}]}; }, $n);
    $m("RobotRaconteurWeb.MessageElement", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[1].String,$n[1].Object],"pi":[{"n":"name","pt":$n[1].String,"ps":0},{"n":"datin","pt":$n[1].Object,"ps":1}],"sn":"$ctor1"},{"a":2,"n":"CastData","t":8,"tpc":1,"tprm":["T"],"sn":"CastData","rt":System.Object},{"a":2,"n":"CastData","is":true,"t":8,"pi":[{"n":"Data","pt":$n[1].Object,"ps":0}],"tpc":1,"tprm":["T"],"sn":"CastData","rt":System.Object,"p":[$n[1].Object]},{"a":2,"n":"ComputeSize","t":8,"sn":"ComputeSize","rt":$n[1].UInt32,"box":function ($v) { return Bridge.box($v, System.UInt32);}},{"a":2,"n":"FindElement","is":true,"t":8,"pi":[{"n":"m","pt":$n[0].MessageEntry,"ps":0},{"n":"name","pt":$n[1].String,"ps":1}],"sn":"FindElement","rt":$n[0].MessageElement,"p":[$n[0].MessageEntry,$n[1].String]},{"a":2,"n":"FindElement","is":true,"t":8,"pi":[{"n":"m","pt":$n[3].List$1(RobotRaconteurWeb.MessageElement),"ps":0},{"n":"name","pt":$n[1].String,"ps":1}],"sn":"FindElement$1","rt":$n[0].MessageElement,"p":[$n[3].List$1(RobotRaconteurWeb.MessageElement),$n[1].String]},{"a":2,"n":"Read","t":8,"pi":[{"n":"r","pt":$n[0].ArrayBinaryReader,"ps":0}],"sn":"Read","rt":$n[1].Void,"p":[$n[0].ArrayBinaryReader]},{"a":2,"n":"UpdateData","t":8,"sn":"UpdateData","rt":$n[1].Void},{"a":2,"n":"Write","t":8,"pi":[{"n":"w","pt":$n[0].ArrayBinaryWriter,"ps":0}],"sn":"Write","rt":$n[1].Void,"p":[$n[0].ArrayBinaryWriter]},{"a":2,"n":"Data","t":16,"rt":$n[1].Object,"g":{"a":2,"n":"get_Data","t":8,"rt":$n[1].Object,"fg":"Data"},"s":{"a":2,"n":"set_Data","t":8,"p":[$n[1].Object],"rt":$n[1].Void,"fs":"Data"},"fn":"Data"},{"a":2,"n":"DataCount","t":4,"rt":$n[1].UInt32,"sn":"DataCount","box":function ($v) { return Bridge.box($v, System.UInt32);}},{"a":2,"n":"ElementName","t":4,"rt":$n[1].String,"sn":"ElementName"},{"a":2,"n":"ElementSize","t":4,"rt":$n[1].UInt32,"sn":"ElementSize","box":function ($v) { return Bridge.box($v, System.UInt32);}},{"a":2,"n":"ElementType","t":4,"rt":$n[0].DataTypes,"sn":"ElementType","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.DataTypes, System.Enum.toStringFn(RobotRaconteurWeb.DataTypes));}},{"a":2,"n":"ElementTypeName","t":4,"rt":$n[1].String,"sn":"ElementTypeName"},{"a":2,"n":"MetaData","t":4,"rt":$n[1].String,"sn":"MetaData"},{"a":1,"n":"dat","t":4,"rt":$n[1].Object,"sn":"dat"}]}; }, $n);
    $m("RobotRaconteurWeb.MessageElementStructure", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].String,$n[3].List$1(RobotRaconteurWeb.MessageElement)],"pi":[{"n":"type_","pt":$n[1].String,"ps":0},{"n":"elements_","pt":$n[3].List$1(RobotRaconteurWeb.MessageElement),"ps":1}],"sn":"ctor"},{"a":2,"n":"Elements","t":4,"rt":$n[3].List$1(RobotRaconteurWeb.MessageElement),"sn":"Elements"},{"a":2,"n":"Type","t":4,"rt":$n[1].String,"sn":"Type"}]}; }, $n);
    $m("RobotRaconteurWeb.MessageElementMap$1", function (T) { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[3].List$1(RobotRaconteurWeb.MessageElement)],"pi":[{"n":"e","pt":$n[3].List$1(RobotRaconteurWeb.MessageElement),"ps":0}],"sn":"ctor"},{"a":2,"n":"Elements","t":4,"rt":$n[3].List$1(RobotRaconteurWeb.MessageElement),"sn":"Elements"}]}; }, $n);
    $m("RobotRaconteurWeb.MessageElementList", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[3].List$1(RobotRaconteurWeb.MessageElement)],"pi":[{"n":"e","pt":$n[3].List$1(RobotRaconteurWeb.MessageElement),"ps":0}],"sn":"ctor"},{"a":2,"n":"Elements","t":4,"rt":$n[3].List$1(RobotRaconteurWeb.MessageElement),"sn":"Elements"}]}; }, $n);
    $m("RobotRaconteurWeb.MessageElementMultiDimArray", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[3].List$1(RobotRaconteurWeb.MessageElement)],"pi":[{"n":"e","pt":$n[3].List$1(RobotRaconteurWeb.MessageElement),"ps":0}],"sn":"ctor"},{"a":2,"n":"Elements","t":4,"rt":$n[3].List$1(RobotRaconteurWeb.MessageElement),"sn":"Elements"}]}; }, $n);
    $m("RobotRaconteurWeb.MessageElementPod", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[3].List$1(RobotRaconteurWeb.MessageElement)],"pi":[{"n":"e","pt":$n[3].List$1(RobotRaconteurWeb.MessageElement),"ps":0}],"sn":"ctor"},{"a":2,"n":"Elements","t":4,"rt":$n[3].List$1(RobotRaconteurWeb.MessageElement),"sn":"Elements"}]}; }, $n);
    $m("RobotRaconteurWeb.MessageElementPodArray", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].String,$n[3].List$1(RobotRaconteurWeb.MessageElement)],"pi":[{"n":"type","pt":$n[1].String,"ps":0},{"n":"e","pt":$n[3].List$1(RobotRaconteurWeb.MessageElement),"ps":1}],"sn":"ctor"},{"a":2,"n":"Elements","t":4,"rt":$n[3].List$1(RobotRaconteurWeb.MessageElement),"sn":"Elements"},{"a":2,"n":"Type","t":4,"rt":$n[1].String,"sn":"Type"}]}; }, $n);
    $m("RobotRaconteurWeb.MessageElementPodMultiDimArray", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].String,$n[3].List$1(RobotRaconteurWeb.MessageElement)],"pi":[{"n":"type","pt":$n[1].String,"ps":0},{"n":"e","pt":$n[3].List$1(RobotRaconteurWeb.MessageElement),"ps":1}],"sn":"ctor"},{"a":2,"n":"Elements","t":4,"rt":$n[3].List$1(RobotRaconteurWeb.MessageElement),"sn":"Elements"},{"a":2,"n":"Type","t":4,"rt":$n[1].String,"sn":"Type"}]}; }, $n);
    $m("RobotRaconteurWeb.MessageElementNamedArray", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].String,$n[3].List$1(RobotRaconteurWeb.MessageElement)],"pi":[{"n":"type","pt":$n[1].String,"ps":0},{"n":"e","pt":$n[3].List$1(RobotRaconteurWeb.MessageElement),"ps":1}],"sn":"ctor"},{"a":2,"n":"Elements","t":4,"rt":$n[3].List$1(RobotRaconteurWeb.MessageElement),"sn":"Elements"},{"a":2,"n":"Type","t":4,"rt":$n[1].String,"sn":"Type"}]}; }, $n);
    $m("RobotRaconteurWeb.MessageElementNamedMultiDimArray", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].String,$n[3].List$1(RobotRaconteurWeb.MessageElement)],"pi":[{"n":"type","pt":$n[1].String,"ps":0},{"n":"e","pt":$n[3].List$1(RobotRaconteurWeb.MessageElement),"ps":1}],"sn":"ctor"},{"a":2,"n":"Elements","t":4,"rt":$n[3].List$1(RobotRaconteurWeb.MessageElement),"sn":"Elements"},{"a":2,"n":"Type","t":4,"rt":$n[1].String,"sn":"Type"}]}; }, $n);
    $m("RobotRaconteurWeb.MessageElementUtil", function () { return {"att":1048961,"a":2,"s":true,"m":[{"a":2,"n":"AddMessageElement","is":true,"t":8,"pi":[{"n":"m","pt":$n[0].MessageEntry,"ps":0},{"n":"mm","pt":$n[0].MessageElement,"ps":1}],"sn":"AddMessageElement","rt":$n[1].Void,"p":[$n[0].MessageEntry,$n[0].MessageElement]},{"a":2,"n":"AddMessageElement","is":true,"t":8,"pi":[{"n":"vct","pt":$n[3].List$1(RobotRaconteurWeb.MessageElement),"ps":0},{"n":"m","pt":$n[0].MessageElement,"ps":1}],"sn":"AddMessageElement$3","rt":$n[1].Void,"p":[$n[3].List$1(RobotRaconteurWeb.MessageElement),$n[0].MessageElement]},{"a":2,"n":"AddMessageElement","is":true,"t":8,"pi":[{"n":"m","pt":$n[0].MessageEntry,"ps":0},{"n":"i","pt":$n[1].Int32,"ps":1},{"n":"data","pt":$n[1].Object,"ps":2}],"sn":"AddMessageElement$1","rt":$n[1].Void,"p":[$n[0].MessageEntry,$n[1].Int32,$n[1].Object]},{"a":2,"n":"AddMessageElement","is":true,"t":8,"pi":[{"n":"m","pt":$n[0].MessageEntry,"ps":0},{"n":"name","pt":$n[1].String,"ps":1},{"n":"data","pt":$n[1].Object,"ps":2}],"sn":"AddMessageElement$2","rt":$n[1].Void,"p":[$n[0].MessageEntry,$n[1].String,$n[1].Object]},{"a":2,"n":"AddMessageElement","is":true,"t":8,"pi":[{"n":"vct","pt":$n[3].List$1(RobotRaconteurWeb.MessageElement),"ps":0},{"n":"i","pt":$n[1].Int32,"ps":1},{"n":"data","pt":$n[1].Object,"ps":2}],"sn":"AddMessageElement$4","rt":$n[1].Void,"p":[$n[3].List$1(RobotRaconteurWeb.MessageElement),$n[1].Int32,$n[1].Object]},{"a":2,"n":"AddMessageElement","is":true,"t":8,"pi":[{"n":"vct","pt":$n[3].List$1(RobotRaconteurWeb.MessageElement),"ps":0},{"n":"name","pt":$n[1].String,"ps":1},{"n":"data","pt":$n[1].Object,"ps":2}],"sn":"AddMessageElement$5","rt":$n[1].Void,"p":[$n[3].List$1(RobotRaconteurWeb.MessageElement),$n[1].String,$n[1].Object]},{"a":2,"n":"CastData","is":true,"t":8,"pi":[{"n":"m","pt":$n[0].MessageElement,"ps":0}],"tpc":1,"tprm":["T"],"sn":"CastData","rt":System.Object,"p":[$n[0].MessageElement]},{"a":2,"n":"FindElement","is":true,"t":8,"pi":[{"n":"m","pt":$n[0].MessageEntry,"ps":0},{"n":"name","pt":$n[1].String,"ps":1}],"sn":"FindElement","rt":$n[0].MessageElement,"p":[$n[0].MessageEntry,$n[1].String]},{"a":2,"n":"FindElement","is":true,"t":8,"pi":[{"n":"elems","pt":$n[3].List$1(RobotRaconteurWeb.MessageElement),"ps":0},{"n":"name","pt":$n[1].String,"ps":1}],"sn":"FindElement$1","rt":$n[0].MessageElement,"p":[$n[3].List$1(RobotRaconteurWeb.MessageElement),$n[1].String]},{"a":2,"n":"FindElementAndCast","is":true,"t":8,"pi":[{"n":"elems","pt":$n[3].List$1(RobotRaconteurWeb.MessageElement),"ps":0},{"n":"name","pt":$n[1].String,"ps":1}],"tpc":1,"tprm":["T"],"sn":"FindElementAndCast","rt":System.Object,"p":[$n[3].List$1(RobotRaconteurWeb.MessageElement),$n[1].String]},{"a":2,"n":"GetMessageElementDataTypeString","is":true,"t":8,"pi":[{"n":"o","pt":$n[1].Object,"ps":0}],"sn":"GetMessageElementDataTypeString","rt":$n[1].String,"p":[$n[1].Object]},{"a":2,"n":"GetMessageElementNumber","is":true,"t":8,"pi":[{"n":"e","pt":$n[0].MessageElement,"ps":0}],"sn":"GetMessageElementNumber","rt":$n[1].Int32,"p":[$n[0].MessageElement],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"NewMessageElement","is":true,"t":8,"pi":[{"n":"i","pt":$n[1].Int32,"ps":0},{"n":"data","pt":$n[1].Object,"ps":1}],"sn":"NewMessageElement","rt":$n[0].MessageElement,"p":[$n[1].Int32,$n[1].Object]},{"a":2,"n":"NewMessageElement","is":true,"t":8,"pi":[{"n":"name","pt":$n[1].String,"ps":0},{"n":"data","pt":$n[1].Object,"ps":1}],"sn":"NewMessageElement$1","rt":$n[0].MessageElement,"p":[$n[1].String,$n[1].Object]},{"a":2,"n":"PackArray","is":true,"t":8,"pi":[{"n":"name","pt":$n[1].String,"ps":0},{"n":"val","pt":System.Array.type(System.Object),"ps":1}],"tpc":1,"tprm":["T"],"sn":"PackArray","rt":$n[0].MessageElement,"p":[$n[1].String,System.Array.type(System.Object)]},{"a":2,"n":"PackEnum","is":true,"t":8,"pi":[{"n":"name","pt":$n[1].String,"ps":0},{"n":"val","pt":System.Object,"ps":1}],"tpc":1,"tprm":["T"],"sn":"PackEnum","rt":$n[0].MessageElement,"p":[$n[1].String,System.Object]},{"a":2,"n":"PackListType","is":true,"t":8,"pi":[{"n":"node","pt":$n[0].RobotRaconteurNode,"ps":0},{"n":"client","pt":$n[0].ClientContext,"ps":1},{"n":"name","pt":$n[1].String,"ps":2},{"n":"val","pt":$n[3].List$1(System.Object),"ps":3}],"tpc":1,"tprm":["T"],"sn":"PackListType","rt":$n[0].MessageElement,"p":[$n[0].RobotRaconteurNode,$n[0].ClientContext,$n[1].String,$n[3].List$1(System.Object)]},{"a":2,"n":"PackMapType","is":true,"t":8,"pi":[{"n":"node","pt":$n[0].RobotRaconteurNode,"ps":0},{"n":"client","pt":$n[0].ClientContext,"ps":1},{"n":"name","pt":$n[1].String,"ps":2},{"n":"val","pt":$n[3].Dictionary$2(System.Object,System.Object),"ps":3}],"tpc":2,"tprm":["K","T"],"sn":"PackMapType","rt":$n[0].MessageElement,"p":[$n[0].RobotRaconteurNode,$n[0].ClientContext,$n[1].String,$n[3].Dictionary$2(System.Object,System.Object)]},{"a":2,"n":"PackMultiDimArray","is":true,"t":8,"pi":[{"n":"node","pt":$n[0].RobotRaconteurNode,"ps":0},{"n":"name","pt":$n[1].String,"ps":1},{"n":"val","pt":$n[0].MultiDimArray,"ps":2}],"sn":"PackMultiDimArray","rt":$n[0].MessageElement,"p":[$n[0].RobotRaconteurNode,$n[1].String,$n[0].MultiDimArray]},{"a":2,"n":"PackNamedArray","is":true,"t":8,"pi":[{"n":"node","pt":$n[0].RobotRaconteurNode,"ps":0},{"n":"client","pt":$n[0].ClientContext,"ps":1},{"n":"name","pt":$n[1].String,"ps":2},{"n":"val","pt":System.Array.type(System.Object),"ps":3}],"tpc":1,"tprm":["T"],"sn":"PackNamedArray","rt":$n[0].MessageElement,"p":[$n[0].RobotRaconteurNode,$n[0].ClientContext,$n[1].String,System.Array.type(System.Object)]},{"a":2,"n":"PackNamedArrayToArray","is":true,"t":8,"pi":[{"n":"node","pt":$n[0].RobotRaconteurNode,"ps":0},{"n":"client","pt":$n[0].ClientContext,"ps":1},{"n":"name","pt":$n[1].String,"ps":2},{"n":"val","ref":true,"pt":System.Object,"ps":3}],"tpc":1,"tprm":["T"],"sn":"PackNamedArrayToArray","rt":$n[0].MessageElement,"p":[$n[0].RobotRaconteurNode,$n[0].ClientContext,$n[1].String,System.Object]},{"a":2,"n":"PackNamedMultiDimArray","is":true,"t":8,"pi":[{"n":"node","pt":$n[0].RobotRaconteurNode,"ps":0},{"n":"client","pt":$n[0].ClientContext,"ps":1},{"n":"name","pt":$n[1].String,"ps":2},{"n":"val","pt":$n[0].NamedMultiDimArray,"ps":3}],"tpc":1,"tprm":["T"],"sn":"PackNamedMultiDimArray","rt":$n[0].MessageElement,"p":[$n[0].RobotRaconteurNode,$n[0].ClientContext,$n[1].String,$n[0].NamedMultiDimArray]},{"a":2,"n":"PackPodArray","is":true,"t":8,"pi":[{"n":"node","pt":$n[0].RobotRaconteurNode,"ps":0},{"n":"client","pt":$n[0].ClientContext,"ps":1},{"n":"name","pt":$n[1].String,"ps":2},{"n":"val","pt":System.Array.type(System.Object),"ps":3}],"tpc":1,"tprm":["T"],"sn":"PackPodArray","rt":$n[0].MessageElement,"p":[$n[0].RobotRaconteurNode,$n[0].ClientContext,$n[1].String,System.Array.type(System.Object)]},{"a":2,"n":"PackPodMultiDimArray","is":true,"t":8,"pi":[{"n":"node","pt":$n[0].RobotRaconteurNode,"ps":0},{"n":"client","pt":$n[0].ClientContext,"ps":1},{"n":"name","pt":$n[1].String,"ps":2},{"n":"val","pt":$n[0].PodMultiDimArray,"ps":3}],"tpc":1,"tprm":["T"],"sn":"PackPodMultiDimArray","rt":$n[0].MessageElement,"p":[$n[0].RobotRaconteurNode,$n[0].ClientContext,$n[1].String,$n[0].PodMultiDimArray]},{"a":2,"n":"PackPodToArray","is":true,"t":8,"pi":[{"n":"node","pt":$n[0].RobotRaconteurNode,"ps":0},{"n":"client","pt":$n[0].ClientContext,"ps":1},{"n":"name","pt":$n[1].String,"ps":2},{"n":"val","ref":true,"pt":System.Object,"ps":3}],"tpc":1,"tprm":["T"],"sn":"PackPodToArray","rt":$n[0].MessageElement,"p":[$n[0].RobotRaconteurNode,$n[0].ClientContext,$n[1].String,System.Object]},{"a":2,"n":"PackScalar","is":true,"t":8,"pi":[{"n":"name","pt":$n[1].String,"ps":0},{"n":"val","pt":System.Object,"ps":1}],"tpc":1,"tprm":["T"],"sn":"PackScalar","rt":$n[0].MessageElement,"p":[$n[1].String,System.Object]},{"a":2,"n":"PackString","is":true,"t":8,"pi":[{"n":"name","pt":$n[1].String,"ps":0},{"n":"val","pt":$n[1].String,"ps":1}],"sn":"PackString","rt":$n[0].MessageElement,"p":[$n[1].String,$n[1].String]},{"a":2,"n":"PackStructure","is":true,"t":8,"pi":[{"n":"node","pt":$n[0].RobotRaconteurNode,"ps":0},{"n":"client","pt":$n[0].ClientContext,"ps":1},{"n":"name","pt":$n[1].String,"ps":2},{"n":"val","pt":$n[1].Object,"ps":3}],"sn":"PackStructure","rt":$n[0].MessageElement,"p":[$n[0].RobotRaconteurNode,$n[0].ClientContext,$n[1].String,$n[1].Object]},{"a":2,"n":"PackVarType","is":true,"t":8,"pi":[{"n":"node","pt":$n[0].RobotRaconteurNode,"ps":0},{"n":"client","pt":$n[0].ClientContext,"ps":1},{"n":"name","pt":$n[1].String,"ps":2},{"n":"val","pt":$n[1].Object,"ps":3}],"sn":"PackVarType","rt":$n[0].MessageElement,"p":[$n[0].RobotRaconteurNode,$n[0].ClientContext,$n[1].String,$n[1].Object]},{"a":2,"n":"UnpackArray","is":true,"t":8,"pi":[{"n":"m","pt":$n[0].MessageElement,"ps":0}],"tpc":1,"tprm":["T"],"sn":"UnpackArray","rt":System.Array.type(System.Object),"p":[$n[0].MessageElement]},{"a":2,"n":"UnpackEnum","is":true,"t":8,"pi":[{"n":"m","pt":$n[0].MessageElement,"ps":0}],"tpc":1,"tprm":["T"],"sn":"UnpackEnum","rt":System.Object,"p":[$n[0].MessageElement]},{"a":2,"n":"UnpackList","is":true,"t":8,"pi":[{"n":"node","pt":$n[0].RobotRaconteurNode,"ps":0},{"n":"client","pt":$n[0].ClientContext,"ps":1},{"n":"m","pt":$n[0].MessageElement,"ps":2}],"tpc":1,"tprm":["T"],"sn":"UnpackList","rt":$n[3].List$1(System.Object),"p":[$n[0].RobotRaconteurNode,$n[0].ClientContext,$n[0].MessageElement]},{"a":2,"n":"UnpackMap","is":true,"t":8,"pi":[{"n":"node","pt":$n[0].RobotRaconteurNode,"ps":0},{"n":"client","pt":$n[0].ClientContext,"ps":1},{"n":"m","pt":$n[0].MessageElement,"ps":2}],"tpc":2,"tprm":["K","T"],"sn":"UnpackMap","rt":$n[3].Dictionary$2(System.Object,System.Object),"p":[$n[0].RobotRaconteurNode,$n[0].ClientContext,$n[0].MessageElement]},{"a":2,"n":"UnpackMultiDimArray","is":true,"t":8,"pi":[{"n":"node","pt":$n[0].RobotRaconteurNode,"ps":0},{"n":"m","pt":$n[0].MessageElement,"ps":1}],"sn":"UnpackMultiDimArray","rt":$n[0].MultiDimArray,"p":[$n[0].RobotRaconteurNode,$n[0].MessageElement]},{"a":2,"n":"UnpackNamedArray","is":true,"t":8,"pi":[{"n":"node","pt":$n[0].RobotRaconteurNode,"ps":0},{"n":"client","pt":$n[0].ClientContext,"ps":1},{"n":"m","pt":$n[0].MessageElement,"ps":2}],"tpc":1,"tprm":["T"],"sn":"UnpackNamedArray","rt":System.Array.type(System.Object),"p":[$n[0].RobotRaconteurNode,$n[0].ClientContext,$n[0].MessageElement]},{"a":2,"n":"UnpackNamedArrayFromArray","is":true,"t":8,"pi":[{"n":"node","pt":$n[0].RobotRaconteurNode,"ps":0},{"n":"client","pt":$n[0].ClientContext,"ps":1},{"n":"m","pt":$n[0].MessageElement,"ps":2}],"tpc":1,"tprm":["T"],"sn":"UnpackNamedArrayFromArray","rt":System.Object,"p":[$n[0].RobotRaconteurNode,$n[0].ClientContext,$n[0].MessageElement]},{"a":2,"n":"UnpackNamedMultiDimArray","is":true,"t":8,"pi":[{"n":"node","pt":$n[0].RobotRaconteurNode,"ps":0},{"n":"client","pt":$n[0].ClientContext,"ps":1},{"n":"m","pt":$n[0].MessageElement,"ps":2}],"tpc":1,"tprm":["T"],"sn":"UnpackNamedMultiDimArray","rt":$n[0].NamedMultiDimArray,"p":[$n[0].RobotRaconteurNode,$n[0].ClientContext,$n[0].MessageElement]},{"a":2,"n":"UnpackPodArray","is":true,"t":8,"pi":[{"n":"node","pt":$n[0].RobotRaconteurNode,"ps":0},{"n":"client","pt":$n[0].ClientContext,"ps":1},{"n":"m","pt":$n[0].MessageElement,"ps":2}],"tpc":1,"tprm":["T"],"sn":"UnpackPodArray","rt":System.Array.type(System.Object),"p":[$n[0].RobotRaconteurNode,$n[0].ClientContext,$n[0].MessageElement]},{"a":2,"n":"UnpackPodFromArray","is":true,"t":8,"pi":[{"n":"node","pt":$n[0].RobotRaconteurNode,"ps":0},{"n":"client","pt":$n[0].ClientContext,"ps":1},{"n":"m","pt":$n[0].MessageElement,"ps":2}],"tpc":1,"tprm":["T"],"sn":"UnpackPodFromArray","rt":System.Object,"p":[$n[0].RobotRaconteurNode,$n[0].ClientContext,$n[0].MessageElement]},{"a":2,"n":"UnpackPodMultiDimArray","is":true,"t":8,"pi":[{"n":"node","pt":$n[0].RobotRaconteurNode,"ps":0},{"n":"client","pt":$n[0].ClientContext,"ps":1},{"n":"m","pt":$n[0].MessageElement,"ps":2}],"tpc":1,"tprm":["T"],"sn":"UnpackPodMultiDimArray","rt":$n[0].PodMultiDimArray,"p":[$n[0].RobotRaconteurNode,$n[0].ClientContext,$n[0].MessageElement]},{"a":2,"n":"UnpackScalar","is":true,"t":8,"pi":[{"n":"m","pt":$n[0].MessageElement,"ps":0}],"tpc":1,"tprm":["T"],"sn":"UnpackScalar","rt":System.Object,"p":[$n[0].MessageElement]},{"a":2,"n":"UnpackString","is":true,"t":8,"pi":[{"n":"m","pt":$n[0].MessageElement,"ps":0}],"sn":"UnpackString","rt":$n[1].String,"p":[$n[0].MessageElement]},{"a":2,"n":"UnpackStructure","is":true,"t":8,"pi":[{"n":"node","pt":$n[0].RobotRaconteurNode,"ps":0},{"n":"client","pt":$n[0].ClientContext,"ps":1},{"n":"m","pt":$n[0].MessageElement,"ps":2}],"tpc":1,"tprm":["T"],"sn":"UnpackStructure","rt":System.Object,"p":[$n[0].RobotRaconteurNode,$n[0].ClientContext,$n[0].MessageElement]},{"a":2,"n":"UnpackVarType","is":true,"t":8,"pi":[{"n":"node","pt":$n[0].RobotRaconteurNode,"ps":0},{"n":"client","pt":$n[0].ClientContext,"ps":1},{"n":"m","pt":$n[0].MessageElement,"ps":2}],"sn":"UnpackVarType","rt":$n[1].Object,"p":[$n[0].RobotRaconteurNode,$n[0].ClientContext,$n[0].MessageElement]}]}; }, $n);
    $m("RobotRaconteurWeb.MultiDimArray_CalculateCopyIndicesIter", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"BeginIter","is":true,"t":8,"pi":[{"n":"mema_dims","pt":$n[1].Array.type(System.UInt32),"ps":0},{"n":"mema_pos","pt":$n[1].Array.type(System.UInt32),"ps":1},{"n":"memb_dims","pt":$n[1].Array.type(System.UInt32),"ps":2},{"n":"memb_pos","pt":$n[1].Array.type(System.UInt32),"ps":3},{"n":"count","pt":$n[1].Array.type(System.UInt32),"ps":4}],"sn":"BeginIter","rt":$n[0].MultiDimArray_CalculateCopyIndicesIter,"p":[$n[1].Array.type(System.UInt32),$n[1].Array.type(System.UInt32),$n[1].Array.type(System.UInt32),$n[1].Array.type(System.UInt32),$n[1].Array.type(System.UInt32)]},{"a":2,"n":"Next","t":8,"pi":[{"n":"indexa","out":true,"pt":$n[1].UInt32,"ps":0},{"n":"indexb","out":true,"pt":$n[1].UInt32,"ps":1},{"n":"len","out":true,"pt":$n[1].UInt32,"ps":2}],"sn":"Next","rt":$n[1].Boolean,"p":[$n[1].UInt32,$n[1].UInt32,$n[1].UInt32],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"count","t":4,"rt":$n[1].Array.type(System.UInt32),"sn":"count"},{"a":1,"n":"current_count","t":4,"rt":$n[1].Array.type(System.UInt32),"sn":"current_count"},{"a":1,"n":"done","t":4,"rt":$n[1].Boolean,"sn":"done","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"mema_dims","t":4,"rt":$n[1].Array.type(System.UInt32),"sn":"mema_dims"},{"a":1,"n":"mema_pos","t":4,"rt":$n[1].Array.type(System.UInt32),"sn":"mema_pos"},{"a":1,"n":"memb_dims","t":4,"rt":$n[1].Array.type(System.UInt32),"sn":"memb_dims"},{"a":1,"n":"memb_pos","t":4,"rt":$n[1].Array.type(System.UInt32),"sn":"memb_pos"},{"a":1,"n":"stridea","t":4,"rt":$n[1].Array.type(System.UInt32),"sn":"stridea"},{"a":1,"n":"strideb","t":4,"rt":$n[1].Array.type(System.UInt32),"sn":"strideb"}]}; }, $n);
    $m("RobotRaconteurWeb.MultiDimArray", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[1].Array.type(System.UInt32),Array],"pi":[{"n":"Dims","pt":$n[1].Array.type(System.UInt32),"ps":0},{"n":"Array_","pt":Array,"ps":1}],"sn":"$ctor1"},{"v":true,"a":2,"n":"AssignSubArray","t":8,"pi":[{"n":"memorypos","pt":$n[1].Array.type(System.UInt32),"ps":0},{"n":"buffer","pt":$n[0].MultiDimArray,"ps":1},{"n":"bufferpos","pt":$n[1].Array.type(System.UInt32),"ps":2},{"n":"count","pt":$n[1].Array.type(System.UInt32),"ps":3}],"sn":"AssignSubArray","rt":$n[1].Void,"p":[$n[1].Array.type(System.UInt32),$n[0].MultiDimArray,$n[1].Array.type(System.UInt32),$n[1].Array.type(System.UInt32)]},{"v":true,"a":2,"n":"RetrieveSubArray","t":8,"pi":[{"n":"memorypos","pt":$n[1].Array.type(System.UInt32),"ps":0},{"n":"buffer","pt":$n[0].MultiDimArray,"ps":1},{"n":"bufferpos","pt":$n[1].Array.type(System.UInt32),"ps":2},{"n":"count","pt":$n[1].Array.type(System.UInt32),"ps":3}],"sn":"RetrieveSubArray","rt":$n[1].Void,"p":[$n[1].Array.type(System.UInt32),$n[0].MultiDimArray,$n[1].Array.type(System.UInt32),$n[1].Array.type(System.UInt32)]},{"a":2,"n":"Array_","t":4,"rt":Array,"sn":"Array_"},{"a":2,"n":"Dims","t":4,"rt":$n[1].Array.type(System.UInt32),"sn":"Dims"}]}; }, $n);
    $m("RobotRaconteurWeb.PodMultiDimArray", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[1].Array.type(System.UInt32),Array],"pi":[{"n":"dims","pt":$n[1].Array.type(System.UInt32),"ps":0},{"n":"array","pt":Array,"ps":1}],"sn":"$ctor1"},{"v":true,"a":2,"n":"AssignSubArray","t":8,"pi":[{"n":"memorypos","pt":$n[1].Array.type(System.UInt32),"ps":0},{"n":"buffer","pt":$n[0].PodMultiDimArray,"ps":1},{"n":"bufferpos","pt":$n[1].Array.type(System.UInt32),"ps":2},{"n":"count","pt":$n[1].Array.type(System.UInt32),"ps":3}],"sn":"AssignSubArray","rt":$n[1].Void,"p":[$n[1].Array.type(System.UInt32),$n[0].PodMultiDimArray,$n[1].Array.type(System.UInt32),$n[1].Array.type(System.UInt32)]},{"v":true,"a":2,"n":"RetrieveSubArray","t":8,"pi":[{"n":"memorypos","pt":$n[1].Array.type(System.UInt32),"ps":0},{"n":"buffer","pt":$n[0].PodMultiDimArray,"ps":1},{"n":"bufferpos","pt":$n[1].Array.type(System.UInt32),"ps":2},{"n":"count","pt":$n[1].Array.type(System.UInt32),"ps":3}],"sn":"RetrieveSubArray","rt":$n[1].Void,"p":[$n[1].Array.type(System.UInt32),$n[0].PodMultiDimArray,$n[1].Array.type(System.UInt32),$n[1].Array.type(System.UInt32)]},{"a":2,"n":"Dims","t":4,"rt":$n[1].Array.type(System.UInt32),"sn":"Dims"},{"a":2,"n":"pod_array","t":4,"rt":Array,"sn":"pod_array"}]}; }, $n);
    $m("RobotRaconteurWeb.NamedMultiDimArray", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[1].Array.type(System.UInt32),Array],"pi":[{"n":"dims","pt":$n[1].Array.type(System.UInt32),"ps":0},{"n":"array","pt":Array,"ps":1}],"sn":"$ctor1"},{"v":true,"a":2,"n":"AssignSubArray","t":8,"pi":[{"n":"memorypos","pt":$n[1].Array.type(System.UInt32),"ps":0},{"n":"buffer","pt":$n[0].NamedMultiDimArray,"ps":1},{"n":"bufferpos","pt":$n[1].Array.type(System.UInt32),"ps":2},{"n":"count","pt":$n[1].Array.type(System.UInt32),"ps":3}],"sn":"AssignSubArray","rt":$n[1].Void,"p":[$n[1].Array.type(System.UInt32),$n[0].NamedMultiDimArray,$n[1].Array.type(System.UInt32),$n[1].Array.type(System.UInt32)]},{"v":true,"a":2,"n":"RetrieveSubArray","t":8,"pi":[{"n":"memorypos","pt":$n[1].Array.type(System.UInt32),"ps":0},{"n":"buffer","pt":$n[0].NamedMultiDimArray,"ps":1},{"n":"bufferpos","pt":$n[1].Array.type(System.UInt32),"ps":2},{"n":"count","pt":$n[1].Array.type(System.UInt32),"ps":3}],"sn":"RetrieveSubArray","rt":$n[1].Void,"p":[$n[1].Array.type(System.UInt32),$n[0].NamedMultiDimArray,$n[1].Array.type(System.UInt32),$n[1].Array.type(System.UInt32)]},{"a":2,"n":"Dims","t":4,"rt":$n[1].Array.type(System.UInt32),"sn":"Dims"},{"a":2,"n":"namedarray_array","t":4,"rt":Array,"sn":"namedarray_array"}]}; }, $n);
    $m("RobotRaconteurWeb.NodeID", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].Array.type(System.Byte)],"pi":[{"n":"id","pt":$n[1].Array.type(System.Byte),"ps":0}],"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[1].String],"pi":[{"n":"id","pt":$n[1].String,"ps":0}],"sn":"$ctor1"},{"ov":true,"a":2,"n":"Equals","t":8,"pi":[{"n":"obj","pt":$n[1].Object,"ps":0}],"sn":"equals","rt":$n[1].Boolean,"p":[$n[1].Object],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"ov":true,"a":2,"n":"GetHashCode","t":8,"sn":"getHashCode","rt":$n[1].Int32,"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"NewUniqueID","is":true,"t":8,"sn":"NewUniqueID","rt":$n[0].NodeID},{"a":2,"n":"ToByteArray","t":8,"sn":"ToByteArray","rt":$n[1].Array.type(System.Byte)},{"ov":true,"a":2,"n":"ToString","t":8,"sn":"toString","rt":$n[1].String},{"a":2,"n":"TryParse","is":true,"t":8,"pi":[{"n":"stringid","pt":$n[1].String,"ps":0},{"n":"nodeid","out":true,"pt":$n[0].NodeID,"ps":1}],"sn":"TryParse","rt":$n[1].Boolean,"p":[$n[1].String,$n[0].NodeID],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":3,"n":"TryParse","is":true,"t":8,"pi":[{"n":"stringid","pt":$n[1].String,"ps":0},{"n":"bytes","out":true,"pt":$n[1].Array.type(System.Byte),"ps":1}],"sn":"TryParse$1","rt":$n[1].Boolean,"p":[$n[1].String,$n[1].Array.type(System.Byte)],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"op_Equality","is":true,"t":8,"pi":[{"n":"id1","pt":$n[0].NodeID,"ps":0},{"n":"id2","pt":$n[0].NodeID,"ps":1}],"sn":"op_Equality","rt":$n[1].Boolean,"p":[$n[0].NodeID,$n[0].NodeID],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"op_Explicit","is":true,"t":8,"pi":[{"n":"i","pt":$n[0].NodeID,"ps":0}],"sn":"op_Explicit","rt":$n[1].Array.type(System.Byte),"p":[$n[0].NodeID]},{"a":2,"n":"op_Inequality","is":true,"t":8,"pi":[{"n":"id1","pt":$n[0].NodeID,"ps":0},{"n":"id2","pt":$n[0].NodeID,"ps":1}],"sn":"op_Inequality","rt":$n[1].Boolean,"p":[$n[0].NodeID,$n[0].NodeID],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"Any","is":true,"t":16,"rt":$n[0].NodeID,"g":{"a":2,"n":"get_Any","t":8,"rt":$n[0].NodeID,"fg":"Any","is":true},"fn":"Any"},{"a":2,"n":"IsAnyNode","t":16,"rt":$n[1].Boolean,"g":{"a":2,"n":"get_IsAnyNode","t":8,"rt":$n[1].Boolean,"fg":"IsAnyNode","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"fn":"IsAnyNode"},{"a":1,"n":"id","t":4,"rt":$n[1].Array.type(System.Byte),"sn":"id"}]}; }, $n);
    $m("RobotRaconteurWeb.PeriodicTask", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"Run","is":true,"t":8,"pi":[{"n":"action","pt":Function,"ps":0},{"n":"period","pt":$n[1].TimeSpan,"ps":1}],"sn":"Run","rt":$n[5].Task,"p":[Function,$n[1].TimeSpan]},{"a":2,"n":"Run","is":true,"t":8,"pi":[{"n":"action","pt":Function,"ps":0},{"n":"period","pt":$n[1].TimeSpan,"ps":1},{"n":"cancellationToken","pt":$n[4].CancellationToken,"ps":2}],"sn":"Run$1","rt":$n[5].Task,"p":[Function,$n[1].TimeSpan,$n[4].CancellationToken]}]}; }, $n);
    $m("RobotRaconteurWeb.Pipe$1", function (T) { return {"nested":[$n[0].Pipe$1.PipeEndpoint,Function,Function,Function,Function],"att":1048705,"a":2,"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"},{"ab":true,"a":3,"n":"Close","t":8,"pi":[{"n":"e","pt":$n[0].Pipe$1.PipeEndpoint(T),"ps":0},{"n":"ee","dv":null,"o":true,"pt":$n[0].Endpoint,"ps":1},{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":2}],"sn":"Close","rt":$n[5].Task,"p":[$n[0].Pipe$1.PipeEndpoint(T),$n[0].Endpoint,$n[4].CancellationToken]},{"ab":true,"a":2,"n":"Connect","t":8,"pi":[{"n":"index","pt":$n[1].Int32,"ps":0},{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":1}],"sn":"Connect","rt":$n[5].Task$1(RobotRaconteurWeb.Pipe$1.PipeEndpoint(T)),"p":[$n[1].Int32,$n[4].CancellationToken]},{"ab":true,"a":3,"n":"DeleteEndpoint","t":8,"pi":[{"n":"e","pt":$n[0].Pipe$1.PipeEndpoint(T),"ps":0}],"sn":"DeleteEndpoint","rt":$n[1].Void,"p":[$n[0].Pipe$1.PipeEndpoint(T)]},{"a":3,"n":"DispatchPacket","t":8,"pi":[{"n":"me","pt":$n[0].MessageElement,"ps":0},{"n":"e","pt":$n[0].Pipe$1.PipeEndpoint(T),"ps":1},{"n":"packetnumber","out":true,"pt":$n[1].UInt32,"ps":2}],"sn":"DispatchPacket","rt":$n[1].Boolean,"p":[$n[0].MessageElement,$n[0].Pipe$1.PipeEndpoint(T),$n[1].UInt32],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":3,"n":"DispatchPacketAck","t":8,"pi":[{"n":"me","pt":$n[0].MessageElement,"ps":0},{"n":"e","pt":$n[0].Pipe$1.PipeEndpoint(T),"ps":1}],"sn":"DispatchPacketAck","rt":$n[1].Void,"p":[$n[0].MessageElement,$n[0].Pipe$1.PipeEndpoint(T)]},{"a":3,"n":"PackPacket","t":8,"pi":[{"n":"data","pt":T,"ps":0},{"n":"index","pt":$n[1].Int32,"ps":1},{"n":"packetnumber","pt":$n[1].UInt32,"ps":2},{"n":"requestack","pt":$n[1].Boolean,"ps":3}],"sn":"PackPacket","rt":$n[0].MessageElement,"p":[T,$n[1].Int32,$n[1].UInt32,$n[1].Boolean]},{"ab":true,"a":3,"n":"PackVarType","t":8,"pi":[{"n":"o","pt":$n[1].Object,"ps":0}],"sn":"PackVarType","rt":$n[1].Object,"p":[$n[1].Object]},{"ab":true,"a":2,"n":"PipePacketReceived","t":8,"pi":[{"n":"m","pt":$n[0].MessageEntry,"ps":0},{"n":"e","dv":null,"o":true,"pt":$n[0].Endpoint,"ps":1}],"sn":"PipePacketReceived","rt":$n[1].Void,"p":[$n[0].MessageEntry,$n[0].Endpoint]},{"ab":true,"a":3,"n":"SendPipePacket","t":8,"pi":[{"n":"packet","pt":T,"ps":0},{"n":"index","pt":$n[1].Int32,"ps":1},{"n":"packetnumber","pt":$n[1].UInt32,"ps":2},{"n":"requestack","pt":$n[1].Boolean,"ps":3},{"n":"endpoint","pt":$n[0].Endpoint,"ps":4},{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":5}],"sn":"SendPipePacket","rt":$n[5].Task,"p":[T,$n[1].Int32,$n[1].UInt32,$n[1].Boolean,$n[0].Endpoint,$n[4].CancellationToken]},{"ab":true,"a":2,"n":"Shutdown","t":8,"sn":"Shutdown","rt":$n[1].Void},{"ab":true,"a":3,"n":"UnpackVarType","t":8,"pi":[{"n":"o","pt":$n[0].MessageElement,"ps":0}],"sn":"UnpackVarType","rt":$n[1].Object,"p":[$n[0].MessageElement]},{"ab":true,"a":2,"n":"MemberName","t":16,"rt":$n[1].String,"g":{"ab":true,"a":2,"n":"get_MemberName","t":8,"rt":$n[1].String,"fg":"MemberName"},"fn":"MemberName"},{"ab":true,"a":2,"n":"PipeConnectCallback","t":16,"rt":Function,"g":{"ab":true,"a":2,"n":"get_PipeConnectCallback","t":8,"rt":Function,"fg":"PipeConnectCallback"},"s":{"ab":true,"a":2,"n":"set_PipeConnectCallback","t":8,"p":[Function],"rt":$n[1].Void,"fs":"PipeConnectCallback"},"fn":"PipeConnectCallback"},{"a":2,"n":"ANY_INDEX","is":true,"t":4,"rt":$n[1].Int32,"sn":"ANY_INDEX","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"rawelements","t":4,"rt":$n[1].Boolean,"sn":"rawelements","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"backing":true,"n":"<MemberName>k__BackingField","t":4,"rt":$n[1].String,"sn":"MemberName"},{"a":1,"backing":true,"n":"<PipeConnectCallback>k__BackingField","t":4,"rt":Function,"sn":"PipeConnectCallback"}]}; }, $n);
    $m("RobotRaconteurWeb.Pipe$1.PipeEndpoint", function (T) { return {"td":$n[0].Pipe$1(T),"att":1048578,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[0].Pipe$1(T),$n[1].Int32,$n[0].Endpoint],"pi":[{"n":"parent","pt":$n[0].Pipe$1(T),"ps":0},{"n":"index","pt":$n[1].Int32,"ps":1},{"n":"endpoint","dv":null,"o":true,"pt":$n[0].Endpoint,"ps":2}],"sn":"ctor"},{"a":2,"n":"Close","t":8,"sn":"Close","rt":$n[5].Task},{"a":2,"n":"PeekNextPacket","t":8,"sn":"PeekNextPacket","rt":T},{"a":4,"n":"PipePacketAckReceived","t":8,"pi":[{"n":"packetnum","pt":$n[1].UInt32,"ps":0}],"sn":"PipePacketAckReceived","rt":$n[1].Void,"p":[$n[1].UInt32]},{"a":5,"n":"PipePacketReceived","t":8,"pi":[{"n":"packet","pt":T,"ps":0},{"n":"packetnum","pt":$n[1].UInt32,"ps":1}],"sn":"PipePacketReceived","rt":$n[1].Void,"p":[T,$n[1].UInt32]},{"a":2,"n":"ReceivePacket","t":8,"sn":"ReceivePacket","rt":T},{"a":4,"n":"RemoteClose","t":8,"sn":"RemoteClose","rt":$n[1].Void},{"a":2,"n":"SendPacket","t":8,"pi":[{"n":"packet","pt":T,"ps":0},{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":1}],"sn":"SendPacket","rt":$n[5].Task$1(System.UInt32),"p":[T,$n[4].CancellationToken]},{"a":1,"n":"increment_packet_number","t":8,"pi":[{"n":"packetnum","pt":$n[1].UInt32,"ps":0}],"sn":"increment_packet_number","rt":$n[1].UInt32,"p":[$n[1].UInt32],"box":function ($v) { return Bridge.box($v, System.UInt32);}},{"a":2,"n":"Available","t":16,"rt":$n[1].Int32,"g":{"a":2,"n":"get_Available","t":8,"rt":$n[1].Int32,"fg":"Available","box":function ($v) { return Bridge.box($v, System.Int32);}},"fn":"Available"},{"a":2,"n":"Endpoint","t":16,"rt":$n[1].UInt32,"g":{"a":2,"n":"get_Endpoint","t":8,"rt":$n[1].UInt32,"fg":"Endpoint","box":function ($v) { return Bridge.box($v, System.UInt32);}},"fn":"Endpoint"},{"a":2,"n":"Index","t":16,"rt":$n[1].Int32,"g":{"a":2,"n":"get_Index","t":8,"rt":$n[1].Int32,"fg":"Index","box":function ($v) { return Bridge.box($v, System.Int32);}},"fn":"Index"},{"a":2,"n":"PipeCloseCallback","t":16,"rt":Function,"g":{"a":2,"n":"get_PipeCloseCallback","t":8,"rt":Function,"fg":"PipeCloseCallback"},"s":{"a":2,"n":"set_PipeCloseCallback","t":8,"p":[Function],"rt":$n[1].Void,"fs":"PipeCloseCallback"},"fn":"PipeCloseCallback"},{"a":2,"n":"RequestPacketAck","t":4,"rt":$n[1].Boolean,"sn":"RequestPacketAck","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"close_callback","t":4,"rt":Function,"sn":"close_callback"},{"a":1,"n":"endpoint","t":4,"rt":$n[0].Endpoint,"sn":"endpoint"},{"a":1,"n":"index","t":4,"rt":$n[1].Int32,"sn":"index","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"out_of_order_packets","t":4,"rt":$n[3].Dictionary$2(System.UInt32,T),"sn":"out_of_order_packets"},{"a":1,"n":"parent","t":4,"rt":$n[0].Pipe$1(T),"sn":"parent"},{"a":1,"n":"recv_lock","t":4,"rt":$n[1].Object,"sn":"recv_lock"},{"a":1,"n":"recv_packet_number","t":4,"rt":$n[1].UInt32,"sn":"recv_packet_number","box":function ($v) { return Bridge.box($v, System.UInt32);}},{"a":1,"n":"recv_packets","t":4,"rt":$n[3].Queue$1(T),"sn":"recv_packets"},{"a":1,"n":"send_mutex","t":4,"rt":$n[0].AsyncMutex,"sn":"send_mutex"},{"a":1,"n":"send_packet_number","t":4,"rt":$n[1].UInt32,"sn":"send_packet_number","box":function ($v) { return Bridge.box($v, System.UInt32);}},{"a":2,"n":"PacketAckReceivedEvent","t":2,"ad":{"a":2,"n":"add_PacketAckReceivedEvent","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"addPacketAckReceivedEvent","rt":$n[1].Void,"p":[Function]},"r":{"a":2,"n":"remove_PacketAckReceivedEvent","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"removePacketAckReceivedEvent","rt":$n[1].Void,"p":[Function]}},{"a":2,"n":"PacketReceivedEvent","t":2,"ad":{"a":2,"n":"add_PacketReceivedEvent","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"addPacketReceivedEvent","rt":$n[1].Void,"p":[Function]},"r":{"a":2,"n":"remove_PacketReceivedEvent","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"removePacketReceivedEvent","rt":$n[1].Void,"p":[Function]}}]}; }, $n);
    $m("RobotRaconteurWeb.PipeClient$1", function (T) { return {"att":1048833,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].String,$n[0].ServiceStub],"pi":[{"n":"name","pt":$n[1].String,"ps":0},{"n":"stub","pt":$n[0].ServiceStub,"ps":1}],"sn":"ctor"},{"a":4,"n":"ClientContextListener","t":8,"pi":[{"n":"context","pt":$n[0].ClientContext,"ps":0},{"n":"event_","pt":$n[0].ClientServiceListenerEventType,"ps":1},{"n":"param","pt":$n[1].Object,"ps":2}],"sn":"ClientContextListener","rt":$n[1].Void,"p":[$n[0].ClientContext,$n[0].ClientServiceListenerEventType,$n[1].Object]},{"ov":true,"a":3,"n":"Close","t":8,"pi":[{"n":"e","pt":$n[0].Pipe$1.PipeEndpoint(T),"ps":0},{"n":"ee","dv":null,"o":true,"pt":$n[0].Endpoint,"ps":1},{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":2}],"sn":"Close","rt":$n[5].Task,"p":[$n[0].Pipe$1.PipeEndpoint(T),$n[0].Endpoint,$n[4].CancellationToken]},{"ov":true,"a":2,"n":"Connect","t":8,"pi":[{"n":"index","pt":$n[1].Int32,"ps":0},{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":1}],"sn":"Connect","rt":$n[5].Task$1(RobotRaconteurWeb.Pipe$1.PipeEndpoint(T)),"p":[$n[1].Int32,$n[4].CancellationToken]},{"ov":true,"a":3,"n":"DeleteEndpoint","t":8,"pi":[{"n":"e","pt":$n[0].Pipe$1.PipeEndpoint(T),"ps":0}],"sn":"DeleteEndpoint","rt":$n[1].Void,"p":[$n[0].Pipe$1.PipeEndpoint(T)]},{"ov":true,"a":3,"n":"PackVarType","t":8,"pi":[{"n":"o","pt":$n[1].Object,"ps":0}],"sn":"PackVarType","rt":$n[1].Object,"p":[$n[1].Object]},{"ov":true,"a":2,"n":"PipePacketReceived","t":8,"pi":[{"n":"m","pt":$n[0].MessageEntry,"ps":0},{"n":"e","dv":null,"o":true,"pt":$n[0].Endpoint,"ps":1}],"sn":"PipePacketReceived","rt":$n[1].Void,"p":[$n[0].MessageEntry,$n[0].Endpoint]},{"ov":true,"a":3,"n":"SendPipePacket","t":8,"pi":[{"n":"data","pt":T,"ps":0},{"n":"index","pt":$n[1].Int32,"ps":1},{"n":"packetnumber","pt":$n[1].UInt32,"ps":2},{"n":"requestack","pt":$n[1].Boolean,"ps":3},{"n":"e","dv":null,"o":true,"pt":$n[0].Endpoint,"ps":4},{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":5}],"sn":"SendPipePacket","rt":$n[5].Task,"p":[T,$n[1].Int32,$n[1].UInt32,$n[1].Boolean,$n[0].Endpoint,$n[4].CancellationToken]},{"ov":true,"a":2,"n":"Shutdown","t":8,"sn":"Shutdown","rt":$n[1].Void},{"ov":true,"a":3,"n":"UnpackVarType","t":8,"pi":[{"n":"o","pt":$n[0].MessageElement,"ps":0}],"sn":"UnpackVarType","rt":$n[1].Object,"p":[$n[0].MessageElement]},{"ov":true,"a":2,"n":"MemberName","t":16,"rt":$n[1].String,"g":{"ov":true,"a":2,"n":"get_MemberName","t":8,"rt":$n[1].String,"fg":"MemberName"},"fn":"MemberName"},{"ov":true,"a":2,"n":"PipeConnectCallback","t":16,"rt":Function,"g":{"ov":true,"a":2,"n":"get_PipeConnectCallback","t":8,"rt":Function,"fg":"PipeConnectCallback"},"s":{"ov":true,"a":2,"n":"set_PipeConnectCallback","t":8,"p":[Function],"rt":$n[1].Void,"fs":"PipeConnectCallback"},"fn":"PipeConnectCallback"},{"a":1,"n":"connecting","t":4,"rt":$n[3].List$1(System.Tuple$2(System.Int32,System.Object)),"sn":"connecting"},{"a":1,"n":"early_endpoints","t":4,"rt":$n[3].Dictionary$2(System.Int32,RobotRaconteurWeb.Pipe$1.PipeEndpoint(T)),"sn":"early_endpoints"},{"a":1,"n":"m_Name","t":4,"rt":$n[1].String,"sn":"m_Name"},{"a":1,"n":"pipeendpoints","t":4,"rt":$n[3].Dictionary$2(System.Int32,RobotRaconteurWeb.Pipe$1.PipeEndpoint(T)),"sn":"pipeendpoints"},{"a":1,"n":"stub","t":4,"rt":$n[0].ServiceStub,"sn":"stub"}]}; }, $n);
    $m("RobotRaconteurWeb.PipeServer$1", function (T) { return {"att":1048833,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].String,$n[0].ServiceSkel],"pi":[{"n":"name","pt":$n[1].String,"ps":0},{"n":"skel","pt":$n[0].ServiceSkel,"ps":1}],"sn":"ctor"},{"ov":true,"a":3,"n":"Close","t":8,"pi":[{"n":"e","pt":$n[0].Pipe$1.PipeEndpoint(T),"ps":0},{"n":"ee","pt":$n[0].Endpoint,"ps":1},{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":2}],"sn":"Close","rt":$n[5].Task,"p":[$n[0].Pipe$1.PipeEndpoint(T),$n[0].Endpoint,$n[4].CancellationToken]},{"ov":true,"a":2,"n":"Connect","t":8,"pi":[{"n":"endpoint","pt":$n[1].Int32,"ps":0},{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":1}],"sn":"Connect","rt":$n[5].Task$1(RobotRaconteurWeb.Pipe$1.PipeEndpoint(T)),"p":[$n[1].Int32,$n[4].CancellationToken]},{"ov":true,"a":3,"n":"DeleteEndpoint","t":8,"pi":[{"n":"e","pt":$n[0].Pipe$1.PipeEndpoint(T),"ps":0}],"sn":"DeleteEndpoint","rt":$n[1].Void,"p":[$n[0].Pipe$1.PipeEndpoint(T)]},{"ov":true,"a":3,"n":"PackVarType","t":8,"pi":[{"n":"o","pt":$n[1].Object,"ps":0}],"sn":"PackVarType","rt":$n[1].Object,"p":[$n[1].Object]},{"a":2,"n":"PipeCommand","t":8,"pi":[{"n":"m","pt":$n[0].MessageEntry,"ps":0},{"n":"e","pt":$n[0].Endpoint,"ps":1}],"sn":"PipeCommand","rt":$n[5].Task$1(RobotRaconteurWeb.MessageEntry),"p":[$n[0].MessageEntry,$n[0].Endpoint]},{"ov":true,"a":2,"n":"PipePacketReceived","t":8,"pi":[{"n":"m","pt":$n[0].MessageEntry,"ps":0},{"n":"e","dv":null,"o":true,"pt":$n[0].Endpoint,"ps":1}],"sn":"PipePacketReceived","rt":$n[1].Void,"p":[$n[0].MessageEntry,$n[0].Endpoint]},{"ov":true,"a":3,"n":"SendPipePacket","t":8,"pi":[{"n":"data","pt":T,"ps":0},{"n":"index","pt":$n[1].Int32,"ps":1},{"n":"packetnumber","pt":$n[1].UInt32,"ps":2},{"n":"requestack","pt":$n[1].Boolean,"ps":3},{"n":"e","dv":null,"o":true,"pt":$n[0].Endpoint,"ps":4},{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":5}],"sn":"SendPipePacket","rt":$n[5].Task,"p":[T,$n[1].Int32,$n[1].UInt32,$n[1].Boolean,$n[0].Endpoint,$n[4].CancellationToken]},{"ov":true,"a":2,"n":"Shutdown","t":8,"sn":"Shutdown","rt":$n[1].Void},{"ov":true,"a":3,"n":"UnpackVarType","t":8,"pi":[{"n":"o","pt":$n[0].MessageElement,"ps":0}],"sn":"UnpackVarType","rt":$n[1].Object,"p":[$n[0].MessageElement]},{"ov":true,"a":2,"n":"MemberName","t":16,"rt":$n[1].String,"g":{"ov":true,"a":2,"n":"get_MemberName","t":8,"rt":$n[1].String,"fg":"MemberName"},"fn":"MemberName"},{"ov":true,"a":2,"n":"PipeConnectCallback","t":16,"rt":Function,"g":{"ov":true,"a":2,"n":"get_PipeConnectCallback","t":8,"rt":Function,"fg":"PipeConnectCallback"},"s":{"ov":true,"a":2,"n":"set_PipeConnectCallback","t":8,"p":[Function],"rt":$n[1].Void,"fs":"PipeConnectCallback"},"fn":"PipeConnectCallback"},{"a":1,"n":"callback","t":4,"rt":Function,"sn":"callback"},{"a":1,"n":"m_Name","t":4,"rt":$n[1].String,"sn":"m_Name"},{"a":1,"n":"pipeendpointlock","t":4,"rt":$n[1].Object,"sn":"pipeendpointlock"},{"a":1,"n":"pipeendpoints","t":4,"rt":$n[3].Dictionary$2(System.UInt32,System.Collections.Generic.Dictionary$2(System.Int32,RobotRaconteurWeb.Pipe$1.PipeEndpoint(T))),"sn":"pipeendpoints"},{"a":1,"n":"skel","t":4,"rt":$n[0].ServiceSkel,"sn":"skel"}]}; }, $n);
    $m("RobotRaconteurWeb.PipeBroadcaster$1", function (T) { return {"nested":[$n[0].PipeBroadcaster$1.connected_endpoint],"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[0].Pipe$1(T),$n[1].Int32],"pi":[{"n":"pipe","pt":$n[0].Pipe$1(T),"ps":0},{"n":"maximum_backlog","dv":-1,"o":true,"pt":$n[1].Int32,"ps":1}],"sn":"ctor"},{"a":2,"n":"AsyncSendPacket","t":8,"pi":[{"n":"packet","pt":T,"ps":0},{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":1}],"sn":"AsyncSendPacket","rt":$n[5].Task,"p":[T,$n[4].CancellationToken]},{"a":3,"n":"EndpointClosed","t":8,"pi":[{"n":"ep","pt":$n[0].PipeBroadcaster$1.connected_endpoint(T),"ps":0}],"sn":"EndpointClosed","rt":$n[1].Void,"p":[$n[0].PipeBroadcaster$1.connected_endpoint(T)]},{"a":3,"n":"EndpointConnected","t":8,"pi":[{"n":"ep","pt":$n[0].Pipe$1.PipeEndpoint(T),"ps":0}],"sn":"EndpointConnected","rt":$n[1].Void,"p":[$n[0].Pipe$1.PipeEndpoint(T)]},{"a":3,"n":"PacketAckReceived","t":8,"pi":[{"n":"ep","pt":$n[0].PipeBroadcaster$1.connected_endpoint(T),"ps":0},{"n":"pnum","pt":$n[1].UInt32,"ps":1}],"sn":"PacketAckReceived","rt":$n[1].Void,"p":[$n[0].PipeBroadcaster$1.connected_endpoint(T),$n[1].UInt32]},{"a":3,"n":"PacketReceived","t":8,"pi":[{"n":"ep","pt":$n[0].Pipe$1.PipeEndpoint(T),"ps":0}],"sn":"PacketReceived","rt":$n[1].Void,"p":[$n[0].Pipe$1.PipeEndpoint(T)]},{"a":2,"n":"Pipe","t":16,"rt":$n[0].Pipe$1(T),"g":{"a":2,"n":"get_Pipe","t":8,"rt":$n[0].Pipe$1(T),"fg":"Pipe"},"fn":"Pipe"},{"a":3,"n":"endpoints","t":4,"rt":$n[3].List$1(RobotRaconteurWeb.PipeBroadcaster$1.connected_endpoint(T)),"sn":"endpoints"},{"a":3,"n":"maximum_backlog","t":4,"rt":$n[1].Int32,"sn":"maximum_backlog","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":3,"n":"pipe","t":4,"rt":$n[0].Pipe$1(T),"sn":"pipe"}]}; }, $n);
    $m("RobotRaconteurWeb.PipeBroadcaster$1.connected_endpoint", function (T) { return {"td":$n[0].PipeBroadcaster$1(T),"att":1048580,"a":3,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[0].Pipe$1.PipeEndpoint(T)],"pi":[{"n":"ep","pt":$n[0].Pipe$1.PipeEndpoint(T),"ps":0}],"sn":"ctor"},{"a":2,"n":"active_sends","t":4,"rt":$n[3].List$1(System.Object),"sn":"active_sends"},{"a":2,"n":"backlog","t":4,"rt":$n[3].List$1(System.UInt32),"sn":"backlog"},{"a":2,"n":"ep","t":4,"rt":$n[0].Pipe$1.PipeEndpoint(T),"sn":"ep"},{"a":2,"n":"forward_backlog","t":4,"rt":$n[3].List$1(System.UInt32),"sn":"forward_backlog"},{"a":2,"n":"sending","t":4,"rt":$n[1].Boolean,"sn":"sending","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}}]}; }, $n);
    $m("RobotRaconteurWeb.RobotRaconteurNode", function () { return {"nested":[$n[0].RobotRaconteurNode.ServiceIndexer,$n[0].RobotRaconteurNode.MonitorLock],"att":1048577,"a":2,"m":[{"a":1,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"CheckConnection","t":8,"pi":[{"n":"endpoint","pt":$n[1].UInt32,"ps":0}],"sn":"CheckConnection","rt":$n[1].Void,"p":[$n[1].UInt32]},{"a":3,"n":"CleanDiscoveredNodes","t":8,"sn":"CleanDiscoveredNodes","rt":$n[1].Void},{"a":2,"n":"CloseService","t":8,"pi":[{"n":"sname","pt":$n[1].String,"ps":0}],"sn":"CloseService","rt":$n[1].Void,"p":[$n[1].String]},{"a":2,"n":"ConnectService","t":8,"pi":[{"n":"url","pt":$n[1].String,"ps":0},{"n":"username","dv":null,"o":true,"pt":$n[1].String,"ps":1},{"n":"credentials","dv":null,"o":true,"pt":$n[1].Object,"ps":2},{"n":"listener","dv":null,"o":true,"pt":Function,"ps":3},{"n":"objecttype","dv":null,"o":true,"pt":$n[1].String,"ps":4},{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":5}],"sn":"ConnectService","rt":$n[5].Task$1(System.Object),"p":[$n[1].String,$n[1].String,$n[1].Object,Function,$n[1].String,$n[4].CancellationToken]},{"a":2,"n":"ConnectService","t":8,"pi":[{"n":"urls","pt":$n[1].Array.type(System.String),"ps":0},{"n":"username","dv":null,"o":true,"pt":$n[1].String,"ps":1},{"n":"credentials","dv":null,"o":true,"pt":$n[1].Object,"ps":2},{"n":"listener","dv":null,"o":true,"pt":Function,"ps":3},{"n":"objecttype","dv":null,"o":true,"pt":$n[1].String,"ps":4},{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":5}],"sn":"ConnectService$1","rt":$n[5].Task$1(System.Object),"p":[$n[1].Array.type(System.String),$n[1].String,$n[1].Object,Function,$n[1].String,$n[4].CancellationToken]},{"a":2,"n":"CreateRate","t":8,"pi":[{"n":"period","pt":$n[1].Double,"ps":0}],"sn":"CreateRate","rt":$n[0].IRate,"p":[$n[1].Double]},{"a":2,"n":"CreateTimer","t":8,"pi":[{"n":"period","pt":$n[1].Int32,"ps":0},{"n":"handler","pt":Function,"ps":1},{"n":"oneshot","dv":false,"o":true,"pt":$n[1].Boolean,"ps":2}],"sn":"CreateTimer","rt":$n[0].ITimer,"p":[$n[1].Int32,Function,$n[1].Boolean]},{"a":2,"n":"DeleteEndpoint","t":8,"pi":[{"n":"e","pt":$n[0].Endpoint,"ps":0}],"sn":"DeleteEndpoint","rt":$n[1].Void,"p":[$n[0].Endpoint]},{"a":2,"n":"DisconnectService","t":8,"pi":[{"n":"obj","pt":$n[1].Object,"ps":0},{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":1}],"sn":"DisconnectService","rt":$n[5].Task,"p":[$n[1].Object,$n[4].CancellationToken]},{"a":1,"n":"DoFindServiceByType","t":8,"pi":[{"n":"urls","pt":$n[1].Array.type(System.String),"ps":0},{"n":"cancel","pt":$n[4].CancellationToken,"ps":1}],"sn":"DoFindServiceByType","rt":$n[5].Task$1(System.Tuple$3(System.Array.type(System.Byte),System.String,System.Collections.Generic.Dictionary$2(System.Int32,RobotRaconteurServiceIndex.ServiceInfo))),"p":[$n[1].Array.type(System.String),$n[4].CancellationToken]},{"a":2,"n":"FindNodeByID","t":8,"pi":[{"n":"id","pt":$n[0].NodeID,"ps":0},{"n":"schemes","pt":$n[1].Array.type(System.String),"ps":1}],"sn":"FindNodeByID","rt":$n[5].Task$1(System.Array.type(RobotRaconteurWeb.NodeInfo2)),"p":[$n[0].NodeID,$n[1].Array.type(System.String)]},{"a":2,"n":"FindNodeByID","t":8,"pi":[{"n":"id","pt":$n[0].NodeID,"ps":0},{"n":"schemes","pt":$n[1].Array.type(System.String),"ps":1},{"n":"cancel","pt":$n[4].CancellationToken,"ps":2}],"sn":"FindNodeByID$1","rt":$n[5].Task$1(System.Array.type(RobotRaconteurWeb.NodeInfo2)),"p":[$n[0].NodeID,$n[1].Array.type(System.String),$n[4].CancellationToken]},{"a":2,"n":"FindNodeByName","t":8,"pi":[{"n":"name","pt":$n[1].String,"ps":0},{"n":"schemes","pt":$n[1].Array.type(System.String),"ps":1}],"sn":"FindNodeByName","rt":$n[5].Task$1(System.Array.type(RobotRaconteurWeb.NodeInfo2)),"p":[$n[1].String,$n[1].Array.type(System.String)]},{"a":2,"n":"FindNodeByName","t":8,"pi":[{"n":"name","pt":$n[1].String,"ps":0},{"n":"schemes","pt":$n[1].Array.type(System.String),"ps":1},{"n":"cancel","pt":$n[4].CancellationToken,"ps":2}],"sn":"FindNodeByName$1","rt":$n[5].Task$1(System.Array.type(RobotRaconteurWeb.NodeInfo2)),"p":[$n[1].String,$n[1].Array.type(System.String),$n[4].CancellationToken]},{"a":2,"n":"FindObjRefTyped","t":8,"pi":[{"n":"obj","pt":$n[1].Object,"ps":0},{"n":"objref","pt":$n[1].String,"ps":1},{"n":"objecttype","pt":$n[1].String,"ps":2},{"n":"cancel","pt":$n[4].CancellationToken,"ps":3}],"sn":"FindObjRefTyped$1","rt":$n[5].Task$1(System.Object),"p":[$n[1].Object,$n[1].String,$n[1].String,$n[4].CancellationToken]},{"a":2,"n":"FindObjRefTyped","t":8,"pi":[{"n":"obj","pt":$n[1].Object,"ps":0},{"n":"objref","pt":$n[1].String,"ps":1},{"n":"index","pt":$n[1].String,"ps":2},{"n":"objecttype","pt":$n[1].String,"ps":3},{"n":"cancel","pt":$n[4].CancellationToken,"ps":4}],"sn":"FindObjRefTyped","rt":$n[5].Task$1(System.Object),"p":[$n[1].Object,$n[1].String,$n[1].String,$n[1].String,$n[4].CancellationToken]},{"a":2,"n":"FindServiceByType","t":8,"pi":[{"n":"servicetype","pt":$n[1].String,"ps":0},{"n":"transportschemes","pt":$n[1].Array.type(System.String),"ps":1}],"sn":"FindServiceByType","rt":$n[5].Task$1(System.Array.type(RobotRaconteurWeb.ServiceInfo2)),"p":[$n[1].String,$n[1].Array.type(System.String)]},{"a":2,"n":"FindServiceByType","t":8,"pi":[{"n":"servicetype","pt":$n[1].String,"ps":0},{"n":"transportschemes","pt":$n[1].Array.type(System.String),"ps":1},{"n":"cancel","pt":$n[4].CancellationToken,"ps":2}],"sn":"FindServiceByType$1","rt":$n[5].Task$1(System.Array.type(RobotRaconteurWeb.ServiceInfo2)),"p":[$n[1].String,$n[1].Array.type(System.String),$n[4].CancellationToken]},{"a":2,"n":"GenerateErrorReturnMessage","t":8,"pi":[{"n":"m","pt":$n[0].Message,"ps":0},{"n":"err","pt":$n[0].MessageErrorType,"ps":1},{"n":"errname","pt":$n[1].String,"ps":2},{"n":"errdesc","pt":$n[1].String,"ps":3}],"sn":"GenerateErrorReturnMessage","rt":$n[0].Message,"p":[$n[0].Message,$n[0].MessageErrorType,$n[1].String,$n[1].String]},{"a":2,"n":"GetRandomString","t":8,"pi":[{"n":"count","pt":$n[1].Int32,"ps":0}],"sn":"GetRandomString","rt":$n[1].String,"p":[$n[1].Int32]},{"a":2,"n":"GetService","t":8,"pi":[{"n":"name","pt":$n[1].String,"ps":0}],"sn":"GetService","rt":$n[0].ServerContext,"p":[$n[1].String]},{"a":2,"n":"GetServiceAttributes","t":8,"pi":[{"n":"obj","pt":$n[1].Object,"ps":0}],"sn":"GetServiceAttributes","rt":$n[3].Dictionary$2(System.String,System.Object),"p":[$n[1].Object]},{"a":1,"n":"GetServiceFactoryForType","t":8,"pi":[{"n":"type","pt":$n[1].String,"ps":0},{"n":"context","pt":$n[0].ClientContext,"ps":1}],"sn":"GetServiceFactoryForType","rt":$n[0].ServiceFactory,"p":[$n[1].String,$n[0].ClientContext]},{"a":1,"n":"GetServiceFactoryForType","t":8,"pi":[{"n":"type","pt":$n[1].Type,"ps":0},{"n":"context","pt":$n[0].ClientContext,"ps":1}],"sn":"GetServiceFactoryForType$1","rt":$n[0].ServiceFactory,"p":[$n[1].Type,$n[0].ClientContext]},{"a":2,"n":"GetServiceType","t":8,"pi":[{"n":"servicetype","pt":$n[1].String,"ps":0}],"sn":"GetServiceType","rt":$n[0].ServiceFactory,"p":[$n[1].String]},{"a":2,"n":"GetServiceTypes","t":8,"sn":"GetServiceTypes","rt":$n[1].Array.type(System.String)},{"a":2,"n":"MessageReceived","t":8,"pi":[{"n":"m","pt":$n[0].Message,"ps":0}],"sn":"MessageReceived","rt":$n[1].Void,"p":[$n[0].Message]},{"a":2,"n":"MonitorEnter","t":8,"pi":[{"n":"obj","pt":$n[1].Object,"ps":0},{"n":"timeout","dv":-1,"o":true,"pt":$n[1].Int32,"ps":1},{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":2}],"sn":"MonitorEnter","rt":$n[5].Task$1(RobotRaconteurWeb.RobotRaconteurNode.MonitorLock),"p":[$n[1].Object,$n[1].Int32,$n[4].CancellationToken]},{"a":2,"n":"MonitorExit","t":8,"pi":[{"n":"lock_","pt":$n[0].RobotRaconteurNode.MonitorLock,"ps":0},{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":1}],"sn":"MonitorExit","rt":$n[5].Task,"p":[$n[0].RobotRaconteurNode.MonitorLock,$n[4].CancellationToken]},{"a":2,"n":"NodeAnnouncePacketReceived","t":8,"pi":[{"n":"packet","pt":$n[1].String,"ps":0}],"sn":"NodeAnnouncePacketReceived","rt":$n[1].Void,"p":[$n[1].String]},{"a":1,"n":"NodeDetected","t":8,"pi":[{"n":"n","pt":$n[0].NodeDiscoveryInfo,"ps":0}],"sn":"NodeDetected","rt":$n[1].Void,"p":[$n[0].NodeDiscoveryInfo]},{"a":1,"n":"PackContainerValue","t":8,"pi":[{"n":"num","pt":$n[1].Int32,"ps":0},{"n":"data","ref":true,"pt":System.Object,"ps":1},{"n":"context","pt":$n[0].ClientContext,"ps":2}],"tpc":1,"tprm":["T"],"sn":"PackContainerValue","rt":$n[0].MessageElement,"p":[$n[1].Int32,System.Object,$n[0].ClientContext]},{"a":1,"n":"PackContainerValue","t":8,"pi":[{"n":"name","pt":$n[1].String,"ps":0},{"n":"data","ref":true,"pt":System.Object,"ps":1},{"n":"context","pt":$n[0].ClientContext,"ps":2}],"tpc":1,"tprm":["T"],"sn":"PackContainerValue$1","rt":$n[0].MessageElement,"p":[$n[1].String,System.Object,$n[0].ClientContext]},{"a":2,"n":"PackListType","t":8,"pi":[{"n":"data","pt":$n[1].Object,"ps":0},{"n":"context","pt":$n[0].ClientContext,"ps":1}],"tpc":1,"tprm":["Tvalue"],"sn":"PackListType","rt":$n[1].Object,"p":[$n[1].Object,$n[0].ClientContext]},{"a":2,"n":"PackMapType","t":8,"pi":[{"n":"data","pt":$n[1].Object,"ps":0},{"n":"context","pt":$n[0].ClientContext,"ps":1}],"tpc":2,"tprm":["Tkey","Tvalue"],"sn":"PackMapType","rt":$n[1].Object,"p":[$n[1].Object,$n[0].ClientContext]},{"a":2,"n":"PackMultiDimArray","t":8,"pi":[{"n":"array","pt":$n[0].MultiDimArray,"ps":0}],"sn":"PackMultiDimArray","rt":$n[0].MessageElementMultiDimArray,"p":[$n[0].MultiDimArray]},{"a":2,"n":"PackNamedArray","t":8,"pi":[{"n":"s","pt":$n[1].Object,"ps":0},{"n":"context","pt":$n[0].ClientContext,"ps":1}],"sn":"PackNamedArray$1","rt":$n[1].Object,"p":[$n[1].Object,$n[0].ClientContext]},{"a":2,"n":"PackNamedArray","t":8,"pi":[{"n":"s","pt":System.Array.type(System.Object),"ps":0},{"n":"context","pt":$n[0].ClientContext,"ps":1}],"tpc":1,"tprm":["T"],"sn":"PackNamedArray","rt":$n[0].MessageElementNamedArray,"p":[System.Array.type(System.Object),$n[0].ClientContext]},{"a":2,"n":"PackNamedArrayToArray","t":8,"pi":[{"n":"s","ref":true,"pt":System.Object,"ps":0},{"n":"context","pt":$n[0].ClientContext,"ps":1}],"tpc":1,"tprm":["T"],"sn":"PackNamedArrayToArray","rt":$n[0].MessageElementNamedArray,"p":[System.Object,$n[0].ClientContext]},{"a":2,"n":"PackNamedMultiDimArray","t":8,"pi":[{"n":"s","pt":$n[0].NamedMultiDimArray,"ps":0},{"n":"context","pt":$n[0].ClientContext,"ps":1}],"tpc":1,"tprm":["T"],"sn":"PackNamedMultiDimArray","rt":$n[0].MessageElementNamedMultiDimArray,"p":[$n[0].NamedMultiDimArray,$n[0].ClientContext]},{"a":2,"n":"PackPod","t":8,"pi":[{"n":"s","pt":$n[1].Object,"ps":0},{"n":"context","pt":$n[0].ClientContext,"ps":1}],"sn":"PackPod","rt":$n[1].Object,"p":[$n[1].Object,$n[0].ClientContext]},{"a":2,"n":"PackPodArray","t":8,"pi":[{"n":"s","pt":System.Array.type(System.Object),"ps":0},{"n":"context","pt":$n[0].ClientContext,"ps":1}],"tpc":1,"tprm":["T"],"sn":"PackPodArray","rt":$n[0].MessageElementPodArray,"p":[System.Array.type(System.Object),$n[0].ClientContext]},{"a":2,"n":"PackPodMultiDimArray","t":8,"pi":[{"n":"s","pt":$n[0].PodMultiDimArray,"ps":0},{"n":"context","pt":$n[0].ClientContext,"ps":1}],"tpc":1,"tprm":["T"],"sn":"PackPodMultiDimArray","rt":$n[0].MessageElementPodMultiDimArray,"p":[$n[0].PodMultiDimArray,$n[0].ClientContext]},{"a":2,"n":"PackPodToArray","t":8,"pi":[{"n":"s","ref":true,"pt":System.Object,"ps":0},{"n":"context","pt":$n[0].ClientContext,"ps":1}],"tpc":1,"tprm":["T"],"sn":"PackPodToArray","rt":$n[0].MessageElementPodArray,"p":[System.Object,$n[0].ClientContext]},{"a":2,"n":"PackStructure","t":8,"pi":[{"n":"s","pt":$n[1].Object,"ps":0},{"n":"context","pt":$n[0].ClientContext,"ps":1}],"sn":"PackStructure","rt":$n[0].MessageElementStructure,"p":[$n[1].Object,$n[0].ClientContext]},{"a":2,"n":"PackVarType","t":8,"pi":[{"n":"data","pt":$n[1].Object,"ps":0},{"n":"context","pt":$n[0].ClientContext,"ps":1}],"sn":"PackVarType","rt":$n[1].Object,"p":[$n[1].Object,$n[0].ClientContext]},{"a":2,"n":"RegisterDynamicServiceFactory","t":8,"pi":[{"n":"f","pt":$n[0].DynamicServiceFactory,"ps":0}],"sn":"RegisterDynamicServiceFactory","rt":$n[1].Void,"p":[$n[0].DynamicServiceFactory]},{"a":2,"n":"RegisterEndpoint","t":8,"pi":[{"n":"e","pt":$n[0].Endpoint,"ps":0}],"sn":"RegisterEndpoint","rt":$n[1].UInt32,"p":[$n[0].Endpoint],"box":function ($v) { return Bridge.box($v, System.UInt32);}},{"a":2,"n":"RegisterService","t":8,"pi":[{"n":"c","pt":$n[0].ServerContext,"ps":0}],"sn":"RegisterService","rt":$n[0].ServerContext,"p":[$n[0].ServerContext]},{"a":2,"n":"RegisterService","t":8,"pi":[{"n":"name","pt":$n[1].String,"ps":0},{"n":"servicetype","pt":$n[1].String,"ps":1},{"n":"obj","pt":$n[1].Object,"ps":2},{"n":"securitypolicy","dv":null,"o":true,"pt":$n[0].ServiceSecurityPolicy,"ps":3}],"sn":"RegisterService$1","rt":$n[0].ServerContext,"p":[$n[1].String,$n[1].String,$n[1].Object,$n[0].ServiceSecurityPolicy]},{"a":2,"n":"RegisterServiceType","t":8,"pi":[{"n":"f","pt":$n[0].ServiceFactory,"ps":0}],"sn":"RegisterServiceType","rt":$n[1].Void,"p":[$n[0].ServiceFactory]},{"a":2,"n":"RegisterTransport","t":8,"pi":[{"n":"c","pt":$n[0].Transport,"ps":0}],"sn":"RegisterTransport","rt":$n[1].UInt32,"p":[$n[0].Transport],"box":function ($v) { return Bridge.box($v, System.UInt32);}},{"a":2,"n":"ReleaseObjectLock","t":8,"pi":[{"n":"obj","pt":$n[1].Object,"ps":0},{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":1}],"sn":"ReleaseObjectLock","rt":$n[5].Task$1(System.String),"p":[$n[1].Object,$n[4].CancellationToken]},{"a":2,"n":"RequestObjectLock","t":8,"pi":[{"n":"obj","pt":$n[1].Object,"ps":0},{"n":"flags","pt":$n[0].RobotRaconteurObjectLockFlags,"ps":1},{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":2}],"sn":"RequestObjectLock","rt":$n[5].Task$1(System.String),"p":[$n[1].Object,$n[0].RobotRaconteurObjectLockFlags,$n[4].CancellationToken]},{"a":2,"n":"SelectRemoteNodeURL","is":true,"t":8,"pi":[{"n":"urls","pt":$n[1].Array.type(System.String),"ps":0}],"sn":"SelectRemoteNodeURL","rt":$n[1].String,"p":[$n[1].Array.type(System.String)]},{"a":2,"n":"SendMessage","t":8,"pi":[{"n":"m","pt":$n[0].Message,"ps":0},{"n":"cancel","pt":$n[4].CancellationToken,"ps":1}],"sn":"SendMessage","rt":$n[5].Task,"p":[$n[0].Message,$n[4].CancellationToken]},{"a":2,"n":"Shutdown","t":8,"sn":"Shutdown","rt":$n[1].Void},{"a":2,"n":"SpecialRequest","t":8,"pi":[{"n":"m","pt":$n[0].Message,"ps":0},{"n":"transportid","pt":$n[1].UInt32,"ps":1}],"sn":"SpecialRequest","rt":$n[5].Task$1(RobotRaconteurWeb.Message),"p":[$n[0].Message,$n[1].UInt32]},{"a":2,"n":"TryGetServiceType","t":8,"pi":[{"n":"servicetype","pt":$n[1].String,"ps":0},{"n":"f","out":true,"pt":$n[0].ServiceFactory,"ps":1}],"sn":"TryGetServiceType","rt":$n[1].Boolean,"p":[$n[1].String,$n[0].ServiceFactory],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"UnpackContainerValue","t":8,"pi":[{"n":"e","pt":$n[0].MessageElement,"ps":0},{"n":"context","pt":$n[0].ClientContext,"ps":1}],"tpc":1,"tprm":["T"],"sn":"UnpackContainerValue","rt":System.Object,"p":[$n[0].MessageElement,$n[0].ClientContext]},{"a":1,"n":"UnpackContainerValue","t":8,"pi":[{"n":"e","pt":$n[0].MessageElement,"ps":0},{"n":"num","out":true,"pt":$n[1].Int32,"ps":1},{"n":"context","pt":$n[0].ClientContext,"ps":2}],"tpc":1,"tprm":["T"],"sn":"UnpackContainerValue$2","rt":System.Object,"p":[$n[0].MessageElement,$n[1].Int32,$n[0].ClientContext]},{"a":1,"n":"UnpackContainerValue","t":8,"pi":[{"n":"e","pt":$n[0].MessageElement,"ps":0},{"n":"name","out":true,"pt":$n[1].String,"ps":1},{"n":"context","pt":$n[0].ClientContext,"ps":2}],"tpc":1,"tprm":["T"],"sn":"UnpackContainerValue$1","rt":System.Object,"p":[$n[0].MessageElement,$n[1].String,$n[0].ClientContext]},{"a":2,"n":"UnpackListType","t":8,"pi":[{"n":"data","pt":$n[1].Object,"ps":0},{"n":"context","pt":$n[0].ClientContext,"ps":1}],"tpc":1,"tprm":["Tvalue"],"sn":"UnpackListType","rt":$n[1].Object,"p":[$n[1].Object,$n[0].ClientContext]},{"a":2,"n":"UnpackMapType","t":8,"pi":[{"n":"data","pt":$n[1].Object,"ps":0},{"n":"context","pt":$n[0].ClientContext,"ps":1}],"tpc":2,"tprm":["Tkey","Tvalue"],"sn":"UnpackMapType","rt":$n[1].Object,"p":[$n[1].Object,$n[0].ClientContext]},{"a":2,"n":"UnpackMultiDimArray","t":8,"pi":[{"n":"marray","pt":$n[0].MessageElementMultiDimArray,"ps":0}],"sn":"UnpackMultiDimArray","rt":$n[0].MultiDimArray,"p":[$n[0].MessageElementMultiDimArray]},{"a":2,"n":"UnpackNamedArray","t":8,"pi":[{"n":"l","pt":$n[0].MessageElementNamedArray,"ps":0},{"n":"context","pt":$n[0].ClientContext,"ps":1}],"tpc":1,"tprm":["T"],"sn":"UnpackNamedArray","rt":System.Array.type(System.Object),"p":[$n[0].MessageElementNamedArray,$n[0].ClientContext]},{"a":2,"n":"UnpackNamedArray","t":8,"pi":[{"n":"l","pt":$n[1].Object,"ps":0},{"n":"context","pt":$n[0].ClientContext,"ps":1}],"sn":"UnpackNamedArray$1","rt":$n[1].Object,"p":[$n[1].Object,$n[0].ClientContext]},{"a":2,"n":"UnpackNamedArrayFromArray","t":8,"pi":[{"n":"l","pt":$n[0].MessageElementNamedArray,"ps":0},{"n":"context","pt":$n[0].ClientContext,"ps":1}],"tpc":1,"tprm":["T"],"sn":"UnpackNamedArrayFromArray","rt":System.Object,"p":[$n[0].MessageElementNamedArray,$n[0].ClientContext]},{"a":2,"n":"UnpackNamedMultiDimArray","t":8,"pi":[{"n":"l","pt":$n[0].MessageElementNamedMultiDimArray,"ps":0},{"n":"context","pt":$n[0].ClientContext,"ps":1}],"tpc":1,"tprm":["T"],"sn":"UnpackNamedMultiDimArray","rt":$n[0].NamedMultiDimArray,"p":[$n[0].MessageElementNamedMultiDimArray,$n[0].ClientContext]},{"a":2,"n":"UnpackPod","t":8,"pi":[{"n":"l","pt":$n[1].Object,"ps":0},{"n":"context","pt":$n[0].ClientContext,"ps":1}],"sn":"UnpackPod","rt":$n[1].Object,"p":[$n[1].Object,$n[0].ClientContext]},{"a":2,"n":"UnpackPodArray","t":8,"pi":[{"n":"l","pt":$n[0].MessageElementPodArray,"ps":0},{"n":"context","pt":$n[0].ClientContext,"ps":1}],"tpc":1,"tprm":["T"],"sn":"UnpackPodArray","rt":System.Array.type(System.Object),"p":[$n[0].MessageElementPodArray,$n[0].ClientContext]},{"a":2,"n":"UnpackPodFromArray","t":8,"pi":[{"n":"l","pt":$n[0].MessageElementPodArray,"ps":0},{"n":"context","pt":$n[0].ClientContext,"ps":1}],"tpc":1,"tprm":["T"],"sn":"UnpackPodFromArray","rt":System.Object,"p":[$n[0].MessageElementPodArray,$n[0].ClientContext]},{"a":2,"n":"UnpackPodMultiDimArray","t":8,"pi":[{"n":"l","pt":$n[0].MessageElementPodMultiDimArray,"ps":0},{"n":"context","pt":$n[0].ClientContext,"ps":1}],"tpc":1,"tprm":["T"],"sn":"UnpackPodMultiDimArray","rt":$n[0].PodMultiDimArray,"p":[$n[0].MessageElementPodMultiDimArray,$n[0].ClientContext]},{"a":2,"n":"UnpackStructure","t":8,"pi":[{"n":"l","pt":$n[0].MessageElementStructure,"ps":0},{"n":"context","pt":$n[0].ClientContext,"ps":1}],"tpc":1,"tprm":["T"],"sn":"UnpackStructure","rt":System.Object,"p":[$n[0].MessageElementStructure,$n[0].ClientContext]},{"a":2,"n":"UnpackVarType","t":8,"pi":[{"n":"me","pt":$n[0].MessageElement,"ps":0},{"n":"context","pt":$n[0].ClientContext,"ps":1}],"sn":"UnpackVarType","rt":$n[1].Object,"p":[$n[0].MessageElement,$n[0].ClientContext]},{"a":1,"n":"UpdateDetectedNodes","t":8,"pi":[{"n":"cancel","pt":$n[4].CancellationToken,"ps":0}],"sn":"UpdateDetectedNodes","rt":$n[5].Task,"p":[$n[4].CancellationToken]},{"a":2,"n":"UpdateServiceStateNonce","t":8,"sn":"UpdateServiceStateNonce","rt":$n[1].Void},{"a":2,"n":"DiscoveredNodes","t":16,"rt":$n[3].Dictionary$2(System.String,RobotRaconteurWeb.NodeDiscoveryInfo),"g":{"a":2,"n":"get_DiscoveredNodes","t":8,"rt":$n[3].Dictionary$2(System.String,RobotRaconteurWeb.NodeDiscoveryInfo),"fg":"DiscoveredNodes"},"fn":"DiscoveredNodes"},{"a":2,"n":"DynamicServiceFactory","t":16,"rt":$n[0].DynamicServiceFactory,"g":{"a":2,"n":"get_DynamicServiceFactory","t":8,"rt":$n[0].DynamicServiceFactory,"fg":"DynamicServiceFactory"},"fn":"DynamicServiceFactory"},{"a":2,"n":"NodeID","t":16,"rt":$n[0].NodeID,"g":{"a":2,"n":"get_NodeID","t":8,"rt":$n[0].NodeID,"fg":"NodeID"},"s":{"a":2,"n":"set_NodeID","t":8,"p":[$n[0].NodeID],"rt":$n[1].Void,"fs":"NodeID"},"fn":"NodeID"},{"a":2,"n":"NodeName","t":16,"rt":$n[1].String,"g":{"a":2,"n":"get_NodeName","t":8,"rt":$n[1].String,"fg":"NodeName"},"s":{"a":2,"n":"set_NodeName","t":8,"p":[$n[1].String],"rt":$n[1].Void,"fs":"NodeName"},"fn":"NodeName"},{"a":2,"n":"ServiceStateNonce","t":16,"rt":$n[1].String,"g":{"a":2,"n":"get_ServiceStateNonce","t":8,"rt":$n[1].String,"fg":"ServiceStateNonce"},"fn":"ServiceStateNonce"},{"a":2,"n":"UtcNow","t":16,"rt":$n[1].DateTime,"g":{"a":2,"n":"get_UtcNow","t":8,"rt":$n[1].DateTime,"fg":"UtcNow","box":function ($v) { return Bridge.box($v, System.DateTime, System.DateTime.format);}},"fn":"UtcNow"},{"a":2,"n":"s","is":true,"t":16,"rt":$n[0].RobotRaconteurNode,"g":{"a":2,"n":"get_s","t":8,"rt":$n[0].RobotRaconteurNode,"fg":"s","is":true},"fn":"s"},{"a":2,"n":"EndpointInactivityTimeout","t":4,"rt":$n[1].UInt32,"sn":"EndpointInactivityTimeout","box":function ($v) { return Bridge.box($v, System.UInt32);}},{"a":2,"n":"MemoryMaxTransferSize","t":4,"rt":$n[1].UInt32,"sn":"MemoryMaxTransferSize","box":function ($v) { return Bridge.box($v, System.UInt32);}},{"a":2,"n":"RequestTimeout","t":4,"rt":$n[1].UInt32,"sn":"RequestTimeout","box":function ($v) { return Bridge.box($v, System.UInt32);}},{"a":2,"n":"TransportInactivityTimeout","t":4,"rt":$n[1].UInt32,"sn":"TransportInactivityTimeout","box":function ($v) { return Bridge.box($v, System.UInt32);}},{"a":2,"n":"Version","is":true,"t":4,"rt":$n[1].String,"sn":"Version"},{"a":2,"n":"browser_transport","t":4,"rt":$n[0].BrowserWebSocketTransport,"sn":"browser_transport","ro":true},{"a":1,"n":"cleandiscoverednodes_task","t":4,"rt":$n[5].Task,"sn":"cleandiscoverednodes_task"},{"a":4,"n":"dynamic_factory","t":4,"rt":$n[0].DynamicServiceFactory,"sn":"dynamic_factory"},{"a":4,"n":"endpoints","t":4,"rt":$n[3].Dictionary$2(System.UInt32,RobotRaconteurWeb.Endpoint),"sn":"endpoints"},{"a":1,"n":"m_DiscoveredNodes","t":4,"rt":$n[3].Dictionary$2(System.String,RobotRaconteurWeb.NodeDiscoveryInfo),"sn":"m_DiscoveredNodes"},{"a":1,"n":"m_NodeID","t":4,"rt":$n[0].NodeID,"sn":"m_NodeID"},{"a":1,"n":"m_NodeName","t":4,"rt":$n[1].String,"sn":"m_NodeName"},{"a":4,"n":"service_factories","t":4,"rt":$n[3].Dictionary$2(System.String,RobotRaconteurWeb.ServiceFactory),"sn":"service_factories"},{"a":3,"n":"service_state_nonce","t":4,"rt":$n[1].String,"sn":"service_state_nonce"},{"a":1,"n":"serviceindexer","t":4,"rt":$n[0].RobotRaconteurNode.ServiceIndexer,"sn":"serviceindexer"},{"a":4,"n":"services","t":4,"rt":$n[3].Dictionary$2(System.String,RobotRaconteurWeb.ServerContext),"sn":"services"},{"a":1,"n":"shutdown_token","t":4,"rt":$n[4].CancellationTokenSource,"sn":"shutdown_token"},{"a":1,"n":"sp","is":true,"t":4,"rt":$n[0].RobotRaconteurNode,"sn":"sp"},{"a":1,"n":"transport_count","t":4,"rt":$n[1].UInt32,"sn":"transport_count","box":function ($v) { return Bridge.box($v, System.UInt32);}},{"a":4,"n":"transports","t":4,"rt":$n[3].Dictionary$2(System.UInt32,RobotRaconteurWeb.Transport),"sn":"transports"}]}; }, $n);
    $m("RobotRaconteurWeb.RobotRaconteurNode.ServiceIndexer", function () { return {"td":$n[0].RobotRaconteurNode,"att":1048579,"a":1,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[0].RobotRaconteurNode],"pi":[{"n":"node","pt":$n[0].RobotRaconteurNode,"ps":0}],"sn":"ctor"},{"a":2,"n":"GetDetectedNodes","t":8,"pi":[{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":0}],"sn":"GetDetectedNodes","rt":$n[5].Task$1(System.Collections.Generic.Dictionary$2(System.Int32,RobotRaconteurServiceIndex.NodeInfo)),"p":[$n[4].CancellationToken]},{"a":2,"n":"GetLocalNodeServices","t":8,"pi":[{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":0}],"sn":"GetLocalNodeServices","rt":$n[5].Task$1(System.Collections.Generic.Dictionary$2(System.Int32,RobotRaconteurServiceIndex.ServiceInfo)),"p":[$n[4].CancellationToken]},{"a":2,"n":"GetRoutedNodes","t":8,"pi":[{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":0}],"sn":"GetRoutedNodes","rt":$n[5].Task$1(System.Collections.Generic.Dictionary$2(System.Int32,RobotRaconteurServiceIndex.NodeInfo)),"p":[$n[4].CancellationToken]},{"a":3,"n":"node","t":4,"rt":$n[0].RobotRaconteurNode,"sn":"node","ro":true},{"a":2,"n":"LocalNodeServicesChanged","t":2,"ad":{"a":2,"n":"add_LocalNodeServicesChanged","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"addLocalNodeServicesChanged","rt":$n[1].Void,"p":[Function]},"r":{"a":2,"n":"remove_LocalNodeServicesChanged","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"removeLocalNodeServicesChanged","rt":$n[1].Void,"p":[Function]}}]}; }, $n);
    $m("RobotRaconteurWeb.RobotRaconteurNode.MonitorLock", function () { return {"td":$n[0].RobotRaconteurNode,"att":1048578,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":4,"n":"lock_","t":4,"rt":$n[1].IDisposable,"sn":"lock_"},{"a":4,"n":"stub","t":4,"rt":$n[0].ServiceStub,"sn":"stub"}]}; }, $n);
    $m("RobotRaconteurWeb.ServiceInfo2", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[2].ServiceInfo,$n[2].NodeInfo],"pi":[{"n":"info","pt":$n[2].ServiceInfo,"ps":0},{"n":"ninfo","pt":$n[2].NodeInfo,"ps":1}],"sn":"$ctor1"},{"a":2,"n":"Attributes","t":4,"rt":$n[3].Dictionary$2(System.String,System.Object),"sn":"Attributes"},{"a":2,"n":"ConnectionURL","t":4,"rt":$n[1].Array.type(System.String),"sn":"ConnectionURL"},{"a":2,"n":"Name","t":4,"rt":$n[1].String,"sn":"Name"},{"a":2,"n":"NodeID","t":4,"rt":$n[0].NodeID,"sn":"NodeID"},{"a":2,"n":"NodeName","t":4,"rt":$n[1].String,"sn":"NodeName"},{"a":2,"n":"RootObjectImplements","t":4,"rt":$n[1].Array.type(System.String),"sn":"RootObjectImplements"},{"a":2,"n":"RootObjectType","t":4,"rt":$n[1].String,"sn":"RootObjectType"}]}; }, $n);
    $m("RobotRaconteurWeb.NodeInfo2", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"ConnectionURL","t":4,"rt":$n[1].Array.type(System.String),"sn":"ConnectionURL"},{"a":2,"n":"NodeID","t":4,"rt":$n[0].NodeID,"sn":"NodeID"},{"a":2,"n":"NodeName","t":4,"rt":$n[1].String,"sn":"NodeName"}]}; }, $n);
    $m("RobotRaconteurWeb.TimeSpec", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[1].Int64,$n[1].Int32],"pi":[{"n":"seconds","pt":$n[1].Int64,"ps":0},{"n":"nanoseconds","pt":$n[1].Int32,"ps":1}],"sn":"$ctor1"},{"ov":true,"a":2,"n":"Equals","t":8,"pi":[{"n":"obj","pt":$n[1].Object,"ps":0}],"sn":"equals","rt":$n[1].Boolean,"p":[$n[1].Object],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"ov":true,"a":2,"n":"GetHashCode","t":8,"sn":"getHashCode","rt":$n[1].Int32,"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"QueryPerformanceCounter","is":true,"t":8,"pi":[{"n":"lpPerformanceCount","out":true,"pt":$n[1].Int64,"ps":0}],"sn":"QueryPerformanceCounter","rt":$n[1].Boolean,"p":[$n[1].Int64],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"QueryPerformanceFrequency","is":true,"t":8,"pi":[{"n":"lpFrequency","out":true,"pt":$n[1].Int64,"ps":0}],"sn":"QueryPerformanceFrequency","rt":$n[1].Boolean,"p":[$n[1].Int64],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"cleanup_nanosecs","t":8,"sn":"cleanup_nanosecs","rt":$n[1].Void},{"a":2,"n":"op_Addition","is":true,"t":8,"pi":[{"n":"t1","pt":$n[0].TimeSpec,"ps":0},{"n":"t2","pt":$n[0].TimeSpec,"ps":1}],"sn":"op_Addition","rt":$n[0].TimeSpec,"p":[$n[0].TimeSpec,$n[0].TimeSpec]},{"a":2,"n":"op_Equality","is":true,"t":8,"pi":[{"n":"t1","pt":$n[0].TimeSpec,"ps":0},{"n":"t2","pt":$n[0].TimeSpec,"ps":1}],"sn":"op_Equality","rt":$n[1].Boolean,"p":[$n[0].TimeSpec,$n[0].TimeSpec],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"op_GreaterThan","is":true,"t":8,"pi":[{"n":"t1","pt":$n[0].TimeSpec,"ps":0},{"n":"t2","pt":$n[0].TimeSpec,"ps":1}],"sn":"op_GreaterThan","rt":$n[1].Boolean,"p":[$n[0].TimeSpec,$n[0].TimeSpec],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"op_GreaterThanOrEqual","is":true,"t":8,"pi":[{"n":"t1","pt":$n[0].TimeSpec,"ps":0},{"n":"t2","pt":$n[0].TimeSpec,"ps":1}],"sn":"op_GreaterThanOrEqual","rt":$n[1].Boolean,"p":[$n[0].TimeSpec,$n[0].TimeSpec],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"op_Inequality","is":true,"t":8,"pi":[{"n":"t1","pt":$n[0].TimeSpec,"ps":0},{"n":"t2","pt":$n[0].TimeSpec,"ps":1}],"sn":"op_Inequality","rt":$n[1].Boolean,"p":[$n[0].TimeSpec,$n[0].TimeSpec],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"op_LessThan","is":true,"t":8,"pi":[{"n":"t1","pt":$n[0].TimeSpec,"ps":0},{"n":"t2","pt":$n[0].TimeSpec,"ps":1}],"sn":"op_LessThan","rt":$n[1].Boolean,"p":[$n[0].TimeSpec,$n[0].TimeSpec],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"op_LessThanOrEqual","is":true,"t":8,"pi":[{"n":"t1","pt":$n[0].TimeSpec,"ps":0},{"n":"t2","pt":$n[0].TimeSpec,"ps":1}],"sn":"op_LessThanOrEqual","rt":$n[1].Boolean,"p":[$n[0].TimeSpec,$n[0].TimeSpec],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"op_Subtraction","is":true,"t":8,"pi":[{"n":"t1","pt":$n[0].TimeSpec,"ps":0},{"n":"t2","pt":$n[0].TimeSpec,"ps":1}],"sn":"op_Subtraction","rt":$n[0].TimeSpec,"p":[$n[0].TimeSpec,$n[0].TimeSpec]},{"a":1,"n":"start","t":8,"sn":"start","rt":$n[1].Void},{"a":1,"n":"timespec_now","t":8,"sn":"timespec_now","rt":$n[1].Void},{"a":2,"n":"Now","is":true,"t":16,"rt":$n[0].TimeSpec,"g":{"a":2,"n":"get_Now","t":8,"rt":$n[0].TimeSpec,"fg":"Now","is":true},"fn":"Now"},{"a":1,"n":"iswindows","is":true,"t":4,"rt":$n[1].Boolean,"sn":"iswindows","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"nanoseconds","t":4,"rt":$n[1].Int32,"sn":"nanoseconds","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"seconds","t":4,"rt":$n[1].Int64,"sn":"seconds"},{"a":1,"n":"start_lock","is":true,"t":4,"rt":$n[1].Object,"sn":"start_lock"},{"a":1,"n":"start_nanoseconds","is":true,"t":4,"rt":$n[1].Int32,"sn":"start_nanoseconds","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"start_seconds","is":true,"t":4,"rt":$n[1].Int64,"sn":"start_seconds"},{"a":1,"n":"start_ticks","is":true,"t":4,"rt":$n[1].Int64,"sn":"start_ticks"},{"a":1,"n":"start_time","is":true,"t":4,"rt":$n[1].DateTime,"sn":"start_time","box":function ($v) { return Bridge.box($v, System.DateTime, System.DateTime.format);}},{"a":1,"n":"started","is":true,"t":4,"rt":$n[1].Boolean,"sn":"started","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"ticks_per_second","is":true,"t":4,"rt":$n[1].Int64,"sn":"ticks_per_second"}]}; }, $n);
    $m("RobotRaconteurWeb.RobotRaconteurObjectLockFlags", function () { return {"att":257,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"CLIENT_LOCK","is":true,"t":4,"rt":$n[0].RobotRaconteurObjectLockFlags,"sn":"CLIENT_LOCK","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.RobotRaconteurObjectLockFlags, System.Enum.toStringFn(RobotRaconteurWeb.RobotRaconteurObjectLockFlags));}},{"a":2,"n":"USER_LOCK","is":true,"t":4,"rt":$n[0].RobotRaconteurObjectLockFlags,"sn":"USER_LOCK","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.RobotRaconteurObjectLockFlags, System.Enum.toStringFn(RobotRaconteurWeb.RobotRaconteurObjectLockFlags));}}]}; }, $n);
    $m("RobotRaconteurWeb.NodeDiscoveryInfo", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"NodeID","t":4,"rt":$n[0].NodeID,"sn":"NodeID"},{"a":2,"n":"NodeName","t":4,"rt":$n[1].String,"sn":"NodeName"},{"a":2,"n":"URLs","t":4,"rt":$n[3].List$1(RobotRaconteurWeb.NodeDiscoveryInfoURL),"sn":"URLs"}]}; }, $n);
    $m("RobotRaconteurWeb.NodeDiscoveryInfoURL", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"LastAnnounceTime","t":4,"rt":$n[1].DateTime,"sn":"LastAnnounceTime","box":function ($v) { return Bridge.box($v, System.DateTime, System.DateTime.format);}},{"a":2,"n":"URL","t":4,"rt":$n[1].String,"sn":"URL"}]}; }, $n);
    $m("RobotRaconteurWeb.ServiceSecurityPolicy", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[0].UserAuthenticator,$n[3].Dictionary$2(System.String,System.String)],"pi":[{"n":"Authenticator","pt":$n[0].UserAuthenticator,"ps":0},{"n":"Policies","pt":$n[3].Dictionary$2(System.String,System.String),"ps":1}],"sn":"$ctor1"},{"a":2,"n":"Authenticator","t":4,"rt":$n[0].UserAuthenticator,"sn":"Authenticator"},{"a":2,"n":"Policies","t":4,"rt":$n[3].Dictionary$2(System.String,System.String),"sn":"Policies"}]}; }, $n);
    $m("RobotRaconteurWeb.AuthenticatedUser", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].String,$n[1].Array.type(System.String)],"pi":[{"n":"username","pt":$n[1].String,"ps":0},{"n":"privileges","pt":$n[1].Array.type(System.String),"ps":1}],"sn":"ctor"},{"a":2,"n":"UpdateLastAccess","t":8,"sn":"UpdateLastAccess","rt":$n[1].Void},{"a":2,"n":"LastAccessTime","t":16,"rt":$n[1].DateTime,"g":{"a":2,"n":"get_LastAccessTime","t":8,"rt":$n[1].DateTime,"fg":"LastAccessTime","box":function ($v) { return Bridge.box($v, System.DateTime, System.DateTime.format);}},"fn":"LastAccessTime"},{"a":2,"n":"LoginTime","t":16,"rt":$n[1].DateTime,"g":{"a":2,"n":"get_LoginTime","t":8,"rt":$n[1].DateTime,"fg":"LoginTime","box":function ($v) { return Bridge.box($v, System.DateTime, System.DateTime.format);}},"fn":"LoginTime"},{"a":2,"n":"Privileges","t":16,"rt":$n[1].Array.type(System.String),"g":{"a":2,"n":"get_Privileges","t":8,"rt":$n[1].Array.type(System.String),"fg":"Privileges"},"fn":"Privileges"},{"a":2,"n":"Username","t":16,"rt":$n[1].String,"g":{"a":2,"n":"get_Username","t":8,"rt":$n[1].String,"fg":"Username"},"fn":"Username"},{"a":1,"n":"m_LastAccessTime","t":4,"rt":$n[1].DateTime,"sn":"m_LastAccessTime","box":function ($v) { return Bridge.box($v, System.DateTime, System.DateTime.format);}},{"a":1,"n":"m_LoginTime","t":4,"rt":$n[1].DateTime,"sn":"m_LoginTime","box":function ($v) { return Bridge.box($v, System.DateTime, System.DateTime.format);}},{"a":1,"n":"m_Privileges","t":4,"rt":$n[1].Array.type(System.String),"sn":"m_Privileges"},{"a":1,"n":"m_Username","t":4,"rt":$n[1].String,"sn":"m_Username"}]}; }, $n);
    $m("RobotRaconteurWeb.UserAuthenticator", function () { return {"att":161,"a":2,"m":[{"ab":true,"a":2,"n":"AuthenticateUser","t":8,"pi":[{"n":"username","pt":$n[1].String,"ps":0},{"n":"credentials","pt":$n[3].Dictionary$2(System.String,System.Object),"ps":1}],"sn":"RobotRaconteurWeb$UserAuthenticator$AuthenticateUser","rt":$n[0].AuthenticatedUser,"p":[$n[1].String,$n[3].Dictionary$2(System.String,System.Object)]}]}; }, $n);
    $m("RobotRaconteurWeb.ServiceSkel", function () { return {"att":1048705,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].String,$n[1].Object,$n[0].ServerContext],"pi":[{"n":"s","pt":$n[1].String,"ps":0},{"n":"o","pt":$n[1].Object,"ps":1},{"n":"c","pt":$n[0].ServerContext,"ps":2}],"sn":"ctor"},{"ab":true,"a":2,"n":"CallFunction","t":8,"pi":[{"n":"m","pt":$n[0].MessageEntry,"ps":0}],"sn":"CallFunction","rt":$n[5].Task$1(RobotRaconteurWeb.MessageEntry),"p":[$n[0].MessageEntry]},{"v":true,"a":2,"n":"CallGeneratorNext","t":8,"pi":[{"n":"m","pt":$n[0].MessageEntry,"ps":0},{"n":"ep","pt":$n[0].Endpoint,"ps":1}],"sn":"CallGeneratorNext","rt":$n[5].Task$1(RobotRaconteurWeb.MessageEntry),"p":[$n[0].MessageEntry,$n[0].Endpoint]},{"ab":true,"a":2,"n":"CallGetProperty","t":8,"pi":[{"n":"m","pt":$n[0].MessageEntry,"ps":0}],"sn":"CallGetProperty","rt":$n[5].Task$1(RobotRaconteurWeb.MessageEntry),"p":[$n[0].MessageEntry]},{"v":true,"a":2,"n":"CallMemoryFunction","t":8,"pi":[{"n":"m","pt":$n[0].MessageEntry,"ps":0},{"n":"e","pt":$n[0].Endpoint,"ps":1}],"sn":"CallMemoryFunction","rt":$n[5].Task$1(RobotRaconteurWeb.MessageEntry),"p":[$n[0].MessageEntry,$n[0].Endpoint]},{"v":true,"a":2,"n":"CallPipeFunction","t":8,"pi":[{"n":"m","pt":$n[0].MessageEntry,"ps":0},{"n":"e","pt":$n[0].Endpoint,"ps":1}],"sn":"CallPipeFunction","rt":$n[5].Task$1(RobotRaconteurWeb.MessageEntry),"p":[$n[0].MessageEntry,$n[0].Endpoint]},{"ab":true,"a":2,"n":"CallSetProperty","t":8,"pi":[{"n":"m","pt":$n[0].MessageEntry,"ps":0}],"sn":"CallSetProperty","rt":$n[5].Task$1(RobotRaconteurWeb.MessageEntry),"p":[$n[0].MessageEntry]},{"v":true,"a":2,"n":"CallWireFunction","t":8,"pi":[{"n":"m","pt":$n[0].MessageEntry,"ps":0},{"n":"e","pt":$n[0].Endpoint,"ps":1}],"sn":"CallWireFunction","rt":$n[5].Task$1(RobotRaconteurWeb.MessageEntry),"p":[$n[0].MessageEntry,$n[0].Endpoint]},{"v":true,"a":2,"n":"DispatchPipeMessage","t":8,"pi":[{"n":"m","pt":$n[0].MessageEntry,"ps":0},{"n":"e","pt":$n[0].Endpoint,"ps":1}],"sn":"DispatchPipeMessage","rt":$n[1].Void,"p":[$n[0].MessageEntry,$n[0].Endpoint]},{"v":true,"a":2,"n":"DispatchWireMessage","t":8,"pi":[{"n":"m","pt":$n[0].MessageEntry,"ps":0},{"n":"e","pt":$n[0].Endpoint,"ps":1}],"sn":"DispatchWireMessage","rt":$n[1].Void,"p":[$n[0].MessageEntry,$n[0].Endpoint]},{"v":true,"a":2,"n":"GetCallbackFunction","t":8,"pi":[{"n":"endpoint","pt":$n[1].UInt32,"ps":0},{"n":"membername","pt":$n[1].String,"ps":1}],"sn":"GetCallbackFunction","rt":$n[1].Object,"p":[$n[1].UInt32,$n[1].String]},{"a":3,"n":"GetNewGeneratorIndex","t":8,"sn":"GetNewGeneratorIndex","rt":$n[1].Int32,"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"GetSubObj","t":8,"pi":[{"n":"name","pt":$n[1].String,"ps":0}],"sn":"GetSubObj","rt":$n[5].Task$1(System.Object),"p":[$n[1].String]},{"ab":true,"a":2,"n":"GetSubObj","t":8,"pi":[{"n":"name","pt":$n[1].String,"ps":0},{"n":"ind","pt":$n[1].String,"ps":1}],"sn":"GetSubObj$1","rt":$n[5].Task$1(System.Object),"p":[$n[1].String,$n[1].String]},{"v":true,"a":2,"n":"InitCallbackServers","t":8,"pi":[{"n":"o","pt":$n[1].Object,"ps":0}],"sn":"InitCallbackServers","rt":$n[1].Void,"p":[$n[1].Object]},{"v":true,"a":2,"n":"InitPipeServers","t":8,"pi":[{"n":"obj1","pt":$n[1].Object,"ps":0}],"sn":"InitPipeServers","rt":$n[1].Void,"p":[$n[1].Object]},{"a":2,"n":"ObjRefChanged","t":8,"pi":[{"n":"name","pt":$n[1].String,"ps":0}],"sn":"ObjRefChanged","rt":$n[1].Void,"p":[$n[1].String]},{"v":true,"a":2,"n":"RegisterEvents","t":8,"pi":[{"n":"obj1","pt":$n[1].Object,"ps":0}],"sn":"RegisterEvents","rt":$n[1].Void,"p":[$n[1].Object]},{"ab":true,"a":2,"n":"ReleaseCastObject","t":8,"sn":"ReleaseCastObject","rt":$n[1].Void},{"a":2,"n":"ReleaseObject","t":8,"sn":"ReleaseObject","rt":$n[1].Void},{"a":2,"n":"SendEvent","t":8,"pi":[{"n":"m","pt":$n[0].MessageEntry,"ps":0}],"sn":"SendEvent","rt":$n[1].Void,"p":[$n[0].MessageEntry]},{"a":2,"n":"SendPipeMessage","t":8,"pi":[{"n":"m","pt":$n[0].MessageEntry,"ps":0},{"n":"e","pt":$n[0].Endpoint,"ps":1},{"n":"cancel","pt":$n[4].CancellationToken,"ps":2}],"sn":"SendPipeMessage","rt":$n[5].Task,"p":[$n[0].MessageEntry,$n[0].Endpoint,$n[4].CancellationToken]},{"a":2,"n":"SendWireMessage","t":8,"pi":[{"n":"m","pt":$n[0].MessageEntry,"ps":0},{"n":"e","pt":$n[0].Endpoint,"ps":1},{"n":"cancel","pt":$n[4].CancellationToken,"ps":2}],"sn":"SendWireMessage","rt":$n[5].Task,"p":[$n[0].MessageEntry,$n[0].Endpoint,$n[4].CancellationToken]},{"v":true,"a":2,"n":"UnregisterEvents","t":8,"pi":[{"n":"obj1","pt":$n[1].Object,"ps":0}],"sn":"UnregisterEvents","rt":$n[1].Void,"p":[$n[1].Object]},{"a":2,"n":"IsLocked","t":16,"rt":$n[1].Boolean,"g":{"a":2,"n":"get_IsLocked","t":8,"rt":$n[1].Boolean,"fg":"IsLocked","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"fn":"IsLocked"},{"a":2,"n":"IsMonitorLocked","t":16,"rt":$n[1].Boolean,"g":{"a":2,"n":"get_IsMonitorLocked","t":8,"rt":$n[1].Boolean,"fg":"IsMonitorLocked","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"fn":"IsMonitorLocked"},{"a":2,"n":"RRContext","t":16,"rt":$n[0].ServerContext,"g":{"a":2,"n":"get_RRContext","t":8,"rt":$n[0].ServerContext,"fg":"RRContext"},"fn":"RRContext"},{"a":2,"n":"ServicePath","t":16,"rt":$n[1].String,"g":{"a":2,"n":"get_ServicePath","t":8,"rt":$n[1].String,"fg":"ServicePath"},"fn":"ServicePath"},{"a":2,"n":"UncastObject","t":16,"rt":$n[1].Object,"g":{"a":2,"n":"get_UncastObject","t":8,"rt":$n[1].Object,"fg":"UncastObject"},"fn":"UncastObject"},{"a":3,"n":"generators","t":4,"rt":$n[3].Dictionary$2(System.Int32,RobotRaconteurWeb.GeneratorServerBase),"sn":"generators"},{"a":3,"n":"m_ServicePath","t":4,"rt":$n[1].String,"sn":"m_ServicePath"},{"a":3,"n":"m_context","t":4,"rt":$n[0].ServerContext,"sn":"m_context"},{"a":4,"n":"monitorlock","t":4,"rt":$n[0].ServerContext.MonitorObjectSkel,"sn":"monitorlock"},{"a":4,"n":"monitorlocks","t":4,"rt":$n[3].Dictionary$2(System.UInt32,RobotRaconteurWeb.ServerContext.MonitorObjectSkel),"sn":"monitorlocks"},{"a":4,"n":"objectlock","t":4,"rt":$n[0].ServerContext.ObjectLock,"sn":"objectlock"},{"a":5,"n":"rr_context","t":4,"rt":$n[0].ClientContext,"sn":"rr_context","ro":true},{"a":5,"n":"rr_node","t":4,"rt":$n[0].RobotRaconteurNode,"sn":"rr_node"},{"a":5,"n":"uncastobj","t":4,"rt":$n[1].Object,"sn":"uncastobj"}]}; }, $n);
    $m("RobotRaconteurWeb.ServiceSkelDynamic", function () { return {"att":161,"a":2,"m":[{"ab":true,"a":2,"n":"GetObjectType","t":8,"sn":"RobotRaconteurWeb$ServiceSkelDynamic$GetObjectType","rt":$n[1].String}]}; }, $n);
    $m("RobotRaconteurWeb.ServerContext", function () { return {"nested":[$n[0].ServerContext.ObjectLock,Function,$n[0].ServerContext.MonitorObjectSkel],"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[0].ServiceFactory,$n[0].RobotRaconteurNode],"pi":[{"n":"f","pt":$n[0].ServiceFactory,"ps":0},{"n":"node","dv":null,"o":true,"pt":$n[0].RobotRaconteurNode,"ps":1}],"sn":"ctor"},{"v":true,"a":2,"n":"AddClient","t":8,"pi":[{"n":"cendpoint","pt":$n[0].ServerEndpoint,"ps":0}],"sn":"AddClient","rt":$n[1].Void,"p":[$n[0].ServerEndpoint]},{"a":2,"n":"AuthenticateUser","t":8,"pi":[{"n":"username","pt":$n[1].String,"ps":0},{"n":"credentials","pt":$n[3].Dictionary$2(System.String,System.Object),"ps":1}],"sn":"AuthenticateUser","rt":$n[0].AuthenticatedUser,"p":[$n[1].String,$n[3].Dictionary$2(System.String,System.Object)]},{"a":3,"n":"CheckServiceCapability","t":8,"pi":[{"n":"m","pt":$n[0].MessageEntry,"ps":0},{"n":"c","pt":$n[0].ServerEndpoint,"ps":1}],"sn":"CheckServiceCapability","rt":$n[0].MessageEntry,"p":[$n[0].MessageEntry,$n[0].ServerEndpoint]},{"a":1,"n":"ClientLockOp","t":8,"pi":[{"n":"m","pt":$n[0].MessageEntry,"ps":0},{"n":"ret","pt":$n[0].MessageEntry,"ps":1}],"sn":"ClientLockOp","rt":$n[5].Task,"p":[$n[0].MessageEntry,$n[0].MessageEntry]},{"a":1,"n":"ClientSessionOp","t":8,"pi":[{"n":"m","pt":$n[0].MessageEntry,"ps":0},{"n":"e","pt":$n[0].ServerEndpoint,"ps":1}],"sn":"ClientSessionOp","rt":$n[5].Task$1(RobotRaconteurWeb.MessageEntry),"p":[$n[0].MessageEntry,$n[0].ServerEndpoint]},{"v":true,"a":2,"n":"Close","t":8,"sn":"Close","rt":$n[1].Void},{"v":true,"a":2,"n":"GetObjectSkel","t":8,"pi":[{"n":"servicepath","pt":$n[1].String,"ps":0}],"sn":"GetObjectSkel","rt":$n[5].Task$1(RobotRaconteurWeb.ServiceSkel),"p":[$n[1].String]},{"a":1,"n":"GetObjectSkel2","t":8,"pi":[{"n":"ppath1","pt":$n[1].String,"ps":0},{"n":"objname","pt":$n[1].String,"ps":1},{"n":"skel","pt":$n[0].ServiceSkel,"ps":2}],"sn":"GetObjectSkel2","rt":$n[5].Task$1(RobotRaconteurWeb.ServiceSkel),"p":[$n[1].String,$n[1].String,$n[0].ServiceSkel]},{"v":true,"a":2,"n":"GetObjectType","t":8,"pi":[{"n":"servicepath","pt":$n[1].String,"ps":0}],"sn":"GetObjectType","rt":$n[5].Task$1(System.String),"p":[$n[1].String]},{"v":true,"a":2,"n":"MessageReceived","t":8,"pi":[{"n":"m","pt":$n[0].Message,"ps":0},{"n":"e","pt":$n[0].ServerEndpoint,"ps":1}],"sn":"MessageReceived","rt":$n[1].Void,"p":[$n[0].Message,$n[0].ServerEndpoint]},{"v":true,"a":2,"n":"MessageReceived2","t":8,"pi":[{"n":"m","pt":$n[0].Message,"ps":0},{"n":"e","pt":$n[0].ServerEndpoint,"ps":1}],"sn":"MessageReceived2","rt":$n[5].Task,"p":[$n[0].Message,$n[0].ServerEndpoint]},{"v":true,"a":2,"n":"PackListType","t":8,"pi":[{"n":"o","pt":$n[1].Object,"ps":0}],"tpc":1,"tprm":["T"],"sn":"PackListType","rt":$n[1].Object,"p":[$n[1].Object]},{"v":true,"a":2,"n":"PackMapType","t":8,"pi":[{"n":"o","pt":$n[1].Object,"ps":0}],"tpc":2,"tprm":["K","T"],"sn":"PackMapType","rt":$n[1].Object,"p":[$n[1].Object]},{"v":true,"a":2,"n":"PackMultiDimArray","t":8,"pi":[{"n":"multiDimArray","pt":$n[0].MultiDimArray,"ps":0}],"sn":"PackMultiDimArray","rt":$n[1].Object,"p":[$n[0].MultiDimArray]},{"v":true,"a":2,"n":"PackStructure","t":8,"pi":[{"n":"s","pt":$n[1].Object,"ps":0}],"sn":"PackStructure","rt":$n[0].MessageElementStructure,"p":[$n[1].Object]},{"v":true,"a":2,"n":"PackVarType","t":8,"pi":[{"n":"p","pt":$n[1].Object,"ps":0}],"sn":"PackVarType","rt":$n[1].Object,"p":[$n[1].Object]},{"v":true,"a":2,"n":"PeriodicCleanupTask","t":8,"sn":"PeriodicCleanupTask","rt":$n[1].Void},{"a":2,"n":"ProcessCallbackRequest","t":8,"pi":[{"n":"m","pt":$n[0].MessageEntry,"ps":0},{"n":"endpointid","pt":$n[1].UInt32,"ps":1},{"n":"cancel","pt":$n[4].CancellationToken,"ps":2}],"sn":"ProcessCallbackRequest","rt":$n[5].Task$1(RobotRaconteurWeb.MessageEntry),"p":[$n[0].MessageEntry,$n[1].UInt32,$n[4].CancellationToken]},{"a":1,"n":"ProcessCallbackRequest_checkconnection","t":8,"sn":"ProcessCallbackRequest_checkconnection","rt":$n[5].Task},{"v":true,"a":2,"n":"ProcessMessageEntry","t":8,"pi":[{"n":"m","pt":$n[0].MessageEntry,"ps":0},{"n":"c","pt":$n[0].ServerEndpoint,"ps":1}],"sn":"ProcessMessageEntry","rt":$n[5].Task$1(RobotRaconteurWeb.MessageEntry),"p":[$n[0].MessageEntry,$n[0].ServerEndpoint]},{"a":2,"n":"ReleaseServicePath","t":8,"pi":[{"n":"path","pt":$n[1].String,"ps":0}],"sn":"ReleaseServicePath","rt":$n[1].Void,"p":[$n[1].String]},{"a":2,"n":"ReleaseServicePath","t":8,"pi":[{"n":"path","pt":$n[1].String,"ps":0},{"n":"endpoints","pt":$n[3].List$1(System.UInt32),"ps":1}],"sn":"ReleaseServicePath$1","rt":$n[1].Void,"p":[$n[1].String,$n[3].List$1(System.UInt32)]},{"v":true,"a":2,"n":"RemoveClient","t":8,"pi":[{"n":"cendpoint","pt":$n[0].ServerEndpoint,"ps":0}],"sn":"RemoveClient","rt":$n[1].Void,"p":[$n[0].ServerEndpoint]},{"v":true,"a":2,"n":"ReplaceObject","t":8,"pi":[{"n":"path","pt":$n[1].String,"ps":0}],"sn":"ReplaceObject","rt":$n[1].Void,"p":[$n[1].String]},{"v":true,"a":2,"n":"SendEvent","t":8,"pi":[{"n":"m","pt":$n[0].MessageEntry,"ps":0}],"sn":"SendEvent","rt":$n[5].Task,"p":[$n[0].MessageEntry]},{"v":true,"a":2,"n":"SendMessage","t":8,"pi":[{"n":"m","pt":$n[0].MessageEntry,"ps":0},{"n":"e","pt":$n[0].Endpoint,"ps":1},{"n":"cancel","pt":$n[4].CancellationToken,"ps":2}],"sn":"SendMessage","rt":$n[5].Task,"p":[$n[0].MessageEntry,$n[0].Endpoint,$n[4].CancellationToken]},{"v":true,"a":2,"n":"SetBaseObject","t":8,"pi":[{"n":"name","pt":$n[1].String,"ps":0},{"n":"o","pt":$n[1].Object,"ps":1},{"n":"policy","dv":null,"o":true,"pt":$n[0].ServiceSecurityPolicy,"ps":2}],"sn":"SetBaseObject","rt":$n[1].Void,"p":[$n[1].String,$n[1].Object,$n[0].ServiceSecurityPolicy]},{"a":3,"n":"SetSecurityPolicy","t":8,"pi":[{"n":"policy","pt":$n[0].ServiceSecurityPolicy,"ps":0}],"sn":"SetSecurityPolicy","rt":$n[1].Void,"p":[$n[0].ServiceSecurityPolicy]},{"v":true,"a":2,"n":"UnpackListType","t":8,"pi":[{"n":"o","pt":$n[1].Object,"ps":0}],"tpc":1,"tprm":["T"],"sn":"UnpackListType","rt":$n[1].Object,"p":[$n[1].Object]},{"v":true,"a":2,"n":"UnpackMapType","t":8,"pi":[{"n":"o","pt":$n[1].Object,"ps":0}],"tpc":2,"tprm":["K","T"],"sn":"UnpackMapType","rt":$n[1].Object,"p":[$n[1].Object]},{"v":true,"a":2,"n":"UnpackMultiDimArray","t":8,"pi":[{"n":"o","pt":$n[0].MessageElementMultiDimArray,"ps":0}],"sn":"UnpackMultiDimArray","rt":$n[0].MultiDimArray,"p":[$n[0].MessageElementMultiDimArray]},{"v":true,"a":2,"n":"UnpackStructure","t":8,"pi":[{"n":"l","pt":$n[0].MessageElementStructure,"ps":0}],"tpc":1,"tprm":["T"],"sn":"UnpackStructure","rt":System.Object,"p":[$n[0].MessageElementStructure]},{"v":true,"a":2,"n":"UnpackVarType","t":8,"pi":[{"n":"o","pt":$n[0].MessageElement,"ps":0}],"sn":"UnpackVarType","rt":$n[1].Object,"p":[$n[0].MessageElement]},{"a":3,"n":"check_lock","t":8,"pi":[{"n":"skel","pt":$n[0].ServiceSkel,"ps":0}],"sn":"check_lock","rt":$n[1].Void,"p":[$n[0].ServiceSkel]},{"a":3,"n":"check_monitor_lock","t":8,"pi":[{"n":"skel","pt":$n[0].ServiceSkel,"ps":0}],"sn":"check_monitor_lock","rt":$n[1].Void,"p":[$n[0].ServiceSkel]},{"a":2,"n":"CurrentServerContext","is":true,"t":16,"rt":$n[0].ServerContext,"g":{"a":2,"n":"get_CurrentServerContext","t":8,"rt":$n[0].ServerContext,"fg":"CurrentServerContext","is":true},"fn":"CurrentServerContext"},{"a":2,"n":"CurrentServicePath","is":true,"t":16,"rt":$n[1].String,"g":{"a":2,"n":"get_CurrentServicePath","t":8,"rt":$n[1].String,"fg":"CurrentServicePath","is":true},"fn":"CurrentServicePath"},{"a":2,"n":"RootObjectType","t":16,"rt":$n[1].String,"g":{"a":2,"n":"get_RootObjectType","t":8,"rt":$n[1].String,"fg":"RootObjectType"},"fn":"RootObjectType"},{"a":2,"n":"ServiceDef","t":16,"rt":$n[0].ServiceFactory,"g":{"a":2,"n":"get_ServiceDef","t":8,"rt":$n[0].ServiceFactory,"fg":"ServiceDef"},"fn":"ServiceDef"},{"a":2,"n":"ServiceName","t":16,"rt":$n[1].String,"g":{"a":2,"n":"get_ServiceName","t":8,"rt":$n[1].String,"fg":"ServiceName"},"fn":"ServiceName"},{"a":1,"n":"AllowObjectLock","t":4,"rt":$n[1].Boolean,"sn":"AllowObjectLock","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"Attributes","t":4,"rt":$n[3].Dictionary$2(System.String,System.Object),"sn":"Attributes"},{"a":1,"n":"ClientLockOp_lockobj","t":4,"rt":$n[1].Object,"sn":"ClientLockOp_lockobj"},{"a":1,"n":"ProcessCallbackRequest_checkconnection_current","t":4,"rt":$n[5].Task,"sn":"ProcessCallbackRequest_checkconnection_current"},{"a":1,"n":"RequireValidUser","t":4,"rt":$n[1].Boolean,"sn":"RequireValidUser","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":3,"n":"active_object_locks","t":4,"rt":$n[3].Dictionary$2(System.String,RobotRaconteurWeb.ServerContext.ObjectLock),"sn":"active_object_locks"},{"a":1,"n":"base_object_set","t":4,"rt":$n[1].Boolean,"sn":"base_object_set","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":3,"n":"cancel_source","t":4,"rt":$n[4].CancellationTokenSource,"sn":"cancel_source"},{"a":3,"n":"client_endpoints","t":4,"rt":$n[3].Dictionary$2(System.UInt32,RobotRaconteurWeb.ServerEndpoint),"sn":"client_endpoints"},{"a":1,"n":"get_sub_obj_tasks","t":4,"rt":$n[3].Dictionary$2(System.String,System.Threading.Tasks.Task$1(RobotRaconteurWeb.ServiceSkel)),"sn":"get_sub_obj_tasks","ro":true},{"a":1,"n":"m_CurrentServerContext","is":true,"t":4,"rt":$n[0].ServerContext,"sn":"m_CurrentServerContext"},{"a":1,"n":"m_CurrentServicePath","is":true,"t":4,"rt":$n[1].String,"sn":"m_CurrentServicePath"},{"a":3,"n":"m_RootObjectType","t":4,"rt":$n[1].String,"sn":"m_RootObjectType"},{"a":3,"n":"m_ServiceDef","t":4,"rt":$n[0].ServiceFactory,"sn":"m_ServiceDef"},{"a":3,"n":"m_ServiceName","t":4,"rt":$n[1].String,"sn":"m_ServiceName"},{"a":5,"n":"node","t":4,"rt":$n[0].RobotRaconteurNode,"sn":"node","ro":true},{"a":1,"n":"rec_sync","t":4,"rt":$n[1].Object,"sn":"rec_sync"},{"a":1,"n":"rec_wait","t":4,"rt":$n[3].Dictionary$2(System.UInt32,System.Tuple$2(System.Threading.Tasks.TaskCompletionSource,RobotRaconteurWeb.ServerEndpoint)),"sn":"rec_wait"},{"a":1,"n":"request_number","t":4,"rt":$n[1].UInt32,"sn":"request_number","box":function ($v) { return Bridge.box($v, System.UInt32);}},{"a":1,"n":"security_policies","t":4,"rt":$n[3].Dictionary$2(System.String,System.String),"sn":"security_policies"},{"a":3,"n":"skels","t":4,"rt":$n[3].Dictionary$2(System.String,RobotRaconteurWeb.ServiceSkel),"sn":"skels"},{"a":1,"n":"user_authenticator","t":4,"rt":$n[0].UserAuthenticator,"sn":"user_authenticator"},{"a":2,"n":"ServerServiceListener","t":2,"ad":{"a":2,"n":"add_ServerServiceListener","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"addServerServiceListener","rt":$n[1].Void,"p":[Function]},"r":{"a":2,"n":"remove_ServerServiceListener","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"removeServerServiceListener","rt":$n[1].Void,"p":[Function]}}]}; }, $n);
    $m("RobotRaconteurWeb.ServerContext.ObjectLock", function () { return {"td":$n[0].ServerContext,"att":1048578,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].String,$n[0].ServiceSkel,$n[1].UInt32],"pi":[{"n":"username","pt":$n[1].String,"ps":0},{"n":"root_skel","pt":$n[0].ServiceSkel,"ps":1},{"n":"endpoint","dv":0,"o":true,"pt":$n[1].UInt32,"ps":2}],"sn":"ctor"},{"a":2,"n":"AddSkel","t":8,"pi":[{"n":"skel","pt":$n[0].ServiceSkel,"ps":0}],"sn":"AddSkel","rt":$n[1].Void,"p":[$n[0].ServiceSkel]},{"a":2,"n":"ReleaseLock","t":8,"sn":"ReleaseLock","rt":$n[1].Void},{"a":2,"n":"ReleaseSkel","t":8,"pi":[{"n":"skel","pt":$n[0].ServiceSkel,"ps":0}],"sn":"ReleaseSkel","rt":$n[1].Void,"p":[$n[0].ServiceSkel]},{"a":2,"n":"Endpoint","t":16,"rt":$n[1].UInt32,"g":{"a":2,"n":"get_Endpoint","t":8,"rt":$n[1].UInt32,"fg":"Endpoint","box":function ($v) { return Bridge.box($v, System.UInt32);}},"fn":"Endpoint"},{"a":2,"n":"IsLocked","t":16,"rt":$n[1].Boolean,"g":{"a":2,"n":"get_IsLocked","t":8,"rt":$n[1].Boolean,"fg":"IsLocked","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"fn":"IsLocked"},{"a":2,"n":"RootServicePath","t":16,"rt":$n[1].String,"g":{"a":2,"n":"get_RootServicePath","t":8,"rt":$n[1].String,"fg":"RootServicePath"},"fn":"RootServicePath"},{"a":2,"n":"Username","t":16,"rt":$n[1].String,"g":{"a":2,"n":"get_Username","t":8,"rt":$n[1].String,"fg":"Username"},"fn":"Username"},{"a":1,"n":"m_Endpoint","t":4,"rt":$n[1].UInt32,"sn":"m_Endpoint","box":function ($v) { return Bridge.box($v, System.UInt32);}},{"a":1,"n":"m_Locked","t":4,"rt":$n[1].Boolean,"sn":"m_Locked","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"m_RootServicePath","t":4,"rt":$n[1].String,"sn":"m_RootServicePath"},{"a":1,"n":"m_RootSkel","t":4,"rt":$n[0].ServiceSkel,"sn":"m_RootSkel"},{"a":1,"n":"m_Username","t":4,"rt":$n[1].String,"sn":"m_Username"},{"a":1,"n":"skels","t":4,"rt":$n[3].List$1(RobotRaconteurWeb.ServiceSkel),"sn":"skels"}]}; }, $n);
    $m("RobotRaconteurWeb.ServerContext.MonitorObjectSkel", function () { return {"td":$n[0].ServerContext,"att":1048578,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[0].ServiceSkel],"pi":[{"n":"skel","pt":$n[0].ServiceSkel,"ps":0}],"sn":"ctor"},{"a":2,"n":"MonitorContinueEnter","t":8,"pi":[{"n":"localendpoint","pt":$n[1].UInt32,"ps":0}],"sn":"MonitorContinueEnter","rt":$n[5].Task$1(System.String),"p":[$n[1].UInt32]},{"a":2,"n":"MonitorEnter","t":8,"pi":[{"n":"local_endpoint","pt":$n[1].UInt32,"ps":0},{"n":"timeout","pt":$n[1].Int32,"ps":1}],"sn":"MonitorEnter","rt":$n[5].Task$1(System.String),"p":[$n[1].UInt32,$n[1].Int32]},{"a":2,"n":"MonitorExit","t":8,"pi":[{"n":"local_endpoint","pt":$n[1].UInt32,"ps":0}],"sn":"MonitorExit","rt":$n[5].Task$1(System.String),"p":[$n[1].UInt32]},{"a":2,"n":"MonitorRefresh","t":8,"pi":[{"n":"localendpoint","pt":$n[1].UInt32,"ps":0}],"sn":"MonitorRefresh","rt":$n[5].Task,"p":[$n[1].UInt32]},{"a":1,"n":"thread_func","t":8,"sn":"thread_func","rt":$n[5].Task},{"a":2,"n":"IsLocked","t":16,"rt":$n[1].Boolean,"g":{"a":2,"n":"get_IsLocked","t":8,"rt":$n[1].Boolean,"fg":"IsLocked","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"fn":"IsLocked"},{"a":2,"n":"LocalEndpoint","t":16,"rt":$n[1].UInt32,"g":{"a":2,"n":"get_LocalEndpoint","t":8,"rt":$n[1].UInt32,"fg":"LocalEndpoint","box":function ($v) { return Bridge.box($v, System.UInt32);}},"fn":"LocalEndpoint"},{"a":1,"n":"last_refreshed","t":4,"rt":$n[1].DateTime,"sn":"last_refreshed","box":function ($v) { return Bridge.box($v, System.DateTime, System.DateTime.format);}},{"a":1,"n":"local_endpoint","t":4,"rt":$n[1].UInt32,"sn":"local_endpoint","box":function ($v) { return Bridge.box($v, System.UInt32);}},{"a":1,"n":"maintain_lock","t":4,"rt":$n[1].Boolean,"sn":"maintain_lock","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"monitor_acquire_exception","t":4,"rt":$n[1].Exception,"sn":"monitor_acquire_exception"},{"a":1,"n":"monitor_acquired","t":4,"rt":$n[1].Boolean,"sn":"monitor_acquired","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"monitor_thread_event","t":4,"rt":$n[5].TaskCompletionSource,"sn":"monitor_thread_event"},{"a":1,"n":"obj","t":4,"rt":$n[0].IRobotRaconteurMonitorObject,"sn":"obj"},{"a":1,"n":"skel","t":4,"rt":$n[0].ServiceSkel,"sn":"skel"},{"a":1,"n":"timeout","t":4,"rt":$n[1].Int32,"sn":"timeout","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"wait_event","t":4,"rt":$n[5].TaskCompletionSource,"sn":"wait_event"},{"a":1,"n":"wait_thread","t":4,"rt":$n[5].Task,"sn":"wait_thread"}]}; }, $n);
    $m("RobotRaconteurWeb.ServerServiceListenerEventType", function () { return {"att":257,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"ClientConnected","is":true,"t":4,"rt":$n[0].ServerServiceListenerEventType,"sn":"ClientConnected","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.ServerServiceListenerEventType, System.Enum.toStringFn(RobotRaconteurWeb.ServerServiceListenerEventType));}},{"a":2,"n":"ClientDisconnected","is":true,"t":4,"rt":$n[0].ServerServiceListenerEventType,"sn":"ClientDisconnected","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.ServerServiceListenerEventType, System.Enum.toStringFn(RobotRaconteurWeb.ServerServiceListenerEventType));}},{"a":2,"n":"ServiceClosed","is":true,"t":4,"rt":$n[0].ServerServiceListenerEventType,"sn":"ServiceClosed","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.ServerServiceListenerEventType, System.Enum.toStringFn(RobotRaconteurWeb.ServerServiceListenerEventType));}}]}; }, $n);
    $m("RobotRaconteurWeb.ServerEndpoint", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[0].ServerContext,$n[0].RobotRaconteurNode],"pi":[{"n":"service","pt":$n[0].ServerContext,"ps":0},{"n":"node","pt":$n[0].RobotRaconteurNode,"ps":1}],"sn":"ctor"},{"a":2,"n":"AuthenticateUser","t":8,"pi":[{"n":"username","pt":$n[1].String,"ps":0},{"n":"credentials","pt":$n[3].Dictionary$2(System.String,System.Object),"ps":1}],"sn":"AuthenticateUser","rt":$n[1].Void,"p":[$n[1].String,$n[3].Dictionary$2(System.String,System.Object)]},{"a":2,"n":"LogoutUser","t":8,"sn":"LogoutUser","rt":$n[1].Void},{"ov":true,"a":2,"n":"MessageReceived","t":8,"pi":[{"n":"m","pt":$n[0].Message,"ps":0}],"sn":"MessageReceived","rt":$n[1].Void,"p":[$n[0].Message]},{"a":2,"n":"PeriodicCleanupTask","t":8,"sn":"PeriodicCleanupTask","rt":$n[1].Void},{"a":2,"n":"AuthenticatedUsername","t":16,"rt":$n[1].String,"g":{"a":2,"n":"get_AuthenticatedUsername","t":8,"rt":$n[1].String,"fg":"AuthenticatedUsername"},"fn":"AuthenticatedUsername"},{"a":2,"n":"CurrentAuthenticatedUser","is":true,"t":16,"rt":$n[0].AuthenticatedUser,"g":{"a":2,"n":"get_CurrentAuthenticatedUser","t":8,"rt":$n[0].AuthenticatedUser,"fg":"CurrentAuthenticatedUser","is":true},"fn":"CurrentAuthenticatedUser"},{"a":2,"n":"CurrentEndpoint","is":true,"t":16,"rt":$n[0].ServerEndpoint,"g":{"a":2,"n":"get_CurrentEndpoint","t":8,"rt":$n[0].ServerEndpoint,"fg":"CurrentEndpoint","is":true},"fn":"CurrentEndpoint"},{"a":1,"n":"endpoint_authenticated_user","t":4,"rt":$n[0].AuthenticatedUser,"sn":"endpoint_authenticated_user"},{"a":1,"n":"m_CurrentAuthenticatedUser","is":true,"t":4,"rt":$n[0].AuthenticatedUser,"sn":"m_CurrentAuthenticatedUser"},{"a":1,"n":"m_CurrentEndpoint","is":true,"t":4,"rt":$n[0].ServerEndpoint,"sn":"m_CurrentEndpoint"},{"a":5,"n":"service","t":4,"rt":$n[0].ServerContext,"sn":"service","ro":true}]}; }, $n);
    $m("RobotRaconteurWeb.IRobotRaconteurServiceObject", function () { return {"att":161,"a":2,"m":[{"ab":true,"a":2,"n":"RobotRaconteurObjRefChanged","t":2,"ad":{"ab":true,"a":2,"n":"add_RobotRaconteurObjRefChanged","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"RobotRaconteurWeb$IRobotRaconteurServiceObject$addRobotRaconteurObjRefChanged","rt":$n[1].Void,"p":[Function]},"r":{"ab":true,"a":2,"n":"remove_RobotRaconteurObjRefChanged","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"RobotRaconteurWeb$IRobotRaconteurServiceObject$removeRobotRaconteurObjRefChanged","rt":$n[1].Void,"p":[Function]}}]}; }, $n);
    $m("RobotRaconteurWeb.RobotRaconteurServiceObjectInterface", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].String],"pi":[{"n":"rrtype","pt":$n[1].String,"ps":0}],"sn":"ctor"},{"a":2,"n":"RRType","t":16,"rt":$n[1].String,"g":{"a":2,"n":"get_RRType","t":8,"rt":$n[1].String,"fg":"RRType"},"fn":"RRType"},{"a":1,"n":"rrtype","t":4,"rt":$n[1].String,"sn":"rrtype"}]}; }, $n);
    $m("RobotRaconteurWeb.RobotRaconteurServiceStruct", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].String],"pi":[{"n":"rrtype","pt":$n[1].String,"ps":0}],"sn":"ctor"},{"a":2,"n":"RRType","t":16,"rt":$n[1].String,"g":{"a":2,"n":"get_RRType","t":8,"rt":$n[1].String,"fg":"RRType"},"fn":"RRType"},{"a":1,"n":"rrtype","t":4,"rt":$n[1].String,"sn":"rrtype"}]}; }, $n);
    $m("RobotRaconteurWeb.IRobotRaconteurMonitorObject", function () { return {"att":161,"a":2,"m":[{"ab":true,"a":2,"n":"RobotRaconteurMonitorEnter","t":8,"sn":"RobotRaconteurWeb$IRobotRaconteurMonitorObject$RobotRaconteurMonitorEnter","rt":$n[5].Task$1(System.IDisposable)},{"ab":true,"a":2,"n":"RobotRaconteurMonitorEnter","t":8,"pi":[{"n":"timeout","pt":$n[1].Int32,"ps":0}],"sn":"RobotRaconteurWeb$IRobotRaconteurMonitorObject$RobotRaconteurMonitorEnter$1","rt":$n[5].Task$1(System.IDisposable),"p":[$n[1].Int32]}]}; }, $n);
    $m("RobotRaconteurWeb.RobotRaconteurVersion", function () { return {"att":1048841,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[1].String],"pi":[{"n":"v","pt":$n[1].String,"ps":0}],"sn":"$ctor1"},{"a":2,"n":".ctor","t":1,"p":[$n[1].UInt32,$n[1].UInt32,$n[1].UInt32,$n[1].UInt32],"pi":[{"n":"major","pt":$n[1].UInt32,"ps":0},{"n":"minor","pt":$n[1].UInt32,"ps":1},{"n":"patch","dv":0,"o":true,"pt":$n[1].UInt32,"ps":2},{"n":"tweak","dv":0,"o":true,"pt":$n[1].UInt32,"ps":3}],"sn":"$ctor2"},{"a":2,"n":"FromString","t":8,"pi":[{"n":"v","pt":$n[1].String,"ps":0}],"sn":"FromString","rt":$n[1].Void,"p":[$n[1].String]},{"ov":true,"a":2,"n":"ToString","t":8,"sn":"toString","rt":$n[1].String},{"a":2,"n":"op_Equality","is":true,"t":8,"pi":[{"n":"v1","pt":$n[0].RobotRaconteurVersion,"ps":0},{"n":"v2","pt":$n[0].RobotRaconteurVersion,"ps":1}],"sn":"op_Equality","rt":$n[1].Boolean,"p":[$n[0].RobotRaconteurVersion,$n[0].RobotRaconteurVersion],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"op_Explicit","is":true,"t":8,"pi":[{"n":"v1","pt":$n[0].RobotRaconteurVersion,"ps":0}],"sn":"op_Explicit","rt":$n[1].Boolean,"p":[$n[0].RobotRaconteurVersion],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"op_GreaterThan","is":true,"t":8,"pi":[{"n":"v1","pt":$n[0].RobotRaconteurVersion,"ps":0},{"n":"v2","pt":$n[0].RobotRaconteurVersion,"ps":1}],"sn":"op_GreaterThan","rt":$n[1].Boolean,"p":[$n[0].RobotRaconteurVersion,$n[0].RobotRaconteurVersion],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"op_GreaterThanOrEqual","is":true,"t":8,"pi":[{"n":"v1","pt":$n[0].RobotRaconteurVersion,"ps":0},{"n":"v2","pt":$n[0].RobotRaconteurVersion,"ps":1}],"sn":"op_GreaterThanOrEqual","rt":$n[1].Boolean,"p":[$n[0].RobotRaconteurVersion,$n[0].RobotRaconteurVersion],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"op_Inequality","is":true,"t":8,"pi":[{"n":"v1","pt":$n[0].RobotRaconteurVersion,"ps":0},{"n":"v2","pt":$n[0].RobotRaconteurVersion,"ps":1}],"sn":"op_Inequality","rt":$n[1].Boolean,"p":[$n[0].RobotRaconteurVersion,$n[0].RobotRaconteurVersion],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"op_LessThan","is":true,"t":8,"pi":[{"n":"v1","pt":$n[0].RobotRaconteurVersion,"ps":0},{"n":"v2","pt":$n[0].RobotRaconteurVersion,"ps":1}],"sn":"op_LessThan","rt":$n[1].Boolean,"p":[$n[0].RobotRaconteurVersion,$n[0].RobotRaconteurVersion],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"op_LessThanOrEqual","is":true,"t":8,"pi":[{"n":"v1","pt":$n[0].RobotRaconteurVersion,"ps":0},{"n":"v2","pt":$n[0].RobotRaconteurVersion,"ps":1}],"sn":"op_LessThanOrEqual","rt":$n[1].Boolean,"p":[$n[0].RobotRaconteurVersion,$n[0].RobotRaconteurVersion],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"major","t":4,"rt":$n[1].UInt32,"sn":"major","box":function ($v) { return Bridge.box($v, System.UInt32);}},{"a":2,"n":"minor","t":4,"rt":$n[1].UInt32,"sn":"minor","box":function ($v) { return Bridge.box($v, System.UInt32);}},{"a":2,"n":"patch","t":4,"rt":$n[1].UInt32,"sn":"patch","box":function ($v) { return Bridge.box($v, System.UInt32);}},{"a":2,"n":"tweak","t":4,"rt":$n[1].UInt32,"sn":"tweak","box":function ($v) { return Bridge.box($v, System.UInt32);}}]}; }, $n);
    $m("RobotRaconteurWeb.ServiceDefinition", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"CheckVersion","t":8,"pi":[{"n":"ver","dv":null,"o":true,"pt":$n[0].RobotRaconteurVersion,"ps":0}],"sn":"CheckVersion","rt":$n[1].Void,"p":[$n[0].RobotRaconteurVersion]},{"a":2,"n":"FromReader","t":8,"pi":[{"n":"is_","pt":$n[7].TextReader,"ps":0}],"sn":"FromReader","rt":$n[1].Void,"p":[$n[7].TextReader]},{"a":2,"n":"FromReader","t":8,"pi":[{"n":"is_","pt":$n[7].TextReader,"ps":0},{"n":"warnings","ref":true,"pt":$n[3].List$1(System.Exception),"ps":1}],"sn":"FromReader$1","rt":$n[1].Void,"p":[$n[7].TextReader,$n[3].List$1(System.Exception)]},{"a":2,"n":"FromString","t":8,"pi":[{"n":"s","pt":$n[1].String,"ps":0}],"sn":"FromString","rt":$n[1].Void,"p":[$n[1].String]},{"a":2,"n":"FromString","t":8,"pi":[{"n":"s","pt":$n[1].String,"ps":0},{"n":"warnings","ref":true,"pt":$n[3].List$1(System.Exception),"ps":1}],"sn":"FromString$1","rt":$n[1].Void,"p":[$n[1].String,$n[3].List$1(System.Exception)]},{"a":2,"n":"Reset","t":8,"sn":"Reset","rt":$n[1].Void},{"ov":true,"a":2,"n":"ToString","t":8,"sn":"toString","rt":$n[1].String},{"a":2,"n":"ToWriter","t":8,"pi":[{"n":"o","pt":$n[7].TextWriter,"ps":0}],"sn":"ToWriter","rt":$n[1].Void,"p":[$n[7].TextWriter]},{"a":2,"n":"Constants","t":4,"rt":$n[3].Dictionary$2(System.String,RobotRaconteurWeb.ConstantDefinition),"sn":"Constants"},{"a":2,"n":"Enums","t":4,"rt":$n[3].Dictionary$2(System.String,RobotRaconteurWeb.EnumDefinition),"sn":"Enums"},{"a":2,"n":"Exceptions","t":4,"rt":$n[3].List$1(System.String),"sn":"Exceptions"},{"a":2,"n":"Imports","t":4,"rt":$n[3].List$1(System.String),"sn":"Imports"},{"a":2,"n":"Name","t":4,"rt":$n[1].String,"sn":"Name"},{"a":2,"n":"NamedArrays","t":4,"rt":$n[3].Dictionary$2(System.String,RobotRaconteurWeb.ServiceEntryDefinition),"sn":"NamedArrays"},{"a":2,"n":"Objects","t":4,"rt":$n[3].Dictionary$2(System.String,RobotRaconteurWeb.ServiceEntryDefinition),"sn":"Objects"},{"a":2,"n":"Options","t":4,"rt":$n[3].List$1(System.String),"sn":"Options"},{"a":2,"n":"Pods","t":4,"rt":$n[3].Dictionary$2(System.String,RobotRaconteurWeb.ServiceEntryDefinition),"sn":"Pods"},{"a":2,"n":"StdVer","t":4,"rt":$n[0].RobotRaconteurVersion,"sn":"StdVer"},{"a":2,"n":"Structures","t":4,"rt":$n[3].Dictionary$2(System.String,RobotRaconteurWeb.ServiceEntryDefinition),"sn":"Structures"},{"a":2,"n":"Using","t":4,"rt":$n[3].List$1(RobotRaconteurWeb.UsingDefinition),"sn":"Using"}]}; }, $n);
    $m("RobotRaconteurWeb.NamedTypeDefinition", function () { return {"att":1048705,"a":2,"m":[{"a":3,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"ab":true,"a":2,"n":"ResolveQualifiedName","t":8,"sn":"ResolveQualifiedName","rt":$n[1].String},{"ab":true,"a":2,"n":"RRDataType","t":16,"rt":$n[0].DataTypes,"g":{"ab":true,"a":2,"n":"get_RRDataType","t":8,"rt":$n[0].DataTypes,"fg":"RRDataType","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.DataTypes, System.Enum.toStringFn(RobotRaconteurWeb.DataTypes));}},"fn":"RRDataType"},{"a":2,"n":"Name","t":4,"rt":$n[1].String,"sn":"Name"},{"a":1,"backing":true,"n":"<RRDataType>k__BackingField","t":4,"rt":$n[0].DataTypes,"sn":"RRDataType","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.DataTypes, System.Enum.toStringFn(RobotRaconteurWeb.DataTypes));}}]}; }, $n);
    $m("RobotRaconteurWeb.ServiceEntryDefinition", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[0].ServiceDefinition],"pi":[{"n":"def","pt":$n[0].ServiceDefinition,"ps":0}],"sn":"ctor"},{"a":2,"n":"FromStream","t":8,"pi":[{"n":"s","pt":$n[7].TextReader,"ps":0}],"sn":"FromStream","rt":$n[1].Void,"p":[$n[7].TextReader]},{"a":2,"n":"FromStream","t":8,"pi":[{"n":"s","pt":$n[7].TextReader,"ps":0},{"n":"startline","pt":$n[1].UInt32,"ps":1}],"sn":"FromStream$1","rt":$n[1].Void,"p":[$n[7].TextReader,$n[1].UInt32]},{"a":2,"n":"FromStream","t":8,"pi":[{"n":"s","pt":$n[7].TextReader,"ps":0},{"n":"startline","pt":$n[1].UInt32,"ps":1},{"n":"warnings","ref":true,"pt":$n[3].List$1(System.Exception),"ps":2}],"sn":"FromStream$2","rt":$n[1].Void,"p":[$n[7].TextReader,$n[1].UInt32,$n[3].List$1(System.Exception)]},{"a":2,"n":"FromString","t":8,"pi":[{"n":"s","pt":$n[1].String,"ps":0}],"sn":"FromString","rt":$n[1].Void,"p":[$n[1].String]},{"a":2,"n":"FromString","t":8,"pi":[{"n":"s","pt":$n[1].String,"ps":0},{"n":"startline","pt":$n[1].UInt32,"ps":1}],"sn":"FromString$1","rt":$n[1].Void,"p":[$n[1].String,$n[1].UInt32]},{"a":2,"n":"FromString","t":8,"pi":[{"n":"s","pt":$n[1].String,"ps":0},{"n":"startline","pt":$n[1].UInt32,"ps":1},{"n":"warnings","ref":true,"pt":$n[3].List$1(System.Exception),"ps":2}],"sn":"FromString$2","rt":$n[1].Void,"p":[$n[1].String,$n[1].UInt32,$n[3].List$1(System.Exception)]},{"a":4,"n":"QualifyTypeWithUsing","t":8,"pi":[{"n":"s","pt":$n[1].String,"ps":0}],"sn":"QualifyTypeWithUsing","rt":$n[1].String,"p":[$n[1].String]},{"a":2,"n":"Reset","t":8,"sn":"Reset","rt":$n[1].Void},{"ov":true,"a":2,"n":"ResolveQualifiedName","t":8,"sn":"ResolveQualifiedName","rt":$n[1].String},{"ov":true,"a":2,"n":"ToString","t":8,"sn":"toString","rt":$n[1].String},{"a":2,"n":"ToWriter","t":8,"pi":[{"n":"o","pt":$n[7].TextWriter,"ps":0}],"sn":"ToWriter","rt":$n[1].Void,"p":[$n[7].TextWriter]},{"a":4,"n":"UnqualifyTypeWithUsing","t":8,"pi":[{"n":"s","pt":$n[1].String,"ps":0}],"sn":"UnqualifyTypeWithUsing","rt":$n[1].String,"p":[$n[1].String]},{"ov":true,"a":2,"n":"RRDataType","t":16,"rt":$n[0].DataTypes,"g":{"ov":true,"a":2,"n":"get_RRDataType","t":8,"rt":$n[0].DataTypes,"fg":"RRDataType","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.DataTypes, System.Enum.toStringFn(RobotRaconteurWeb.DataTypes));}},"fn":"RRDataType"},{"a":2,"n":"Constants","t":4,"rt":$n[3].Dictionary$2(System.String,RobotRaconteurWeb.ConstantDefinition),"sn":"Constants"},{"a":2,"n":"EntryType","t":4,"rt":$n[0].DataTypes,"sn":"EntryType","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.DataTypes, System.Enum.toStringFn(RobotRaconteurWeb.DataTypes));}},{"a":2,"n":"Implements","t":4,"rt":$n[3].List$1(System.String),"sn":"Implements"},{"a":2,"n":"IsStructure","t":4,"rt":$n[1].Boolean,"sn":"IsStructure","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"Members","t":4,"rt":$n[3].Dictionary$2(System.String,RobotRaconteurWeb.MemberDefinition),"sn":"Members"},{"a":2,"n":"Options","t":4,"rt":$n[3].List$1(System.String),"sn":"Options"},{"a":2,"n":"ServiceDefinition","t":4,"rt":$n[0].ServiceDefinition,"sn":"ServiceDefinition"}]}; }, $n);
    $m("RobotRaconteurWeb.MemberDefinition_Direction", function () { return {"att":257,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"both","is":true,"t":4,"rt":$n[0].MemberDefinition_Direction,"sn":"both","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MemberDefinition_Direction, System.Enum.toStringFn(RobotRaconteurWeb.MemberDefinition_Direction));}},{"a":2,"n":"readonly_","is":true,"t":4,"rt":$n[0].MemberDefinition_Direction,"sn":"readonly_","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MemberDefinition_Direction, System.Enum.toStringFn(RobotRaconteurWeb.MemberDefinition_Direction));}},{"a":2,"n":"writeonly","is":true,"t":4,"rt":$n[0].MemberDefinition_Direction,"sn":"writeonly","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MemberDefinition_Direction, System.Enum.toStringFn(RobotRaconteurWeb.MemberDefinition_Direction));}}]}; }, $n);
    $m("RobotRaconteurWeb.MemberDefinition", function () { return {"nested":[$n[0].MemberDefinition.MemberDefiniton_ParseResults],"att":1048705,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[0].ServiceEntryDefinition],"pi":[{"n":"ServiceEntry","pt":$n[0].ServiceEntryDefinition,"ps":0}],"sn":"ctor"},{"a":4,"n":"MemberDefinition_FromStringFormat1","is":true,"t":8,"pi":[{"n":"s1","pt":$n[1].String,"ps":0},{"n":"member_types","pt":$n[3].List$1(System.String),"ps":1},{"n":"def","pt":$n[0].MemberDefinition,"ps":2},{"n":"type","ref":true,"pt":$n[0].TypeDefinition,"ps":3}],"sn":"MemberDefinition_FromStringFormat1","rt":$n[1].Void,"p":[$n[1].String,$n[3].List$1(System.String),$n[0].MemberDefinition,$n[0].TypeDefinition]},{"a":4,"n":"MemberDefinition_FromStringFormat1","is":true,"t":8,"pi":[{"n":"s1","pt":$n[1].String,"ps":0},{"n":"member_type","pt":$n[1].String,"ps":1},{"n":"def","pt":$n[0].MemberDefinition,"ps":2},{"n":"type","ref":true,"pt":$n[0].TypeDefinition,"ps":3}],"sn":"MemberDefinition_FromStringFormat1$1","rt":$n[1].Void,"p":[$n[1].String,$n[1].String,$n[0].MemberDefinition,$n[0].TypeDefinition]},{"a":4,"n":"MemberDefinition_FromStringFormat2","is":true,"t":8,"pi":[{"n":"s1","pt":$n[1].String,"ps":0},{"n":"member_type","pt":$n[1].String,"ps":1},{"n":"def","pt":$n[0].MemberDefinition,"ps":2},{"n":"return_type","ref":true,"pt":$n[0].TypeDefinition,"ps":3},{"n":"params_","ref":true,"pt":$n[3].List$1(RobotRaconteurWeb.TypeDefinition),"ps":4}],"sn":"MemberDefinition_FromStringFormat2","rt":$n[1].Void,"p":[$n[1].String,$n[1].String,$n[0].MemberDefinition,$n[0].TypeDefinition,$n[3].List$1(RobotRaconteurWeb.TypeDefinition)]},{"a":4,"n":"MemberDefinition_FromStringFormat3","is":true,"t":8,"pi":[{"n":"s1","pt":$n[1].String,"ps":0},{"n":"member_type","pt":$n[1].String,"ps":1},{"n":"def","pt":$n[0].MemberDefinition,"ps":2},{"n":"params_","ref":true,"pt":$n[3].List$1(RobotRaconteurWeb.TypeDefinition),"ps":3}],"sn":"MemberDefinition_FromStringFormat3","rt":$n[1].Void,"p":[$n[1].String,$n[1].String,$n[0].MemberDefinition,$n[3].List$1(RobotRaconteurWeb.TypeDefinition)]},{"a":4,"n":"MemberDefinition_FromStringFormat_common","is":true,"t":8,"pi":[{"n":"parse_res","ref":true,"pt":$n[0].MemberDefinition.MemberDefiniton_ParseResults,"ps":0},{"n":"s1","pt":$n[1].String,"ps":1},{"n":"member_types","pt":$n[3].List$1(System.String),"ps":2},{"n":"def","pt":$n[0].MemberDefinition,"ps":3}],"sn":"MemberDefinition_FromStringFormat_common","rt":$n[1].Void,"p":[$n[0].MemberDefinition.MemberDefiniton_ParseResults,$n[1].String,$n[3].List$1(System.String),$n[0].MemberDefinition]},{"a":4,"n":"MemberDefinition_GetDirection","is":true,"t":8,"pi":[{"n":"modifiers","pt":$n[3].List$1(System.String),"ps":0}],"sn":"MemberDefinition_GetDirection","rt":$n[0].MemberDefinition_Direction,"p":[$n[3].List$1(System.String)],"box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MemberDefinition_Direction, System.Enum.toStringFn(RobotRaconteurWeb.MemberDefinition_Direction));}},{"a":4,"n":"MemberDefinition_ModifiersToString","is":true,"t":8,"pi":[{"n":"modifiers","pt":$n[3].List$1(System.String),"ps":0}],"sn":"MemberDefinition_ModifiersToString","rt":$n[1].String,"p":[$n[3].List$1(System.String)]},{"a":4,"n":"MemberDefinition_ParamatersFromStrings","is":true,"t":8,"pi":[{"n":"s","pt":$n[3].List$1(System.String),"ps":0},{"n":"params_","ref":true,"pt":$n[3].List$1(RobotRaconteurWeb.TypeDefinition),"ps":1},{"n":"def","pt":$n[0].MemberDefinition,"ps":2}],"sn":"MemberDefinition_ParamatersFromStrings","rt":$n[1].Void,"p":[$n[3].List$1(System.String),$n[3].List$1(RobotRaconteurWeb.TypeDefinition),$n[0].MemberDefinition]},{"a":4,"n":"MemberDefinition_ParametersToString","is":true,"t":8,"pi":[{"n":"params_","pt":$n[3].List$1(RobotRaconteurWeb.TypeDefinition),"ps":0}],"sn":"MemberDefinition_ParametersToString","rt":$n[1].String,"p":[$n[3].List$1(RobotRaconteurWeb.TypeDefinition)]},{"a":4,"n":"MemberDefinition_ParseCommaList","is":true,"t":8,"pi":[{"n":"r","pt":$n[8].Regex,"ps":0},{"n":"s","pt":$n[1].String,"ps":1},{"n":"res","ref":true,"pt":$n[3].List$1(System.String),"ps":2}],"sn":"MemberDefinition_ParseCommaList","rt":$n[1].Boolean,"p":[$n[8].Regex,$n[1].String,$n[3].List$1(System.String)],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":4,"n":"MemberDefinition_ParseFormat_common","is":true,"t":8,"pi":[{"n":"s","pt":$n[1].String,"ps":0},{"n":"res","out":true,"pt":$n[0].MemberDefinition.MemberDefiniton_ParseResults,"ps":1}],"sn":"MemberDefinition_ParseFormat_common","rt":$n[1].Boolean,"p":[$n[1].String,$n[0].MemberDefinition.MemberDefiniton_ParseResults],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":4,"n":"MemberDefinition_ParseModifiers","is":true,"t":8,"pi":[{"n":"s","pt":$n[1].String,"ps":0},{"n":"res","ref":true,"pt":$n[3].List$1(System.String),"ps":1}],"sn":"MemberDefinition_ParseModifiers","rt":$n[1].Boolean,"p":[$n[1].String,$n[3].List$1(System.String)],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":4,"n":"MemberDefinition_ParseParameters","is":true,"t":8,"pi":[{"n":"s","pt":$n[1].String,"ps":0},{"n":"res","ref":true,"pt":$n[3].List$1(System.String),"ps":1}],"sn":"MemberDefinition_ParseParameters","rt":$n[1].Boolean,"p":[$n[1].String,$n[3].List$1(System.String)],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":4,"n":"MemberDefinition_ToStringFormat1","is":true,"t":8,"pi":[{"n":"member_type","pt":$n[1].String,"ps":0},{"n":"def","pt":$n[0].MemberDefinition,"ps":1},{"n":"data_type","pt":$n[0].TypeDefinition,"ps":2}],"sn":"MemberDefinition_ToStringFormat1","rt":$n[1].String,"p":[$n[1].String,$n[0].MemberDefinition,$n[0].TypeDefinition]},{"a":4,"n":"MemberDefinition_ToStringFormat2","is":true,"t":8,"pi":[{"n":"member_type","pt":$n[1].String,"ps":0},{"n":"def","pt":$n[0].MemberDefinition,"ps":1},{"n":"return_type","pt":$n[0].TypeDefinition,"ps":2},{"n":"params_","pt":$n[3].List$1(RobotRaconteurWeb.TypeDefinition),"ps":3}],"sn":"MemberDefinition_ToStringFormat2","rt":$n[1].String,"p":[$n[1].String,$n[0].MemberDefinition,$n[0].TypeDefinition,$n[3].List$1(RobotRaconteurWeb.TypeDefinition)]},{"a":4,"n":"MemberDefinition_ToStringFormat3","is":true,"t":8,"pi":[{"n":"member_type","pt":$n[1].String,"ps":0},{"n":"def","pt":$n[0].MemberDefinition,"ps":1},{"n":"params_","pt":$n[3].List$1(RobotRaconteurWeb.TypeDefinition),"ps":2}],"sn":"MemberDefinition_ToStringFormat3","rt":$n[1].String,"p":[$n[1].String,$n[0].MemberDefinition,$n[3].List$1(RobotRaconteurWeb.TypeDefinition)]},{"v":true,"a":2,"n":"Reset","t":8,"sn":"Reset","rt":$n[1].Void},{"a":2,"n":"Modifiers","t":4,"rt":$n[3].List$1(System.String),"sn":"Modifiers"},{"a":2,"n":"Name","t":4,"rt":$n[1].String,"sn":"Name"},{"a":2,"n":"ServiceEntry","t":4,"rt":$n[0].ServiceEntryDefinition,"sn":"ServiceEntry"}]}; }, $n);
    $m("RobotRaconteurWeb.MemberDefinition.MemberDefiniton_ParseResults", function () { return {"td":$n[0].MemberDefinition,"att":1048581,"a":4,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"DataType","t":4,"rt":$n[1].String,"sn":"DataType"},{"a":2,"n":"MemberType","t":4,"rt":$n[1].String,"sn":"MemberType"},{"a":2,"n":"Modifiers","t":4,"rt":$n[3].List$1(System.String),"sn":"Modifiers"},{"a":2,"n":"Name","t":4,"rt":$n[1].String,"sn":"Name"},{"a":2,"n":"Parameters","t":4,"rt":$n[3].List$1(System.String),"sn":"Parameters"}]}; }, $n);
    $m("RobotRaconteurWeb.PropertyDefinition", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[0].ServiceEntryDefinition],"pi":[{"n":"ServiceEntry","pt":$n[0].ServiceEntryDefinition,"ps":0}],"sn":"ctor"},{"a":2,"n":"FromString","t":8,"pi":[{"n":"s","pt":$n[1].String,"ps":0}],"sn":"FromString","rt":$n[1].Void,"p":[$n[1].String]},{"ov":true,"a":2,"n":"Reset","t":8,"sn":"Reset","rt":$n[1].Void},{"ov":true,"a":2,"n":"ToString","t":8,"sn":"toString","rt":$n[1].String},{"a":2,"n":"ToString","t":8,"pi":[{"n":"isstruct","pt":$n[1].Boolean,"ps":0}],"sn":"ToString","rt":$n[1].String,"p":[$n[1].Boolean]},{"a":2,"n":"Direction","t":16,"rt":$n[0].MemberDefinition_Direction,"g":{"a":2,"n":"get_Direction","t":8,"rt":$n[0].MemberDefinition_Direction,"fg":"Direction","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MemberDefinition_Direction, System.Enum.toStringFn(RobotRaconteurWeb.MemberDefinition_Direction));}},"fn":"Direction"},{"a":2,"n":"Type","t":4,"rt":$n[0].TypeDefinition,"sn":"Type"}]}; }, $n);
    $m("RobotRaconteurWeb.FunctionDefinition", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[0].ServiceEntryDefinition],"pi":[{"n":"ServiceEntry","pt":$n[0].ServiceEntryDefinition,"ps":0}],"sn":"ctor"},{"a":2,"n":"FromString","t":8,"pi":[{"n":"s","pt":$n[1].String,"ps":0}],"sn":"FromString","rt":$n[1].Void,"p":[$n[1].String]},{"ov":true,"a":2,"n":"Reset","t":8,"sn":"Reset","rt":$n[1].Void},{"ov":true,"a":2,"n":"ToString","t":8,"sn":"toString","rt":$n[1].String},{"a":2,"n":"IsGenerator","t":16,"rt":$n[1].Boolean,"g":{"a":2,"n":"get_IsGenerator","t":8,"rt":$n[1].Boolean,"fg":"IsGenerator","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"fn":"IsGenerator"},{"a":2,"n":"Parameters","t":4,"rt":$n[3].List$1(RobotRaconteurWeb.TypeDefinition),"sn":"Parameters"},{"a":2,"n":"ReturnType","t":4,"rt":$n[0].TypeDefinition,"sn":"ReturnType"}]}; }, $n);
    $m("RobotRaconteurWeb.EventDefinition", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[0].ServiceEntryDefinition],"pi":[{"n":"ServiceEntry","pt":$n[0].ServiceEntryDefinition,"ps":0}],"sn":"ctor"},{"a":2,"n":"FromString","t":8,"pi":[{"n":"s","pt":$n[1].String,"ps":0}],"sn":"FromString","rt":$n[1].Void,"p":[$n[1].String]},{"ov":true,"a":2,"n":"Reset","t":8,"sn":"Reset","rt":$n[1].Void},{"ov":true,"a":2,"n":"ToString","t":8,"sn":"toString","rt":$n[1].String},{"a":2,"n":"Parameters","t":4,"rt":$n[3].List$1(RobotRaconteurWeb.TypeDefinition),"sn":"Parameters"}]}; }, $n);
    $m("RobotRaconteurWeb.ObjRefDefinition", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[0].ServiceEntryDefinition],"pi":[{"n":"ServiceEntry","pt":$n[0].ServiceEntryDefinition,"ps":0}],"sn":"ctor"},{"a":2,"n":"FromString","t":8,"pi":[{"n":"s","pt":$n[1].String,"ps":0}],"sn":"FromString","rt":$n[1].Void,"p":[$n[1].String]},{"ov":true,"a":2,"n":"Reset","t":8,"sn":"Reset","rt":$n[1].Void},{"ov":true,"a":2,"n":"ToString","t":8,"sn":"toString","rt":$n[1].String},{"a":2,"n":"ArrayType","t":4,"rt":$n[0].DataTypes_ArrayTypes,"sn":"ArrayType","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.DataTypes_ArrayTypes, System.Enum.toStringFn(RobotRaconteurWeb.DataTypes_ArrayTypes));}},{"a":2,"n":"ContainerType","t":4,"rt":$n[0].DataTypes_ContainerTypes,"sn":"ContainerType","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.DataTypes_ContainerTypes, System.Enum.toStringFn(RobotRaconteurWeb.DataTypes_ContainerTypes));}},{"a":2,"n":"ObjectType","t":4,"rt":$n[1].String,"sn":"ObjectType"}]}; }, $n);
    $m("RobotRaconteurWeb.PipeDefinition", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[0].ServiceEntryDefinition],"pi":[{"n":"ServiceEntry","pt":$n[0].ServiceEntryDefinition,"ps":0}],"sn":"ctor"},{"a":2,"n":"FromString","t":8,"pi":[{"n":"s","pt":$n[1].String,"ps":0}],"sn":"FromString","rt":$n[1].Void,"p":[$n[1].String]},{"ov":true,"a":2,"n":"Reset","t":8,"sn":"Reset","rt":$n[1].Void},{"ov":true,"a":2,"n":"ToString","t":8,"sn":"toString","rt":$n[1].String},{"a":2,"n":"Direction","t":16,"rt":$n[0].MemberDefinition_Direction,"g":{"a":2,"n":"get_Direction","t":8,"rt":$n[0].MemberDefinition_Direction,"fg":"Direction","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MemberDefinition_Direction, System.Enum.toStringFn(RobotRaconteurWeb.MemberDefinition_Direction));}},"fn":"Direction"},{"a":2,"n":"IsUnreliable","t":16,"rt":$n[1].Boolean,"g":{"a":2,"n":"get_IsUnreliable","t":8,"rt":$n[1].Boolean,"fg":"IsUnreliable","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"fn":"IsUnreliable"},{"a":2,"n":"Type","t":4,"rt":$n[0].TypeDefinition,"sn":"Type"}]}; }, $n);
    $m("RobotRaconteurWeb.CallbackDefinition", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[0].ServiceEntryDefinition],"pi":[{"n":"ServiceEntry","pt":$n[0].ServiceEntryDefinition,"ps":0}],"sn":"ctor"},{"a":2,"n":"FromString","t":8,"pi":[{"n":"s","pt":$n[1].String,"ps":0}],"sn":"FromString","rt":$n[1].Void,"p":[$n[1].String]},{"ov":true,"a":2,"n":"Reset","t":8,"sn":"Reset","rt":$n[1].Void},{"ov":true,"a":2,"n":"ToString","t":8,"sn":"toString","rt":$n[1].String},{"a":2,"n":"Parameters","t":4,"rt":$n[3].List$1(RobotRaconteurWeb.TypeDefinition),"sn":"Parameters"},{"a":2,"n":"ReturnType","t":4,"rt":$n[0].TypeDefinition,"sn":"ReturnType"}]}; }, $n);
    $m("RobotRaconteurWeb.WireDefinition", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[0].ServiceEntryDefinition],"pi":[{"n":"ServiceEntry","pt":$n[0].ServiceEntryDefinition,"ps":0}],"sn":"ctor"},{"a":2,"n":"FromString","t":8,"pi":[{"n":"s","pt":$n[1].String,"ps":0}],"sn":"FromString","rt":$n[1].Void,"p":[$n[1].String]},{"ov":true,"a":2,"n":"Reset","t":8,"sn":"Reset","rt":$n[1].Void},{"ov":true,"a":2,"n":"ToString","t":8,"sn":"toString","rt":$n[1].String},{"a":2,"n":"Direction","t":16,"rt":$n[0].MemberDefinition_Direction,"g":{"a":2,"n":"get_Direction","t":8,"rt":$n[0].MemberDefinition_Direction,"fg":"Direction","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MemberDefinition_Direction, System.Enum.toStringFn(RobotRaconteurWeb.MemberDefinition_Direction));}},"fn":"Direction"},{"a":2,"n":"Type","t":4,"rt":$n[0].TypeDefinition,"sn":"Type"}]}; }, $n);
    $m("RobotRaconteurWeb.MemoryDefinition", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[0].ServiceEntryDefinition],"pi":[{"n":"ServiceEntry","pt":$n[0].ServiceEntryDefinition,"ps":0}],"sn":"ctor"},{"a":2,"n":"FromString","t":8,"pi":[{"n":"s","pt":$n[1].String,"ps":0}],"sn":"FromString","rt":$n[1].Void,"p":[$n[1].String]},{"ov":true,"a":2,"n":"Reset","t":8,"sn":"Reset","rt":$n[1].Void},{"ov":true,"a":2,"n":"ToString","t":8,"sn":"toString","rt":$n[1].String},{"a":2,"n":"Direction","t":16,"rt":$n[0].MemberDefinition_Direction,"g":{"a":2,"n":"get_Direction","t":8,"rt":$n[0].MemberDefinition_Direction,"fg":"Direction","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MemberDefinition_Direction, System.Enum.toStringFn(RobotRaconteurWeb.MemberDefinition_Direction));}},"fn":"Direction"},{"a":2,"n":"Type","t":4,"rt":$n[0].TypeDefinition,"sn":"Type"}]}; }, $n);
    $m("RobotRaconteurWeb.TypeDefinition", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[0].MemberDefinition],"pi":[{"n":"member","pt":$n[0].MemberDefinition,"ps":0}],"sn":"$ctor1"},{"a":2,"n":"Clone","t":8,"sn":"Clone","rt":$n[0].TypeDefinition},{"a":2,"n":"CopyTo","t":8,"pi":[{"n":"def","ref":true,"pt":$n[0].TypeDefinition,"ps":0}],"sn":"CopyTo","rt":$n[1].Void,"p":[$n[0].TypeDefinition]},{"a":2,"n":"DataTypeFromString","is":true,"t":8,"pi":[{"n":"d","pt":$n[1].String,"ps":0}],"sn":"DataTypeFromString","rt":$n[0].DataTypes,"p":[$n[1].String],"box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.DataTypes, System.Enum.toStringFn(RobotRaconteurWeb.DataTypes));}},{"ov":true,"a":2,"n":"Equals","t":8,"pi":[{"n":"o","pt":$n[1].Object,"ps":0}],"sn":"equals","rt":$n[1].Boolean,"p":[$n[1].Object],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"FromString","t":8,"pi":[{"n":"s","pt":$n[1].String,"ps":0}],"sn":"FromString","rt":$n[1].Void,"p":[$n[1].String]},{"a":2,"n":"QualifyTypeStringWithUsing","t":8,"sn":"QualifyTypeStringWithUsing","rt":$n[1].Void},{"a":2,"n":"RemoveArray","t":8,"sn":"RemoveArray","rt":$n[1].Void},{"a":2,"n":"RemoveContainers","t":8,"sn":"RemoveContainers","rt":$n[1].Void},{"a":2,"n":"Rename","t":8,"pi":[{"n":"name","pt":$n[1].String,"ps":0}],"sn":"Rename","rt":$n[1].Void,"p":[$n[1].String]},{"a":2,"n":"Reset","t":8,"sn":"Reset","rt":$n[1].Void},{"a":2,"n":"ResolveNamedType","t":8,"pi":[{"n":"imported_defs","dv":null,"o":true,"pt":$n[3].Dictionary$2(System.String,RobotRaconteurWeb.ServiceDefinition),"ps":0},{"n":"node","dv":null,"o":true,"pt":$n[0].RobotRaconteurNode,"ps":1},{"n":"client","dv":null,"o":true,"pt":$n[1].Object,"ps":2}],"sn":"ResolveNamedType","rt":$n[0].NamedTypeDefinition,"p":[$n[3].Dictionary$2(System.String,RobotRaconteurWeb.ServiceDefinition),$n[0].RobotRaconteurNode,$n[1].Object]},{"a":2,"n":"StringFromDataType","is":true,"t":8,"pi":[{"n":"d","pt":$n[0].DataTypes,"ps":0}],"sn":"StringFromDataType","rt":$n[1].String,"p":[$n[0].DataTypes]},{"ov":true,"a":2,"n":"ToString","t":8,"sn":"toString","rt":$n[1].String},{"a":4,"n":"TypeDefinition_GetServiceUsingDefinition","is":true,"t":8,"pi":[{"n":"def","pt":$n[0].TypeDefinition,"ps":0}],"sn":"TypeDefinition_GetServiceUsingDefinition","rt":$n[3].List$1(RobotRaconteurWeb.UsingDefinition),"p":[$n[0].TypeDefinition]},{"a":2,"n":"UnqualifyTypeStringWithUsing","t":8,"sn":"UnqualifyTypeStringWithUsing","rt":$n[1].Void},{"a":2,"n":"op_Equality","is":true,"t":8,"pi":[{"n":"a","pt":$n[0].TypeDefinition,"ps":0},{"n":"b","pt":$n[0].TypeDefinition,"ps":1}],"sn":"op_Equality","rt":$n[1].Boolean,"p":[$n[0].TypeDefinition,$n[0].TypeDefinition],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"op_Inequality","is":true,"t":8,"pi":[{"n":"a","pt":$n[0].TypeDefinition,"ps":0},{"n":"b","pt":$n[0].TypeDefinition,"ps":1}],"sn":"op_Inequality","rt":$n[1].Boolean,"p":[$n[0].TypeDefinition,$n[0].TypeDefinition],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"ArrayLength","t":4,"rt":$n[3].List$1(System.Int32),"sn":"ArrayLength"},{"a":2,"n":"ArrayType","t":4,"rt":$n[0].DataTypes_ArrayTypes,"sn":"ArrayType","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.DataTypes_ArrayTypes, System.Enum.toStringFn(RobotRaconteurWeb.DataTypes_ArrayTypes));}},{"a":2,"n":"ArrayVarLength","t":4,"rt":$n[1].Boolean,"sn":"ArrayVarLength","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"ContainerType","t":4,"rt":$n[0].DataTypes_ContainerTypes,"sn":"ContainerType","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.DataTypes_ContainerTypes, System.Enum.toStringFn(RobotRaconteurWeb.DataTypes_ContainerTypes));}},{"a":2,"n":"Name","t":4,"rt":$n[1].String,"sn":"Name"},{"a":4,"n":"ResolveNamedType_cache","t":4,"rt":$n[0].NamedTypeDefinition,"sn":"ResolveNamedType_cache"},{"a":2,"n":"Type","t":4,"rt":$n[0].DataTypes,"sn":"Type","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.DataTypes, System.Enum.toStringFn(RobotRaconteurWeb.DataTypes));}},{"a":2,"n":"TypeString","t":4,"rt":$n[1].String,"sn":"TypeString"},{"a":2,"n":"member","t":4,"rt":$n[0].MemberDefinition,"sn":"member"}]}; }, $n);
    $m("RobotRaconteurWeb.UsingDefinition", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[0].ServiceDefinition],"pi":[{"n":"service","pt":$n[0].ServiceDefinition,"ps":0}],"sn":"ctor"},{"a":2,"n":"FromString","t":8,"pi":[{"n":"s","pt":$n[1].String,"ps":0}],"sn":"FromString","rt":$n[1].Void,"p":[$n[1].String]},{"ov":true,"a":2,"n":"ToString","t":8,"sn":"toString","rt":$n[1].String},{"a":2,"n":"QualifiedName","t":4,"rt":$n[1].String,"sn":"QualifiedName"},{"a":2,"n":"UnqualifiedName","t":4,"rt":$n[1].String,"sn":"UnqualifiedName"},{"a":2,"n":"service","t":4,"rt":$n[0].ServiceDefinition,"sn":"service"}]}; }, $n);
    $m("RobotRaconteurWeb.ConstantDefinition_StructField", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"ConstantRefName","t":4,"rt":$n[1].String,"sn":"ConstantRefName"},{"a":2,"n":"Name","t":4,"rt":$n[1].String,"sn":"Name"}]}; }, $n);
    $m("RobotRaconteurWeb.ConstantDefinition", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[0].ServiceDefinition],"pi":[{"n":"service","pt":$n[0].ServiceDefinition,"ps":0}],"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[0].ServiceEntryDefinition],"pi":[{"n":"service_entry","pt":$n[0].ServiceEntryDefinition,"ps":0}],"sn":"$ctor1"},{"a":1,"n":"ConstantDefinition_CheckScalar","is":true,"t":8,"pi":[{"n":"t","pt":$n[0].DataTypes,"ps":0},{"n":"val","pt":$n[1].String,"ps":1}],"sn":"ConstantDefinition_CheckScalar","rt":$n[1].Boolean,"p":[$n[0].DataTypes,$n[1].String],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"ConstantDefinition_EscapeString_Formatter","is":true,"t":8,"pi":[{"n":"match","pt":$n[8].Match,"ps":0}],"sn":"ConstantDefinition_EscapeString_Formatter","rt":$n[1].String,"p":[$n[8].Match]},{"a":1,"n":"ConstantDefinition_UnescapeString_Formatter","is":true,"t":8,"pi":[{"n":"match","pt":$n[8].Match,"ps":0}],"sn":"ConstantDefinition_UnescapeString_Formatter","rt":$n[1].String,"p":[$n[8].Match]},{"a":2,"n":"EscapeString","is":true,"t":8,"pi":[{"n":"in_","pt":$n[1].String,"ps":0}],"sn":"EscapeString","rt":$n[1].String,"p":[$n[1].String]},{"a":2,"n":"FromString","t":8,"pi":[{"n":"s","pt":$n[1].String,"ps":0}],"sn":"FromString","rt":$n[1].Void,"p":[$n[1].String]},{"a":2,"n":"Reset","t":8,"sn":"Reset","rt":$n[1].Void},{"ov":true,"a":2,"n":"ToString","t":8,"sn":"toString","rt":$n[1].String},{"a":2,"n":"UnescapeString","is":true,"t":8,"pi":[{"n":"in_","pt":$n[1].String,"ps":0}],"sn":"UnescapeString","rt":$n[1].String,"p":[$n[1].String]},{"a":2,"n":"ValueToArray","t":8,"tpc":1,"tprm":["T"],"sn":"ValueToArray","rt":System.Array.type(System.Object)},{"a":2,"n":"ValueToScalar","t":8,"tpc":1,"tprm":["T"],"sn":"ValueToScalar","rt":System.Object},{"a":2,"n":"ValueToString","t":8,"sn":"ValueToString","rt":$n[1].String},{"a":2,"n":"ValueToStructFields","t":8,"sn":"ValueToStructFields","rt":$n[3].List$1(RobotRaconteurWeb.ConstantDefinition_StructField)},{"a":2,"n":"VerifyTypeAndValue","t":8,"pi":[{"n":"t","pt":$n[0].TypeDefinition,"ps":0},{"n":"value","pt":$n[1].String,"ps":1}],"sn":"VerifyTypeAndValue","rt":$n[1].Boolean,"p":[$n[0].TypeDefinition,$n[1].String],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"VerifyValue","t":8,"sn":"VerifyValue","rt":$n[1].Boolean,"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"Name","t":4,"rt":$n[1].String,"sn":"Name"},{"a":2,"n":"Type","t":4,"rt":$n[0].TypeDefinition,"sn":"Type"},{"a":2,"n":"Value","t":4,"rt":$n[1].String,"sn":"Value"},{"a":2,"n":"service","t":4,"rt":$n[0].ServiceDefinition,"sn":"service"},{"a":2,"n":"service_entry","t":4,"rt":$n[0].ServiceEntryDefinition,"sn":"service_entry"}]}; }, $n);
    $m("RobotRaconteurWeb.EnumDefinition", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[0].ServiceDefinition],"pi":[{"n":"service","pt":$n[0].ServiceDefinition,"ps":0}],"sn":"ctor"},{"a":2,"n":"FromString","t":8,"pi":[{"n":"s","pt":$n[1].String,"ps":0},{"n":"startline","pt":$n[1].UInt32,"ps":1}],"sn":"FromString","rt":$n[1].Void,"p":[$n[1].String,$n[1].UInt32]},{"a":2,"n":"Reset","t":8,"sn":"Reset","rt":$n[1].Void},{"ov":true,"a":2,"n":"ResolveQualifiedName","t":8,"sn":"ResolveQualifiedName","rt":$n[1].String},{"ov":true,"a":2,"n":"ToString","t":8,"sn":"toString","rt":$n[1].String},{"a":2,"n":"VerifyValues","t":8,"sn":"VerifyValues","rt":$n[1].Boolean,"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"ov":true,"a":2,"n":"RRDataType","t":16,"rt":$n[0].DataTypes,"g":{"ov":true,"a":2,"n":"get_RRDataType","t":8,"rt":$n[0].DataTypes,"fg":"RRDataType","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.DataTypes, System.Enum.toStringFn(RobotRaconteurWeb.DataTypes));}},"fn":"RRDataType"},{"a":2,"n":"Values","t":4,"rt":$n[3].List$1(RobotRaconteurWeb.EnumDefinitionValue),"sn":"Values"},{"a":2,"n":"service","t":4,"rt":$n[0].ServiceDefinition,"sn":"service"}]}; }, $n);
    $m("RobotRaconteurWeb.EnumDefinitionValue", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"HexValue","t":4,"rt":$n[1].Boolean,"sn":"HexValue","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"ImplicitValue","t":4,"rt":$n[1].Boolean,"sn":"ImplicitValue","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"Name","t":4,"rt":$n[1].String,"sn":"Name"},{"a":2,"n":"Value","t":4,"rt":$n[1].Int32,"sn":"Value","box":function ($v) { return Bridge.box($v, System.Int32);}}]}; }, $n);
    $m("RobotRaconteurWeb.RobotRaconteurParseException", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].String],"pi":[{"n":"e","pt":$n[1].String,"ps":0}],"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[1].String,$n[1].Int32],"pi":[{"n":"e","pt":$n[1].String,"ps":0},{"n":"line","pt":$n[1].Int32,"ps":1}],"sn":"$ctor1"},{"ov":true,"a":2,"n":"ToString","t":8,"sn":"toString","rt":$n[1].String},{"a":2,"n":"LineNumber","t":4,"rt":$n[1].Int32,"sn":"lineNumber","box":function ($v) { return Bridge.box($v, System.Int32);}}]}; }, $n);
    $m("RobotRaconteurWeb.ServiceDefinitionUtil", function () { return {"nested":[$n[0].ServiceDefinitionUtil.rrimplements,$n[0].ServiceDefinitionUtil.rrimports],"att":1048961,"a":2,"s":true,"m":[{"a":4,"n":"CompareConstantDefinition","is":true,"t":8,"pi":[{"n":"service1","pt":$n[0].ServiceDefinition,"ps":0},{"n":"d1","pt":$n[0].ConstantDefinition,"ps":1},{"n":"service2","pt":$n[0].ServiceDefinition,"ps":2},{"n":"d2","pt":$n[0].ConstantDefinition,"ps":3}],"sn":"CompareConstantDefinition","rt":$n[1].Boolean,"p":[$n[0].ServiceDefinition,$n[0].ConstantDefinition,$n[0].ServiceDefinition,$n[0].ConstantDefinition],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":4,"n":"CompareEnumDefinition","is":true,"t":8,"pi":[{"n":"enum1","pt":$n[0].EnumDefinition,"ps":0},{"n":"enum2","pt":$n[0].EnumDefinition,"ps":1}],"sn":"CompareEnumDefinition","rt":$n[1].Boolean,"p":[$n[0].EnumDefinition,$n[0].EnumDefinition],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":4,"n":"CompareMember","is":true,"t":8,"pi":[{"n":"m1","pt":$n[0].MemberDefinition,"ps":0},{"n":"m2","pt":$n[0].MemberDefinition,"ps":1}],"sn":"CompareMember","rt":$n[1].Boolean,"p":[$n[0].MemberDefinition,$n[0].MemberDefinition],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"CompareServiceDefinitions","is":true,"t":8,"pi":[{"n":"service1","pt":$n[0].ServiceDefinition,"ps":0},{"n":"service2","pt":$n[0].ServiceDefinition,"ps":1}],"sn":"CompareServiceDefinitions","rt":$n[1].Boolean,"p":[$n[0].ServiceDefinition,$n[0].ServiceDefinition],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"CompareServiceEntryDefinition","is":true,"t":8,"pi":[{"n":"service1","pt":$n[0].ServiceDefinition,"ps":0},{"n":"d1","pt":$n[0].ServiceEntryDefinition,"ps":1},{"n":"service2","pt":$n[0].ServiceDefinition,"ps":2},{"n":"d2","pt":$n[0].ServiceEntryDefinition,"ps":3}],"sn":"CompareServiceEntryDefinition","rt":$n[1].Boolean,"p":[$n[0].ServiceDefinition,$n[0].ServiceEntryDefinition,$n[0].ServiceDefinition,$n[0].ServiceEntryDefinition],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":4,"n":"CompareTypeDefinition","is":true,"t":8,"pi":[{"n":"d1","pt":$n[0].ServiceDefinition,"ps":0},{"n":"t1","pt":$n[0].TypeDefinition,"ps":1},{"n":"d2","pt":$n[0].ServiceDefinition,"ps":2},{"n":"t2","pt":$n[0].TypeDefinition,"ps":3}],"sn":"CompareTypeDefinition","rt":$n[1].Boolean,"p":[$n[0].ServiceDefinition,$n[0].TypeDefinition,$n[0].ServiceDefinition,$n[0].TypeDefinition],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":4,"n":"CompareTypeDefinitions","is":true,"t":8,"pi":[{"n":"d1","pt":$n[0].ServiceDefinition,"ps":0},{"n":"t1","pt":$n[3].List$1(RobotRaconteurWeb.TypeDefinition),"ps":1},{"n":"d2","pt":$n[0].ServiceDefinition,"ps":2},{"n":"t2","pt":$n[3].List$1(RobotRaconteurWeb.TypeDefinition),"ps":3}],"sn":"CompareTypeDefinitions","rt":$n[1].Boolean,"p":[$n[0].ServiceDefinition,$n[3].List$1(RobotRaconteurWeb.TypeDefinition),$n[0].ServiceDefinition,$n[3].List$1(RobotRaconteurWeb.TypeDefinition)],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":4,"n":"CompareUsingDefinition","is":true,"t":8,"pi":[{"n":"u1","pt":$n[0].UsingDefinition,"ps":0},{"n":"u2","pt":$n[0].UsingDefinition,"ps":1}],"sn":"CompareUsingDefinition","rt":$n[1].Boolean,"p":[$n[0].UsingDefinition,$n[0].UsingDefinition],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"EstimatePodPackedElementSize","is":true,"t":8,"pi":[{"n":"def","pt":$n[0].ServiceEntryDefinition,"ps":0},{"n":"other_defs","dv":null,"o":true,"pt":$n[3].Dictionary$2(System.String,RobotRaconteurWeb.ServiceDefinition),"ps":1},{"n":"node","dv":null,"o":true,"pt":$n[0].RobotRaconteurNode,"ps":2},{"n":"client","dv":null,"o":true,"pt":$n[1].Object,"ps":3}],"sn":"EstimatePodPackedElementSize","rt":$n[1].Int32,"p":[$n[0].ServiceEntryDefinition,$n[3].Dictionary$2(System.String,RobotRaconteurWeb.ServiceDefinition),$n[0].RobotRaconteurNode,$n[1].Object],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"FindObjectRRType","is":true,"t":8,"pi":[{"n":"obj","pt":$n[1].Object,"ps":0}],"sn":"FindObjectRRType","rt":$n[1].String,"p":[$n[1].Object]},{"a":2,"n":"FindParentInterface","is":true,"t":8,"pi":[{"n":"objtype","pt":$n[1].Type,"ps":0}],"sn":"FindParentInterface","rt":$n[1].Type,"p":[$n[1].Type]},{"a":2,"n":"FindStructRRType","is":true,"t":8,"pi":[{"n":"s","pt":$n[1].Type,"ps":0}],"sn":"FindStructRRType","rt":$n[1].String,"p":[$n[1].Type]},{"a":2,"n":"GetNamedArrayElementTypeAndCount","is":true,"t":8,"pi":[{"n":"def","pt":$n[0].ServiceEntryDefinition,"ps":0},{"n":"other_defs","dv":null,"o":true,"pt":$n[3].Dictionary$2(System.String,RobotRaconteurWeb.ServiceDefinition),"ps":1},{"n":"node","dv":null,"o":true,"pt":$n[0].RobotRaconteurNode,"ps":2},{"n":"client","dv":null,"o":true,"pt":$n[1].Object,"ps":3},{"n":"n","dv":null,"o":true,"pt":$n[3].HashSet$1(System.String),"ps":4}],"sn":"GetNamedArrayElementTypeAndCount","rt":$n[1].Tuple$2(RobotRaconteurWeb.DataTypes,System.Int32),"p":[$n[0].ServiceEntryDefinition,$n[3].Dictionary$2(System.String,RobotRaconteurWeb.ServiceDefinition),$n[0].RobotRaconteurNode,$n[1].Object,$n[3].HashSet$1(System.String)]},{"a":4,"n":"GetServiceNames","is":true,"t":8,"pi":[{"n":"def","pt":$n[0].ServiceDefinition,"ps":0}],"sn":"GetServiceNames","rt":$n[3].List$1(System.String),"p":[$n[0].ServiceDefinition]},{"a":4,"n":"SplitParameterString","is":true,"t":8,"pi":[{"n":"str","pt":$n[1].String,"ps":0}],"sn":"SplitParameterString","rt":$n[1].Array.type(System.String),"p":[$n[1].String]},{"a":2,"n":"SplitQualifiedName","is":true,"t":8,"pi":[{"n":"name","pt":$n[1].String,"ps":0}],"sn":"SplitQualifiedName","rt":$n[1].Tuple$2(System.String,System.String),"p":[$n[1].String]},{"a":4,"n":"VerifyConstant","is":true,"t":8,"pi":[{"n":"constant","pt":$n[1].String,"ps":0},{"n":"def","pt":$n[0].ServiceDefinition,"ps":1}],"sn":"VerifyConstant$1","rt":$n[1].String,"p":[$n[1].String,$n[0].ServiceDefinition]},{"a":4,"n":"VerifyConstant","is":true,"t":8,"pi":[{"n":"c","pt":$n[0].ConstantDefinition,"ps":0},{"n":"def","pt":$n[0].ServiceDefinition,"ps":1},{"n":"constants","pt":$n[3].Dictionary$2(System.String,RobotRaconteurWeb.ConstantDefinition),"ps":2}],"sn":"VerifyConstant","rt":$n[1].String,"p":[$n[0].ConstantDefinition,$n[0].ServiceDefinition,$n[3].Dictionary$2(System.String,RobotRaconteurWeb.ConstantDefinition)]},{"a":4,"n":"VerifyConstantStruct","is":true,"t":8,"pi":[{"n":"c","pt":$n[0].ConstantDefinition,"ps":0},{"n":"def","pt":$n[0].ServiceDefinition,"ps":1},{"n":"constants","pt":$n[3].Dictionary$2(System.String,RobotRaconteurWeb.ConstantDefinition),"ps":2},{"n":"parent_types","pt":$n[3].List$1(System.String),"ps":3}],"sn":"VerifyConstantStruct","rt":$n[1].Void,"p":[$n[0].ConstantDefinition,$n[0].ServiceDefinition,$n[3].Dictionary$2(System.String,RobotRaconteurWeb.ConstantDefinition),$n[3].List$1(System.String)]},{"a":4,"n":"VerifyEnum","is":true,"t":8,"pi":[{"n":"e","pt":$n[0].EnumDefinition,"ps":0},{"n":"def","pt":$n[0].ServiceDefinition,"ps":1}],"sn":"VerifyEnum","rt":$n[1].Void,"p":[$n[0].EnumDefinition,$n[0].ServiceDefinition]},{"a":4,"n":"VerifyImports","is":true,"t":8,"pi":[{"n":"def","pt":$n[0].ServiceDefinition,"ps":0},{"n":"defs","pt":$n[3].Dictionary$2(System.String,RobotRaconteurWeb.ServiceDefinition),"ps":1}],"sn":"VerifyImports","rt":$n[1].Void,"p":[$n[0].ServiceDefinition,$n[3].Dictionary$2(System.String,RobotRaconteurWeb.ServiceDefinition)]},{"a":4,"n":"VerifyMember","is":true,"t":8,"pi":[{"n":"m","pt":$n[0].MemberDefinition,"ps":0},{"n":"def","pt":$n[0].ServiceDefinition,"ps":1},{"n":"defs","pt":$n[3].Dictionary$2(System.String,RobotRaconteurWeb.ServiceDefinition),"ps":2},{"n":"warnings","ref":true,"pt":$n[3].List$1(System.Exception),"ps":3}],"sn":"VerifyMember","rt":$n[1].String,"p":[$n[0].MemberDefinition,$n[0].ServiceDefinition,$n[3].Dictionary$2(System.String,RobotRaconteurWeb.ServiceDefinition),$n[3].List$1(System.Exception)]},{"a":4,"n":"VerifyModifiers","is":true,"t":8,"pi":[{"n":"m","pt":$n[0].MemberDefinition,"ps":0},{"n":"readwrite","pt":$n[1].Boolean,"ps":1},{"n":"unreliable","pt":$n[1].Boolean,"ps":2},{"n":"warnings","ref":true,"pt":$n[3].List$1(System.Exception),"ps":3}],"sn":"VerifyModifiers","rt":$n[1].Void,"p":[$n[0].MemberDefinition,$n[1].Boolean,$n[1].Boolean,$n[3].List$1(System.Exception)]},{"a":4,"n":"VerifyName","is":true,"t":8,"pi":[{"n":"name","pt":$n[1].String,"ps":0},{"n":"def","pt":$n[0].ServiceDefinition,"ps":1},{"n":"allowdot","dv":false,"o":true,"pt":$n[1].Boolean,"ps":2},{"n":"ignorereserved","dv":false,"o":true,"pt":$n[1].Boolean,"ps":3}],"sn":"VerifyName","rt":$n[1].Void,"p":[$n[1].String,$n[0].ServiceDefinition,$n[1].Boolean,$n[1].Boolean]},{"a":4,"n":"VerifyNamedArray","is":true,"t":8,"pi":[{"n":"strut","pt":$n[0].ServiceEntryDefinition,"ps":0},{"n":"def","pt":$n[0].ServiceDefinition,"ps":1},{"n":"defs","pt":$n[3].Dictionary$2(System.String,RobotRaconteurWeb.ServiceDefinition),"ps":2},{"n":"warnings","ref":true,"pt":$n[3].List$1(System.Exception),"ps":3}],"sn":"VerifyNamedArray","rt":$n[1].Void,"p":[$n[0].ServiceEntryDefinition,$n[0].ServiceDefinition,$n[3].Dictionary$2(System.String,RobotRaconteurWeb.ServiceDefinition),$n[3].List$1(System.Exception)]},{"a":4,"n":"VerifyObject","is":true,"t":8,"pi":[{"n":"obj","pt":$n[0].ServiceEntryDefinition,"ps":0},{"n":"def","pt":$n[0].ServiceDefinition,"ps":1},{"n":"defs","pt":$n[3].Dictionary$2(System.String,RobotRaconteurWeb.ServiceDefinition),"ps":2},{"n":"warnings","ref":true,"pt":$n[3].List$1(System.Exception),"ps":3}],"sn":"VerifyObject","rt":$n[1].Void,"p":[$n[0].ServiceEntryDefinition,$n[0].ServiceDefinition,$n[3].Dictionary$2(System.String,RobotRaconteurWeb.ServiceDefinition),$n[3].List$1(System.Exception)]},{"a":4,"n":"VerifyParameters","is":true,"t":8,"pi":[{"n":"p","pt":$n[3].List$1(RobotRaconteurWeb.TypeDefinition),"ps":0},{"n":"def","pt":$n[0].ServiceDefinition,"ps":1},{"n":"defs","pt":$n[3].Dictionary$2(System.String,RobotRaconteurWeb.ServiceDefinition),"ps":2}],"sn":"VerifyParameters","rt":$n[1].Void,"p":[$n[3].List$1(RobotRaconteurWeb.TypeDefinition),$n[0].ServiceDefinition,$n[3].Dictionary$2(System.String,RobotRaconteurWeb.ServiceDefinition)]},{"a":4,"n":"VerifyPod","is":true,"t":8,"pi":[{"n":"strut","pt":$n[0].ServiceEntryDefinition,"ps":0},{"n":"def","pt":$n[0].ServiceDefinition,"ps":1},{"n":"defs","pt":$n[3].Dictionary$2(System.String,RobotRaconteurWeb.ServiceDefinition),"ps":2},{"n":"warnings","ref":true,"pt":$n[3].List$1(System.Exception),"ps":3}],"sn":"VerifyPod","rt":$n[1].Void,"p":[$n[0].ServiceEntryDefinition,$n[0].ServiceDefinition,$n[3].Dictionary$2(System.String,RobotRaconteurWeb.ServiceDefinition),$n[3].List$1(System.Exception)]},{"a":4,"n":"VerifyReturnType","is":true,"t":8,"pi":[{"n":"t","pt":$n[0].TypeDefinition,"ps":0},{"n":"def","pt":$n[0].ServiceDefinition,"ps":1},{"n":"defs","pt":$n[3].Dictionary$2(System.String,RobotRaconteurWeb.ServiceDefinition),"ps":2}],"sn":"VerifyReturnType","rt":$n[1].Void,"p":[$n[0].TypeDefinition,$n[0].ServiceDefinition,$n[3].Dictionary$2(System.String,RobotRaconteurWeb.ServiceDefinition)]},{"a":2,"n":"VerifyServiceDefinitions","is":true,"t":8,"pi":[{"n":"def","pt":$n[3].Dictionary$2(System.String,RobotRaconteurWeb.ServiceDefinition),"ps":0}],"sn":"VerifyServiceDefinitions","rt":$n[1].Void,"p":[$n[3].Dictionary$2(System.String,RobotRaconteurWeb.ServiceDefinition)]},{"a":2,"n":"VerifyServiceDefinitions","is":true,"t":8,"pi":[{"n":"def","pt":$n[3].Dictionary$2(System.String,RobotRaconteurWeb.ServiceDefinition),"ps":0},{"n":"warnings","ref":true,"pt":$n[3].List$1(System.Exception),"ps":1}],"sn":"VerifyServiceDefinitions$1","rt":$n[1].Void,"p":[$n[3].Dictionary$2(System.String,RobotRaconteurWeb.ServiceDefinition),$n[3].List$1(System.Exception)]},{"a":4,"n":"VerifyStructure","is":true,"t":8,"pi":[{"n":"strut","pt":$n[0].ServiceEntryDefinition,"ps":0},{"n":"def","pt":$n[0].ServiceDefinition,"ps":1},{"n":"defs","pt":$n[3].Dictionary$2(System.String,RobotRaconteurWeb.ServiceDefinition),"ps":2},{"n":"warnings","ref":true,"pt":$n[3].List$1(System.Exception),"ps":3}],"sn":"VerifyStructure","rt":$n[1].Void,"p":[$n[0].ServiceEntryDefinition,$n[0].ServiceDefinition,$n[3].Dictionary$2(System.String,RobotRaconteurWeb.ServiceDefinition),$n[3].List$1(System.Exception)]},{"a":4,"n":"VerifyStructure_check_recursion","is":true,"t":8,"pi":[{"n":"strut","pt":$n[0].ServiceEntryDefinition,"ps":0},{"n":"names","ref":true,"pt":$n[3].HashSet$1(System.String),"ps":1},{"n":"entry_type","pt":$n[0].DataTypes,"ps":2}],"sn":"VerifyStructure_check_recursion","rt":$n[1].Void,"p":[$n[0].ServiceEntryDefinition,$n[3].HashSet$1(System.String),$n[0].DataTypes]},{"a":4,"n":"VerifyStructure_common","is":true,"t":8,"pi":[{"n":"strut","pt":$n[0].ServiceEntryDefinition,"ps":0},{"n":"def","pt":$n[0].ServiceDefinition,"ps":1},{"n":"defs","pt":$n[3].Dictionary$2(System.String,RobotRaconteurWeb.ServiceDefinition),"ps":2},{"n":"warnings","ref":true,"pt":$n[3].List$1(System.Exception),"ps":3},{"n":"entry_type","pt":$n[0].DataTypes,"ps":4}],"sn":"VerifyStructure_common","rt":$n[1].Void,"p":[$n[0].ServiceEntryDefinition,$n[0].ServiceDefinition,$n[3].Dictionary$2(System.String,RobotRaconteurWeb.ServiceDefinition),$n[3].List$1(System.Exception),$n[0].DataTypes]},{"a":4,"n":"VerifyType","is":true,"t":8,"pi":[{"n":"t","pt":$n[0].TypeDefinition,"ps":0},{"n":"def","pt":$n[0].ServiceDefinition,"ps":1},{"n":"defs","pt":$n[3].Dictionary$2(System.String,RobotRaconteurWeb.ServiceDefinition),"ps":2}],"sn":"VerifyType","rt":$n[1].Void,"p":[$n[0].TypeDefinition,$n[0].ServiceDefinition,$n[3].Dictionary$2(System.String,RobotRaconteurWeb.ServiceDefinition)]},{"a":4,"n":"VerifyUsing","is":true,"t":8,"pi":[{"n":"e","pt":$n[0].UsingDefinition,"ps":0},{"n":"def","pt":$n[0].ServiceDefinition,"ps":1},{"n":"importeddefs","pt":$n[3].Dictionary$2(System.String,RobotRaconteurWeb.ServiceDefinition),"ps":2}],"sn":"VerifyUsing","rt":$n[1].Void,"p":[$n[0].UsingDefinition,$n[0].ServiceDefinition,$n[3].Dictionary$2(System.String,RobotRaconteurWeb.ServiceDefinition)]},{"a":4,"n":"VerifyVersionSupport","is":true,"t":8,"pi":[{"n":"def","pt":$n[0].ServiceDefinition,"ps":0},{"n":"major","pt":$n[1].UInt32,"ps":1},{"n":"minor","pt":$n[1].UInt32,"ps":2},{"n":"msg","pt":$n[1].String,"ps":3}],"sn":"VerifyVersionSupport","rt":$n[1].Void,"p":[$n[0].ServiceDefinition,$n[1].UInt32,$n[1].UInt32,$n[1].String]},{"a":4,"n":"get_implements","is":true,"t":8,"pi":[{"n":"obj","pt":$n[0].ServiceEntryDefinition,"ps":0},{"n":"def","pt":$n[0].ServiceDefinition,"ps":1},{"n":"defs","pt":$n[3].Dictionary$2(System.String,RobotRaconteurWeb.ServiceDefinition),"ps":2},{"n":"rootobj","dv":"","o":true,"pt":$n[1].String,"ps":3}],"sn":"get_implements","rt":$n[0].ServiceDefinitionUtil.rrimplements,"p":[$n[0].ServiceEntryDefinition,$n[0].ServiceDefinition,$n[3].Dictionary$2(System.String,RobotRaconteurWeb.ServiceDefinition),$n[1].String]},{"a":4,"n":"get_imports","is":true,"t":8,"pi":[{"n":"def","pt":$n[0].ServiceDefinition,"ps":0},{"n":"defs","pt":$n[3].Dictionary$2(System.String,RobotRaconteurWeb.ServiceDefinition),"ps":1},{"n":"rootdef","dv":null,"o":true,"pt":$n[0].ServiceDefinition,"ps":2}],"sn":"get_imports","rt":$n[0].ServiceDefinitionUtil.rrimports,"p":[$n[0].ServiceDefinition,$n[3].Dictionary$2(System.String,RobotRaconteurWeb.ServiceDefinition),$n[0].ServiceDefinition]}]}; }, $n);
    $m("RobotRaconteurWeb.ServiceDefinitionUtil.rrimplements", function () { return {"td":$n[0].ServiceDefinitionUtil,"att":1048581,"a":4,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"implements","t":4,"rt":$n[3].List$1(RobotRaconteurWeb.ServiceDefinitionUtil.rrimplements),"sn":"implements"},{"a":2,"n":"name","t":4,"rt":$n[1].String,"sn":"name"},{"a":2,"n":"obj","t":4,"rt":$n[0].ServiceEntryDefinition,"sn":"obj"}]}; }, $n);
    $m("RobotRaconteurWeb.ServiceDefinitionUtil.rrimports", function () { return {"td":$n[0].ServiceDefinitionUtil,"att":1048581,"a":4,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"def","t":4,"rt":$n[0].ServiceDefinition,"sn":"def"},{"a":2,"n":"imported","t":4,"rt":$n[3].List$1(RobotRaconteurWeb.ServiceDefinitionUtil.rrimports),"sn":"imported"}]}; }, $n);
    $m("RobotRaconteurWeb.DynamicServiceFactory", function () { return {"att":161,"a":2,"m":[{"ab":true,"a":2,"n":"CreateServiceFactories","t":8,"pi":[{"n":"def","pt":$n[1].Array.type(System.String),"ps":0},{"n":"context","pt":$n[0].ClientContext,"ps":1}],"sn":"RobotRaconteurWeb$DynamicServiceFactory$CreateServiceFactories","rt":System.Array.type(RobotRaconteurWeb.ServiceFactory),"p":[$n[1].Array.type(System.String),$n[0].ClientContext]},{"ab":true,"a":2,"n":"CreateServiceFactory","t":8,"pi":[{"n":"def","pt":$n[1].String,"ps":0},{"n":"context","pt":$n[0].ClientContext,"ps":1}],"sn":"RobotRaconteurWeb$DynamicServiceFactory$CreateServiceFactory","rt":$n[0].ServiceFactory,"p":[$n[1].String,$n[0].ClientContext]}]}; }, $n);
    $m("RobotRaconteurWeb.ServiceFactory", function () { return {"att":1048705,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[0].RobotRaconteurNode,$n[0].ClientContext],"pi":[{"n":"node","dv":null,"o":true,"pt":$n[0].RobotRaconteurNode,"ps":0},{"n":"context","dv":null,"o":true,"pt":$n[0].ClientContext,"ps":1}],"sn":"ctor"},{"a":2,"n":"CompareNamespace","t":8,"pi":[{"n":"qualified_typename","pt":$n[1].String,"ps":0},{"n":"typename","out":true,"pt":$n[1].String,"ps":1}],"sn":"CompareNamespace","rt":$n[1].Boolean,"p":[$n[1].String,$n[1].String],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"v":true,"a":2,"n":"CreateSkel","t":8,"pi":[{"n":"path","pt":$n[1].String,"ps":0},{"n":"obj","pt":$n[1].Object,"ps":1},{"n":"context","pt":$n[0].ServerContext,"ps":2}],"sn":"CreateSkel","rt":$n[0].ServiceSkel,"p":[$n[1].String,$n[1].Object,$n[0].ServerContext]},{"v":true,"a":2,"n":"CreateStub","t":8,"pi":[{"n":"objecttype","pt":$n[1].String,"ps":0},{"n":"path","pt":$n[1].String,"ps":1},{"n":"context","pt":$n[0].ClientContext,"ps":2}],"sn":"CreateStub","rt":$n[0].ServiceStub,"p":[$n[1].String,$n[1].String,$n[0].ClientContext]},{"ab":true,"a":2,"n":"DefString","t":8,"sn":"DefString","rt":$n[1].String},{"v":true,"a":2,"n":"DownCastException","t":8,"pi":[{"n":"exp","pt":$n[0].RobotRaconteurException,"ps":0}],"sn":"DownCastException","rt":$n[0].RobotRaconteurException,"p":[$n[0].RobotRaconteurException]},{"ab":true,"a":2,"n":"FindNamedArrayStub","t":8,"pi":[{"n":"objecttype","pt":$n[1].String,"ps":0}],"sn":"FindNamedArrayStub","rt":$n[0].INamedArrayStub,"p":[$n[1].String]},{"ab":true,"a":2,"n":"FindPodStub","t":8,"pi":[{"n":"objecttype","pt":$n[1].String,"ps":0}],"sn":"FindPodStub","rt":$n[0].IPodStub,"p":[$n[1].String]},{"ab":true,"a":2,"n":"FindStructureStub","t":8,"pi":[{"n":"objecttype","pt":$n[1].String,"ps":0}],"sn":"FindStructureStub","rt":$n[0].IStructureStub,"p":[$n[1].String]},{"ab":true,"a":2,"n":"GetServiceName","t":8,"sn":"GetServiceName","rt":$n[1].String},{"v":true,"a":2,"n":"PackListType","t":8,"pi":[{"n":"o","pt":$n[1].Object,"ps":0}],"tpc":1,"tprm":["T"],"sn":"PackListType","rt":$n[1].Object,"p":[$n[1].Object]},{"v":true,"a":2,"n":"PackMapType","t":8,"pi":[{"n":"o","pt":$n[1].Object,"ps":0}],"tpc":2,"tprm":["K","T"],"sn":"PackMapType","rt":$n[1].Object,"p":[$n[1].Object]},{"v":true,"a":2,"n":"PackMultiDimArray","t":8,"pi":[{"n":"multiDimArray","pt":$n[0].MultiDimArray,"ps":0}],"sn":"PackMultiDimArray","rt":$n[1].Object,"p":[$n[0].MultiDimArray]},{"a":2,"n":"PackNamedArray","t":8,"pi":[{"n":"s","pt":$n[1].Object,"ps":0}],"sn":"PackNamedArray$1","rt":$n[1].Object,"p":[$n[1].Object]},{"a":2,"n":"PackNamedArray","t":8,"pi":[{"n":"s","pt":System.Array.type(System.Object),"ps":0}],"tpc":1,"tprm":["T"],"sn":"PackNamedArray","rt":$n[0].MessageElementNamedArray,"p":[System.Array.type(System.Object)]},{"a":2,"n":"PackNamedArrayToArray","t":8,"pi":[{"n":"s","ref":true,"pt":System.Object,"ps":0}],"tpc":1,"tprm":["T"],"sn":"PackNamedArrayToArray","rt":$n[0].MessageElementNamedArray,"p":[System.Object]},{"a":2,"n":"PackNamedMultiDimArray","t":8,"pi":[{"n":"s","pt":$n[0].NamedMultiDimArray,"ps":0}],"tpc":1,"tprm":["T"],"sn":"PackNamedMultiDimArray","rt":$n[0].MessageElementNamedMultiDimArray,"p":[$n[0].NamedMultiDimArray]},{"a":2,"n":"PackPod","t":8,"pi":[{"n":"s","pt":$n[1].Object,"ps":0}],"sn":"PackPod","rt":$n[1].Object,"p":[$n[1].Object]},{"a":2,"n":"PackPodArray","t":8,"pi":[{"n":"s","pt":System.Array.type(System.Object),"ps":0}],"tpc":1,"tprm":["T"],"sn":"PackPodArray","rt":$n[0].MessageElementPodArray,"p":[System.Array.type(System.Object)]},{"a":2,"n":"PackPodMultiDimArray","t":8,"pi":[{"n":"s","pt":$n[0].PodMultiDimArray,"ps":0}],"tpc":1,"tprm":["T"],"sn":"PackPodMultiDimArray","rt":$n[0].MessageElementPodMultiDimArray,"p":[$n[0].PodMultiDimArray]},{"a":2,"n":"PackPodToArray","t":8,"pi":[{"n":"s","ref":true,"pt":System.Object,"ps":0}],"tpc":1,"tprm":["T"],"sn":"PackPodToArray","rt":$n[0].MessageElementPodArray,"p":[System.Object]},{"v":true,"a":2,"n":"PackStructure","t":8,"pi":[{"n":"s","pt":$n[1].Object,"ps":0}],"sn":"PackStructure","rt":$n[0].MessageElementStructure,"p":[$n[1].Object]},{"v":true,"a":2,"n":"PackVarType","t":8,"pi":[{"n":"p","pt":$n[1].Object,"ps":0}],"sn":"PackVarType","rt":$n[1].Object,"p":[$n[1].Object]},{"a":2,"n":"RemovePath","t":8,"pi":[{"n":"path","pt":$n[1].String,"ps":0}],"sn":"RemovePath","rt":$n[1].String,"p":[$n[1].String]},{"a":2,"n":"ServiceDef","t":8,"sn":"ServiceDef","rt":$n[0].ServiceDefinition},{"v":true,"a":2,"n":"UnpackListType","t":8,"pi":[{"n":"o","pt":$n[1].Object,"ps":0}],"tpc":1,"tprm":["T"],"sn":"UnpackListType","rt":$n[1].Object,"p":[$n[1].Object]},{"v":true,"a":2,"n":"UnpackMapType","t":8,"pi":[{"n":"o","pt":$n[1].Object,"ps":0}],"tpc":2,"tprm":["K","T"],"sn":"UnpackMapType","rt":$n[1].Object,"p":[$n[1].Object]},{"v":true,"a":2,"n":"UnpackMultiDimArray","t":8,"pi":[{"n":"o","pt":$n[0].MessageElementMultiDimArray,"ps":0}],"sn":"UnpackMultiDimArray","rt":$n[0].MultiDimArray,"p":[$n[0].MessageElementMultiDimArray]},{"a":2,"n":"UnpackNamedArray","t":8,"pi":[{"n":"l","pt":$n[0].MessageElementNamedArray,"ps":0}],"tpc":1,"tprm":["T"],"sn":"UnpackNamedArray","rt":System.Array.type(System.Object),"p":[$n[0].MessageElementNamedArray]},{"a":2,"n":"UnpackNamedArray","t":8,"pi":[{"n":"m","pt":$n[1].Object,"ps":0}],"sn":"UnpackNamedArray$1","rt":$n[1].Object,"p":[$n[1].Object]},{"a":2,"n":"UnpackNamedArrayFromArray","t":8,"pi":[{"n":"l","pt":$n[0].MessageElementNamedArray,"ps":0}],"tpc":1,"tprm":["T"],"sn":"UnpackNamedArrayFromArray","rt":System.Object,"p":[$n[0].MessageElementNamedArray]},{"a":2,"n":"UnpackNamedMultiDimArray","t":8,"pi":[{"n":"l","pt":$n[0].MessageElementNamedMultiDimArray,"ps":0}],"tpc":1,"tprm":["T"],"sn":"UnpackNamedMultiDimArray","rt":$n[0].NamedMultiDimArray,"p":[$n[0].MessageElementNamedMultiDimArray]},{"a":2,"n":"UnpackPod","t":8,"pi":[{"n":"m","pt":$n[1].Object,"ps":0}],"sn":"UnpackPod","rt":$n[1].Object,"p":[$n[1].Object]},{"a":2,"n":"UnpackPodArray","t":8,"pi":[{"n":"l","pt":$n[0].MessageElementPodArray,"ps":0}],"tpc":1,"tprm":["T"],"sn":"UnpackPodArray","rt":System.Array.type(System.Object),"p":[$n[0].MessageElementPodArray]},{"a":2,"n":"UnpackPodFromArray","t":8,"pi":[{"n":"l","pt":$n[0].MessageElementPodArray,"ps":0}],"tpc":1,"tprm":["T"],"sn":"UnpackPodFromArray","rt":System.Object,"p":[$n[0].MessageElementPodArray]},{"a":2,"n":"UnpackPodMultiDimArray","t":8,"pi":[{"n":"l","pt":$n[0].MessageElementPodMultiDimArray,"ps":0}],"tpc":1,"tprm":["T"],"sn":"UnpackPodMultiDimArray","rt":$n[0].PodMultiDimArray,"p":[$n[0].MessageElementPodMultiDimArray]},{"v":true,"a":2,"n":"UnpackStructure","t":8,"pi":[{"n":"l","pt":$n[0].MessageElementStructure,"ps":0}],"tpc":1,"tprm":["T"],"sn":"UnpackStructure","rt":System.Object,"p":[$n[0].MessageElementStructure]},{"v":true,"a":2,"n":"UnpackVarType","t":8,"pi":[{"n":"o","pt":$n[0].MessageElement,"ps":0}],"sn":"UnpackVarType","rt":$n[1].Object,"p":[$n[0].MessageElement]},{"a":3,"n":"context","t":4,"rt":$n[0].ClientContext,"sn":"context","ro":true},{"a":3,"n":"node","t":4,"rt":$n[0].RobotRaconteurNode,"sn":"node","ro":true},{"a":1,"n":"sdef","t":4,"rt":$n[0].ServiceDefinition,"sn":"sdef"}]}; }, $n);
    $m("RobotRaconteurWeb.IStructureStub", function () { return {"att":161,"a":2,"m":[{"ab":true,"a":2,"n":"PackStructure","t":8,"pi":[{"n":"s","pt":$n[1].Object,"ps":0}],"sn":"RobotRaconteurWeb$IStructureStub$PackStructure","rt":$n[0].MessageElementStructure,"p":[$n[1].Object]},{"ab":true,"a":2,"n":"UnpackStructure","t":8,"pi":[{"n":"m","pt":$n[0].MessageElementStructure,"ps":0}],"tpc":1,"tprm":["T"],"sn":"RobotRaconteurWeb$IStructureStub$UnpackStructure","rt":System.Object,"p":[$n[0].MessageElementStructure]}]}; }, $n);
    $m("RobotRaconteurWeb.IPodStub", function () { return {"att":161,"a":2,"m":[{"ab":true,"a":2,"n":"PackPod","t":8,"pi":[{"n":"s","pt":$n[1].Object,"ps":0}],"sn":"RobotRaconteurWeb$IPodStub$PackPod","rt":$n[1].Object,"p":[$n[1].Object]},{"ab":true,"a":2,"n":"UnpackPod","t":8,"pi":[{"n":"m","pt":$n[1].Object,"ps":0}],"sn":"RobotRaconteurWeb$IPodStub$UnpackPod","rt":$n[1].Object,"p":[$n[1].Object]}]}; }, $n);
    $m("RobotRaconteurWeb.PodStub$1", function (T) { return {"att":1048705,"a":2,"m":[{"a":3,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"v":true,"a":2,"n":"PackPod","t":8,"pi":[{"n":"s","pt":$n[1].Object,"ps":0}],"sn":"PackPod","rt":$n[1].Object,"p":[$n[1].Object]},{"ab":true,"a":2,"n":"PackPod","t":8,"pi":[{"n":"s","ref":true,"pt":T,"ps":0}],"sn":"PackPod$1","rt":$n[0].MessageElementPod,"p":[T]},{"v":true,"a":2,"n":"PackPodArray","t":8,"pi":[{"n":"s2","pt":System.Array.type(T),"ps":0}],"sn":"PackPodArray","rt":$n[0].MessageElementPodArray,"p":[System.Array.type(T)]},{"v":true,"a":2,"n":"PackPodMultiDimArray","t":8,"pi":[{"n":"s3","pt":$n[0].PodMultiDimArray,"ps":0}],"sn":"PackPodMultiDimArray","rt":$n[0].MessageElementPodMultiDimArray,"p":[$n[0].PodMultiDimArray]},{"v":true,"a":2,"n":"PackPodToArray","t":8,"pi":[{"n":"s2","ref":true,"pt":T,"ps":0}],"sn":"PackPodToArray","rt":$n[0].MessageElementPodArray,"p":[T]},{"ab":true,"a":2,"n":"UnpackPod","t":8,"pi":[{"n":"m","pt":$n[0].MessageElementPod,"ps":0}],"sn":"UnpackPod$1","rt":T,"p":[$n[0].MessageElementPod]},{"v":true,"a":2,"n":"UnpackPod","t":8,"pi":[{"n":"m","pt":$n[1].Object,"ps":0}],"sn":"UnpackPod","rt":$n[1].Object,"p":[$n[1].Object]},{"v":true,"a":2,"n":"UnpackPodArray","t":8,"pi":[{"n":"s2","pt":$n[0].MessageElementPodArray,"ps":0}],"sn":"UnpackPodArray","rt":System.Array.type(T),"p":[$n[0].MessageElementPodArray]},{"v":true,"a":2,"n":"UnpackPodFromArray","t":8,"pi":[{"n":"s2","pt":$n[0].MessageElementPodArray,"ps":0}],"sn":"UnpackPodFromArray","rt":T,"p":[$n[0].MessageElementPodArray]},{"v":true,"a":2,"n":"UnpackPodMultiDimArray","t":8,"pi":[{"n":"s3","pt":$n[0].MessageElementPodMultiDimArray,"ps":0}],"sn":"UnpackPodMultiDimArray","rt":$n[0].PodMultiDimArray,"p":[$n[0].MessageElementPodMultiDimArray]},{"ab":true,"a":2,"n":"TypeName","t":16,"rt":$n[1].String,"g":{"ab":true,"a":2,"n":"get_TypeName","t":8,"rt":$n[1].String,"fg":"TypeName"},"fn":"TypeName"},{"a":1,"backing":true,"n":"<TypeName>k__BackingField","t":4,"rt":$n[1].String,"sn":"TypeName"}]}; }, $n);
    $m("RobotRaconteurWeb.RobotRaconteurServicePod", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].String],"pi":[{"n":"rr_type","pt":$n[1].String,"ps":0}],"sn":"ctor"},{"a":2,"n":"RRType","t":16,"rt":$n[1].String,"g":{"a":2,"n":"get_RRType","t":8,"rt":$n[1].String,"fg":"RRType"},"fn":"RRType"},{"a":1,"backing":true,"n":"<RRType>k__BackingField","t":4,"rt":$n[1].String,"sn":"RRType"}]}; }, $n);
    $m("RobotRaconteurWeb.RobotRaconteurNamedArrayElementTypeAndCount", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].String,$n[1].Type,$n[1].Int32],"pi":[{"n":"rr_type","pt":$n[1].String,"ps":0},{"n":"element_type","pt":$n[1].Type,"ps":1},{"n":"element_array_count","pt":$n[1].Int32,"ps":2}],"sn":"ctor"},{"a":2,"n":"ElementArrayCount","t":16,"rt":$n[1].Int32,"g":{"a":2,"n":"get_ElementArrayCount","t":8,"rt":$n[1].Int32,"fg":"ElementArrayCount","box":function ($v) { return Bridge.box($v, System.Int32);}},"fn":"ElementArrayCount"},{"a":2,"n":"ElementArrayType","t":16,"rt":$n[1].Type,"g":{"a":2,"n":"get_ElementArrayType","t":8,"rt":$n[1].Type,"fg":"ElementArrayType"},"fn":"ElementArrayType"},{"a":2,"n":"RRType","t":16,"rt":$n[1].String,"g":{"a":2,"n":"get_RRType","t":8,"rt":$n[1].String,"fg":"RRType"},"fn":"RRType"},{"a":1,"backing":true,"n":"<ElementArrayCount>k__BackingField","t":4,"rt":$n[1].Int32,"sn":"ElementArrayCount","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"backing":true,"n":"<ElementArrayType>k__BackingField","t":4,"rt":$n[1].Type,"sn":"ElementArrayType"},{"a":1,"backing":true,"n":"<RRType>k__BackingField","t":4,"rt":$n[1].String,"sn":"RRType"}]}; }, $n);
    $m("RobotRaconteurWeb.INamedArrayStub", function () { return {"att":161,"a":2,"m":[{"ab":true,"a":2,"n":"PackNamedArray","t":8,"pi":[{"n":"s","pt":$n[1].Object,"ps":0}],"sn":"RobotRaconteurWeb$INamedArrayStub$PackNamedArray","rt":$n[1].Object,"p":[$n[1].Object]},{"ab":true,"a":2,"n":"UnpackNamedArray","t":8,"pi":[{"n":"m","pt":$n[1].Object,"ps":0}],"sn":"RobotRaconteurWeb$INamedArrayStub$UnpackNamedArray","rt":$n[1].Object,"p":[$n[1].Object]}]}; }, $n);
    $m("RobotRaconteurWeb.INamedArrayStub$1", function (T) { return {"att":161,"a":2,"m":[{"ab":true,"a":2,"n":"PackNamedArray","t":8,"pi":[{"n":"s2","pt":System.Array.type(T),"ps":0}],"sn":"RobotRaconteurWeb$INamedArrayStub$1$" + Bridge.getTypeAlias(T) + "$PackNamedArray$1","rt":$n[0].MessageElementNamedArray,"p":[System.Array.type(T)]},{"ab":true,"a":2,"n":"PackNamedArrayStructToArray","t":8,"pi":[{"n":"s2","ref":true,"pt":T,"ps":0}],"sn":"RobotRaconteurWeb$INamedArrayStub$1$" + Bridge.getTypeAlias(T) + "$PackNamedArrayStructToArray","rt":$n[0].MessageElementNamedArray,"p":[T]},{"ab":true,"a":2,"n":"PackNamedMultiDimArray","t":8,"pi":[{"n":"s3","pt":$n[0].NamedMultiDimArray,"ps":0}],"sn":"RobotRaconteurWeb$INamedArrayStub$1$" + Bridge.getTypeAlias(T) + "$PackNamedMultiDimArray","rt":$n[0].MessageElementNamedMultiDimArray,"p":[$n[0].NamedMultiDimArray]},{"ab":true,"a":2,"n":"UnpackNamedArray","t":8,"pi":[{"n":"s2","pt":$n[0].MessageElementNamedArray,"ps":0}],"sn":"RobotRaconteurWeb$INamedArrayStub$1$" + Bridge.getTypeAlias(T) + "$UnpackNamedArray$1","rt":System.Array.type(T),"p":[$n[0].MessageElementNamedArray]},{"ab":true,"a":2,"n":"UnpackNamedArrayStructFromArray","t":8,"pi":[{"n":"s2","pt":$n[0].MessageElementNamedArray,"ps":0}],"sn":"RobotRaconteurWeb$INamedArrayStub$1$" + Bridge.getTypeAlias(T) + "$UnpackNamedArrayStructFromArray","rt":T,"p":[$n[0].MessageElementNamedArray]},{"ab":true,"a":2,"n":"UnpackNamedMultiDimArray","t":8,"pi":[{"n":"s3","pt":$n[0].MessageElementNamedMultiDimArray,"ps":0}],"sn":"RobotRaconteurWeb$INamedArrayStub$1$" + Bridge.getTypeAlias(T) + "$UnpackNamedMultiDimArray","rt":$n[0].NamedMultiDimArray,"p":[$n[0].MessageElementNamedMultiDimArray]}]}; }, $n);
    $m("RobotRaconteurWeb.NamedArrayStub$2", function (T, U) { return {"att":1048705,"a":2,"m":[{"a":3,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"ab":true,"a":2,"n":"GetNamedArrayFromNumericArray","t":8,"pi":[{"n":"m","pt":System.Array.type(U),"ps":0}],"sn":"GetNamedArrayFromNumericArray","rt":System.Array.type(T),"p":[System.Array.type(U)]},{"ab":true,"a":2,"n":"GetNamedArrayStructFromNumericArray","t":8,"pi":[{"n":"m","pt":System.Array.type(U),"ps":0}],"sn":"GetNamedArrayStructFromNumericArray","rt":T,"p":[System.Array.type(U)]},{"ab":true,"a":2,"n":"GetNumericArrayFromNamedArray","t":8,"pi":[{"n":"s","pt":System.Array.type(T),"ps":0}],"sn":"GetNumericArrayFromNamedArray","rt":System.Array.type(U),"p":[System.Array.type(T)]},{"ab":true,"a":2,"n":"GetNumericArrayFromNamedArrayStruct","t":8,"pi":[{"n":"s","ref":true,"pt":T,"ps":0}],"sn":"GetNumericArrayFromNamedArrayStruct","rt":System.Array.type(U),"p":[T]},{"v":true,"a":2,"n":"PackNamedArray","t":8,"pi":[{"n":"s","pt":$n[1].Object,"ps":0}],"sn":"PackNamedArray","rt":$n[1].Object,"p":[$n[1].Object]},{"v":true,"a":2,"n":"PackNamedArray","t":8,"pi":[{"n":"s2","pt":System.Array.type(T),"ps":0}],"sn":"PackNamedArray$1","rt":$n[0].MessageElementNamedArray,"p":[System.Array.type(T)]},{"v":true,"a":2,"n":"PackNamedArrayStructToArray","t":8,"pi":[{"n":"s2","ref":true,"pt":T,"ps":0}],"sn":"PackNamedArrayStructToArray","rt":$n[0].MessageElementNamedArray,"p":[T]},{"v":true,"a":2,"n":"PackNamedMultiDimArray","t":8,"pi":[{"n":"s3","pt":$n[0].NamedMultiDimArray,"ps":0}],"sn":"PackNamedMultiDimArray","rt":$n[0].MessageElementNamedMultiDimArray,"p":[$n[0].NamedMultiDimArray]},{"v":true,"a":2,"n":"UnpackNamedArray","t":8,"pi":[{"n":"s2","pt":$n[0].MessageElementNamedArray,"ps":0}],"sn":"UnpackNamedArray$1","rt":System.Array.type(T),"p":[$n[0].MessageElementNamedArray]},{"v":true,"a":2,"n":"UnpackNamedArray","t":8,"pi":[{"n":"m","pt":$n[1].Object,"ps":0}],"sn":"UnpackNamedArray","rt":$n[1].Object,"p":[$n[1].Object]},{"v":true,"a":2,"n":"UnpackNamedArrayStructFromArray","t":8,"pi":[{"n":"s2","pt":$n[0].MessageElementNamedArray,"ps":0}],"sn":"UnpackNamedArrayStructFromArray","rt":T,"p":[$n[0].MessageElementNamedArray]},{"v":true,"a":2,"n":"UnpackNamedMultiDimArray","t":8,"pi":[{"n":"s3","pt":$n[0].MessageElementNamedMultiDimArray,"ps":0}],"sn":"UnpackNamedMultiDimArray","rt":$n[0].NamedMultiDimArray,"p":[$n[0].MessageElementNamedMultiDimArray]},{"ab":true,"a":2,"n":"TypeName","t":16,"rt":$n[1].String,"g":{"ab":true,"a":2,"n":"get_TypeName","t":8,"rt":$n[1].String,"fg":"TypeName"},"fn":"TypeName"},{"a":1,"backing":true,"n":"<TypeName>k__BackingField","t":4,"rt":$n[1].String,"sn":"TypeName"}]}; }, $n);
    $m("RobotRaconteurWeb.ITimer", function () { return {"att":161,"a":2,"m":[{"ab":true,"a":2,"n":"Start","t":8,"sn":"RobotRaconteurWeb$ITimer$Start","rt":$n[1].Void},{"ab":true,"a":2,"n":"Stop","t":8,"sn":"RobotRaconteurWeb$ITimer$Stop","rt":$n[1].Void},{"ab":true,"a":2,"n":"IsRunning","t":16,"rt":$n[1].Boolean,"g":{"ab":true,"a":2,"n":"get_IsRunning","t":8,"rt":$n[1].Boolean,"fg":"RobotRaconteurWeb$ITimer$IsRunning","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"fn":"RobotRaconteurWeb$ITimer$IsRunning"},{"ab":true,"a":2,"n":"Period","t":16,"rt":$n[1].Int32,"g":{"ab":true,"a":2,"n":"get_Period","t":8,"rt":$n[1].Int32,"fg":"RobotRaconteurWeb$ITimer$Period","box":function ($v) { return Bridge.box($v, System.Int32);}},"s":{"ab":true,"a":2,"n":"set_Period","t":8,"p":[$n[1].Int32],"rt":$n[1].Void,"fs":"RobotRaconteurWeb$ITimer$Period"},"fn":"RobotRaconteurWeb$ITimer$Period"},{"a":1,"backing":true,"n":"<IsRunning>k__BackingField","t":4,"rt":$n[1].Boolean,"sn":"RobotRaconteurWeb$ITimer$IsRunning","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"backing":true,"n":"<Period>k__BackingField","t":4,"rt":$n[1].Int32,"sn":"RobotRaconteurWeb$ITimer$Period","box":function ($v) { return Bridge.box($v, System.Int32);}}]}; }, $n);
    $m("RobotRaconteurWeb.IRate", function () { return {"att":161,"a":2,"m":[{"ab":true,"a":2,"n":"Sleep","t":8,"sn":"RobotRaconteurWeb$IRate$Sleep","rt":$n[5].Task}]}; }, $n);
    $m("RobotRaconteurWeb.TimerEvent", function () { return {"att":1048841,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"current_expected","t":4,"rt":$n[1].DateTime,"sn":"current_expected","box":function ($v) { return Bridge.box($v, System.DateTime, System.DateTime.format);}},{"a":2,"n":"current_real","t":4,"rt":$n[1].DateTime,"sn":"current_real","box":function ($v) { return Bridge.box($v, System.DateTime, System.DateTime.format);}},{"a":2,"n":"last_expected","t":4,"rt":$n[1].DateTime,"sn":"last_expected","box":function ($v) { return Bridge.box($v, System.DateTime, System.DateTime.format);}},{"a":2,"n":"last_real","t":4,"rt":$n[1].DateTime,"sn":"last_real","box":function ($v) { return Bridge.box($v, System.DateTime, System.DateTime.format);}},{"a":2,"n":"stopped","t":4,"rt":$n[1].Boolean,"sn":"stopped","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}}]}; }, $n);
    $m("RobotRaconteurWeb.WallTimer", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].Int32,Function,$n[1].Boolean,$n[0].RobotRaconteurNode],"pi":[{"n":"period","pt":$n[1].Int32,"ps":0},{"n":"handler","pt":Function,"ps":1},{"n":"oneshot","pt":$n[1].Boolean,"ps":2},{"n":"node","dv":null,"o":true,"pt":$n[0].RobotRaconteurNode,"ps":3}],"sn":"ctor"},{"a":1,"n":"RunOne","t":8,"sn":"RunOne","rt":$n[5].Task},{"a":2,"n":"Start","t":8,"sn":"Start","rt":$n[1].Void},{"a":2,"n":"Stop","t":8,"sn":"Stop","rt":$n[1].Void},{"a":1,"n":"periodic_handler","t":8,"sn":"periodic_handler","rt":$n[1].Void},{"a":2,"n":"IsRunning","t":16,"rt":$n[1].Boolean,"g":{"a":2,"n":"get_IsRunning","t":8,"rt":$n[1].Boolean,"fg":"IsRunning","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"fn":"IsRunning"},{"a":2,"n":"Period","t":16,"rt":$n[1].Int32,"g":{"a":2,"n":"get_Period","t":8,"rt":$n[1].Int32,"fg":"Period","box":function ($v) { return Bridge.box($v, System.Int32);}},"s":{"a":2,"n":"set_Period","t":8,"p":[$n[1].Int32],"rt":$n[1].Void,"fs":"Period"},"fn":"Period"},{"a":3,"n":"actual_last_time","t":4,"rt":$n[1].DateTime,"sn":"actual_last_time","box":function ($v) { return Bridge.box($v, System.DateTime, System.DateTime.format);}},{"a":3,"n":"cancel","t":4,"rt":$n[4].CancellationTokenSource,"sn":"cancel"},{"a":3,"n":"handler","t":4,"rt":Function,"sn":"handler"},{"a":3,"n":"last_time","t":4,"rt":$n[1].DateTime,"sn":"last_time","box":function ($v) { return Bridge.box($v, System.DateTime, System.DateTime.format);}},{"a":3,"n":"node","t":4,"rt":$n[0].RobotRaconteurNode,"sn":"node"},{"a":3,"n":"oneshot","t":4,"rt":$n[1].Boolean,"sn":"oneshot","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":3,"n":"start_time","t":4,"rt":$n[1].DateTime,"sn":"start_time","box":function ($v) { return Bridge.box($v, System.DateTime, System.DateTime.format);}},{"a":1,"backing":true,"n":"<Period>k__BackingField","t":4,"rt":$n[1].Int32,"sn":"Period","box":function ($v) { return Bridge.box($v, System.Int32);}}]}; }, $n);
    $m("RobotRaconteurWeb.WallRate", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].Double,$n[0].RobotRaconteurNode],"pi":[{"n":"frequency","pt":$n[1].Double,"ps":0},{"n":"node","dv":null,"o":true,"pt":$n[0].RobotRaconteurNode,"ps":1}],"sn":"ctor"},{"a":2,"n":"Sleep","t":8,"sn":"Sleep","rt":$n[5].Task},{"a":3,"n":"last_time","t":4,"rt":$n[1].DateTime,"sn":"last_time","box":function ($v) { return Bridge.box($v, System.DateTime, System.DateTime.format);}},{"a":3,"n":"node","t":4,"rt":$n[0].RobotRaconteurNode,"sn":"node"},{"a":3,"n":"period","t":4,"rt":$n[1].Double,"sn":"period","box":function ($v) { return Bridge.box($v, System.Double, System.Double.format, System.Double.getHashCode);}},{"a":3,"n":"start_time","t":4,"rt":$n[1].DateTime,"sn":"start_time","box":function ($v) { return Bridge.box($v, System.DateTime, System.DateTime.format);}}]}; }, $n);
    $m("RobotRaconteurWeb.ITransportConnection", function () { return {"att":161,"a":2,"m":[{"ab":true,"a":2,"n":"CheckConnection","t":8,"pi":[{"n":"endpoint","pt":$n[1].UInt32,"ps":0}],"sn":"RobotRaconteurWeb$ITransportConnection$CheckConnection","rt":$n[1].Void,"p":[$n[1].UInt32]},{"ab":true,"a":2,"n":"Close","t":8,"sn":"RobotRaconteurWeb$ITransportConnection$Close","rt":$n[1].Void},{"ab":true,"a":2,"n":"SendMessage","t":8,"pi":[{"n":"m","pt":$n[0].Message,"ps":0},{"n":"cancel","pt":$n[4].CancellationToken,"ps":1}],"sn":"RobotRaconteurWeb$ITransportConnection$SendMessage","rt":$n[5].Task,"p":[$n[0].Message,$n[4].CancellationToken]},{"ab":true,"a":2,"n":"LocalEndpoint","t":16,"rt":$n[1].UInt32,"g":{"ab":true,"a":2,"n":"get_LocalEndpoint","t":8,"rt":$n[1].UInt32,"fg":"RobotRaconteurWeb$ITransportConnection$LocalEndpoint","box":function ($v) { return Bridge.box($v, System.UInt32);}},"fn":"RobotRaconteurWeb$ITransportConnection$LocalEndpoint"},{"ab":true,"a":2,"n":"RemoteEndpoint","t":16,"rt":$n[1].UInt32,"g":{"ab":true,"a":2,"n":"get_RemoteEndpoint","t":8,"rt":$n[1].UInt32,"fg":"RobotRaconteurWeb$ITransportConnection$RemoteEndpoint","box":function ($v) { return Bridge.box($v, System.UInt32);}},"fn":"RobotRaconteurWeb$ITransportConnection$RemoteEndpoint"},{"ab":true,"a":2,"n":"RemoteNodeID","t":16,"rt":$n[0].NodeID,"g":{"ab":true,"a":2,"n":"get_RemoteNodeID","t":8,"rt":$n[0].NodeID,"fg":"RobotRaconteurWeb$ITransportConnection$RemoteNodeID"},"fn":"RobotRaconteurWeb$ITransportConnection$RemoteNodeID"},{"a":1,"backing":true,"n":"<LocalEndpoint>k__BackingField","t":4,"rt":$n[1].UInt32,"sn":"RobotRaconteurWeb$ITransportConnection$LocalEndpoint","box":function ($v) { return Bridge.box($v, System.UInt32);}},{"a":1,"backing":true,"n":"<RemoteEndpoint>k__BackingField","t":4,"rt":$n[1].UInt32,"sn":"RobotRaconteurWeb$ITransportConnection$RemoteEndpoint","box":function ($v) { return Bridge.box($v, System.UInt32);}},{"a":1,"backing":true,"n":"<RemoteNodeID>k__BackingField","t":4,"rt":$n[0].NodeID,"sn":"RobotRaconteurWeb$ITransportConnection$RemoteNodeID"}]}; }, $n);
    $m("RobotRaconteurWeb.Transport", function () { return {"nested":[Function],"att":1048705,"a":2,"m":[{"a":3,"n":".ctor","t":1,"p":[$n[0].RobotRaconteurNode],"pi":[{"n":"node","dv":null,"o":true,"pt":$n[0].RobotRaconteurNode,"ps":0}],"sn":"ctor"},{"ab":true,"a":2,"n":"CanConnectService","t":8,"pi":[{"n":"url","pt":$n[1].String,"ps":0}],"sn":"CanConnectService","rt":$n[1].Boolean,"p":[$n[1].String],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"v":true,"a":2,"n":"CheckConnection","t":8,"pi":[{"n":"endpoint","pt":$n[1].UInt32,"ps":0}],"sn":"CheckConnection","rt":$n[1].Void,"p":[$n[1].UInt32]},{"v":true,"a":2,"n":"Close","t":8,"sn":"Close","rt":$n[5].Task},{"ab":true,"a":2,"n":"CloseTransportConnection","t":8,"pi":[{"n":"e","pt":$n[0].Endpoint,"ps":0},{"n":"cancel","pt":$n[4].CancellationToken,"ps":1}],"sn":"CloseTransportConnection","rt":$n[5].Task,"p":[$n[0].Endpoint,$n[4].CancellationToken]},{"ab":true,"a":2,"n":"CreateTransportConnection","t":8,"pi":[{"n":"url","pt":$n[1].String,"ps":0},{"n":"e","pt":$n[0].Endpoint,"ps":1},{"n":"cancel","pt":$n[4].CancellationToken,"ps":2}],"sn":"CreateTransportConnection","rt":$n[5].Task$1(RobotRaconteurWeb.ITransportConnection),"p":[$n[1].String,$n[0].Endpoint,$n[4].CancellationToken]},{"a":3,"n":"FireTransportEventListener","t":8,"pi":[{"n":"ev","pt":$n[0].TransportListenerEventType,"ps":0},{"n":"parameter","pt":$n[1].Object,"ps":1}],"sn":"FireTransportEventListener","rt":$n[1].Void,"p":[$n[0].TransportListenerEventType,$n[1].Object]},{"v":true,"a":2,"n":"GetDetectedNodes","t":8,"pi":[{"n":"token","pt":$n[4].CancellationToken,"ps":0}],"sn":"GetDetectedNodes","rt":$n[5].Task$1(System.Collections.Generic.List$1(RobotRaconteurWeb.NodeDiscoveryInfo)),"p":[$n[4].CancellationToken]},{"v":true,"a":2,"n":"LocalNodeServicesChanged","t":8,"sn":"LocalNodeServicesChanged","rt":$n[1].Void},{"v":true,"a":5,"n":"MessageReceived","t":8,"pi":[{"n":"m","pt":$n[0].Message,"ps":0}],"sn":"MessageReceived","rt":$n[1].Void,"p":[$n[0].Message]},{"v":true,"a":2,"n":"SendDiscoveryRequest","t":8,"sn":"SendDiscoveryRequest","rt":$n[1].Void},{"v":true,"a":2,"n":"SendMessage","t":8,"pi":[{"n":"m","pt":$n[0].Message,"ps":0},{"n":"cancel","pt":$n[4].CancellationToken,"ps":1}],"sn":"SendMessage","rt":$n[5].Task,"p":[$n[0].Message,$n[4].CancellationToken]},{"a":5,"n":"SpecialRequest","t":8,"pi":[{"n":"m","pt":$n[0].Message,"ps":0}],"sn":"SpecialRequest","rt":$n[5].Task$1(RobotRaconteurWeb.Message),"p":[$n[0].Message]},{"v":true,"a":2,"n":"TransportCapability","t":8,"pi":[{"n":"name","pt":$n[1].String,"ps":0}],"sn":"TransportCapability","rt":$n[1].UInt32,"p":[$n[1].String],"box":function ($v) { return Bridge.box($v, System.UInt32);}},{"a":2,"n":"CurrentThreadTransport","is":true,"t":16,"rt":$n[0].ITransportConnection,"g":{"a":2,"n":"get_CurrentThreadTransport","t":8,"rt":$n[0].ITransportConnection,"fg":"CurrentThreadTransport","is":true},"fn":"CurrentThreadTransport"},{"a":2,"n":"CurrentThreadTransportConnectionURL","is":true,"t":16,"rt":$n[1].String,"g":{"a":2,"n":"get_CurrentThreadTransportConnectionURL","t":8,"rt":$n[1].String,"fg":"CurrentThreadTransportConnectionURL","is":true},"fn":"CurrentThreadTransportConnectionURL"},{"ab":true,"a":2,"n":"IsClient","t":16,"rt":$n[1].Boolean,"g":{"ab":true,"a":2,"n":"get_IsClient","t":8,"rt":$n[1].Boolean,"fg":"IsClient","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"fn":"IsClient"},{"ab":true,"a":2,"n":"IsServer","t":16,"rt":$n[1].Boolean,"g":{"ab":true,"a":2,"n":"get_IsServer","t":8,"rt":$n[1].Boolean,"fg":"IsServer","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"fn":"IsServer"},{"ab":true,"a":2,"n":"UrlSchemeString","t":16,"rt":$n[1].Array.type(System.String),"g":{"ab":true,"a":2,"n":"get_UrlSchemeString","t":8,"rt":$n[1].Array.type(System.String),"fg":"UrlSchemeString"},"fn":"UrlSchemeString"},{"a":5,"n":"TransportID","t":4,"rt":$n[1].UInt32,"sn":"TransportID","box":function ($v) { return Bridge.box($v, System.UInt32);}},{"a":5,"n":"m_CurrentThreadTransport","is":true,"t":4,"rt":$n[0].ITransportConnection,"sn":"m_CurrentThreadTransport"},{"a":5,"n":"m_CurrentThreadTransportConnectionURL","is":true,"t":4,"rt":$n[1].String,"sn":"m_CurrentThreadTransportConnectionURL"},{"a":5,"n":"node","t":4,"rt":$n[0].RobotRaconteurNode,"sn":"node","ro":true},{"a":2,"n":"MessageReceivedEvent","t":2,"ad":{"a":2,"n":"add_MessageReceivedEvent","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"addMessageReceivedEvent","rt":$n[1].Void,"p":[Function]},"r":{"a":2,"n":"remove_MessageReceivedEvent","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"removeMessageReceivedEvent","rt":$n[1].Void,"p":[Function]}},{"a":2,"n":"TransportListeners","t":2,"ad":{"a":2,"n":"add_TransportListeners","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"addTransportListeners","rt":$n[1].Void,"p":[Function]},"r":{"a":2,"n":"remove_TransportListeners","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"removeTransportListeners","rt":$n[1].Void,"p":[Function]}},{"a":1,"backing":true,"n":"<IsClient>k__BackingField","t":4,"rt":$n[1].Boolean,"sn":"IsClient","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"backing":true,"n":"<IsServer>k__BackingField","t":4,"rt":$n[1].Boolean,"sn":"IsServer","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"backing":true,"n":"<UrlSchemeString>k__BackingField","t":4,"rt":$n[1].Array.type(System.String),"sn":"UrlSchemeString"}]}; }, $n);
    $m("RobotRaconteurWeb.TransportListenerEventType", function () { return {"att":257,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"TransportClosed","is":true,"t":4,"rt":$n[0].TransportListenerEventType,"sn":"TransportClosed","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.TransportListenerEventType, System.Enum.toStringFn(RobotRaconteurWeb.TransportListenerEventType));}},{"a":2,"n":"TransportConnectionClosed","is":true,"t":4,"rt":$n[0].TransportListenerEventType,"sn":"TransportConnectionClosed","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.TransportListenerEventType, System.Enum.toStringFn(RobotRaconteurWeb.TransportListenerEventType));}}]}; }, $n);
    $m("RobotRaconteurWeb.ParseConnectionUrlResult", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"host","t":4,"rt":$n[1].String,"sn":"host"},{"a":2,"n":"nodeid","t":4,"rt":$n[0].NodeID,"sn":"nodeid"},{"a":2,"n":"nodename","t":4,"rt":$n[1].String,"sn":"nodename"},{"a":2,"n":"path","t":4,"rt":$n[1].String,"sn":"path"},{"a":2,"n":"port","t":4,"rt":$n[1].Int32,"sn":"port","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"scheme","t":4,"rt":$n[1].String,"sn":"scheme"},{"a":2,"n":"service","t":4,"rt":$n[1].String,"sn":"service"}]}; }, $n);
    $m("RobotRaconteurWeb.TransportUtil", function () { return {"att":1048961,"a":2,"s":true,"m":[{"a":2,"n":"ParseConnectionUrl","is":true,"t":8,"pi":[{"n":"url","pt":$n[1].String,"ps":0}],"sn":"ParseConnectionUrl","rt":$n[0].ParseConnectionUrlResult,"p":[$n[1].String]}]}; }, $n);
    $m("RobotRaconteurWeb.Wire$1", function (T) { return {"nested":[$n[0].Wire$1.WireConnection,Function,Function,Function],"att":1048705,"a":2,"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"},{"ab":true,"a":3,"n":"Close","t":8,"pi":[{"n":"c","pt":$n[0].Wire$1.WireConnection(T),"ps":0},{"n":"e","dv":null,"o":true,"pt":$n[0].Endpoint,"ps":1},{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":2}],"sn":"Close","rt":$n[5].Task,"p":[$n[0].Wire$1.WireConnection(T),$n[0].Endpoint,$n[4].CancellationToken]},{"ab":true,"a":2,"n":"Connect","t":8,"pi":[{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":0}],"sn":"Connect","rt":$n[5].Task$1(RobotRaconteurWeb.Wire$1.WireConnection(T)),"p":[$n[4].CancellationToken]},{"a":3,"n":"DispatchPacket","t":8,"pi":[{"n":"me","pt":$n[3].List$1(RobotRaconteurWeb.MessageElement),"ps":0},{"n":"e","pt":$n[0].Wire$1.WireConnection(T),"ps":1}],"sn":"DispatchPacket","rt":$n[1].Void,"p":[$n[3].List$1(RobotRaconteurWeb.MessageElement),$n[0].Wire$1.WireConnection(T)]},{"a":3,"n":"PackPacket","t":8,"pi":[{"n":"data","pt":T,"ps":0},{"n":"time","pt":$n[0].TimeSpec,"ps":1}],"sn":"PackPacket","rt":$n[3].List$1(RobotRaconteurWeb.MessageElement),"p":[T,$n[0].TimeSpec]},{"ab":true,"a":3,"n":"PackVarType","t":8,"pi":[{"n":"o","pt":$n[1].Object,"ps":0}],"sn":"PackVarType","rt":$n[1].Object,"p":[$n[1].Object]},{"ab":true,"a":2,"n":"PeekInValue","t":8,"pi":[{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":0}],"sn":"PeekInValue","rt":$n[5].Task$1(System.Tuple$2(T,RobotRaconteurWeb.TimeSpec)),"p":[$n[4].CancellationToken]},{"ab":true,"a":2,"n":"PeekOutValue","t":8,"pi":[{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":0}],"sn":"PeekOutValue","rt":$n[5].Task$1(System.Tuple$2(T,RobotRaconteurWeb.TimeSpec)),"p":[$n[4].CancellationToken]},{"ab":true,"a":2,"n":"PokeOutValue","t":8,"pi":[{"n":"value","pt":T,"ps":0},{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":1}],"sn":"PokeOutValue","rt":$n[5].Task,"p":[T,$n[4].CancellationToken]},{"ab":true,"a":2,"n":"SendWirePacket","t":8,"pi":[{"n":"packet","pt":T,"ps":0},{"n":"time","pt":$n[0].TimeSpec,"ps":1},{"n":"e","dv":null,"o":true,"pt":$n[0].Endpoint,"ps":2}],"sn":"SendWirePacket","rt":$n[1].Void,"p":[T,$n[0].TimeSpec,$n[0].Endpoint]},{"ab":true,"a":2,"n":"Shutdown","t":8,"sn":"Shutdown","rt":$n[1].Void},{"a":3,"n":"UnpackPacket","t":8,"pi":[{"n":"me","pt":$n[3].List$1(RobotRaconteurWeb.MessageElement),"ps":0},{"n":"timespec","out":true,"pt":$n[0].TimeSpec,"ps":1}],"sn":"UnpackPacket","rt":T,"p":[$n[3].List$1(RobotRaconteurWeb.MessageElement),$n[0].TimeSpec]},{"ab":true,"a":3,"n":"UnpackVarType","t":8,"pi":[{"n":"o","pt":$n[0].MessageElement,"ps":0}],"sn":"UnpackVarType","rt":$n[1].Object,"p":[$n[0].MessageElement]},{"ab":true,"a":2,"n":"WirePacketReceived","t":8,"pi":[{"n":"m","pt":$n[0].MessageEntry,"ps":0},{"n":"e","dv":null,"o":true,"pt":$n[0].Endpoint,"ps":1}],"sn":"WirePacketReceived","rt":$n[1].Void,"p":[$n[0].MessageEntry,$n[0].Endpoint]},{"ab":true,"a":2,"n":"MemberName","t":16,"rt":$n[1].String,"g":{"ab":true,"a":2,"n":"get_MemberName","t":8,"rt":$n[1].String,"fg":"MemberName"},"fn":"MemberName"},{"ab":true,"a":2,"n":"PeekInValueCallback","t":16,"rt":Function,"g":{"ab":true,"a":2,"n":"get_PeekInValueCallback","t":8,"rt":Function,"fg":"PeekInValueCallback"},"s":{"ab":true,"a":2,"n":"set_PeekInValueCallback","t":8,"p":[Function],"rt":$n[1].Void,"fs":"PeekInValueCallback"},"fn":"PeekInValueCallback"},{"ab":true,"a":2,"n":"PeekOutValueCallback","t":16,"rt":Function,"g":{"ab":true,"a":2,"n":"get_PeekOutValueCallback","t":8,"rt":Function,"fg":"PeekOutValueCallback"},"s":{"ab":true,"a":2,"n":"set_PeekOutValueCallback","t":8,"p":[Function],"rt":$n[1].Void,"fs":"PeekOutValueCallback"},"fn":"PeekOutValueCallback"},{"ab":true,"a":2,"n":"PokeOutValueCallback","t":16,"rt":Function,"g":{"ab":true,"a":2,"n":"get_PokeOutValueCallback","t":8,"rt":Function,"fg":"PokeOutValueCallback"},"s":{"ab":true,"a":2,"n":"set_PokeOutValueCallback","t":8,"p":[Function],"rt":$n[1].Void,"fs":"PokeOutValueCallback"},"fn":"PokeOutValueCallback"},{"ab":true,"a":2,"n":"WireConnectCallback","t":16,"rt":Function,"g":{"ab":true,"a":2,"n":"get_WireConnectCallback","t":8,"rt":Function,"fg":"WireConnectCallback"},"s":{"ab":true,"a":2,"n":"set_WireConnectCallback","t":8,"p":[Function],"rt":$n[1].Void,"fs":"WireConnectCallback"},"fn":"WireConnectCallback"},{"a":3,"n":"direction","t":4,"rt":$n[0].MemberDefinition_Direction,"sn":"direction","box":function ($v) { return Bridge.box($v, RobotRaconteurWeb.MemberDefinition_Direction, System.Enum.toStringFn(RobotRaconteurWeb.MemberDefinition_Direction));}},{"a":1,"n":"rawelements","t":4,"rt":$n[1].Boolean,"sn":"rawelements","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"backing":true,"n":"<MemberName>k__BackingField","t":4,"rt":$n[1].String,"sn":"MemberName"},{"a":1,"backing":true,"n":"<PeekInValueCallback>k__BackingField","t":4,"rt":Function,"sn":"PeekInValueCallback"},{"a":1,"backing":true,"n":"<PeekOutValueCallback>k__BackingField","t":4,"rt":Function,"sn":"PeekOutValueCallback"},{"a":1,"backing":true,"n":"<PokeOutValueCallback>k__BackingField","t":4,"rt":Function,"sn":"PokeOutValueCallback"},{"a":1,"backing":true,"n":"<WireConnectCallback>k__BackingField","t":4,"rt":Function,"sn":"WireConnectCallback"}]}; }, $n);
    $m("RobotRaconteurWeb.Wire$1.WireConnection", function (T) { return {"td":$n[0].Wire$1(T),"att":1048578,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[0].Wire$1(T),$n[0].Endpoint],"pi":[{"n":"parent","pt":$n[0].Wire$1(T),"ps":0},{"n":"endpoint","dv":null,"o":true,"pt":$n[0].Endpoint,"ps":1}],"sn":"ctor"},{"v":true,"a":2,"n":"Close","t":8,"sn":"Close","rt":$n[5].Task},{"v":true,"a":5,"n":"RemoteClose","t":8,"sn":"RemoteClose","rt":$n[1].Void},{"v":true,"a":5,"n":"WirePacketReceived","t":8,"pi":[{"n":"timespec","pt":$n[0].TimeSpec,"ps":0},{"n":"packet","pt":T,"ps":1}],"sn":"WirePacketReceived","rt":$n[1].Void,"p":[$n[0].TimeSpec,T]},{"a":2,"n":"Endpoint","t":16,"rt":$n[1].UInt32,"g":{"a":2,"n":"get_Endpoint","t":8,"rt":$n[1].UInt32,"fg":"Endpoint","box":function ($v) { return Bridge.box($v, System.UInt32);}},"fn":"Endpoint"},{"v":true,"a":2,"n":"InValue","t":16,"rt":T,"g":{"v":true,"a":2,"n":"get_InValue","t":8,"rt":T,"fg":"InValue"},"fn":"InValue"},{"v":true,"a":2,"n":"LastValueReceivedTime","t":16,"rt":$n[0].TimeSpec,"g":{"v":true,"a":2,"n":"get_LastValueReceivedTime","t":8,"rt":$n[0].TimeSpec,"fg":"LastValueReceivedTime"},"fn":"LastValueReceivedTime"},{"v":true,"a":2,"n":"LastValueSentTime","t":16,"rt":$n[0].TimeSpec,"g":{"v":true,"a":2,"n":"get_LastValueSentTime","t":8,"rt":$n[0].TimeSpec,"fg":"LastValueSentTime"},"fn":"LastValueSentTime"},{"v":true,"a":2,"n":"OutValue","t":16,"rt":T,"g":{"v":true,"a":2,"n":"get_OutValue","t":8,"rt":T,"fg":"OutValue"},"s":{"v":true,"a":2,"n":"set_OutValue","t":8,"p":[T],"rt":$n[1].Void,"fs":"OutValue"},"fn":"OutValue"},{"a":2,"n":"WireCloseCallback","t":16,"rt":Function,"g":{"a":2,"n":"get_WireCloseCallback","t":8,"rt":Function,"fg":"WireCloseCallback"},"s":{"a":2,"n":"set_WireCloseCallback","t":8,"p":[Function],"rt":$n[1].Void,"fs":"WireCloseCallback"},"fn":"WireCloseCallback"},{"a":1,"n":"close_callback","t":4,"rt":Function,"sn":"close_callback"},{"a":3,"n":"endpoint","t":4,"rt":$n[0].Endpoint,"sn":"endpoint"},{"a":3,"n":"inval","t":4,"rt":T,"sn":"inval"},{"a":3,"n":"inval_valid","t":4,"rt":$n[1].Boolean,"sn":"inval_valid","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":3,"n":"last_sendtime","t":4,"rt":$n[0].TimeSpec,"sn":"last_sendtime"},{"a":1,"n":"lasttime_recv","t":4,"rt":$n[0].TimeSpec,"sn":"lasttime_recv"},{"a":3,"n":"lasttime_send","t":4,"rt":$n[0].TimeSpec,"sn":"lasttime_send"},{"a":3,"n":"outval","t":4,"rt":T,"sn":"outval"},{"a":3,"n":"outval_valid","t":4,"rt":$n[1].Boolean,"sn":"outval_valid","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":3,"n":"parent","t":4,"rt":$n[0].Wire$1(T),"sn":"parent"},{"a":1,"n":"recv_lock","t":4,"rt":$n[1].Object,"sn":"recv_lock"},{"a":3,"n":"sendlock","t":4,"rt":$n[1].Object,"sn":"sendlock"},{"a":2,"n":"WireValueChanged","t":2,"ad":{"a":2,"n":"add_WireValueChanged","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"addWireValueChanged","rt":$n[1].Void,"p":[Function]},"r":{"a":2,"n":"remove_WireValueChanged","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"removeWireValueChanged","rt":$n[1].Void,"p":[Function]}}]}; }, $n);
    $m("RobotRaconteurWeb.WireClient$1", function (T) { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].String,$n[0].ServiceStub],"pi":[{"n":"name","pt":$n[1].String,"ps":0},{"n":"stub","pt":$n[0].ServiceStub,"ps":1}],"sn":"ctor"},{"v":true,"a":3,"n":"ClientContextListener","t":8,"pi":[{"n":"context","pt":$n[0].ClientContext,"ps":0},{"n":"event_","pt":$n[0].ClientServiceListenerEventType,"ps":1},{"n":"param","pt":$n[1].Object,"ps":2}],"sn":"ClientContextListener","rt":$n[1].Void,"p":[$n[0].ClientContext,$n[0].ClientServiceListenerEventType,$n[1].Object]},{"ov":true,"a":3,"n":"Close","t":8,"pi":[{"n":"c","pt":$n[0].Wire$1.WireConnection(T),"ps":0},{"n":"e","dv":null,"o":true,"pt":$n[0].Endpoint,"ps":1},{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":2}],"sn":"Close","rt":$n[5].Task,"p":[$n[0].Wire$1.WireConnection(T),$n[0].Endpoint,$n[4].CancellationToken]},{"ov":true,"a":2,"n":"Connect","t":8,"pi":[{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":0}],"sn":"Connect","rt":$n[5].Task$1(RobotRaconteurWeb.Wire$1.WireConnection(T)),"p":[$n[4].CancellationToken]},{"ov":true,"a":3,"n":"PackVarType","t":8,"pi":[{"n":"o","pt":$n[1].Object,"ps":0}],"sn":"PackVarType","rt":$n[1].Object,"p":[$n[1].Object]},{"ov":true,"a":2,"n":"PeekInValue","t":8,"pi":[{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":0}],"sn":"PeekInValue","rt":$n[5].Task$1(System.Tuple$2(T,RobotRaconteurWeb.TimeSpec)),"p":[$n[4].CancellationToken]},{"ov":true,"a":2,"n":"PeekOutValue","t":8,"pi":[{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":0}],"sn":"PeekOutValue","rt":$n[5].Task$1(System.Tuple$2(T,RobotRaconteurWeb.TimeSpec)),"p":[$n[4].CancellationToken]},{"ov":true,"a":2,"n":"PokeOutValue","t":8,"pi":[{"n":"value","pt":T,"ps":0},{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":1}],"sn":"PokeOutValue","rt":$n[5].Task,"p":[T,$n[4].CancellationToken]},{"ov":true,"a":2,"n":"SendWirePacket","t":8,"pi":[{"n":"packet","pt":T,"ps":0},{"n":"time","pt":$n[0].TimeSpec,"ps":1},{"n":"e","dv":null,"o":true,"pt":$n[0].Endpoint,"ps":2}],"sn":"SendWirePacket","rt":$n[1].Void,"p":[T,$n[0].TimeSpec,$n[0].Endpoint]},{"ov":true,"a":2,"n":"Shutdown","t":8,"sn":"Shutdown","rt":$n[1].Void},{"ov":true,"a":3,"n":"UnpackVarType","t":8,"pi":[{"n":"o","pt":$n[0].MessageElement,"ps":0}],"sn":"UnpackVarType","rt":$n[1].Object,"p":[$n[0].MessageElement]},{"ov":true,"a":2,"n":"WirePacketReceived","t":8,"pi":[{"n":"m","pt":$n[0].MessageEntry,"ps":0},{"n":"e","dv":null,"o":true,"pt":$n[0].Endpoint,"ps":1}],"sn":"WirePacketReceived","rt":$n[1].Void,"p":[$n[0].MessageEntry,$n[0].Endpoint]},{"ov":true,"a":2,"n":"MemberName","t":16,"rt":$n[1].String,"g":{"ov":true,"a":2,"n":"get_MemberName","t":8,"rt":$n[1].String,"fg":"MemberName"},"fn":"MemberName"},{"ov":true,"a":2,"n":"PeekInValueCallback","t":16,"rt":Function,"g":{"ov":true,"a":2,"n":"get_PeekInValueCallback","t":8,"rt":Function,"fg":"PeekInValueCallback"},"s":{"ov":true,"a":2,"n":"set_PeekInValueCallback","t":8,"p":[Function],"rt":$n[1].Void,"fs":"PeekInValueCallback"},"fn":"PeekInValueCallback"},{"ov":true,"a":2,"n":"PeekOutValueCallback","t":16,"rt":Function,"g":{"ov":true,"a":2,"n":"get_PeekOutValueCallback","t":8,"rt":Function,"fg":"PeekOutValueCallback"},"s":{"ov":true,"a":2,"n":"set_PeekOutValueCallback","t":8,"p":[Function],"rt":$n[1].Void,"fs":"PeekOutValueCallback"},"fn":"PeekOutValueCallback"},{"ov":true,"a":2,"n":"PokeOutValueCallback","t":16,"rt":Function,"g":{"ov":true,"a":2,"n":"get_PokeOutValueCallback","t":8,"rt":Function,"fg":"PokeOutValueCallback"},"s":{"ov":true,"a":2,"n":"set_PokeOutValueCallback","t":8,"p":[Function],"rt":$n[1].Void,"fs":"PokeOutValueCallback"},"fn":"PokeOutValueCallback"},{"ov":true,"a":2,"n":"WireConnectCallback","t":16,"rt":Function,"g":{"ov":true,"a":2,"n":"get_WireConnectCallback","t":8,"rt":Function,"fg":"WireConnectCallback"},"s":{"ov":true,"a":2,"n":"set_WireConnectCallback","t":8,"p":[Function],"rt":$n[1].Void,"fs":"WireConnectCallback"},"fn":"WireConnectCallback"},{"a":1,"n":"Close_mutex","t":4,"rt":$n[0].AsyncMutex,"sn":"Close_mutex"},{"a":5,"n":"connect_lock","t":4,"rt":$n[1].Object,"sn":"connect_lock"},{"a":5,"n":"connection","t":4,"rt":$n[0].Wire$1.WireConnection(T),"sn":"connection"},{"a":3,"n":"m_MemberName","t":4,"rt":$n[1].String,"sn":"m_MemberName"},{"a":5,"n":"stub","t":4,"rt":$n[0].ServiceStub,"sn":"stub"}]}; }, $n);
    $m("RobotRaconteurWeb.WireServer$1", function (T) { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[1].String,$n[0].ServiceSkel],"pi":[{"n":"name","pt":$n[1].String,"ps":0},{"n":"skel","pt":$n[0].ServiceSkel,"ps":1}],"sn":"ctor"},{"ov":true,"a":3,"n":"Close","t":8,"pi":[{"n":"c","pt":$n[0].Wire$1.WireConnection(T),"ps":0},{"n":"ee","pt":$n[0].Endpoint,"ps":1},{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":2}],"sn":"Close","rt":$n[5].Task,"p":[$n[0].Wire$1.WireConnection(T),$n[0].Endpoint,$n[4].CancellationToken]},{"ov":true,"a":2,"n":"Connect","t":8,"pi":[{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":0}],"sn":"Connect","rt":$n[5].Task$1(RobotRaconteurWeb.Wire$1.WireConnection(T)),"p":[$n[4].CancellationToken]},{"ov":true,"a":3,"n":"PackVarType","t":8,"pi":[{"n":"o","pt":$n[1].Object,"ps":0}],"sn":"PackVarType","rt":$n[1].Object,"p":[$n[1].Object]},{"ov":true,"a":2,"n":"PeekInValue","t":8,"pi":[{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":0}],"sn":"PeekInValue","rt":$n[5].Task$1(System.Tuple$2(T,RobotRaconteurWeb.TimeSpec)),"p":[$n[4].CancellationToken]},{"ov":true,"a":2,"n":"PeekOutValue","t":8,"pi":[{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":0}],"sn":"PeekOutValue","rt":$n[5].Task$1(System.Tuple$2(T,RobotRaconteurWeb.TimeSpec)),"p":[$n[4].CancellationToken]},{"ov":true,"a":2,"n":"PokeOutValue","t":8,"pi":[{"n":"value","pt":T,"ps":0},{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":1}],"sn":"PokeOutValue","rt":$n[5].Task,"p":[T,$n[4].CancellationToken]},{"ov":true,"a":2,"n":"SendWirePacket","t":8,"pi":[{"n":"packet","pt":T,"ps":0},{"n":"time","pt":$n[0].TimeSpec,"ps":1},{"n":"e","dv":null,"o":true,"pt":$n[0].Endpoint,"ps":2}],"sn":"SendWirePacket","rt":$n[1].Void,"p":[T,$n[0].TimeSpec,$n[0].Endpoint]},{"ov":true,"a":2,"n":"Shutdown","t":8,"sn":"Shutdown","rt":$n[1].Void},{"ov":true,"a":3,"n":"UnpackVarType","t":8,"pi":[{"n":"o","pt":$n[0].MessageElement,"ps":0}],"sn":"UnpackVarType","rt":$n[1].Object,"p":[$n[0].MessageElement]},{"a":2,"n":"WireCommand","t":8,"pi":[{"n":"m","pt":$n[0].MessageEntry,"ps":0},{"n":"e","pt":$n[0].Endpoint,"ps":1}],"sn":"WireCommand","rt":$n[5].Task$1(RobotRaconteurWeb.MessageEntry),"p":[$n[0].MessageEntry,$n[0].Endpoint]},{"ov":true,"a":2,"n":"WirePacketReceived","t":8,"pi":[{"n":"m","pt":$n[0].MessageEntry,"ps":0},{"n":"e","dv":null,"o":true,"pt":$n[0].Endpoint,"ps":1}],"sn":"WirePacketReceived","rt":$n[1].Void,"p":[$n[0].MessageEntry,$n[0].Endpoint]},{"ov":true,"a":2,"n":"MemberName","t":16,"rt":$n[1].String,"g":{"ov":true,"a":2,"n":"get_MemberName","t":8,"rt":$n[1].String,"fg":"MemberName"},"fn":"MemberName"},{"ov":true,"a":2,"n":"PeekInValueCallback","t":16,"rt":Function,"g":{"ov":true,"a":2,"n":"get_PeekInValueCallback","t":8,"rt":Function,"fg":"PeekInValueCallback"},"s":{"ov":true,"a":2,"n":"set_PeekInValueCallback","t":8,"p":[Function],"rt":$n[1].Void,"fs":"PeekInValueCallback"},"fn":"PeekInValueCallback"},{"ov":true,"a":2,"n":"PeekOutValueCallback","t":16,"rt":Function,"g":{"ov":true,"a":2,"n":"get_PeekOutValueCallback","t":8,"rt":Function,"fg":"PeekOutValueCallback"},"s":{"ov":true,"a":2,"n":"set_PeekOutValueCallback","t":8,"p":[Function],"rt":$n[1].Void,"fs":"PeekOutValueCallback"},"fn":"PeekOutValueCallback"},{"ov":true,"a":2,"n":"PokeOutValueCallback","t":16,"rt":Function,"g":{"ov":true,"a":2,"n":"get_PokeOutValueCallback","t":8,"rt":Function,"fg":"PokeOutValueCallback"},"s":{"ov":true,"a":2,"n":"set_PokeOutValueCallback","t":8,"p":[Function],"rt":$n[1].Void,"fs":"PokeOutValueCallback"},"fn":"PokeOutValueCallback"},{"ov":true,"a":2,"n":"WireConnectCallback","t":16,"rt":Function,"g":{"ov":true,"a":2,"n":"get_WireConnectCallback","t":8,"rt":Function,"fg":"WireConnectCallback"},"s":{"ov":true,"a":2,"n":"set_WireConnectCallback","t":8,"p":[Function],"rt":$n[1].Void,"fs":"WireConnectCallback"},"fn":"WireConnectCallback"},{"a":1,"n":"connect_callback","t":4,"rt":Function,"sn":"connect_callback"},{"a":1,"n":"connections","t":4,"rt":$n[3].Dictionary$2(System.UInt32,RobotRaconteurWeb.Wire$1.WireConnection(T)),"sn":"connections"},{"a":1,"n":"connectionslock","t":4,"rt":$n[1].Object,"sn":"connectionslock"},{"a":3,"n":"m_MemberName","t":4,"rt":$n[1].String,"sn":"m_MemberName"},{"a":3,"n":"skel","t":4,"rt":$n[0].ServiceSkel,"sn":"skel"},{"a":1,"backing":true,"n":"<PeekInValueCallback>k__BackingField","t":4,"rt":Function,"sn":"PeekInValueCallback"},{"a":1,"backing":true,"n":"<PeekOutValueCallback>k__BackingField","t":4,"rt":Function,"sn":"PeekOutValueCallback"},{"a":1,"backing":true,"n":"<PokeOutValueCallback>k__BackingField","t":4,"rt":Function,"sn":"PokeOutValueCallback"}]}; }, $n);
    $m("RobotRaconteurWeb.WireBroadcaster$1", function (T) { return {"nested":[$n[0].WireBroadcaster$1.connected_connection],"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[0].Wire$1(T)],"pi":[{"n":"wire","pt":$n[0].Wire$1(T),"ps":0}],"sn":"ctor"},{"a":3,"n":"ClientPeekInValue","t":8,"pi":[{"n":"c","pt":$n[1].UInt32,"ps":0}],"sn":"ClientPeekInValue","rt":T,"p":[$n[1].UInt32]},{"a":3,"n":"ClientPeekOutValue","t":8,"pi":[{"n":"c","pt":$n[1].UInt32,"ps":0}],"sn":"ClientPeekOutValue","rt":T,"p":[$n[1].UInt32]},{"a":3,"n":"ClientPokeOutValue","t":8,"pi":[{"n":"v","pt":T,"ps":0},{"n":"ts","pt":$n[0].TimeSpec,"ps":1},{"n":"c","pt":$n[1].UInt32,"ps":2}],"sn":"ClientPokeOutValue","rt":$n[1].Void,"p":[T,$n[0].TimeSpec,$n[1].UInt32]},{"a":3,"n":"ConnectionClosed","t":8,"pi":[{"n":"ep","pt":$n[0].WireBroadcaster$1.connected_connection(T),"ps":0}],"sn":"ConnectionClosed","rt":$n[1].Void,"p":[$n[0].WireBroadcaster$1.connected_connection(T)]},{"a":3,"n":"ConnectionConnected","t":8,"pi":[{"n":"w","pt":$n[0].Wire$1(T),"ps":0},{"n":"ep","pt":$n[0].Wire$1.WireConnection(T),"ps":1}],"sn":"ConnectionConnected","rt":$n[1].Void,"p":[$n[0].Wire$1(T),$n[0].Wire$1.WireConnection(T)]},{"a":2,"n":"OutValue","t":16,"rt":T,"s":{"a":2,"n":"set_OutValue","t":8,"p":[T],"rt":$n[1].Void,"fs":"OutValue"},"fn":"OutValue"},{"a":2,"n":"Wire","t":16,"rt":$n[0].Wire$1(T),"g":{"a":2,"n":"get_Wire","t":8,"rt":$n[0].Wire$1(T),"fg":"Wire"},"fn":"Wire"},{"a":3,"n":"connected_wires","t":4,"rt":$n[3].List$1(RobotRaconteurWeb.WireBroadcaster$1.connected_connection(T)),"sn":"connected_wires"},{"a":3,"n":"connected_wires_lock","t":4,"rt":$n[1].Object,"sn":"connected_wires_lock"},{"a":3,"n":"current_out_value","t":4,"rt":T,"sn":"current_out_value"},{"a":3,"n":"wire","t":4,"rt":$n[0].Wire$1(T),"sn":"wire"}]}; }, $n);
    $m("RobotRaconteurWeb.WireBroadcaster$1.connected_connection", function (T) { return {"td":$n[0].WireBroadcaster$1(T),"att":1048580,"a":3,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[0].Wire$1.WireConnection(T)],"pi":[{"n":"connection","pt":$n[0].Wire$1.WireConnection(T),"ps":0}],"sn":"ctor"},{"a":2,"n":"connection","t":4,"rt":$n[0].Wire$1.WireConnection(T),"sn":"connection"}]}; }, $n);
    $m("RobotRaconteurWeb.WireUnicastReceiver$1", function (T) { return {"nested":[$n[0].WireUnicastReceiver$1.connected_connection],"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[0].Wire$1(T)],"pi":[{"n":"wire","pt":$n[0].Wire$1(T),"ps":0}],"sn":"ctor"},{"a":3,"n":"ClientPeekInValue","t":8,"pi":[{"n":"c","pt":$n[1].UInt32,"ps":0}],"sn":"ClientPeekInValue","rt":T,"p":[$n[1].UInt32]},{"a":3,"n":"ClientPeekOutValue","t":8,"pi":[{"n":"c","pt":$n[1].UInt32,"ps":0}],"sn":"ClientPeekOutValue","rt":T,"p":[$n[1].UInt32]},{"a":3,"n":"ClientPokeOutValue","t":8,"pi":[{"n":"v","pt":T,"ps":0},{"n":"ts","pt":$n[0].TimeSpec,"ps":1},{"n":"c","pt":$n[1].UInt32,"ps":2}],"sn":"ClientPokeOutValue","rt":$n[1].Void,"p":[T,$n[0].TimeSpec,$n[1].UInt32]},{"a":3,"n":"ConnectionClosed","t":8,"pi":[{"n":"ep","pt":$n[0].WireUnicastReceiver$1.connected_connection(T),"ps":0}],"sn":"ConnectionClosed","rt":$n[1].Void,"p":[$n[0].WireUnicastReceiver$1.connected_connection(T)]},{"a":3,"n":"ConnectionConnected","t":8,"pi":[{"n":"w","pt":$n[0].Wire$1(T),"ps":0},{"n":"ep","pt":$n[0].Wire$1.WireConnection(T),"ps":1}],"sn":"ConnectionConnected","rt":$n[1].Void,"p":[$n[0].Wire$1(T),$n[0].Wire$1.WireConnection(T)]},{"a":2,"n":"GetInValue","t":8,"pi":[{"n":"ts","out":true,"pt":$n[0].TimeSpec,"ps":0},{"n":"ep","out":true,"pt":$n[1].UInt32,"ps":1}],"sn":"GetInValue","rt":T,"p":[$n[0].TimeSpec,$n[1].UInt32]},{"a":2,"n":"Wire","t":16,"rt":$n[0].Wire$1(T),"g":{"a":2,"n":"get_Wire","t":8,"rt":$n[0].Wire$1(T),"fg":"Wire"},"fn":"Wire"},{"a":1,"n":"active_connection","t":4,"rt":$n[0].WireUnicastReceiver$1.connected_connection(T),"sn":"active_connection"},{"a":1,"n":"in_value","t":4,"rt":T,"sn":"in_value"},{"a":1,"n":"in_value_ep","t":4,"rt":$n[1].UInt32,"sn":"in_value_ep","box":function ($v) { return Bridge.box($v, System.UInt32);}},{"a":1,"n":"in_value_ts","t":4,"rt":$n[0].TimeSpec,"sn":"in_value_ts"},{"a":1,"n":"in_value_valid","t":4,"rt":$n[1].Boolean,"sn":"in_value_valid","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":3,"n":"wire","t":4,"rt":$n[0].Wire$1(T),"sn":"wire"},{"a":2,"n":"InValueChanged","t":2,"ad":{"a":2,"n":"add_InValueChanged","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"addInValueChanged","rt":$n[1].Void,"p":[Function]},"r":{"a":2,"n":"remove_InValueChanged","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"removeInValueChanged","rt":$n[1].Void,"p":[Function]}}]}; }, $n);
    $m("RobotRaconteurWeb.WireUnicastReceiver$1.connected_connection", function (T) { return {"td":$n[0].WireUnicastReceiver$1(T),"att":1048580,"a":3,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[0].Wire$1.WireConnection(T)],"pi":[{"n":"connection","pt":$n[0].Wire$1.WireConnection(T),"ps":0}],"sn":"ctor"},{"a":2,"n":"connection","t":4,"rt":$n[0].Wire$1.WireConnection(T),"sn":"connection"}]}; }, $n);
    $m("RobotRaconteurWeb.detail.ServiceDefinitionUtil", function () { return {"att":1048960,"a":4,"s":true,"m":[{"a":4,"n":"ServiceDefinition_FindBlock","is":true,"t":8,"pi":[{"n":"current_line","pt":$n[1].String,"ps":0},{"n":"is_","pt":$n[7].TextReader,"ps":1},{"n":"os","pt":$n[7].TextWriter,"ps":2},{"n":"pos","ref":true,"pt":$n[1].UInt32,"ps":3},{"n":"init_pos","ref":true,"pt":$n[1].UInt32,"ps":4}],"sn":"ServiceDefinition_FindBlock","rt":$n[1].Void,"p":[$n[1].String,$n[7].TextReader,$n[7].TextWriter,$n[1].UInt32,$n[1].UInt32]},{"a":4,"n":"ServiceDefinition_FromStringFormat_common","is":true,"t":8,"pi":[{"n":"r","pt":$n[8].Regex,"ps":0},{"n":"l","pt":$n[1].String,"ps":1},{"n":"keyword","pt":$n[1].String,"ps":2},{"n":"vec","ref":true,"pt":$n[3].List$1(System.String),"ps":3}],"sn":"ServiceDefinition_FromStringFormat_common","rt":$n[1].Void,"p":[$n[8].Regex,$n[1].String,$n[1].String,$n[3].List$1(System.String)]},{"a":4,"n":"ServiceDefinition_FromStringImportFormat","is":true,"t":8,"pi":[{"n":"l","pt":$n[1].String,"ps":0},{"n":"keyword","pt":$n[1].String,"ps":1},{"n":"vec","ref":true,"pt":$n[3].List$1(System.String),"ps":2}],"sn":"ServiceDefinition_FromStringImportFormat","rt":$n[1].Void,"p":[$n[1].String,$n[1].String,$n[3].List$1(System.String)]},{"a":4,"n":"ServiceDefinition_FromStringTypeFormat","is":true,"t":8,"pi":[{"n":"l","pt":$n[1].String,"ps":0},{"n":"keyword","pt":$n[1].String,"ps":1},{"n":"vec","ref":true,"pt":$n[3].List$1(System.String),"ps":2}],"sn":"ServiceDefinition_FromStringTypeFormat","rt":$n[1].Void,"p":[$n[1].String,$n[1].String,$n[3].List$1(System.String)]},{"a":4,"n":"ServiceDefinition_GetLine","is":true,"t":8,"pi":[{"n":"is_","pt":$n[7].TextReader,"ps":0},{"n":"l","ref":true,"pt":$n[1].String,"ps":1},{"n":"pos","ref":true,"pt":$n[1].UInt32,"ps":2}],"sn":"ServiceDefinition_GetLine","rt":$n[1].Boolean,"p":[$n[7].TextReader,$n[1].String,$n[1].UInt32],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":4,"n":"RR_FLOAT_REGEX","is":true,"t":4,"rt":$n[1].String,"sn":"RR_FLOAT_REGEX"},{"a":4,"n":"RR_INT_REGEX","is":true,"t":4,"rt":$n[1].String,"sn":"RR_INT_REGEX"},{"a":4,"n":"RR_NAME_REGEX","is":true,"t":4,"rt":$n[1].String,"sn":"RR_NAME_REGEX"},{"a":4,"n":"RR_QUALIFIED_TYPE_REGEX","is":true,"t":4,"rt":$n[1].String,"sn":"RR_QUALIFIED_TYPE_REGEX"},{"a":4,"n":"RR_TYPE2_REGEX","is":true,"t":4,"rt":$n[1].String,"sn":"RR_TYPE2_REGEX"},{"a":4,"n":"RR_TYPE_REGEX","is":true,"t":4,"rt":$n[1].String,"sn":"RR_TYPE_REGEX"}]}; }, $n);
    $m("RobotRaconteurWeb.Extensions.Extensions", function () { return {"att":1048961,"a":2,"s":true,"m":[{"a":2,"n":"AsApm","is":true,"t":8,"pi":[{"n":"task","pt":$n[5].Task,"ps":0},{"n":"callback","pt":Function,"ps":1},{"n":"state","pt":$n[1].Object,"ps":2}],"sn":"AsApm","rt":$n[1].IAsyncResult,"p":[$n[5].Task,Function,$n[1].Object]},{"a":2,"n":"AsApm","is":true,"t":8,"pi":[{"n":"task","pt":$n[5].Task$1(System.Object),"ps":0},{"n":"callback","pt":Function,"ps":1},{"n":"state","pt":$n[1].Object,"ps":2}],"tpc":1,"tprm":["T"],"sn":"AsApm$1","rt":$n[1].IAsyncResult,"p":[$n[5].Task$1(System.Object),Function,$n[1].Object]},{"a":2,"n":"AttachCancellationToken","is":true,"t":8,"pi":[{"n":"source","pt":$n[5].TaskCompletionSource,"ps":0},{"n":"cancel","pt":$n[4].CancellationToken,"ps":1},{"n":"e","dv":null,"o":true,"pt":$n[1].Exception,"ps":2}],"tpc":1,"tprm":["T"],"sn":"AttachCancellationToken","rt":$n[1].Void,"p":[$n[5].TaskCompletionSource,$n[4].CancellationToken,$n[1].Exception]},{"a":2,"n":"AwaitWithTimeout","is":true,"t":8,"pi":[{"n":"task","pt":$n[5].Task,"ps":0},{"n":"timeout","pt":$n[1].Int32,"ps":1}],"sn":"AwaitWithTimeout","rt":$n[5].Task,"p":[$n[5].Task,$n[1].Int32]},{"a":2,"n":"AwaitWithTimeout","is":true,"t":8,"pi":[{"n":"task","pt":$n[5].Task$1(System.Object),"ps":0},{"n":"timeout","pt":$n[1].Int32,"ps":1}],"tpc":1,"tprm":["T"],"sn":"AwaitWithTimeout$1","rt":$n[5].Task$1(System.Object),"p":[$n[5].Task$1(System.Object),$n[1].Int32]},{"a":2,"n":"ConfigureAwait","is":true,"t":8,"pi":[{"n":"t","pt":$n[5].Task$1(System.Object),"ps":0},{"n":"v","pt":$n[1].Boolean,"ps":1}],"tpc":1,"tprm":["T"],"sn":"ConfigureAwait","rt":$n[5].Task$1(System.Object),"p":[$n[5].Task$1(System.Object),$n[1].Boolean]},{"a":2,"n":"IgnoreResult","is":true,"t":8,"pi":[{"n":"t","pt":$n[5].Task,"ps":0}],"sn":"IgnoreResult","rt":$n[5].Task,"p":[$n[5].Task]},{"a":2,"n":"IgnoreResult","is":true,"t":8,"pi":[{"n":"t","pt":$n[5].Task$1(System.Object),"ps":0}],"tpc":1,"tprm":["T"],"sn":"IgnoreResult$1","rt":$n[5].Task,"p":[$n[5].Task$1(System.Object)]},{"a":2,"n":"ReadAsync","is":true,"t":8,"pi":[{"n":"stream","pt":$n[7].Stream,"ps":0},{"n":"buffer","pt":$n[1].Array.type(System.Byte),"ps":1},{"n":"offset","pt":$n[1].Int32,"ps":2},{"n":"count","pt":$n[1].Int32,"ps":3},{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":4}],"sn":"ReadAsync","rt":$n[5].Task$1(System.Int32),"p":[$n[7].Stream,$n[1].Array.type(System.Byte),$n[1].Int32,$n[1].Int32,$n[4].CancellationToken]},{"a":2,"n":"ReplaceFirst","is":true,"t":8,"pi":[{"n":"text","pt":$n[1].String,"ps":0},{"n":"search","pt":$n[1].String,"ps":1},{"n":"replace","pt":$n[1].String,"ps":2}],"sn":"ReplaceFirst","rt":$n[1].String,"p":[$n[1].String,$n[1].String,$n[1].String]},{"a":2,"n":"WriteAsync","is":true,"t":8,"pi":[{"n":"stream","pt":$n[7].Stream,"ps":0},{"n":"buffer","pt":$n[1].Array.type(System.Byte),"ps":1},{"n":"offset","pt":$n[1].Int32,"ps":2},{"n":"count","pt":$n[1].Int32,"ps":3},{"n":"cancel","dv":null,"o":true,"pt":$n[4].CancellationToken,"ps":4}],"sn":"WriteAsync","rt":$n[5].Task$1(System.Int32),"p":[$n[7].Stream,$n[1].Array.type(System.Byte),$n[1].Int32,$n[1].Int32,$n[4].CancellationToken]}]}; }, $n);
    $m("RobotRaconteurWeb.Extensions.RRUriExtensions", function () { return {"att":1048961,"a":2,"s":true,"m":[{"a":2,"n":"EscapeDataString","is":true,"t":8,"pi":[{"n":"s","pt":$n[1].String,"ps":0}],"sn":"EscapeDataString","rt":$n[1].String,"p":[$n[1].String]},{"a":2,"n":"UnescapeDataString","is":true,"t":8,"pi":[{"n":"s","pt":$n[1].String,"ps":0}],"sn":"UnescapeDataString","rt":$n[1].String,"p":[$n[1].String]}]}; }, $n);
    $m("RobotRaconteurWeb.Extensions.Buffer", function () { return {"att":1048961,"a":2,"s":true,"m":[{"a":4,"n":"BlockCopy","is":true,"t":8,"pi":[{"n":"a","pt":Array,"ps":0},{"n":"v","pt":$n[1].Int32,"ps":1},{"n":"membuf","pt":$n[1].Array.type(System.Byte),"ps":2},{"n":"position","pt":$n[1].Int32,"ps":3},{"n":"bl","pt":$n[1].Int32,"ps":4}],"sn":"BlockCopy","rt":$n[1].Void,"p":[Array,$n[1].Int32,$n[1].Array.type(System.Byte),$n[1].Int32,$n[1].Int32]},{"a":4,"n":"BlockCopy","is":true,"t":8,"pi":[{"n":"membuf","pt":$n[1].Array.type(System.Byte),"ps":0},{"n":"position","pt":$n[1].Int32,"ps":1},{"n":"a","pt":Array,"ps":2},{"n":"v","pt":$n[1].Int32,"ps":3},{"n":"bl","pt":$n[1].Int32,"ps":4}],"sn":"BlockCopy$1","rt":$n[1].Void,"p":[$n[1].Array.type(System.Byte),$n[1].Int32,Array,$n[1].Int32,$n[1].Int32]},{"a":4,"n":"BlockCopy","is":true,"t":8,"pi":[{"n":"recbuf","pt":$n[1].Array.type(System.Byte),"ps":0},{"n":"v1","pt":$n[1].Int32,"ps":1},{"n":"newbuf","pt":$n[1].Array.type(System.Byte),"ps":2},{"n":"v2","pt":$n[1].Int32,"ps":3},{"n":"v3","pt":$n[1].Int32,"ps":4}],"sn":"BlockCopy$2","rt":$n[1].Void,"p":[$n[1].Array.type(System.Byte),$n[1].Int32,$n[1].Array.type(System.Byte),$n[1].Int32,$n[1].Int32]},{"a":4,"n":"ByteLength","is":true,"t":8,"pi":[{"n":"a","pt":Array,"ps":0}],"sn":"ByteLength","rt":$n[1].Int32,"p":[Array],"box":function ($v) { return Bridge.box($v, System.Int32);}}]}; }, $n);
});

//# sourceMappingURL=data:application/json;base64,
