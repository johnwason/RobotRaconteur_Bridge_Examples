//This file is automatically generated. DO NOT EDIT!
using System;
using RobotRaconteurWeb;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
#pragma warning disable 0108

namespace experimental.create2
{
public class experimental__create2Factory : ServiceFactory
{
    public override string DefString()
{
    const string s="\n#Service to provide sample interface to the iRobot Create\nservice experimental.create2\n\nstdver 0.9\n\nstruct SensorPacket\nfield uint8 ID\nfield uint8[] Data\nend\n\nobject Create\nconstant int16 DRIVE_STRAIGHT 32767\nconstant int16 SPIN_CLOCKWISE -1\nconstant int16 SPIN_COUNTERCLOCKWISE 1\n\nfunction void Drive(int16 velocity, int16 radius)\n\nfunction void StartStreaming()\nfunction void StopStreaming()\n\nproperty int32 DistanceTraveled [readonly]\nproperty int32 AngleTraveled [readonly]\nproperty uint8 Bumpers [readonly]\n\nevent Bump()\n\nwire SensorPacket packets [readonly]\n\ncallback uint8[] play_callback(int32 DistanceTraveled, int32 AngleTraveled)\nend\n\n";
    return s;
    }
    public override string GetServiceName() {return "experimental.create2";}
    public SensorPacket_stub SensorPacket_stubentry;
    public experimental__create2Factory(RobotRaconteurNode node = null, ClientContext context = null) : base(node,context)
{
    SensorPacket_stubentry=new SensorPacket_stub(this,this.node,this.context);
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    if (objecttype=="SensorPacket")
    return SensorPacket_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(string objecttype, string path, ClientContext context) {
    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    case "Create":
    return new Create_stub(path, context);
    default:
    break;
    }
    } else {
    return base.CreateStub(objecttype,path,context);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(string path,object obj,ServerContext context) {
    string objtype=ServiceDefinitionUtil.FindObjectRRType(obj);
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    case "Create":
    return new Create_skel(path,(Create)obj,context);
    default:
    break;
    }
    } else {
    return base.CreateSkel(path,obj,context);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp)
    {
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return base.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class SensorPacket_stub : IStructureStub {
    public SensorPacket_stub(experimental__create2Factory d, RobotRaconteurNode node, ClientContext context) {def=d; rr_node=node; rr_context=context;}
    private experimental__create2Factory def;
    private RobotRaconteurNode rr_node;
    private ClientContext rr_context;
    public MessageElementStructure PackStructure(object s1) {
    List<MessageElement> m=new List<MessageElement>();
    if (s1 ==null) return null;
    SensorPacket s = (SensorPacket)s1;
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<byte>("ID",s.ID));
    MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackArray<byte>("Data",s.Data));
    return new MessageElementStructure("experimental.create2.SensorPacket",m);
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    SensorPacket s=new SensorPacket();
    s.ID =(MessageElementUtil.UnpackScalar<byte>(MessageElement.FindElement(m.Elements,"ID")));
    s.Data =MessageElementUtil.UnpackArray<byte>(MessageElement.FindElement(m.Elements,"Data"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
}

public class Create_stub : ServiceStub , Create {
    private CallbackClient<Func<int, int, CancellationToken, Task<byte[]>>> rr_play_callback;
    private Wire<SensorPacket> rr_packets;
    public Create_stub(string path, ClientContext c) : base(path, c) {
    rr_play_callback=new CallbackClient<Func<int, int, CancellationToken, Task<byte[]>>>("play_callback");
    rr_packets=new WireClient<SensorPacket>("packets", this);
    }
    public async Task<int> get_DistanceTraveled(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "DistanceTraveled");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return (MessageElementUtil.UnpackScalar<int>(me));
        }
    public async Task set_DistanceTraveled(int value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"DistanceTraveled");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<int>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<int> get_AngleTraveled(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "AngleTraveled");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return (MessageElementUtil.UnpackScalar<int>(me));
        }
    public async Task set_AngleTraveled(int value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"AngleTraveled");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<int>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task<byte> get_Bumpers(CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m = new MessageEntry(MessageEntryType.PropertyGetReq, "Bumpers");
        MessageEntry mr=await ProcessRequest(m, cancel);
        MessageElement me=mr.FindElement("value");
        return (MessageElementUtil.UnpackScalar<byte>(me));
        }
    public async Task set_Bumpers(byte value, CancellationToken cancel=default(CancellationToken)) {
        MessageEntry m=new MessageEntry(MessageEntryType.PropertySetReq,"Bumpers");
        MessageElementUtil.AddMessageElement(m,MessageElementUtil.PackScalar<byte>("value",value));
        MessageEntry mr=await ProcessRequest(m, cancel);
        }
    public async Task Drive(short velocity, short radius, CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"Drive");
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackScalar<short>("velocity",velocity));
    MessageElementUtil.AddMessageElement(rr_m,MessageElementUtil.PackScalar<short>("radius",radius));
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    }
    public async Task StartStreaming(CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"StartStreaming");
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    }
    public async Task StopStreaming(CancellationToken cancel = default(CancellationToken)) {
        MessageEntry rr_m=new MessageEntry(MessageEntryType.FunctionCallReq,"StopStreaming");
        MessageEntry rr_me=await ProcessRequest(rr_m, cancel);
    }
    public event Action Bump;
    protected override void DispatchEvent(MessageEntry rr_m) {
    switch (rr_m.MemberName) {
    case "Bump":
    {
    if (Bump != null) { 
    Bump();
    }
    return;
    }
    default:
    break;
    }
    }
    public Callback<Func<int, int, CancellationToken, Task<byte[]>>> play_callback {
    get { return rr_play_callback;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<SensorPacket> packets {
    get { return rr_packets;  }
    set { throw new InvalidOperationException();}
    }
    protected override void DispatchPipeMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    default:
    throw new Exception();
    }
    }
    protected override async Task<MessageEntry> CallbackCall(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.CallbackCallRet, rr_ename);
    rr_mr.ServicePath=rr_m.ServicePath;
    rr_mr.RequestID=rr_m.RequestID;
    switch (rr_ename) {
    case "play_callback": {
    int DistanceTraveled=(MessageElementUtil.UnpackScalar<int>(rr_m.FindElement("DistanceTraveled")));
    int AngleTraveled=(MessageElementUtil.UnpackScalar<int>(rr_m.FindElement("AngleTraveled")));
    var rr_ret=await play_callback.Function(DistanceTraveled, AngleTraveled, default(CancellationToken));
    MessageElementUtil.AddMessageElement(rr_mr,MessageElementUtil.PackArray<byte>("return",rr_ret));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    protected override void DispatchWireMessage(MessageEntry m)
    {
    switch (m.MemberName) {
    case "packets":
    this.rr_packets.WirePacketReceived(m);
    break;
    default:
    throw new Exception();
    }
    }
}
public class Create_skel : ServiceSkel {
    protected Create obj;
    public Create_skel(string p,Create o,ServerContext c) : base(p,o,c) { obj=(Create)o; }
    public override void ReleaseCastObject() { 
    }
    public override async Task<MessageEntry> CallGetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertyGetRes, ename);
    switch (ename) {
    case "DistanceTraveled":
    {
    int ret=await obj.get_DistanceTraveled();
    mr.AddElement(MessageElementUtil.PackScalar<int>("value",ret));
    break;
    }
    case "AngleTraveled":
    {
    int ret=await obj.get_AngleTraveled();
    mr.AddElement(MessageElementUtil.PackScalar<int>("value",ret));
    break;
    }
    case "Bumpers":
    {
    byte ret=await obj.get_Bumpers();
    mr.AddElement(MessageElementUtil.PackScalar<byte>("value",ret));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallSetProperty(MessageEntry m) {
    string ename=m.MemberName;
    MessageElement me=m.FindElement("value");
    MessageEntry mr=new MessageEntry(MessageEntryType.PropertySetRes, ename);
    switch (ename) {
    case "DistanceTraveled":
    {
    await obj.set_DistanceTraveled((MessageElementUtil.UnpackScalar<int>(me)));
    break;
    }
    case "AngleTraveled":
    {
    await obj.set_AngleTraveled((MessageElementUtil.UnpackScalar<int>(me)));
    break;
    }
    case "Bumpers":
    {
    await obj.set_Bumpers((MessageElementUtil.UnpackScalar<byte>(me)));
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return mr;
    }
    public override async Task<MessageEntry> CallFunction(MessageEntry rr_m) {
    string rr_ename=rr_m.MemberName;
    MessageEntry rr_mr=new MessageEntry(MessageEntryType.FunctionCallRes, rr_ename);
    switch (rr_ename) {
    case "Drive":
    {
    short velocity=(MessageElementUtil.UnpackScalar<short>(MessageElementUtil.FindElement(rr_m,"velocity")));
    short radius=(MessageElementUtil.UnpackScalar<short>(MessageElementUtil.FindElement(rr_m,"radius")));
    await this.obj.Drive(velocity, radius, default(CancellationToken));
    rr_mr.AddElement("return",(int)0);
    break;
    }
    case "StartStreaming":
    {
    await this.obj.StartStreaming(default(CancellationToken));
    rr_mr.AddElement("return",(int)0);
    break;
    }
    case "StopStreaming":
    {
    await this.obj.StopStreaming(default(CancellationToken));
    rr_mr.AddElement("return",(int)0);
    break;
    }
    default:
    throw new MemberNotFoundException("Member not found");
    }
    return rr_mr;
    }
    public override async Task<object> GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(Create)rrobj1;
    obj.Bump+=rr_Bump;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(Create)rrobj1;
    obj.Bump-=rr_Bump;
    }
    public void rr_Bump() {
    MessageEntry rr_mm=new MessageEntry(MessageEntryType.EventReq,"Bump");
    this.SendEvent(rr_mm);
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    case "play_callback": {
    return new Func<int, int, CancellationToken, Task<byte[]>>( async delegate(int DistanceTraveled, int AngleTraveled, CancellationToken rr_cancel) {
    MessageEntry rr_mm=new MessageEntry(MessageEntryType.CallbackCallReq,"play_callback");
    rr_mm.ServicePath=m_ServicePath;
    MessageElementUtil.AddMessageElement(rr_mm,MessageElementUtil.PackScalar<int>("DistanceTraveled",DistanceTraveled));
    MessageElementUtil.AddMessageElement(rr_mm,MessageElementUtil.PackScalar<int>("AngleTraveled",AngleTraveled));
    MessageEntry rr_mr=await RRContext.ProcessCallbackRequest(rr_mm,rr_endpoint,rr_cancel);
    MessageElement rr_me = rr_mr.FindElement("return");
    return MessageElementUtil.UnpackArray<byte>(rr_me);
    });
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    private WireServer<SensorPacket> rr_packets;
    private bool rr_InitPipeServersRun=false;
    public override void InitPipeServers(object o) {
    if (this.rr_InitPipeServersRun) return;
    this.rr_InitPipeServersRun=true;
    Create castobj=(Create)o;
    this.rr_packets=new WireServer<SensorPacket>("packets",this);
    castobj.packets=this.rr_packets;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(Create)rrobj1;
    obj.play_callback=new CallbackServer<Func<int, int, CancellationToken, Task<byte[]>>>("play_callback",this);
    }
    public override async Task<MessageEntry> CallPipeFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallWireFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    case "packets":
    return await this.rr_packets.WireCommand(m,e);
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchPipeMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override void DispatchWireMessage(MessageEntry m, Endpoint e)
    {
    switch (m.MemberName) {
    case "packets":
    this.rr_packets.WirePacketReceived(m,e);
    break;
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
    public override async Task<MessageEntry> CallMemoryFunction(MessageEntry m,Endpoint e) {
    string ename=m.MemberName;
    switch (ename) {
    default:
    throw new MemberNotFoundException("Member not found");
    }
    }
}
public class Create_default_impl : Create{
    protected Callback<Func<int, int, CancellationToken, Task<byte[]>>> rrvar_play_callback;
    protected WireBroadcaster<SensorPacket> rrvar_packets;
    public virtual Task<int> get_DistanceTraveled(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_DistanceTraveled(int value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<int> get_AngleTraveled(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_AngleTraveled(int value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task<byte> get_Bumpers(CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task set_Bumpers(byte value, CancellationToken cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task Drive(short velocity, short radius,CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task StartStreaming(CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual Task StopStreaming(CancellationToken rr_cancel=default(CancellationToken)) {
    throw new NotImplementedException();
    }
    public virtual event Action Bump;
    public virtual Callback<Func<int, int, CancellationToken, Task<byte[]>>> play_callback {
    get { return rrvar_play_callback;  }
    set {
    if (rrvar_play_callback!=null) throw new InvalidOperationException("Callback already set");
    rrvar_play_callback= value;
    }
    }
    public virtual Wire<SensorPacket> packets {
    get { return rrvar_packets.Wire;  }
    set {
    if (rrvar_packets!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_packets= new WireBroadcaster<SensorPacket>(value);
    }
    }
}
public static class RRExtensions
{
}
}
